digraph {
0 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"map1\")@@@23@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(2,edge.getTargetVertex().getParallelism())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DataStream<Integer> source2 = env.fromElements(1,2,3,4,5).map(noOpIntMap)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "vertex.getName().contains(\"IterationSink\")@@@51@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(3,itSink.getInEdges().size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "vertex.getName().contains(\"IterationSource\")@@@45@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "StreamNode itSource = sourceSinkPair.f0@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "iter1.closeWith(source3.select(\"even\").union(head1.map(noOpIntMap).name(\"bc\").broadcast(),head2.map(noOpIntMap).shuffle()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "vertex.getName().contains(\"IterationSource\")@@@48@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(itSource1.getCoLocationGroup() != null)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "tailName.equals(\"shuffle\")@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "DataStream<Integer> head2 = iter1.map(noOpIntMap).setParallelism(parallelism / 2).name(\"shuffle\").rebalance()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "DataStream<Integer> source2 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"ParallelizeMapRebalance\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(itSource1.getCoLocationGroup() != null)@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "SplitStream<Integer> source3 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"EvenOddSourceMap\").split(new EvenOddOutputSelector())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "DataStreamSink<Integer> head3 = iter1.map(noOpIntMap).setParallelism(parallelism / 2).addSink(new ReceiveCheckNoOpSink<Integer>())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"IterForwardMap\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "itSource1 = vertex@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"IterRebalanceMap\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(itSource1.getCoLocationGroup(),itSink1.getCoLocationGroup())@@@57@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testmultipleHeadsTailsWithTailPartitioning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "JobVertex itSource1 = null@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "DataStream<Integer> head1 = iter1.map(noOpIntMap).name(\"IterRebalanceMap\").setParallelism(parallelism / 2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "SplitStream<Integer> source3 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"split\").split(new EvenOddOutputSelector())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Tuple2<StreamNode,StreamNode> sourceSinkPair = graph.getIterationSourceSinkPairs().iterator().next()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(1,graph.getIterationSourceSinkPairs().size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "IterativeStream<Integer> iter1 = source1.union(source2).iterate()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "itSink1 = vertex@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(itSource.getParallelism(),itSink.getParallelism())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "graph.getStreamNode(edge.getSourceId()).getOperatorName().equals(\"EvenOddSourceMap\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "graph.getTargetVertex(edge).getOperatorName().equals(\"shuffle\")@@@27@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ShufflePartitioner)@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertEquals(itSource1.getCoLocationGroup(),itSink1.getCoLocationGroup())@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "DataStream<Integer> source1 = env.fromElements(1,2,3,4,5).shuffle().map(noOpIntMap).name(\"ParallelizeMapShuffle\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StreamNode itSink = sourceSinkPair.f1@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "graph.getStreamNode(edge.getSourceId()).getOperatorName().equals(\"ParallelizeMapForward\")@@@34@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(4,graph.getTargetVertex(edge).getParallelism())@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertTrue(edge.getSelectedNames().contains(\"even\"))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DataStreamSink<Integer> head3 = iter1.map(noOpIntMap).setParallelism(parallelism / 2).addSink(new ReceiveCheckNoOpSink<Integer>())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "JobVertex itSink1 = null@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertEquals(2,graph.getTargetVertex(edge).getParallelism())@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "iter1.closeWith(source3.select(\"even\").union(head1.rebalance().map(noOpIntMap).broadcast(),head2.shuffle()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "JobGraph jg = graph.getJobGraph()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "DataStream<Integer> source1 = env.fromElements(1,2,3,4,5).shuffle().map(noOpIntMap)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertTrue(edge.getSelectedNames().contains(\"even\"))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "DataStream<Integer> head2 = iter1.map(noOpIntMap).name(\"IterForwardMap\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "String tailName = graph.getSourceVertex(edge).getOperatorName()@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "tailName.equals(\"bc\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(4,itSource.getOutEdges().size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"shuffle\")@@@27@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "vertex.getName().contains(\"IterationSink\")@@@48@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "graph.getStreamNode(edge.getSourceId()).getOperatorName().equals(\"ParallelizeMapShuffle\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testmultipleHeadsTailsWithTailPartitioning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "DataStream<Integer> head1 = iter1.map(noOpIntMap).name(\"map1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tailName.equals(\"split\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(itSink1.getCoLocationGroup() != null)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(4,edge.getTargetVertex().getParallelism())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "DataStreamSink<Integer> head4 = iter1.map(noOpIntMap).addSink(new ReceiveCheckNoOpSink<Integer>())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "graph.getTargetVertex(edge).getOperatorName().equals(\"map1\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "itSink1 = vertex@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "testmultipleHeadsTailsSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ShufflePartitioner)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "String tailName = edge.getSourceVertex().getOperatorName()@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55->68 [style = bold, label=""];
71->54 [style = dotted, label="true"];
22->15 [style = bold, label=""];
47->48 [style = dotted, label="false"];
37->11 [style = bold, label=""];
54->68 [style = bold, label=""];
55->49 [style = bold, label=""];
68->50 [style = bold, label=""];
27->28 [style = bold, label=""];
19->11 [style = bold, label=""];
0->47 [style = dashed, label="0"];
38->42 [style = bold, label=""];
27->19 [style = dotted, label="true"];
36->11 [style = bold, label=""];
26->11 [style = bold, label=""];
59->61 [style = bold, label=""];
15->30 [style = dotted, label="true"];
62->6 [style = bold, label=""];
12->40 [style = bold, label=""];
33->11 [style = bold, label=""];
0->14 [style = bold, label=""];
71->58 [style = bold, label=""];
28->43 [style = bold, label=""];
5->0 [style = bold, label=""];
24->21 [style = bold, label=""];
65->16 [style = bold, label=""];
47->46 [style = dotted, label="true"];
37->38 [style = bold, label=""];
14->46 [style = bold, label=""];
52->69 [style = bold, label=""];
35->8 [style = bold, label=""];
33->45 [style = bold, label=""];
4->36 [style = dotted, label="true"];
4->36 [style = bold, label=""];
70->31 [style = bold, label=""];
48->43 [style = dotted, label="true"];
25->61 [style = dashed, label="0"];
2->25 [style = bold, label=""];
16->67 [style = bold, label=""];
9->24 [style = bold, label=""];
50->29 [style = bold, label=""];
69->52 [style = dotted, label="false"];
49->64 [style = bold, label=""];
4->38 [style = bold, label=""];
27->0 [style = bold, label=""];
47->48 [style = bold, label=""];
29->60 [style = bold, label=""];
58->71 [style = dotted, label="false"];
22->7 [style = dotted, label="true"];
41->37 [style = bold, label=""];
41->4 [style = bold, label=""];
48->28 [style = dotted, label="true"];
31->2 [style = bold, label=""];
41->4 [style = dotted, label="false"];
13->62 [style = dashed, label="0"];
22->7 [style = bold, label=""];
58->56 [style = bold, label=""];
43->45 [style = bold, label=""];
54->58 [style = bold, label=""];
4->45 [style = bold, label=""];
56->58 [style = bold, label=""];
60->55 [style = bold, label=""];
26->0 [style = bold, label=""];
52->42 [style = bold, label=""];
20->41 [style = bold, label=""];
68->50 [style = dotted, label="true"];
43->47 [style = bold, label=""];
44->16 [style = bold, label=""];
27->11 [style = bold, label=""];
71->68 [style = bold, label=""];
0->58 [style = dashed, label="0"];
57->7 [style = bold, label=""];
38->69 [style = bold, label=""];
28->19 [style = bold, label=""];
64->66 [style = bold, label=""];
2->59 [style = dashed, label="0"];
66->38 [style = bold, label=""];
0->14 [style = dotted, label="true"];
37->45 [style = bold, label=""];
52->7 [style = bold, label=""];
42->7 [style = bold, label=""];
68->29 [style = bold, label=""];
22->15 [style = dotted, label="false"];
42->22 [style = bold, label=""];
48->28 [style = bold, label=""];
0->26 [style = dotted, label="true"];
7->63 [style = bold, label=""];
55->66 [style = bold, label=""];
57->69 [style = bold, label=""];
1->39 [style = bold, label=""];
56->68 [style = bold, label=""];
17->10 [style = bold, label=""];
10->18 [style = bold, label=""];
29->60 [style = dotted, label="true"];
71->54 [style = bold, label=""];
11->45 [style = dashed, label="0"];
31->59 [style = bold, label=""];
40->53 [style = bold, label=""];
23->5 [style = bold, label=""];
18->23 [style = bold, label=""];
3->1 [style = bold, label=""];
8->31 [style = bold, label=""];
55->49 [style = dotted, label="true"];
8->70 [style = dashed, label="0"];
58->56 [style = dotted, label="true"];
67->70 [style = bold, label=""];
52->42 [style = dotted, label="true"];
32->53 [style = dashed, label="0"];
45->20 [style = bold, label=""];
41->37 [style = dotted, label="true"];
15->3 [style = bold, label=""];
19->0 [style = bold, label=""];
15->22 [style = bold, label=""];
53->62 [style = bold, label=""];
29->55 [style = bold, label=""];
7->22 [style = bold, label=""];
51->40 [style = bold, label=""];
20->41 [style = dotted, label="false"];
55->64 [style = dotted, label="true"];
69->57 [style = dotted, label="true"];
20->33 [style = dotted, label="true"];
30->3 [style = bold, label=""];
34->16 [style = bold, label=""];
40->32 [style = bold, label=""];
5->58 [style = bold, label=""];
13->6 [style = bold, label=""];
27->48 [style = dashed, label="0"];
0->27 [style = dotted, label="false"];
58->71 [style = bold, label=""];
11->20 [style = bold, label=""];
61->51 [style = bold, label=""];
30->22 [style = bold, label=""];
20->29 [style = bold, label=""];
12->51 [style = dashed, label="0"];
0->27 [style = bold, label=""];
69->57 [style = bold, label=""];
35->67 [style = dashed, label="0"];
15->30 [style = bold, label=""];
46->47 [style = bold, label=""];
7->3 [style = bold, label=""];
5->47 [style = bold, label=""];
14->26 [style = bold, label=""];
42->69 [style = bold, label=""];
27->28 [style = dotted, label="true"];
29->33 [style = bold, label=""];
48->45 [style = bold, label=""];
25->12 [style = bold, label=""];
20->29 [style = dotted, label="true"];
48->47 [style = bold, label=""];
19->43 [style = dashed, label="0"];
64->68 [style = bold, label=""];
47->14 [style = dotted, label="true"];
46->45 [style = bold, label=""];
33->38 [style = bold, label=""];
36->38 [style = bold, label=""];
16->35 [style = bold, label=""];
6->9 [style = bold, label=""];
32->13 [style = bold, label=""];
4->11 [style = bold, label=""];
36->45 [style = bold, label=""];
69->52 [style = bold, label=""];
21->17 [style = bold, label=""];
47->14 [style = bold, label=""];
26->46 [style = dashed, label="0"];
}
