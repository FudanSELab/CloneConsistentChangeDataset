digraph {
11 [style = filled, label = "assertEquals(1,size(mappingLookup.fieldTypes().filter(null)))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(0,mappingLookup.objectMappers().size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(mappingLookup.fieldTypes().get(\"test\"),instanceOf())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNull(mappingLookup.getMapper(\"test\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testOnlyRuntimeField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(0,mappingLookup.objectMappers().size())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(0,size(mappingLookup.fieldMappers()))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testOnlyRuntimeField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(mappingLookup.getMapper(\"test\"),instanceOf())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MockFieldMapper fieldMapper = new MockFieldMapper(\"test\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "MappingLookup mappingLookup = new MappingLookup(\"_doc\",Collections.emptyList(),Collections.emptyList(),Collections.emptyList(),Collections.singletonList(new TestRuntimeField(\"test\",\"type\")),0,null,false)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "MappingLookup mappingLookup = createMappingLookup(emptyList(),emptyList(),Collections.singletonList(new TestRuntimeField(\"test\",\"type\")))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "MappingLookup mappingLookup = new MappingLookup(\"_doc\",Collections.singletonList(fieldMapper),Collections.emptyList(),Collections.emptyList(),Collections.singletonList(new TestRuntimeField(\"test\",\"type\")),0,null,false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(1,size(mappingLookup.fieldMappers()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testRuntimeFieldLeafOverride['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8->1 [style = bold, label=""];
5->1 [style = bold, label=""];
1->14 [style = bold, label=""];
7->0 [style = bold, label=""];
0->2 [style = bold, label=""];
13->9 [style = bold, label=""];
9->12 [style = bold, label=""];
13->9 [style = solid, label="fieldMapper"];
0->9 [style = dashed, label="0"];
6->7 [style = bold, label=""];
10->13 [style = bold, label=""];
14->11 [style = bold, label=""];
3->4 [style = bold, label=""];
12->8 [style = bold, label=""];
4->7 [style = dashed, label="0"];
4->0 [style = bold, label=""];
2->5 [style = bold, label=""];
}
