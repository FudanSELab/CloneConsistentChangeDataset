digraph {
0 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/bar\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/foo/zoo/\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "toAnyEndpointShouldMatchEndpointPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator/bar\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).matches(\"/actuator/foo\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).matches(\"/actuator\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).matches(\"/actuator/bar\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/bar/baz\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "toAnyEndpointWhenDispatcherServletPathProviderNotAvailableUsesEmptyPath['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator/foo/zoo/\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertMatcher(matcher,\"/actuator\",\"/\").matches(\"/actuator/foo\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator/bar/baz\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertMatcher(matcher,\"/actuator\",null).doesNotMatch(\"/actuator/baz\")@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertMatcher(matcher,\"/actuator\").matches(\"/actuator/foo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "toAnyEndpointShouldMatchEndpointPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "RequestMatcher matcher = EndpointRequest.toAnyEndpoint()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
16->3 [style = bold, label=""];
4->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
7->12 [style = bold, label=""];
2->6 [style = bold, label=""];
3->14 [style = bold, label=""];
6->9 [style = dashed, label="0"];
8->3 [style = bold, label=""];
3->11 [style = bold, label=""];
0->15 [style = dashed, label="0"];
6->0 [style = bold, label=""];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
10->7 [style = bold, label=""];
0->10 [style = dashed, label="0"];
15->17 [style = bold, label=""];
1->17 [style = dashed, label="0"];
6->13 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
0->1 [style = bold, label=""];
2->11 [style = dashed, label="0"];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
1->7 [style = dashed, label="0"];
}
