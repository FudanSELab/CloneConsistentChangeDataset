digraph {
18 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(\"nodetype\")).andReturn(druidNodeDiscovery).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,NodeType.PEON,\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "druidLeaderClient.start()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(new DiscoveryDruidNode(new DruidNode(\"test\",\"dummyhost\",64231,null,true,false),\"test\",ImmutableMap.of())))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "request.setContent(\"hello\".getBytes(\"UTF-8\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testFindCurrentLeader['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "druidLeaderClient.start()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ServerDiscoverySelector serverDiscoverySelector = EasyMock.createMock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(serverDiscoverySelector.pick()).andReturn(null).anyTimes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testServerFailureAndRedirect['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(\"hello\",druidLeaderClient.go(request).getContent())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testFindCurrentLeader['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Request request = druidLeaderClient.makeRequest(HttpMethod.POST,\"/simple/redirect\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.PEON)).andReturn(druidNodeDiscovery)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(\"http://localhost:1234/\",druidLeaderClient.findCurrentLeader())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(druidNodeDiscovery.getAllNodes()).andReturn(ImmutableList.of(discoveryDruidNode))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,\"nodetype\",\"/simple/leader\",EasyMock.createNiceMock())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "DruidLeaderClient druidLeaderClient = new DruidLeaderClient(httpClient,druidNodeDiscoveryProvider,\"nodetype\",\"/simple/leader\",serverDiscoverySelector)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DruidNodeDiscovery druidNodeDiscovery = EasyMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.replay(serverDiscoverySelector,druidNodeDiscovery,druidNodeDiscoveryProvider)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->4 [style = solid, label="druidNodeDiscoveryProvider"];
7->2 [style = solid, label="druidNodeDiscoveryProvider"];
3->4 [style = solid, label="druidNodeDiscovery"];
15->7 [style = bold, label=""];
3->1 [style = bold, label=""];
7->10 [style = bold, label=""];
2->6 [style = bold, label=""];
7->12 [style = solid, label="druidNodeDiscovery"];
19->20 [style = bold, label=""];
11->6 [style = bold, label=""];
8->3 [style = bold, label=""];
18->12 [style = bold, label=""];
20->22 [style = solid, label="serverDiscoverySelector"];
4->18 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
5->18 [style = dashed, label="0"];
1->7 [style = bold, label=""];
4->12 [style = dashed, label="0"];
3->5 [style = solid, label="druidNodeDiscovery"];
7->14 [style = bold, label=""];
7->11 [style = solid, label="druidNodeDiscoveryProvider"];
7->5 [style = bold, label=""];
4->22 [style = solid, label="druidNodeDiscoveryProvider"];
20->12 [style = solid, label="serverDiscoverySelector"];
5->10 [style = dashed, label="0"];
4->12 [style = solid, label="druidNodeDiscoveryProvider"];
0->21 [style = dashed, label="0"];
5->4 [style = bold, label=""];
10->4 [style = bold, label=""];
9->3 [style = bold, label=""];
3->10 [style = solid, label="druidNodeDiscovery"];
2->11 [style = dashed, label="0"];
4->11 [style = bold, label=""];
13->21 [style = bold, label=""];
20->15 [style = bold, label=""];
2->22 [style = dashed, label="0"];
21->17 [style = bold, label=""];
12->22 [style = bold, label=""];
22->13 [style = bold, label=""];
17->16 [style = bold, label=""];
14->5 [style = bold, label=""];
}
