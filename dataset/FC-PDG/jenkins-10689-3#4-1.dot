digraph {
1 [style = filled, label = "assertEquals(b1,b2.getPreviousBuild())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(b3,b2.getNextBuild())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNotSame(b1,b1a)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "FreeStyleBuild b3 = r.buildAndAssertSuccess(p)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1,BRHF.drop(b1))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(1,BRHF.drop(b1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RunListener.all().clear()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(null,b3.getNextBuild())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "FreeStyleBuild b2 = r.buildAndAssertSuccess(p)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(null,b1.getPreviousBuild())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "dropLinksAfterGC['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "b2.delete()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(b2,b1.getNextBuild())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(b3,b1a.getNextBuild())@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "FreeStyleProject p = r.createFreeStyleProject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1,b1a.getNumber())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "dropLinksAfterGC['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "dropLinksAfterGC2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "FreeStyleBuild b1a = b2.getPreviousBuild()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(b2,b3.getPreviousBuild())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "FreeStyleBuild b1 = r.buildAndAssertSuccess(p)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
16->0 [style = bold, label=""];
13->6 [style = solid, label="b3"];
0->13 [style = bold, label=""];
16->3 [style = solid, label="b1"];
19->12 [style = bold, label=""];
2->6 [style = bold, label=""];
12->13 [style = solid, label="p"];
9->4 [style = bold, label=""];
11->4 [style = bold, label=""];
16->20 [style = solid, label="b1"];
18->17 [style = bold, label=""];
13->7 [style = solid, label="b3"];
12->16 [style = bold, label=""];
11->9 [style = bold, label=""];
12->16 [style = solid, label="p"];
10->7 [style = bold, label=""];
1->11 [style = bold, label=""];
20->5 [style = bold, label=""];
0->11 [style = solid, label="b2"];
5->3 [style = solid, label="b1a"];
6->14 [style = bold, label=""];
8->1 [style = bold, label=""];
3->10 [style = bold, label=""];
17->12 [style = bold, label=""];
4->20 [style = bold, label=""];
14->8 [style = bold, label=""];
15->12 [style = bold, label=""];
16->1 [style = solid, label="b1"];
12->0 [style = solid, label="p"];
0->2 [style = solid, label="b2"];
4->5 [style = bold, label=""];
16->9 [style = solid, label="b1"];
13->2 [style = bold, label=""];
}
