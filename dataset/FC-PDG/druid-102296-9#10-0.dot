digraph {
22 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "expect(supervisorRecordSupplier.getLatestSequenceNumber(shard1Partition)).andReturn(\"12\").anyTimes()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
91 [style = filled, label = "expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(Status.READING))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "final Map<String,String> fakeCheckpoints = Collections.emptyMap()@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionMessage(),serviceEmitter.getExceptionMessage())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "testNoDataIngestionTasks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertNull(serviceEmitter.getStackTrace(),serviceEmitter.getStackTrace())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "final TreeMap<Integer,Map<String,String>> checkpoints = new TreeMap<>()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.reset(taskQueue,indexerMetadataStorageCoordinator)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "final Task id3 = createKinesisIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "supervisor.start()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id1,null,location1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
102 [style = filled, label = "expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints = new TreeMap<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "testCheckpointForInactiveTaskGroup['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "supervisor.moveTaskGroupToPendingCompletion(0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "supervisor.runInternal()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionClass())@@@61@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Task id2 = createKinesisIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "taskQueue.shutdown(\"id1\",\"DataSourceMetadata is not found while reset\")@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expectLastCall().anyTimes()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(shard0Partition)).andReturn(\"1\").anyTimes()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(shard1Partition)).andReturn(\"12\").anyTimes()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Task id1 = createKinesisIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Task id3 = createKinesisIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "final Task id2 = createKinesisIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "expectLastCall().anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "supervisorRecordSupplier.seek(anyObject(),anyString())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "supervisor.getNoticesQueueSize() > 0@@@55@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(Status.READING))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(Status.READING))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "supervisor.runInternal()@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expectLastCall().anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "supervisor.checkpoint(0,((KinesisIndexTask)id1).getIOConfig().getBaseSequenceName(),new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,checkpoints.get(0),checkpoints.get(0).keySet())),new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,fakeCheckpoints,ImmutableSet.of())))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "Thread.sleep(100)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "verifyAll()@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1S\",null,null,false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "final Task id1@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "supervisorRecordSupplier.assign(anyObject())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "expect(supervisorRecordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "expectLastCall().anyTimes()@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "verifyAll()@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
97 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1H\",null,null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expect(supervisorRecordSupplier.getLatestSequenceNumber(shard0Partition)).andReturn(\"1\").anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "expectLastCall().anyTimes()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Collection workItems = new ArrayList<>()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "supervisorRecordSupplier.seekToLatest(anyObject())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "replayAll()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(Status.READING))@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "final TaskLocation location2 = new TaskLocation(\"testHost2\",145,-1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "testNoDataIngestionTasks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "supervisor.start()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(Status.READING))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
83 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "replayAll()@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "id1 = createKinesisIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "final TaskLocation location1 = new TaskLocation(\"testHost\",1234,-1)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75->83 [style = bold, label=""];
36->59 [style = bold, label=""];
4->56 [style = dashed, label="0"];
49->65 [style = dashed, label="0"];
16->0 [style = bold, label=""];
96->76 [style = solid, label="id1"];
14->25 [style = bold, label=""];
17->59 [style = dashed, label="0"];
0->13 [style = bold, label=""];
61->56 [style = bold, label=""];
74->72 [style = bold, label=""];
31->63 [style = dashed, label="0"];
68->66 [style = bold, label=""];
24->73 [style = bold, label=""];
69->96 [style = bold, label=""];
31->1 [style = bold, label=""];
85->86 [style = bold, label=""];
98->90 [style = bold, label=""];
22->30 [style = bold, label=""];
96->87 [style = bold, label=""];
92->100 [style = bold, label=""];
70->93 [style = bold, label=""];
7->9 [style = bold, label=""];
108->11 [style = bold, label=""];
47->10 [style = solid, label="startTime"];
71->67 [style = bold, label=""];
52->60 [style = bold, label=""];
45->6 [style = bold, label=""];
79->102 [style = bold, label=""];
47->38 [style = solid, label="startTime"];
28->100 [style = dashed, label="0"];
91->98 [style = bold, label=""];
29->46 [style = bold, label=""];
93->79 [style = bold, label=""];
9->79 [style = dashed, label="0"];
36->17 [style = bold, label=""];
37->33 [style = bold, label=""];
102->68 [style = bold, label=""];
85->24 [style = bold, label=""];
44->47 [style = bold, label=""];
19->62 [style = dashed, label="0"];
3->96 [style = dashed, label="0"];
39->52 [style = dashed, label="0"];
29->97 [style = dashed, label="0"];
42->15 [style = bold, label=""];
8->64 [style = dashed, label="0"];
39->94 [style = dashed, label="0"];
26->7 [style = bold, label=""];
37->87 [style = dashed, label="0"];
63->51 [style = bold, label=""];
35->20 [style = bold, label=""];
104->82 [style = bold, label=""];
25->71 [style = dashed, label="0"];
1->49 [style = bold, label=""];
20->14 [style = bold, label=""];
12->107 [style = bold, label=""];
25->2 [style = bold, label=""];
54->58 [style = bold, label=""];
8->22 [style = bold, label=""];
94->91 [style = bold, label=""];
43->11 [style = bold, label=""];
105->80 [style = bold, label=""];
6->4 [style = bold, label=""];
26->70 [style = dashed, label="0"];
17->39 [style = bold, label=""];
47->41 [style = bold, label=""];
33->78 [style = dashed, label="0"];
65->53 [style = bold, label=""];
49->5 [style = bold, label=""];
82->4 [style = bold, label=""];
107->84 [style = solid, label="fakeCheckpoints"];
22->54 [style = dashed, label="0"];
90->97 [style = bold, label=""];
78->88 [style = bold, label=""];
27->102 [style = dashed, label="0"];
90->97 [style = solid, label="startTime"];
101->103 [style = bold, label=""];
3->37 [style = bold, label=""];
90->105 [style = solid, label="startTime"];
6->61 [style = dashed, label="0"];
106->70 [style = bold, label=""];
99->71 [style = bold, label=""];
73->101 [style = bold, label=""];
77->69 [style = bold, label=""];
53->40 [style = bold, label=""];
88->74 [style = bold, label=""];
87->104 [style = solid, label="id2"];
100->75 [style = bold, label=""];
1->51 [style = dashed, label="0"];
83->106 [style = bold, label=""];
12->24 [style = bold, label=""];
50->48 [style = bold, label=""];
45->55 [style = dashed, label="0"];
60->38 [style = bold, label=""];
55->61 [style = bold, label=""];
95->105 [style = bold, label=""];
21->12 [style = bold, label=""];
9->27 [style = bold, label=""];
85->86 [style = dotted, label="true"];
4->31 [style = bold, label=""];
97->95 [style = bold, label=""];
76->104 [style = bold, label=""];
80->99 [style = bold, label=""];
0->83 [style = dashed, label="0"];
74->104 [style = solid, label="location2"];
84->85 [style = bold, label=""];
13->26 [style = bold, label=""];
39->32 [style = bold, label=""];
47->29 [style = solid, label="startTime"];
46->35 [style = bold, label=""];
51->65 [style = bold, label=""];
88->76 [style = solid, label="location1"];
32->91 [style = dashed, label="0"];
89->77 [style = bold, label=""];
56->63 [style = bold, label=""];
33->19 [style = bold, label=""];
5->40 [style = bold, label=""];
57->47 [style = bold, label=""];
90->95 [style = solid, label="startTime"];
87->78 [style = bold, label=""];
23->18 [style = bold, label=""];
34->21 [style = bold, label=""];
81->84 [style = bold, label=""];
15->23 [style = bold, label=""];
27->36 [style = bold, label=""];
33->62 [style = bold, label=""];
38->10 [style = bold, label=""];
107->81 [style = bold, label=""];
13->106 [style = dashed, label="0"];
41->3 [style = bold, label=""];
59->52 [style = bold, label=""];
7->93 [style = dashed, label="0"];
40->28 [style = bold, label=""];
62->64 [style = bold, label=""];
64->54 [style = bold, label=""];
58->55 [style = bold, label=""];
74->82 [style = solid, label="location2"];
48->42 [style = bold, label=""];
38->98 [style = dashed, label="0"];
28->16 [style = bold, label=""];
2->50 [style = bold, label=""];
5->53 [style = dashed, label="0"];
19->8 [style = bold, label=""];
72->76 [style = bold, label=""];
26->92 [style = bold, label=""];
32->38 [style = bold, label=""];
32->60 [style = dashed, label="0"];
11->34 [style = bold, label=""];
86->85 [style = bold, label=""];
18->43 [style = bold, label=""];
10->29 [style = bold, label=""];
66->94 [style = bold, label=""];
30->58 [style = dashed, label="0"];
87->82 [style = solid, label="id2"];
67->108 [style = bold, label=""];
30->45 [style = bold, label=""];
}
