digraph {
23 [style = filled, label = "Collection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,this.locationResolverContext,this.loaderContext,locations1and2).values()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "List<ConfigDataLocation> resolvedLocations = Arrays.asList(resolvedLocation1,resolvedLocation2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ConfigDataImporter importer = new ConfigDataImporter(this.resolvers,this.loaders)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "given(this.resolvers.resolveAll(this.locationResolverContext,locations2and3,this.profiles)).willReturn(resolvedLocations2and3)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "given(this.loaders.load(this.loaderContext,resolvedLocation3)).willReturn(configData3)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "given(this.loaders.load(resolvedLocation2)).willReturn(configData2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "given(this.loaders.load(this.loaderContext,resolvedLocation1)).willReturn(configData1)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(loaded2and3).containsExactly(configData3)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "TestLocation resolvedLocation1 = new TestLocation()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(loaded).containsExactly(configData2,configData1)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "loadImportsResolvesAndLoadsLocations['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ConfigData configData2 = new ConfigData(Collections.singleton(new MockPropertySource()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ConfigData configData3 = new ConfigData(Collections.singleton(new MockPropertySource()))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<ConfigDataLocation> resolvedLocations1and2 = Arrays.asList(resolvedLocation1,resolvedLocation2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<String> locations2and3 = Arrays.asList(\"test2\",\"test3\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestLocation resolvedLocation2 = new TestLocation()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "given(this.resolvers.resolveAll(this.locationResolverContext,locations1and2,this.profiles)).willReturn(resolvedLocations1and2)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "given(this.loaders.load(resolvedLocation1)).willReturn(configData1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "loadImportsWhenAlreadyImportedLocationSkipsLoad['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "List<ConfigDataLocation> resolvedLocations2and3 = Arrays.asList(resolvedLocation2,resolvedLocation3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ConfigData configData1 = new ConfigData(Collections.singleton(new MockPropertySource()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Collection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,this.locationResolverContext,this.loaderContext,locations2and3).values()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Collection<ConfigData> loaded = importer.resolveAndLoad(this.activationContext,this.locationResolverContext,locations).values()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "given(this.loaders.load(resolvedLocation1)).willReturn(configData1)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Collection<ConfigData> loaded1and2 = importer.resolveAndLoad(this.activationContext,this.locationResolverContext,locations1and2).values()@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Collection<ConfigData> loaded2and3 = importer.resolveAndLoad(this.activationContext,this.locationResolverContext,locations2and3).values()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "given(this.resolvers.resolveAll(this.locationResolverContext,locations,this.profiles)).willReturn(resolvedLocations)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "given(this.loaders.load(this.loaderContext,resolvedLocation2)).willReturn(configData2)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "ConfigDataImporter importer = new ConfigDataImporter(this.resolvers,this.loaders)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<String> locations1and2 = Arrays.asList(\"test1\",\"test2\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "List<String> locations = Arrays.asList(\"test1\",\"test2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(loaded1and2).containsExactly(configData2,configData1)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestLocation resolvedLocation3 = new TestLocation()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "loadImportsWhenAlreadyImportedLocationSkipsLoad['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "given(this.loaders.load(resolvedLocation3)).willReturn(configData3)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "given(this.loaders.load(resolvedLocation2)).willReturn(configData2)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3->20 [style = solid, label="resolvedLocation3"];
13->34 [style = bold, label=""];
13->20 [style = solid, label="resolvedLocation2"];
8->26 [style = solid, label="configData2"];
13->35 [style = solid, label="resolvedLocations"];
34->2 [style = solid, label="configData1"];
10->21 [style = dashed, label="0"];
27->12 [style = bold, label=""];
8->32 [style = bold, label=""];
4->6 [style = bold, label=""];
34->29 [style = solid, label="configData1"];
1->26 [style = dashed, label="0"];
8->18 [style = bold, label=""];
24->0 [style = bold, label=""];
35->2 [style = bold, label=""];
17->22 [style = dashed, label="0"];
19->10 [style = bold, label=""];
34->31 [style = bold, label=""];
11->12 [style = bold, label=""];
3->15 [style = bold, label=""];
7->0 [style = bold, label=""];
18->22 [style = solid, label="configData3"];
15->9 [style = solid, label="resolvedLocations1and2"];
20->19 [style = solid, label="resolvedLocations2and3"];
32->30 [style = bold, label=""];
13->15 [style = solid, label="resolvedLocation2"];
2->0 [style = solid, label="configData1"];
33->27 [style = bold, label=""];
27->13 [style = solid, label="resolvedLocation1"];
30->29 [style = bold, label=""];
3->13 [style = dashed, label="0"];
26->22 [style = bold, label=""];
31->29 [style = solid, label="configData2"];
1->17 [style = bold, label=""];
8->1 [style = solid, label="configData2"];
22->4 [style = bold, label=""];
20->2 [style = bold, label=""];
18->17 [style = solid, label="configData3"];
12->13 [style = bold, label=""];
21->26 [style = bold, label=""];
0->14 [style = bold, label=""];
23->24 [style = bold, label=""];
12->15 [style = solid, label="resolvedLocation1"];
18->14 [style = solid, label="configData3"];
31->35 [style = bold, label=""];
13->3 [style = bold, label=""];
28->33 [style = bold, label=""];
7->24 [style = dashed, label="0"];
15->20 [style = bold, label=""];
6->23 [style = dashed, label="0"];
5->33 [style = dashed, label="0"];
18->9 [style = bold, label=""];
16->5 [style = bold, label=""];
9->19 [style = bold, label=""];
12->13 [style = solid, label="resolvedLocation2"];
25->5 [style = bold, label=""];
6->30 [style = dashed, label="0"];
5->11 [style = bold, label=""];
2->10 [style = solid, label="configData1"];
6->7 [style = bold, label=""];
8->0 [style = solid, label="configData2"];
10->1 [style = bold, label=""];
2->21 [style = solid, label="configData1"];
17->4 [style = bold, label=""];
4->23 [style = bold, label=""];
31->8 [style = solid, label="configData2"];
2->8 [style = bold, label=""];
19->21 [style = bold, label=""];
}
