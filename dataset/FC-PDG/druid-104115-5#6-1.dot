digraph {
6 [style = filled, label = "testRunning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(spec.isSuspended()).andReturn(true).anyTimes()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.getExceptionEvents().isEmpty())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(BasicState.SUSPENDED,supervisor.stateManager.getSupervisorState())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.getExceptionEvents().isEmpty())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verifyAll()@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "supervisor.start()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(BasicState.SUSPENDED,supervisor.stateManager.getSupervisorState().getBasicState())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState().getBasicState())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.getExceptionEvents().isEmpty())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "replayAll()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SeekableStreamSupervisor supervisor = new TestSeekableStreamSupervisor()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "supervisor.runInternal()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(BasicState.PENDING,supervisor.stateManager.getSupervisorState())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testRunning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(BasicState.RUNNING,supervisor.stateManager.getSupervisorState().getBasicState())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testSuspended['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isHealthy())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "supervisor.runInternal()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(BasicState.SUSPENDED,supervisor.stateManager.getSupervisorState().getBasicState())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertFalse(supervisor.stateManager.isAtLeastOneSuccessfulRun())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(BasicState.PENDING,supervisor.stateManager.getSupervisorState().getBasicState())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(BasicState.SUSPENDED,supervisor.stateManager.getSupervisorState())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.expect(spec.isSuspended()).andReturn(false).anyTimes()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(taskQueue.add(EasyMock.anyObject())).andReturn(true).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(recordSupplier.getPartitionIds(STREAM)).andReturn(ImmutableSet.of(SHARD_ID)).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->28 [style = bold, label=""];
10->20 [style = bold, label=""];
14->25 [style = bold, label=""];
29->17 [style = bold, label=""];
16->11 [style = bold, label=""];
31->23 [style = bold, label=""];
24->2 [style = bold, label=""];
11->14 [style = bold, label=""];
6->22 [style = bold, label=""];
16->27 [style = dashed, label="0"];
1->31 [style = dashed, label="0"];
2->3 [style = bold, label=""];
28->31 [style = bold, label=""];
22->29 [style = dashed, label="0"];
18->12 [style = bold, label=""];
15->32 [style = dashed, label="0"];
19->10 [style = bold, label=""];
33->10 [style = bold, label=""];
3->15 [style = bold, label=""];
15->19 [style = bold, label=""];
9->8 [style = bold, label=""];
25->7 [style = bold, label=""];
30->29 [style = bold, label=""];
32->33 [style = bold, label=""];
1->23 [style = bold, label=""];
26->22 [style = bold, label=""];
4->28 [style = dashed, label="0"];
20->21 [style = bold, label=""];
12->13 [style = bold, label=""];
7->5 [style = bold, label=""];
23->24 [style = bold, label=""];
27->11 [style = bold, label=""];
5->0 [style = bold, label=""];
22->17 [style = bold, label=""];
0->18 [style = bold, label=""];
4->1 [style = bold, label=""];
13->9 [style = bold, label=""];
8->4 [style = bold, label=""];
17->27 [style = bold, label=""];
3->32 [style = bold, label=""];
19->33 [style = dashed, label="0"];
17->16 [style = bold, label=""];
}
