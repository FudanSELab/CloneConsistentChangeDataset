digraph {
16 [style = filled, label = "final ImmutableList<RexNode> args2 = ImmutableList.of(eq(aRef,literal(1)),eq(aRef,literal(10)))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "checkSimplifyFilter(and(lt(aRef,literal(1)),eq(aRef,literal(1)),ge(aRef,literal(1))),\"false\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "checkSimplifyFilter(and(args2),\"false\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testSimplifyFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),or(eq(aRef,literal(1)),eq(aRef,literal(10)))),\"=(?0.a, 1)\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(10)),ge(bRef,literal(1)),lt(aRef,literal(10))),\"false\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(5)))),\">(?0.a, 5)\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),gt(aRef,literal(1))),\"false\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"false\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args).toString(),equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final RelDataType booleanType = typeFactory.createSqlType(SqlTypeName.BOOLEAN)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final RexNode eRef = rexBuilder.makeFieldAccess(range,4)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(gt(aRef,literal(5)))),\"false\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(10)),eq(aRef,bRef)),\"false\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)))),\"false\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "checkSimplify2(and(vBool(1),vBool(2),vBool(3),not(vBool(1)),not(vBool(2)),not(vBool())),\"AND(?0.bool3, null, IS NULL(?0.bool1),\" + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\"false\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(1)))),\"SEARCH(?0.a, Sarg((1..5)()\")@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal(1)),ge(aRef,literal(1))),\"=(?0.a, 1)\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "checkSimplifyFilter(case_(cRef,trueLiteral,dRef,trueLiteral,eRef,falseLiteral,fRef,falseLiteral,nullBool),\"OR(?0.c, ?0.d)\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(10)),gt(aRef,literal(1))),\">(?0.a, 10)\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "checkSimplifyFilter(and(args),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(literal(5),aRef)),RelOptPredicateList.EMPTY,\"<(5, ?0.a)\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "checkSimplifyFilter(or(or(eq(aRef,literal(1)),eq(aRef,literal(1))),eq(aRef,literal(1))),\"=(?0.a, 1)\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final RexNode cRef = rexBuilder.makeFieldAccess(range,2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(5)),gt(bRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@41@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "checkSimplifyFilter(and(gt(literal(1),aRef),gt(literal(5),aRef)),RelOptPredicateList.EMPTY,\">(1, ?0.a)\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testSimplifyFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal(5)),le(bRef,literal(5)))),\"false\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1‥5)()\")@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "testSimplifyAndPush['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "checkSimplifyFilter(lt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"false\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).add(\"c\",booleanType).add(\"d\",booleanType).add(\"e\",booleanType).add(\"f\",booleanType).add(\"g\",booleanType).add(\"h\",intType).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1..5)()\")@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1‥5)()\")@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final ImmutableList<RexNode> args = ImmutableList.of(eq(eq(aRef,literal(1)),trueLiteral),eq(bRef,literal(1)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "checkSimplify3(and(nullBool,not(or(nullBool,vBool()))),\"AND(null, NOT(?0.bool0))\",\"false\",\"NOT(?0.bool0)\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal(10)),gt(bRef,literal(1)),gt(aRef,literal(10))),\"OR(>(?0.a, 10), >(?0.b, 1))\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal(1)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),gt(aRef,literal(5)))),\"true\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal(1)),eq(bRef,literal(1)),eq(aRef,bRef)),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final RexNode fRef = rexBuilder.makeFieldAccess(range,5)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "checkSimplifyFilter(and(or(eq(aRef,literal(1)),eq(aRef,literal(10))),eq(aRef,literal(1))),\"=(?0.a, 1)\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),le(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(ge(aRef,literal(5)))),\"=(?0.a, 5)\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),lt(aRef,literal(10)),lt(aRef,literal(5))),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal(10)),ge(aRef,literal(1)))),\"SEARCH(?0.a, Sarg((1‥5)()\")@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "checkSimplifyFilter(and(lt(literal(1),aRef),lt(aRef,literal(5))),RelOptPredicateList.EMPTY,\"SEARCH(?0.a, Sarg((1..5)()\")@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final RexNode dRef = rexBuilder.makeFieldAccess(range,3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args2),nullValue())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal(1)),gt(aRef,literal(10))),\">(?0.a, 10)\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "checkSimplifyFilter(or(and(eq(aRef,literal(1)),eq(aRef,literal(1))),and(eq(aRef,literal(10)),eq(aRef,literal(1)))),\"=(?0.a, 1)\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,nullBool),ge(bRef,literal(1))),\"false\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29->48 [style = solid, label="aRef"];
29->5 [style = bold, label=""];
3->24 [style = bold, label=""];
5->8 [style = solid, label="aRef"];
23->51 [style = dashed, label="0"];
5->36 [style = solid, label="aRef"];
29->47 [style = solid, label="aRef"];
5->2 [style = solid, label="aRef"];
25->30 [style = bold, label=""];
17->9 [style = bold, label=""];
53->44 [style = bold, label=""];
51->53 [style = bold, label=""];
32->6 [style = bold, label=""];
21->2 [style = bold, label=""];
5->34 [style = bold, label=""];
34->37 [style = solid, label="bRef"];
1->40 [style = dashed, label="0"];
48->52 [style = bold, label=""];
52->47 [style = bold, label=""];
16->38 [style = solid, label="args2"];
34->26 [style = bold, label=""];
50->29 [style = solid, label="range"];
11->18 [style = solid, label="fRef"];
42->3 [style = bold, label=""];
17->9 [style = solid, label="args"];
5->42 [style = solid, label="aRef"];
5->37 [style = solid, label="aRef"];
29->20 [style = solid, label="range"];
35->31 [style = bold, label=""];
50->29 [style = bold, label=""];
28->33 [style = dashed, label="0"];
29->34 [style = solid, label="aRef"];
29->52 [style = solid, label="aRef"];
8->23 [style = bold, label=""];
34->48 [style = bold, label=""];
34->7 [style = solid, label="bRef"];
33->50 [style = solid, label="rowType"];
0->17 [style = bold, label=""];
33->28 [style = bold, label=""];
20->18 [style = solid, label="dRef"];
34->17 [style = solid, label="bRef"];
34->10 [style = solid, label="bRef"];
28->29 [style = solid, label="rowType"];
24->40 [style = bold, label=""];
27->16 [style = bold, label=""];
26->18 [style = solid, label="cRef"];
10->7 [style = bold, label=""];
33->50 [style = bold, label=""];
19->25 [style = bold, label=""];
12->41 [style = bold, label=""];
43->13 [style = bold, label=""];
5->3 [style = solid, label="aRef"];
49->46 [style = bold, label=""];
5->0 [style = solid, label="aRef"];
46->33 [style = bold, label=""];
30->10 [style = bold, label=""];
1->32 [style = bold, label=""];
11->8 [style = bold, label=""];
5->24 [style = solid, label="aRef"];
5->1 [style = solid, label="aRef"];
36->35 [style = bold, label=""];
31->3 [style = bold, label=""];
6->39 [style = bold, label=""];
22->11 [style = bold, label=""];
26->20 [style = bold, label=""];
15->36 [style = bold, label=""];
28->29 [style = bold, label=""];
34->39 [style = solid, label="bRef"];
45->51 [style = bold, label=""];
35->42 [style = bold, label=""];
5->35 [style = solid, label="aRef"];
29->22 [style = solid, label="range"];
4->13 [style = bold, label=""];
5->14 [style = solid, label="aRef"];
29->34 [style = solid, label="range"];
5->31 [style = solid, label="aRef"];
5->23 [style = solid, label="aRef"];
5->12 [style = solid, label="aRef"];
34->30 [style = solid, label="bRef"];
31->42 [style = dashed, label="0"];
29->5 [style = solid, label="range"];
5->15 [style = solid, label="aRef"];
23->0 [style = bold, label=""];
15->41 [style = dashed, label="0"];
38->19 [style = bold, label=""];
9->27 [style = bold, label=""];
5->32 [style = solid, label="aRef"];
29->11 [style = solid, label="range"];
39->21 [style = bold, label=""];
41->36 [style = bold, label=""];
22->18 [style = solid, label="eRef"];
5->17 [style = solid, label="aRef"];
40->32 [style = bold, label=""];
7->18 [style = bold, label=""];
34->6 [style = solid, label="bRef"];
47->45 [style = bold, label=""];
24->1 [style = bold, label=""];
5->25 [style = solid, label="aRef"];
5->41 [style = solid, label="aRef"];
34->14 [style = solid, label="bRef"];
5->6 [style = solid, label="aRef"];
12->15 [style = bold, label=""];
34->2 [style = solid, label="bRef"];
5->10 [style = solid, label="aRef"];
34->1 [style = solid, label="bRef"];
16->19 [style = solid, label="args2"];
29->45 [style = solid, label="aRef"];
5->40 [style = solid, label="aRef"];
34->40 [style = solid, label="bRef"];
5->39 [style = solid, label="aRef"];
20->22 [style = bold, label=""];
34->25 [style = solid, label="bRef"];
5->16 [style = solid, label="aRef"];
5->7 [style = solid, label="aRef"];
14->12 [style = bold, label=""];
50->5 [style = solid, label="range"];
5->21 [style = solid, label="aRef"];
34->32 [style = solid, label="bRef"];
8->45 [style = dashed, label="0"];
29->51 [style = solid, label="aRef"];
2->37 [style = bold, label=""];
13->33 [style = bold, label=""];
18->14 [style = bold, label=""];
29->26 [style = solid, label="range"];
16->38 [style = bold, label=""];
5->30 [style = solid, label="aRef"];
}
