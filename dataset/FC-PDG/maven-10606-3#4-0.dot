digraph {
16 [style = filled, label = "assertEquals(1,projectBuilds.size())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Y,bDescendants.get(1))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(C,subsequent.get(1))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testConcurrencyGraphPrimaryVersion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "assertEquals(X,bDescendants.get(0))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(X,cDescendants.get(0))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(Z,cDescendants.get(1))@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ConcurrencyDependencyGraph graph = new ConcurrencyDependencyGraph(getProjectBuildList(session),dependencyGraph)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final MavenSession session = ProjectDependencyGraphStub.getMavenSession()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(Y,bDescendants.get(0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final List<MavenProject> cDescendants = graph.markAsFinished(C)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "graph.markAsFinished(A)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testConcurrencyGraphDifferentCompletionOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final List<MavenProject> subsequent = graph.markAsFinished(A)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(A,projectBuilds.get(0))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,bDescendants.size())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(ProjectDependencyGraphStub.B,subsequent.get(0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(2,cDescendants.size())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(A,projectBuilds.iterator().next())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "final List<MavenProject> cDescendants = graph.markAsFinished(C)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final List<MavenProject> bDescendants = graph.markAsFinished(B)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final List<MavenProject> bDescendants = graph.markAsFinished(B)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testConcurrencyGraphPrimaryVersion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final List<MavenProject> projectBuilds = graph.getRootSchedulableBuilds()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(Z,cDescendants.get(0))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(2,bDescendants.size())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(1,cDescendants.size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(2,subsequent.size())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->18 [style = bold, label=""];
3->26 [style = dashed, label="0"];
5->9 [style = bold, label=""];
17->6 [style = bold, label=""];
11->14 [style = bold, label=""];
20->26 [style = bold, label=""];
12->0 [style = solid, label="session"];
3->11 [style = bold, label=""];
21->24 [style = bold, label=""];
16->17 [style = bold, label=""];
8->0 [style = solid, label="dependencyGraph"];
9->7 [style = bold, label=""];
15->16 [style = bold, label=""];
12->0 [style = bold, label=""];
2->4 [style = bold, label=""];
14->27 [style = dashed, label="0"];
0->15 [style = bold, label=""];
19->8 [style = bold, label=""];
7->3 [style = bold, label=""];
11->28 [style = dashed, label="0"];
6->1 [style = bold, label=""];
22->20 [style = bold, label=""];
23->21 [style = bold, label=""];
18->6 [style = bold, label=""];
0->22 [style = bold, label=""];
10->2 [style = bold, label=""];
27->23 [style = bold, label=""];
25->8 [style = bold, label=""];
26->28 [style = bold, label=""];
28->27 [style = bold, label=""];
13->8 [style = bold, label=""];
1->10 [style = bold, label=""];
17->18 [style = dashed, label="0"];
4->5 [style = bold, label=""];
8->12 [style = bold, label=""];
}
