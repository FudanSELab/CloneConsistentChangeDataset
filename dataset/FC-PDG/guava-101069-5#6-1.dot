digraph {
0 [style = filled, label = "Optional<TestEnum> result = Enums.getIfPresent(shadowTestEnum,constant.name())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Optional<TestEnum> result = Enums.getIfPresent(shadowTestEnum,constant.name())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "return new WeakReference<>(shadowLoader)@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "URLClassLoader shadowLoader = new URLClassLoader(myLoader.getURLs(),null)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "doTestClassUnloading['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNotSame(shadowTestEnum,)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(ImmutableSet.copyOf(shadowTestEnum.getEnumConstants()),shadowConstants)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "URLClassLoader myLoader = (URLClassLoader)getClass().getClassLoader()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "@SuppressWarnings(\"unchecked\") Class<TestEnum> shadowTestEnum = (Class<TestEnum>)Class.forName(.getName(),false,shadowLoader)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Optional<TestEnum> result = Enums.getIfPresent(shadowTestEnum,\"blibby\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "URLClassLoader shadowLoader = new URLClassLoader(getClassPathUrls(),null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "doTestClassUnloading['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "shadowConstants.add(result.get())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Set<Object> shadowConstants = new HashSet<>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "doTestClassUnloading['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(result).isAbsent()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(ImmutableSet.copyOf(shadowTestEnum.getEnumConstants()),shadowConstants)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "@SuppressWarnings(\"unchecked\") Class<TestEnum> shadowTestEnum = (Class<TestEnum>)Class.forName(.getName(),false,shadowLoader)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(result).isPresent()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
2->3 [style = solid, label="shadowTestEnum"];
6->5 [style = solid, label="shadowLoader"];
14->13 [style = solid, label="shadowTestEnum"];
1->8 [style = bold, label=""];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
6->2 [style = solid, label="shadowLoader"];
10->8 [style = solid, label="shadowConstants"];
7->10 [style = bold, label=""];
11->15 [style = dashed, label="0"];
0->12 [style = bold, label=""];
11->6 [style = bold, label=""];
18->11 [style = bold, label=""];
8->3 [style = bold, label=""];
7->16 [style = solid, label="shadowConstants"];
12->16 [style = bold, label=""];
1->0 [style = bold, label=""];
12->1 [style = bold, label=""];
6->2 [style = bold, label=""];
15->9 [style = solid, label="shadowLoader"];
3->9 [style = bold, label=""];
12->13 [style = bold, label=""];
14->8 [style = solid, label="shadowTestEnum"];
15->14 [style = solid, label="shadowLoader"];
2->0 [style = solid, label="shadowTestEnum"];
10->0 [style = bold, label=""];
14->2 [style = solid, label="shadowTestEnum"];
17->15 [style = bold, label=""];
9->5 [style = bold, label=""];
14->2 [style = bold, label=""];
2->7 [style = solid, label="shadowTestEnum"];
2->7 [style = bold, label=""];
4->11 [style = bold, label=""];
13->0 [style = bold, label=""];
}
