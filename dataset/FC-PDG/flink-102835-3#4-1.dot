digraph {
5 [style = filled, label = "env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "OneInputStreamOperator<Tuple2<String,Integer>,Tuple2<String,Integer>> operator = transform.getOperator()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testApplyProcessingTimeTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testApplyProcessingTimeTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testProcessProcessingTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingProcessingTimeWindows)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "processElementAndEnsureOutput(winOperator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple2<>(\"hello\",1))@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "DataStream<Tuple2<String,Integer>> window1 = source.windowAll(TumblingProcessingTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).apply(new AllWindowFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow>(){@Override public void apply(TimeWindow window,Iterable<Tuple2<String,Integer>> values,Collector<Tuple2<String,Integer>> out){for (Tuple2<String,Integer> in : values){out.collect(in)}}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(operator instanceof WindowOperator)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DataStream<Tuple2<String,Integer>> source = env.fromElements(Tuple2.of(\"hello\",1),Tuple2.of(\"hello\",2))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,?,?,?> winOperator = (WindowOperator<String,Tuple2<String,Integer>,?,?,?>)operator@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DataStream<Tuple2<String,Integer>> window1 = source.keyBy(new TupleKeySelector()).window(TumblingProcessingTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).process(new ProcessWindowFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,String,TimeWindow>(){@Override public void process(String key,Context ctx,Iterable<Tuple2<String,Integer>> values,Collector<Tuple2<String,Integer>> out){for (Tuple2<String,Integer> in : values){out.collect(in)}}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>> transform = (OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>>)window1.getTransformation()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->2 [style = bold, label=""];
4->6 [style = bold, label=""];
3->6 [style = solid, label="operator"];
6->10 [style = solid, label="winOperator"];
1->15 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
0->15 [style = dashed, label="0"];
3->4 [style = solid, label="operator"];
1->0 [style = bold, label=""];
7->8 [style = bold, label=""];
12->9 [style = bold, label=""];
3->4 [style = bold, label=""];
5->1 [style = bold, label=""];
11->10 [style = bold, label=""];
9->5 [style = bold, label=""];
14->9 [style = bold, label=""];
13->9 [style = bold, label=""];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
8->11 [style = bold, label=""];
}
