digraph {
19 [style = filled, label = "TreeData td2 = (TreeData)xs.fromXML(out)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(td2.map1.isEmpty())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"empty maps\",\"<hudson.util.CopyOnWriteMapTest_-TreeData>\" + \"<map1/><map2/>\" + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",out.replaceAll(\"\s+\",\"\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "out = xs.toXML(td)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(td2.map2.isEmpty())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"bar1\",td2.map1.get(\"foo1\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"maps\",\"<hudson.util.CopyOnWriteMapTest_-TreeData><map1>\" + \"<comparator class=\"java.lang.String$CaseInsensitiveComparator\"/>\" + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\" + \"<map2><comparator class=\"java.lang.String$CaseInsensitiveComparator\"\" + \" reference=\"../../map1/comparator\"/>\" + \"<entry><string>foo2</string><string>bar2</string></entry></map2>\" + \"</hudson.util.CopyOnWriteMapTest_-TreeData>\",out.replaceAll(\">\s+<\",\"><\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "HashData td2 = (HashData)xs.fromXML(out)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "treeSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "HashData td = new HashData()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "hashSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"maps\",\"<hudson.util.CopyOnWriteMapTest_-HashData><map1>\" + \"<entry><string>foo1</string><string>bar1</string></entry></map1>\" + \"<map2><entry><string>foo2</string><string>bar2</string></entry>\" + \"</map2></hudson.util.CopyOnWriteMapTest_-HashData>\",out.replaceAll(\"\s+\",\"\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"empty maps\",\"<hudson.util.CopyOnWriteMapTest_-HashData>\" + \"<map1/><map2/></hudson.util.CopyOnWriteMapTest_-HashData>\",out.replaceAll(\"\s+\",\"\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "td2 = (HashData)xs.fromXML(out)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "td = new TreeData(String.CASE_INSENSITIVE_ORDER)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TreeData td = new TreeData()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "td2 = (TreeData)xs.fromXML(out)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String out = xs.toXML(td)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "XStream2 xs = new XStream2()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "td.map2.put(\"foo2\",\"bar2\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "hashSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"bar2\",td2.map2.get(\"foo2\"))@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "td.map1.put(\"foo1\",\"bar1\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
16->9 [style = solid, label="td"];
6->21 [style = dashed, label="0"];
0->9 [style = bold, label=""];
7->17 [style = dashed, label="0"];
9->21 [style = solid, label="out"];
1->5 [style = solid, label="out"];
9->20 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
12->0 [style = bold, label=""];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
13->11 [style = bold, label=""];
17->19 [style = bold, label=""];
1->19 [style = solid, label="out"];
2->12 [style = bold, label=""];
1->17 [style = bold, label=""];
20->21 [style = bold, label=""];
6->14 [style = bold, label=""];
8->1 [style = bold, label=""];
9->6 [style = solid, label="out"];
7->5 [style = bold, label=""];
22->18 [style = bold, label=""];
15->11 [style = bold, label=""];
11->18 [style = dashed, label="0"];
5->4 [style = bold, label=""];
11->1 [style = solid, label="td"];
11->8 [style = bold, label=""];
10->20 [style = dashed, label="0"];
18->8 [style = bold, label=""];
19->4 [style = bold, label=""];
18->1 [style = solid, label="td"];
5->19 [style = dashed, label="0"];
16->12 [style = bold, label=""];
11->9 [style = solid, label="td"];
21->14 [style = bold, label=""];
2->16 [style = bold, label=""];
}
