digraph {
6 [style = filled, label = "ProcessInstance dependentProcessInstance = getProcessInstanceForFindLastRunningProcess(200,2,ExecutionStatus.FAILURE)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "ProcessInstance processInstance200 = getProcessInstanceForFindLastRunningProcess(200,2,ExecutionStatus.FAILURE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Mockito.when(processService.findValidTaskListByProcessId(300)).thenReturn(Stream.of(getTaskInstanceForValidTaskList(3000,ExecutionStatus.SUCCESS,\"B\",processInstance300),getTaskInstanceForValidTaskList(3001,ExecutionStatus.SUCCESS,\"C\",processInstance300)).collect(Collectors.toList()))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "ProcessInstance dependentProcessInstance = getProcessInstanceForFindLastRunningProcess(200,ExecutionStatus.FAILURE)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "taskNode.setDependence(JSONUtils.toJsonString(dependentParameters))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "DependentTaskModel dependentTaskModel1 = new DependentTaskModel()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "dependentTaskModel1.setRelation(DependentRelation.AND)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ProcessInstance processInstance300 = getProcessInstanceForFindLastRunningProcess(300,3,ExecutionStatus.SUCCESS)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Mockito.when(processService.findLastRunningProcess(Mockito.eq(2),Mockito.any(),Mockito.any())).thenReturn(dependentProcessInstance)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testBasicSuccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "dependentTaskModel1.setDependItemList(Stream.of(getDependentItemFromTaskNode(2,\"A\",\"today\",\"day\"),getDependentItemFromTaskNode(3,\"B\",\"today\",\"day\")).collect(Collectors.toList()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "taskExecThread.call()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "dependentParameters.setRelation(DependentRelation.OR)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(ExecutionStatus.SUCCESS,taskExecThread.getTaskInstance().getState())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testDependentRelation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "setupTaskInstance(taskNode)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Mockito.when(processService.findLastRunningProcess(Mockito.eq(2L),Mockito.any(),Mockito.any())).thenReturn(dependentProcessInstance)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testBasicSuccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testBasicInit()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Mockito.when(processService.findLastRunningProcess(Mockito.eq(2),Mockito.any(),Mockito.any())).thenReturn(processInstance200)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "DependentTaskModel dependentTaskModel2 = new DependentTaskModel()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "DependentParameters dependentParameters = new DependentParameters()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.when(processService.findValidTaskListByProcessId(200)).thenReturn(Stream.of(getTaskInstanceForValidTaskList(2000,ExecutionStatus.SUCCESS,\"A\",dependentProcessInstance),getTaskInstanceForValidTaskList(2000,ExecutionStatus.FAILURE,\"B\",dependentProcessInstance)).collect(Collectors.toList()))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "dependentParameters.setDependTaskList(Stream.of(dependentTaskModel1,dependentTaskModel2).collect(Collectors.toList()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Mockito.when(processService.findLastRunningProcess(Mockito.eq(3),Mockito.any(),Mockito.any())).thenReturn(processInstance300)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "taskExecThread.call()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(ExecutionStatus.SUCCESS,taskExecThread.getTaskInstance().getState())@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "dependentTaskModel2.setRelation(DependentRelation.OR)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "dependentTaskModel2.setDependItemList(Stream.of(getDependentItemFromTaskNode(2,\"A\",\"today\",\"day\"),getDependentItemFromTaskNode(3,\"C\",\"today\",\"day\")).collect(Collectors.toList()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "TaskNode taskNode = getDependantTaskNode()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Mockito.when(processService.findValidTaskListByProcessId(200)).thenReturn(Stream.of(getTaskInstanceForValidTaskList(2000,ExecutionStatus.FAILURE,\"A\",processInstance200)).collect(Collectors.toList()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->10 [style = solid, label="dependentProcessInstance"];
27->18 [style = bold, label=""];
31->25 [style = bold, label=""];
28->15 [style = bold, label=""];
6->9 [style = dashed, label="0"];
1->3 [style = bold, label=""];
25->32 [style = bold, label=""];
18->17 [style = bold, label=""];
10->3 [style = bold, label=""];
11->12 [style = bold, label=""];
20->31 [style = bold, label=""];
25->29 [style = solid, label="processInstance200"];
4->2 [style = bold, label=""];
12->26 [style = bold, label=""];
9->10 [style = bold, label=""];
1->10 [style = dashed, label="0"];
15->19 [style = bold, label=""];
16->22 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
24->14 [style = bold, label=""];
32->29 [style = bold, label=""];
7->9 [style = bold, label=""];
6->1 [style = bold, label=""];
6->1 [style = solid, label="dependentProcessInstance"];
30->21 [style = bold, label=""];
23->24 [style = bold, label=""];
22->20 [style = bold, label=""];
32->11 [style = solid, label="processInstance300"];
0->4 [style = bold, label=""];
26->23 [style = bold, label=""];
7->6 [style = bold, label=""];
30->20 [style = solid, label="dependentParameters"];
21->16 [style = bold, label=""];
5->7 [style = bold, label=""];
17->13 [style = bold, label=""];
29->11 [style = bold, label=""];
22->31 [style = solid, label="taskNode"];
13->28 [style = bold, label=""];
19->30 [style = bold, label=""];
}
