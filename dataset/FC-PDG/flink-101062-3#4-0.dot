digraph {
5 [style = filled, label = "System.out.println(results)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 0\"))@@@61@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@58@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "Table query = tableEnv.sqlQuery(\"select x from db1.part where p1>cast('2018-08-09' as date) and p2<>cast('2018-08-08 08:08:09' as timestamp)\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@62@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertFalse(catalog.fallback)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 3\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "optimizedPlan = explain(2(@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"(2, 3, 4(\",results.toString())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where p2 = 'c:2' order by x\")@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "optimizedPlan = explain(2(@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertFalse(catalog.fallback)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 2\"))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertFalse(catalog.fallback)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testPartitionFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 2\"))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertFalse(catalog.fallback)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where '' = p2\")@@@57@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(\"((\",results.toString())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "tableEnv.registerCatalog(catalog.getName(),catalog)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "String(( explain = query.explain().split(\"==.*==\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where (p1=1 and p2='a') or ((p1=2 and p2='b') or p2='d') order by x\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tableEnv.executeSql(\"create table db1.part(x int) partitioned by (p1 int,p2 string)\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb7042).commit(\"p1='2018-08-10',p2='2018-08-08 08:08:10'\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 0\"))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "tableEnv.executeSql(\"create database db1\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where p1>2 and p2<='a' order by x\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"(1, 2(\",results.toString())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "{tableEnv.executeSql(\"drop database db1 cascade\")}@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"(1, 3(\",results.toString())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertFalse(catalog.fallback)@@@59@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "assertTrue(catalog.fallback)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "tableEnv.useCatalog(catalog.getName())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testPartitionFilterDateTimestamp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(\"(4(\",results.toString())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb6e75).commit(\"p1=4,p2='c:2'\")@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "optimizedPlan = explain(2(@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"(3(\",results.toString())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "List<Row> results = Lists.newArrayList(query.execute().collect())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<Row> results = Lists.newArrayList(query.execute().collect())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "{tableEnv.executeSql(\"drop database db1 cascade\")}@@@65@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertFalse(catalog.fallback)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testPartitionFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "assertEquals(\"((\",results.toString())@@@63@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "String optimizedPlan = explain(2(@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "assertTrue(optimizedPlan,optimizedPlan.contains(\"PartitionPruned: true, PartitionNums: 1\"))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "optimizedPlan = explain(2(@@@60@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "optimizedPlan = explain(2(@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "tableEnv.executeSql(\"create table db1.part(x int) partitioned by (p1 date,p2 timestamp)\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb7032).commit(\"p1='2018-08-09',p2='2018-08-08 08:08:09'\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "query = tableEnv.sqlQuery(\"select x from db1.part where p1 in (1,3,5) order by x\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "results = Lists.newArrayList(query.execute().collect())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "explain = query.explain().split(\"==.*==\")@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Table query = tableEnv.sqlQuery(\"select x from db1.part where p1>1 or p2<>'a' order by x\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestPartitionFilterCatalog catalog = new TestPartitionFilterCatalog(hiveCatalog.getName(),hiveCatalog.getDefaultDatabase(),hiveCatalog.getHiveConf(),hiveCatalog.getHiveVersion())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "HiveTestUtils.createTextTableInserter(hiveShell,\"db1\",\"part\").addRow(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bb7022).commit(\"p1='2018-08-08',p2='2018-08-08 08:08:08'\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "TableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode(SqlDialect.HIVE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38->26 [style = bold, label=""];
40->55 [style = dashed, label="0"];
59->56 [style = bold, label=""];
15->1 [style = bold, label=""];
21->22 [style = bold, label=""];
44->3 [style = bold, label=""];
56->58 [style = bold, label=""];
10->62 [style = dashed, label="0"];
52->45 [style = bold, label=""];
45->0 [style = bold, label=""];
50->49 [style = solid, label="optimizedPlan"];
19->2 [style = solid, label="explain"];
1->37 [style = bold, label=""];
19->7 [style = bold, label=""];
27->34 [style = bold, label=""];
25->36 [style = solid, label="optimizedPlan"];
8->5 [style = bold, label=""];
9->42 [style = bold, label=""];
46->55 [style = bold, label=""];
41->30 [style = bold, label=""];
3->43 [style = bold, label=""];
0->29 [style = bold, label=""];
14->45 [style = bold, label=""];
5->60 [style = bold, label=""];
13->44 [style = bold, label=""];
49->54 [style = bold, label=""];
51->50 [style = solid, label="explain"];
58->46 [style = solid, label="optimizedPlan"];
46->39 [style = bold, label=""];
25->5 [style = bold, label=""];
9->25 [style = dashed, label="0"];
32->10 [style = bold, label=""];
17->11 [style = bold, label=""];
3->43 [style = solid, label="optimizedPlan"];
2->24 [style = bold, label=""];
30->28 [style = bold, label=""];
61->59 [style = bold, label=""];
59->58 [style = solid, label="explain"];
34->21 [style = bold, label=""];
41->61 [style = bold, label=""];
6->41 [style = bold, label=""];
7->2 [style = bold, label=""];
21->8 [style = solid, label="explain"];
25->36 [style = bold, label=""];
8->5 [style = solid, label="optimizedPlan"];
26->20 [style = bold, label=""];
2->24 [style = solid, label="optimizedPlan"];
13->3 [style = solid, label="explain"];
33->18 [style = bold, label=""];
35->27 [style = bold, label=""];
24->38 [style = bold, label=""];
43->35 [style = bold, label=""];
62->12 [style = bold, label=""];
20->13 [style = bold, label=""];
18->16 [style = bold, label=""];
40->9 [style = bold, label=""];
55->5 [style = solid, label="results"];
23->17 [style = bold, label=""];
5->40 [style = bold, label=""];
31->19 [style = bold, label=""];
39->25 [style = bold, label=""];
12->6 [style = bold, label=""];
55->25 [style = bold, label=""];
51->47 [style = bold, label=""];
22->8 [style = bold, label=""];
11->33 [style = bold, label=""];
36->15 [style = bold, label=""];
48->51 [style = bold, label=""];
4->32 [style = bold, label=""];
32->62 [style = bold, label=""];
29->4 [style = bold, label=""];
53->42 [style = bold, label=""];
0->29 [style = solid, label="catalog"];
9->48 [style = bold, label=""];
58->46 [style = bold, label=""];
10->12 [style = bold, label=""];
46->25 [style = solid, label="explain"];
57->45 [style = bold, label=""];
28->46 [style = bold, label=""];
47->50 [style = bold, label=""];
50->49 [style = bold, label=""];
23->11 [style = solid, label="explain"];
16->31 [style = bold, label=""];
39->56 [style = dashed, label="0"];
37->23 [style = bold, label=""];
11->33 [style = solid, label="optimizedPlan"];
54->53 [style = bold, label=""];
}
