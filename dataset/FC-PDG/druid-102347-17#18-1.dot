digraph {
13 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@43@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "SegmentDescriptor desc5 = sd(\"2049/P1D\",0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\",SHARD_ID0,\"1\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "maxTotalRows = 3L@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions))))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions))))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@52@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verifyAll()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@50@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "recordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\",SHARD_ID0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@34@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(4)))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"9\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@39@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"4\",SHARD_ID0,\"0\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
51 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(recordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\",SHARD_ID0,\"0\"),ImmutableSet.of())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.expectLastCall().once()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SegmentDescriptor desc7 = sd(\"2013/P1D\",0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(5)))@@@55@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "EasyMock.expect(recordSupplier.poll(EasyMock.anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@51@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"10\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "recordSupplier.assign(EasyMock.anyObject())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc4 = sd(\"2011/P1D\",0)@@@44@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Thread.sleep(10)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@39@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(3)))@@@53@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"2\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,\"0\"),ImmutableSet.of())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@40@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "Thread.sleep(10)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,currentOffsets,currentOffsets.keySet())))))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(6)))@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3,desc4,desc5,desc7),publishedDescriptors())@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(sdd(\"2008/P1D\",0,ImmutableList.of(\"a\")),sdd(\"2009/P1D\",0,ImmutableList.of(\"b\")),sdd(\"2010/P1D\",0,ImmutableList.of(\"c\")),sdd(\"2011/P1D\",0,ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"d\",\"h\")),sdd(\"2011/P1D\",1,ImmutableList.of(\"h\"),ImmutableList.of(\"e\")),sdd(\"2012/P1D\",0,ImmutableList.of(\"g\")),sdd(\"2013/P1D\",0,ImmutableList.of(\"f\"))),publishedDescriptors())@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->30 [style = bold, label=""];
32->22 [style = bold, label=""];
28->6 [style = bold, label=""];
55->36 [style = bold, label=""];
45->41 [style = dashed, label="0"];
68->69 [style = bold, label=""];
10->24 [style = bold, label=""];
33->41 [style = solid, label="desc4"];
66->41 [style = solid, label="desc7"];
62->63 [style = solid, label="nextOffsets"];
27->41 [style = solid, label="desc1"];
59->62 [style = bold, label=""];
3->65 [style = dashed, label="0"];
3->65 [style = bold, label=""];
29->34 [style = bold, label=""];
22->52 [style = dashed, label="0"];
1->13 [style = bold, label=""];
9->16 [style = bold, label=""];
36->55 [style = bold, label=""];
7->26 [style = bold, label=""];
23->28 [style = bold, label=""];
4->45 [style = solid, label="desc2"];
57->6 [style = solid, label="endPartitions"];
32->9 [style = solid, label="startPartitions"];
32->28 [style = solid, label="startPartitions"];
51->61 [style = bold, label=""];
65->16 [style = bold, label=""];
43->35 [style = bold, label=""];
17->14 [style = bold, label=""];
33->45 [style = solid, label="desc6"];
48->10 [style = bold, label=""];
37->32 [style = bold, label=""];
69->26 [style = bold, label=""];
49->56 [style = bold, label=""];
6->25 [style = solid, label="task"];
33->71 [style = bold, label=""];
50->54 [style = bold, label=""];
67->52 [style = bold, label=""];
42->19 [style = bold, label=""];
59->60 [style = dotted, label="true"];
45->41 [style = bold, label=""];
10->51 [style = bold, label=""];
59->60 [style = bold, label=""];
23->28 [style = solid, label="endPartitions"];
5->39 [style = bold, label=""];
25->36 [style = bold, label=""];
24->44 [style = bold, label=""];
40->0 [style = bold, label=""];
26->47 [style = dashed, label="0"];
24->51 [style = dashed, label="0"];
1->45 [style = solid, label="desc4"];
66->41 [style = bold, label=""];
26->4 [style = bold, label=""];
22->23 [style = bold, label=""];
26->45 [style = solid, label="desc1"];
31->11 [style = bold, label=""];
44->38 [style = bold, label=""];
61->38 [style = bold, label=""];
21->45 [style = bold, label=""];
35->40 [style = bold, label=""];
34->59 [style = bold, label=""];
36->25 [style = bold, label=""];
64->10 [style = bold, label=""];
36->55 [style = dotted, label="true"];
11->58 [style = dashed, label="0"];
15->31 [style = bold, label=""];
67->6 [style = solid, label="startPartitions"];
57->6 [style = bold, label=""];
27->45 [style = solid, label="desc3"];
13->71 [style = dashed, label="0"];
20->7 [style = bold, label=""];
10->28 [style = solid, label="baseSequenceName"];
16->20 [style = bold, label=""];
41->43 [style = bold, label=""];
41->50 [style = bold, label=""];
30->15 [style = bold, label=""];
39->37 [style = bold, label=""];
2->17 [style = bold, label=""];
19->68 [style = solid, label="currentOffsets"];
54->40 [style = bold, label=""];
28->6 [style = solid, label="task"];
14->56 [style = dashed, label="0"];
19->29 [style = bold, label=""];
16->68 [style = bold, label=""];
3->9 [style = bold, label=""];
63->12 [style = bold, label=""];
11->5 [style = bold, label=""];
42->29 [style = solid, label="currentOffsets"];
67->16 [style = solid, label="startPartitions"];
18->10 [style = bold, label=""];
17->49 [style = bold, label=""];
25->36 [style = dotted, label="true"];
25->42 [style = bold, label=""];
12->3 [style = bold, label=""];
38->8 [style = bold, label=""];
32->67 [style = dashed, label="0"];
42->19 [style = solid, label="currentOffsets"];
21->45 [style = solid, label="desc7"];
71->66 [style = bold, label=""];
36->19 [style = bold, label=""];
37->67 [style = bold, label=""];
41->50 [style = dashed, label="0"];
62->70 [style = bold, label=""];
23->53 [style = dashed, label="0"];
71->41 [style = solid, label="desc5"];
27->1 [style = bold, label=""];
31->58 [style = bold, label=""];
52->53 [style = bold, label=""];
7->47 [style = bold, label=""];
53->57 [style = bold, label=""];
0->2 [style = bold, label=""];
70->63 [style = bold, label=""];
47->46 [style = bold, label=""];
13->45 [style = solid, label="desc5"];
60->59 [style = bold, label=""];
34->12 [style = bold, label=""];
19->34 [style = solid, label="currentOffsets"];
17->49 [style = dashed, label="0"];
62->70 [style = solid, label="nextOffsets"];
19->29 [style = solid, label="currentOffsets"];
4->27 [style = bold, label=""];
58->5 [style = bold, label=""];
10->6 [style = solid, label="baseSequenceName"];
13->41 [style = solid, label="desc3"];
33->21 [style = bold, label=""];
13->33 [style = bold, label=""];
1->41 [style = solid, label="desc2"];
6->25 [style = bold, label=""];
}
