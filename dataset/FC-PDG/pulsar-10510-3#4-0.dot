digraph {
2 [style = filled, label = "doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(),any(),any(),any(),any())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "int totalSize = 0@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(domainMap)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertNotNull(connectorSplitSource)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testGetSplitNonSchema['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "setup()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Domain domain = Domain.create(ValueSet.ofRanges(Range.range(TIMESTAMP,currentTimeMs + 1L,true,currentTimeMs + 50L,true)),false)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(pulsarSplit.getStartPosition(),PositionImpl.get(0,initalStart))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "log.info(\"!----- topic: %s -----!\",topicName)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(pulsarSplit.getTableName(),topicName.getLocalName())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TopicName topicName = TOPIC_1@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(pulsarSplit.getStartPositionLedgerId(),0)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(pulsarSplit.getEndPositionLedgerId(),0)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(pulsarSplit.getSchemaName(),topicName.getNamespace())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(this.pulsarSplitManager,times(1)).getSplitsNonPartitionedTopic(anyInt(),any(),any(),any(),any())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Map<ColumnHandle,Domain> domainMap = new HashMap<>()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "domainMap.put(PulsarInternalColumn.PUBLISH_TIME.getColumnHandle(pulsarConnectorId.toString(),false),domain)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "PulsarTableHandle pulsarTableHandle = new PulsarTableHandle(pulsarConnectorId.toString(),topicName.getNamespace(),topicName.getLocalName(),topicName.getLocalName())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "totalSize += pulsarSplit.getSplitSize()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ResultCaptor<Collection<PulsarSplit>> resultCaptor = new ResultCaptor<>()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int initalStart = 1@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(pulsarSplit.getStartPositionEntryId(),initalStart)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(totalSize,49)@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String delimiter@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(pulsarSplit.getEndPositionEntryId(),initalStart + pulsarSplit.getSplitSize())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(pulsarSplit.getSchema(),new String(topicsToSchemas.get(topicName.getSchemaName()).getSchema()))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ConnectorSplitSource connectorSplitSource = this.pulsarSplitManager.getSplits(mock(),mock(),pulsarTableLayoutHandle,null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testPublishTimePredicatePushdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(pulsarSplit.getConnectorId(),pulsarConnectorId.toString())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(pulsarSplit.getSchemaType(),topicsToSchemas.get(topicName.getSchemaName()).getType())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testPublishTimePredicatePushdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "PulsarTableLayoutHandle pulsarTableLayoutHandle = new PulsarTableLayoutHandle(pulsarTableHandle,tupleDomain)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verify(this.pulsarSplitManager,times(1)).getSplitsNonPartitionedTopic(anyInt(),any(),any(),any(),any(),any())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "updateRewriteNamespaceDelimiterIfNeeded(delimiter)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "doAnswer(resultCaptor).when(this.pulsarSplitManager).getSplitsNonPartitionedTopic(anyInt(),any(),any(),any(),any(),any())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "TopicName topicName = NON_SCHEMA_TOPIC@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(pulsarSplit.getEndPosition(),PositionImpl.get(0,initalStart + pulsarSplit.getSplitSize()))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String delimiter@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "initalStart += pulsarSplit.getSplitSize()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
8->33 [style = bold, label=""];
0->16 [style = bold, label=""];
2->20 [style = bold, label=""];
29->5 [style = bold, label=""];
7->1 [style = bold, label=""];
33->20 [style = bold, label=""];
6->31 [style = solid, label="pulsarTableHandle"];
31->20 [style = solid, label="pulsarTableLayoutHandle"];
17->31 [style = bold, label=""];
4->25 [style = solid, label="initalStart"];
18->11 [style = bold, label=""];
3->14 [style = bold, label=""];
34->13 [style = bold, label=""];
20->37 [style = solid, label="connectorSplitSource"];
34->10 [style = dotted, label="true"];
17->31 [style = solid, label="tupleDomain"];
25->4 [style = bold, label=""];
20->32 [style = bold, label=""];
30->25 [style = bold, label=""];
21->10 [style = dotted, label="true"];
12->27 [style = solid, label="domain"];
28->12 [style = bold, label=""];
28->17 [style = solid, label="domainMap"];
19->23 [style = solid, label="topicName"];
4->7 [style = bold, label=""];
11->15 [style = bold, label=""];
24->30 [style = bold, label=""];
4->30 [style = solid, label="initalStart"];
20->18 [style = bold, label=""];
7->22 [style = bold, label=""];
13->19 [style = bold, label=""];
36->13 [style = bold, label=""];
19->38 [style = dashed, label="0"];
15->9 [style = solid, label="initalStart"];
15->3 [style = solid, label="initalStart"];
4->9 [style = solid, label="initalStart"];
7->22 [style = solid, label="totalSize"];
4->3 [style = solid, label="initalStart"];
8->2 [style = bold, label=""];
5->0 [style = bold, label=""];
15->1 [style = bold, label=""];
15->30 [style = solid, label="initalStart"];
21->13 [style = bold, label=""];
19->26 [style = bold, label=""];
10->13 [style = solid, label="delimiter"];
26->23 [style = bold, label=""];
23->6 [style = bold, label=""];
27->17 [style = bold, label=""];
20->37 [style = bold, label=""];
28->17 [style = bold, label=""];
14->9 [style = bold, label=""];
15->25 [style = solid, label="initalStart"];
13->38 [style = bold, label=""];
38->23 [style = solid, label="topicName"];
38->26 [style = bold, label=""];
2->33 [style = dashed, label="0"];
36->35 [style = dotted, label="true"];
1->29 [style = bold, label=""];
31->20 [style = bold, label=""];
32->11 [style = bold, label=""];
12->27 [style = bold, label=""];
31->8 [style = bold, label=""];
9->24 [style = bold, label=""];
10->35 [style = dashed, label="0"];
6->28 [style = bold, label=""];
18->32 [style = dashed, label="0"];
35->13 [style = solid, label="delimiter"];
}
