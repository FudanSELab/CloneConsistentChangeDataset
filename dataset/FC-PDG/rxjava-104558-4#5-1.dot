digraph {
3 [style = filled, label = "assertEquals(expected,zip2.toList().blockingGet())@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "issue1812['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expected.add(i * 3)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Flowable<Integer> zip2 = Flowable.zip(zip1,Flowable.range(0,1026),new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer i1,Integer i2){return i1 + i2}})@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "issue1812['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i < 1026@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Observable<Integer> zip2 = Observable.zip(zip1,Observable.range(0,1026),new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer i1,Integer i2){return i1 + i2}})@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Integer> expected = new ArrayList<Integer>()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Observable<Integer> zip1 = Observable.zip(Observable.range(0,1026),Observable.range(0,1026),new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer i1,Integer i2){return i1 + i2}})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "issue1812['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "List<Integer> expected = new ArrayList<>()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Flowable<Integer> zip1 = Flowable.zip(Flowable.range(0,1026),Flowable.range(0,1026),new BiFunction<Integer,Integer,Integer>(){@Override public Integer apply(Integer i1,Integer i2){return i1 + i2}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
9->0 [style = bold, label=""];
11->6 [style = bold, label=""];
6->9 [style = dashed, label="0"];
12->11 [style = bold, label=""];
8->1 [style = solid, label="zip1"];
8->12 [style = dashed, label="0"];
6->0 [style = bold, label=""];
1->9 [style = bold, label=""];
0->5 [style = solid, label="i"];
8->1 [style = bold, label=""];
6->3 [style = solid, label="expected"];
0->2 [style = solid, label="i"];
1->6 [style = bold, label=""];
13->12 [style = bold, label=""];
10->8 [style = bold, label=""];
12->11 [style = solid, label="zip1"];
5->7 [style = dotted, label="true"];
7->2 [style = bold, label=""];
1->11 [style = dashed, label="0"];
9->3 [style = solid, label="expected"];
5->7 [style = bold, label=""];
4->8 [style = bold, label=""];
5->2 [style = dotted, label="true"];
2->5 [style = solid, label="i"];
0->5 [style = bold, label=""];
0->7 [style = solid, label="i"];
2->5 [style = bold, label=""];
2->7 [style = solid, label="i"];
}
