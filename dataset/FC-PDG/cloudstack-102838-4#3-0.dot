digraph {
29 [style = filled, label = "InternalError dbUniquenessException = new InternalError(\"message: Db_exn.Uniqueness_constraint_violation(\"SR\", \"uuid\", \"fd3edbcf-f142-83d1-3fcb-029ca2446b68\")\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Mockito.doReturn(srMock).when(xenserver625StorageProcessor).retrieveAlreadyConfiguredSrWithoutException(connectionMock,pathMock)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PowerMockito.verifyStatic()@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "createNewFileSrTestThrowingDbUniqueException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock),Mockito.any(),Mockito.any())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Mockito.verify(srMock).scan(connectionMock)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Host hostMock = Mockito.mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "PowerMockito.verifyStatic()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "createNewFileSrTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Mockito.verify(pbdMock).plug(connectionMock)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PBD pbdMock = Mockito.mock()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Mockito.verify(xenserver625StorageProcessor,times(0)).removeSrAndPbdIfPossible(Mockito.eq(connectionMock),Mockito.any(),Mockito.any())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(srMock,sr)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.verify(xenserver625StorageProcessor,times(0)).removeSrAndPbdIfPossible(Mockito.eq(connectionMock),Mockito.any(),Mockito.any())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "PowerMockito.when(Host.getByUuid(connectionMock,uuid)).thenReturn(hostMock)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "PowerMockito.when(SR.introduce(Mockito.eq(connectionMock),Mockito.eq(srUuid),Mockito.eq(pathMock),Mockito.eq(pathMock),Mockito.eq(\"file\"),Mockito.eq(\"file\"),Mockito.eq(false),Mockito.anyMapOf(,))).thenReturn(srMock)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "PowerMockito.mockStatic()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock,pathMock)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PBD.create(Mockito.eq(connectionMock),Mockito.any())@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "createNewFileSrTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Mockito.verify(xenserver625StorageProcessor).retrieveAlreadyConfiguredSrWithoutException(connectionMock,pathMock)@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PowerMockito.mockStatic()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "PowerMockito.mockStatic()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "PowerMockito.when(SR.introduce(Mockito.eq(connectionMock),Mockito.eq(srUuid),Mockito.eq(pathMock),Mockito.eq(pathMock),Mockito.eq(\"file\"),Mockito.eq(\"file\"),Mockito.eq(false),Mockito.anyMapOf(,))).thenThrow(dbUniquenessException)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SR srMock = Mockito.mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PowerMockito.when(PBD.create(Mockito.eq(connectionMock),Mockito.any())).thenReturn(pbdMock)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "SR.introduce(Mockito.eq(connectionMock),Mockito.eq(srUuid),Mockito.eq(pathMock),Mockito.eq(pathMock),Mockito.eq(\"file\"),Mockito.eq(\"file\"),Mockito.eq(false),Mockito.anyMapOf(,))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String uuid = \"hostUuid\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.verify(xenserver625StorageProcessor,times(0)).retrieveAlreadyConfiguredSrWithoutException(connectionMock,pathMock)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->23 [style = bold, label=""];
30->17 [style = bold, label=""];
8->15 [style = bold, label=""];
23->5 [style = bold, label=""];
7->10 [style = bold, label=""];
11->1 [style = bold, label=""];
5->26 [style = dashed, label="0"];
0->2 [style = bold, label=""];
1->20 [style = bold, label=""];
18->22 [style = solid, label="srMock"];
27->22 [style = solid, label="sr"];
20->6 [style = bold, label=""];
11->24 [style = bold, label=""];
27->22 [style = bold, label=""];
25->17 [style = bold, label=""];
0->2 [style = solid, label="pbdMock"];
22->7 [style = bold, label=""];
29->26 [style = bold, label=""];
3->18 [style = bold, label=""];
24->20 [style = bold, label=""];
12->20 [style = solid, label="srUuid"];
12->13 [style = bold, label=""];
5->0 [style = bold, label=""];
1->24 [style = dashed, label="0"];
19->10 [style = dashed, label="0"];
18->10 [style = solid, label="srMock"];
17->3 [style = bold, label=""];
9->19 [style = bold, label=""];
7->10 [style = solid, label="sr"];
14->8 [style = bold, label=""];
10->9 [style = bold, label=""];
19->4 [style = bold, label=""];
26->28 [style = bold, label=""];
28->27 [style = bold, label=""];
13->8 [style = solid, label="hostMock"];
29->26 [style = solid, label="dbUniquenessException"];
17->3 [style = solid, label="uuid"];
2->22 [style = bold, label=""];
18->23 [style = solid, label="srMock"];
4->11 [style = bold, label=""];
16->12 [style = bold, label=""];
13->14 [style = bold, label=""];
21->17 [style = bold, label=""];
15->29 [style = bold, label=""];
18->16 [style = bold, label=""];
}
