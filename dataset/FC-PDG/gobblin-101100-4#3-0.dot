digraph {
0 [style = filled, label = "node1File.delete()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(edgeSet.size(),1)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testUpdateEdge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertNotNull(node1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRemoveNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "Files.write(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY + \"=node1\" + FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY + \"=node2\" + FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY + \"=edge1\" + FlowGraphConfigurationKeys.FLOW_EDGE_IS_ACTIVE_KEY + \"=true\" + FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY + \"=FS:///flowEdgeTemplate\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specStore.fs.dir=/tmp1\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specExecInstance.capabilities=s1:d1\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specStore.fs.dir=/tmp2\" + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specExecInstance.capabilities=s2:d2\" + \"key1=value1\",edge1File,Charsets.UTF_8)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "this.gitFlowGraphMonitor.processGitConfigChanges()@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Set<FlowEdge> edgeSet = this.flowGraph.getEdges(\"node1\")@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "FlowEdge flowEdge = edgeSet.iterator().next()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "this.gitFlowGraphMonitor.processGitConfigChanges()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DataNode node2 = this.flowGraph.getNode(\"node2\")@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertNull(node2)@@@17@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertNotNull(node2)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "this.gitForPush.commit().setMessage(\"Edge commit\").call()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "node2 = this.flowGraph.getNode(\"node2\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testRemoveNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "node1 = this.flowGraph.getNode(\"node1\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "RevCommit cc = this.gitForPush.commit().setMessage(\"Node remove commit\").call()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node1Dir.getName(),this.node1File.getName())).call()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "this.gitForPush.add().addFilepattern(formEdgeFilePath(this.edge1Dir.getParentFile().getName(),this.edge1Dir.getName(),this.edge1File.getName())).call()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(flowEdge.getSrc(),\"node1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "this.gitForPush.commit().setMessage(\"Node remove commit\").call()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "DataNode node1 = this.flowGraph.getNode(\"node1\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DirCache ac = this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node1Dir.getName(),this.node1File.getName())).call()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"),\"value1\")@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(flowEdge.getDest(),\"node2\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node2Dir.getName(),this.node2File.getName())).call()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(node1)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "node2File.delete()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "node1 = this.flowGraph.getNode(\"node1\")@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12->0 [style = bold, label=""];
21->14 [style = bold, label=""];
4->7 [style = dashed, label="0"];
15->9 [style = bold, label=""];
20->10 [style = bold, label=""];
22->24 [style = bold, label=""];
16->18 [style = bold, label=""];
1->28 [style = bold, label=""];
9->16 [style = bold, label=""];
6->11 [style = bold, label=""];
18->17 [style = solid, label="node1"];
17->20 [style = bold, label=""];
0->13 [style = bold, label=""];
3->7 [style = bold, label=""];
6->8 [style = bold, label=""];
2->6 [style = solid, label="node1"];
8->3 [style = bold, label=""];
35->32 [style = bold, label=""];
36->23 [style = bold, label=""];
19->21 [style = bold, label=""];
31->35 [style = bold, label=""];
37->34 [style = bold, label=""];
5->0 [style = bold, label=""];
32->25 [style = bold, label=""];
28->36 [style = bold, label=""];
9->1 [style = dashed, label="0"];
30->7 [style = bold, label=""];
4->9 [style = bold, label=""];
11->19 [style = bold, label=""];
27->30 [style = bold, label=""];
1->4 [style = bold, label=""];
0->35 [style = dashed, label="0"];
2->6 [style = bold, label=""];
18->17 [style = bold, label=""];
20->10 [style = solid, label="node2"];
7->1 [style = bold, label=""];
0->2 [style = bold, label=""];
34->22 [style = bold, label=""];
25->27 [style = bold, label=""];
13->2 [style = bold, label=""];
26->37 [style = bold, label=""];
14->15 [style = bold, label=""];
4->9 [style = solid, label="node1"];
29->33 [style = bold, label=""];
33->26 [style = bold, label=""];
23->29 [style = bold, label=""];
11->19 [style = solid, label="node2"];
}
