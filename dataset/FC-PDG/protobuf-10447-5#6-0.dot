digraph {
10 [style = filled, label = "testPrintToUnicodeString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(message.getOptionalString(),builder.getOptionalString())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(\"optional_string: \"\n\n\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"optional_string: \"\ntest\nnewlines\n\nin\nstring\n\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"testnewlinesinstring\").build()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message),builder)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testPrintToUnicodeStringWithNewlines['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"optional_string: \"\n\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(message.getOptionalString(),builder.getOptionalString())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"optional_string: \"test newlines\n\nin\nstring\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"test newlinesinstring\").build()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"testnewlinesinstring\").build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"a\bc\"ef\"g\").build())).isEqualTo(\"optional_string: \"a\\bc\\\"ef\\\"g\"\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "TextFormat.merge(TextFormat.printer().escapingNonAscii(false).printToString(message),builder)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"optional_string: \"\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"\").build()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"abcあefg\").setOptionalBytes(bytes(0xe3,0x81,0x82)).addRepeatedString(\"んXYZ\").build())).isEqualTo(\"optional_string: \"abcあefg\"\" + \"optional_bytes: \"\343\201\202\"\" + \"repeated_string: \"んXYZ\"\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(\"optional_string: \"abcあefg\"\" + \"optional_bytes: \"\343\201\202\"\" + \"repeated_string: \"んXYZ\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"abcあefg\").setOptionalBytes(bytes(0xe3,0x81,0x82)).addRepeatedString(\"んXYZ\").build()))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(builder.getOptionalString()).isEqualTo(message.getOptionalString())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"optional_string: \"a\\bc\\\"ef\\\"g\"\",TextFormat.printer().escapingNonAscii(false).printToString(TestAllTypes.newBuilder().setOptionalString(\"a\bc\"ef\"g\").build()))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "TestAllTypes message = TestAllTypes.newBuilder().setOptionalString(\"a\bc\\\"ef\"g\").build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testPrintToUnicodeString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
1->4 [style = bold, label=""];
13->16 [style = solid, label="message"];
3->7 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
19->20 [style = bold, label=""];
3->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
11->19 [style = bold, label=""];
9->7 [style = bold, label=""];
17->16 [style = solid, label="builder"];
3->19 [style = dashed, label="0"];
6->1 [style = bold, label=""];
13->17 [style = bold, label=""];
2->0 [style = bold, label=""];
15->11 [style = bold, label=""];
7->6 [style = bold, label=""];
20->12 [style = bold, label=""];
12->18 [style = bold, label=""];
18->13 [style = bold, label=""];
5->8 [style = dashed, label="0"];
4->8 [style = bold, label=""];
16->14 [style = bold, label=""];
10->9 [style = bold, label=""];
0->9 [style = dashed, label="0"];
6->4 [style = solid, label="message"];
4->5 [style = bold, label=""];
1->4 [style = solid, label="builder"];
17->16 [style = bold, label=""];
}
