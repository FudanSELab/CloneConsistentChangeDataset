digraph {
14 [style = filled, label = "concatVeryLongObservableOfObservables['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Observable<Observable<Integer>> source = Observable.range(0,n).map(new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer v){return Observable.just(v)}})@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Single<List<Integer>> result = Observable.concat(source).toList()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Flowable<Flowable<Integer>> source = Flowable.range(0,n).map(new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer v){return Flowable.just(v)}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Single<List<Integer>> result = Flowable.concat(source).toList()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "result.subscribe(o)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(o,never()).onError(any())@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "list.add(i)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Integer> list = new ArrayList<Integer>(n)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < n@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "InOrder inOrder = inOrder(o)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "inOrder.verify(o).onSuccess(list)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int n = 10000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int i = 0@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "concatVeryLongObservableOfObservables['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "concatVeryLongObservableOfObservables['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "i++@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<Integer> list = new ArrayList<>(n)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->13 [style = solid, label="o"];
5->10 [style = bold, label=""];
15->10 [style = bold, label=""];
7->17 [style = bold, label=""];
7->12 [style = bold, label=""];
16->7 [style = bold, label=""];
7->15 [style = solid, label="n"];
4->11 [style = dotted, label="true"];
12->17 [style = dashed, label="0"];
8->6 [style = bold, label=""];
10->4 [style = solid, label="i"];
3->4 [style = bold, label=""];
10->11 [style = solid, label="i"];
4->0 [style = bold, label=""];
14->7 [style = bold, label=""];
3->4 [style = solid, label="i"];
4->3 [style = dotted, label="true"];
15->0 [style = solid, label="list"];
11->3 [style = bold, label=""];
18->6 [style = bold, label=""];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
9->15 [style = bold, label=""];
6->13 [style = bold, label=""];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
8->18 [style = dashed, label="0"];
6->9 [style = solid, label="o"];
5->0 [style = solid, label="list"];
3->11 [style = solid, label="i"];
13->9 [style = bold, label=""];
2->7 [style = bold, label=""];
4->11 [style = bold, label=""];
7->4 [style = solid, label="n"];
5->15 [style = dashed, label="0"];
7->5 [style = solid, label="n"];
17->18 [style = bold, label=""];
10->3 [style = solid, label="i"];
}
