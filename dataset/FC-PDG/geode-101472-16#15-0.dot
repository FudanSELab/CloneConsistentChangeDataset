digraph {
6 [style = filled, label = "listRegionByName2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Region element = find(regions,\"customers\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(regions.stream().map(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "filter.setName(\"customers2\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(regions).hasSize(6)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "element = find(regions,\"customers1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(RegionType.PARTITION,RegionType.PARTITION_PROXY)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(regions.stream().map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "listAll['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "listRegionByName2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(element.getGroup()).isEqualTo(\"group1\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(regions.stream().filter(null).map(null).collect(Collectors.toList())).containsExactlyInAnyOrder(\"group1\",\"group2\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(element.getGroup()).isNull()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "filter.setName(REGION_WITH_MULTIPLE_TYPES)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
16->15 [style = bold, label=""];
0->16 [style = bold, label=""];
5->2 [style = bold, label=""];
10->9 [style = bold, label=""];
7->0 [style = bold, label=""];
9->0 [style = bold, label=""];
6->7 [style = bold, label=""];
15->11 [style = bold, label=""];
4->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
13->14 [style = bold, label=""];
12->8 [style = bold, label=""];
14->12 [style = bold, label=""];
11->13 [style = bold, label=""];
9->16 [style = solid, label="regions"];
4->0 [style = bold, label=""];
1->0 [style = dashed, label="0"];
9->11 [style = solid, label="regions"];
}
