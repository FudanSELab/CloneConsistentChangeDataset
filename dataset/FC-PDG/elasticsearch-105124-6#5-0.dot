digraph {
26 [style = filled, label = "assertEquals(-3 * Math.PI,histogram.getBuckets().get(1).getKey())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(Math.PI,histogram.getBuckets().get(3).getKey())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(0).getDocCount())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(2).getDocCount())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"my_agg\").field(\"field\").interval(interval).offset(offset)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "doc.add(new SortedNumericDocValuesField(\"field\",value))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Document doc = new Document()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(3).getDocCount())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "InternalHistogram histogram = search(searcher,new MatchAllDocsQuery(),aggBuilder,longField(\"field\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final double expectedOffset = offset % interval@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertTrue(AggregationInspectionHelper.hasValue(histogram))@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(3,histogram.getBuckets().size())@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(-4 * Math.PI,histogram.getBuckets().get(0).getKey())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"my_agg\").field(\"field\").interval(Math.PI)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(-10 + expectedOffset,histogram.getBuckets().get(0).getKey())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(5 + expectedOffset,histogram.getBuckets().get(2).getKey())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "InternalHistogram histogram = searchAndReduce(searcher,new MatchAllDocsQuery(),aggBuilder,doubleField(\"field\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testRandomOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(0,histogram.getBuckets().get(1).getDocCount())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(5 + expectedOffset,histogram.getBuckets().get(3).getKey())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final double offset = randomDouble()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(2,histogram.getBuckets().get(2).getDocCount())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(3).getDocCount())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(expectedOffset,histogram.getBuckets().get(2).getKey())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(expectedOffset,histogram.getBuckets().get(1).getKey())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final double interval = 5@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(AggregationInspectionHelper.hasValue(histogram))@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "InternalHistogram histogram = search(searcher,new MatchAllDocsQuery(),aggBuilder,doubleField(\"field\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertEquals(4,histogram.getBuckets().size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(1,histogram.getBuckets().get(1).getDocCount())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "IndexSearcher searcher = new IndexSearcher(reader)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(-5 + expectedOffset,histogram.getBuckets().get(1).getKey())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "testIrrationalInterval['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testRandomOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(4,histogram.getBuckets().size())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(0d,histogram.getBuckets().get(2).getKey())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "w.addDocument(doc)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "doc.add(new SortedNumericDocValuesField(\"field\",NumericUtils.doubleToSortableLong(value)))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
8->28 [style = bold, label=""];
15->10 [style = bold, label=""];
8->25 [style = solid, label="searcher"];
11->20 [style = dashed, label="0"];
23->5 [style = bold, label=""];
5->9 [style = bold, label=""];
25->22 [style = bold, label=""];
37->27 [style = bold, label=""];
11->14 [style = bold, label=""];
15->14 [style = solid, label="expectedOffset"];
1->26 [style = dashed, label="0"];
13->35 [style = dashed, label="0"];
33->37 [style = solid, label="aggBuilder"];
31->5 [style = bold, label=""];
4->15 [style = bold, label=""];
15->18 [style = solid, label="expectedOffset"];
17->22 [style = dashed, label="0"];
7->8 [style = dashed, label="0"];
11->29 [style = bold, label=""];
15->24 [style = solid, label="expectedOffset"];
28->26 [style = bold, label=""];
8->6 [style = bold, label=""];
7->0 [style = bold, label=""];
15->19 [style = solid, label="expectedOffset"];
5->16 [style = solid, label="doc"];
36->37 [style = solid, label="searcher"];
37->34 [style = solid, label="histogram"];
32->16 [style = bold, label=""];
16->2 [style = bold, label=""];
29->34 [style = bold, label=""];
6->37 [style = dashed, label="0"];
17->27 [style = dashed, label="0"];
2->4 [style = bold, label=""];
15->7 [style = solid, label="expectedOffset"];
22->7 [style = bold, label=""];
9->16 [style = bold, label=""];
9->32 [style = dashed, label="0"];
1->11 [style = bold, label=""];
8->6 [style = solid, label="searcher"];
26->30 [style = bold, label=""];
21->12 [style = bold, label=""];
24->20 [style = bold, label=""];
17->7 [style = bold, label=""];
20->18 [style = bold, label=""];
5->32 [style = bold, label=""];
15->1 [style = solid, label="expectedOffset"];
10->6 [style = solid, label="aggBuilder"];
3->5 [style = bold, label=""];
13->19 [style = bold, label=""];
6->12 [style = solid, label="histogram"];
13->12 [style = bold, label=""];
10->8 [style = bold, label=""];
6->25 [style = dashed, label="0"];
16->33 [style = bold, label=""];
1->24 [style = dashed, label="0"];
0->1 [style = bold, label=""];
14->0 [style = dashed, label="0"];
0->24 [style = bold, label=""];
33->36 [style = bold, label=""];
18->13 [style = bold, label=""];
16->5 [style = bold, label=""];
0->35 [style = bold, label=""];
4->15 [style = solid, label="interval"];
30->0 [style = bold, label=""];
36->37 [style = bold, label=""];
25->12 [style = solid, label="histogram"];
14->13 [style = bold, label=""];
2->10 [style = solid, label="offset"];
14->18 [style = dashed, label="0"];
10->25 [style = solid, label="aggBuilder"];
8->25 [style = bold, label=""];
27->8 [style = bold, label=""];
2->15 [style = solid, label="offset"];
35->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
