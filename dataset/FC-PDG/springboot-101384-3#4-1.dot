digraph {
10 [style = filled, label = "ordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),eq(target),any(),isA())@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "BindHandler handler = mock(,withSettings().defaultAnswer(Answers.CALLS_REAL_METHODS))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),eq(Bindable.of()),any(),array.capture())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "bindToMapStringArrayShouldTriggerOnSuccess['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "this.sources.add(new MockConfigurationPropertySource(\"foo.bar\",\"a,b,c\",\"line1\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "this.sources.add(new MockConfigurationPropertySource(\"foo.bar\",\"1\",\"line1\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Bindable<Map<String,String((>> target = STRING_ARRAY_MAP@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo.bar\")),eq(Bindable.of()),any(),eq(1))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ArgumentCaptor<String((> array = ArgumentCaptor.forClass()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Bindable<Map<String,Integer>> target = STRING_INTEGER_MAP@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(array.getValue()).containsExactly(\"a\",\"b\",\"c\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "bindToMapShouldTriggerOnSuccess['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "bindToMapShouldTriggerOnSuccess['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "InOrder ordered = inOrder(handler)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of(\"foo\")),eq(target),any(),isA())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "this.binder.bind(\"foo\",target,handler)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
4->3 [style = bold, label=""];
11->10 [style = solid, label="target"];
5->14 [style = dashed, label="0"];
0->6 [style = bold, label=""];
11->1 [style = bold, label=""];
6->11 [style = dashed, label="0"];
0->11 [style = bold, label=""];
2->4 [style = bold, label=""];
6->1 [style = solid, label="target"];
6->1 [style = bold, label=""];
7->5 [style = bold, label=""];
6->3 [style = solid, label="target"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
14->0 [style = bold, label=""];
15->9 [style = bold, label=""];
0->1 [style = solid, label="handler"];
2->15 [style = bold, label=""];
12->14 [style = bold, label=""];
11->1 [style = solid, label="target"];
1->2 [style = bold, label=""];
0->2 [style = solid, label="handler"];
9->13 [style = bold, label=""];
}
