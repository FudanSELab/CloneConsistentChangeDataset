digraph {
31 [style = filled, label = "long readStartTime = System.nanoTime()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "decodeStartTime = System.nanoTime()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "long logAppendTimestamp = System.currentTimeMillis() - 10@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getProcessedRecordCount(),1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "this.extractorStatsTracker.onDecodeableRecord(0,readStartTime,decodeStartTime,100,logAppendTimestamp)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getMinLogAppendTime(),logAppendTimestamp)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getMaxLogAppendTime(),logAppendTimestamp)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getMaxLogAppendTime(),logAppendTimestamp)@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "long logAppendTimestamp = System.currentTimeMillis() - 15 * 60 * 1000L@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "testOnDecodeableRecord['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getMaxLogAppendTime(),-1)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getReadRecordTime() > 0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Thread.sleep(1)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getObservedLatencyHistogram().getTotalCount(),0)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getElapsedTime(),0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "long decodeStartTime = System.nanoTime()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getProcessedRecordCount(),0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testUpdateStatisticsForCurrentPartition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getPartitionTotalSize(),0)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getMinLogAppendTime(),previousLogAppendTimestamp)@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getPartitionTotalSize(),200)@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getReadRecordTime() == 0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(1)).getElapsedTime() > 0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getStopFetchEpochTime() > 0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getPartitionTotalSize(),0)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getDecodeRecordTime() > 0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(1)).getMaxLogAppendTime(),logAppendTimestamp)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getPartitionTotalSize(),100)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getElapsedTime() > 0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(1)).getSlaMissedRecordCount(),0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getDecodeRecordTime() == 0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getProcessedRecordCount(),0)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getPartitionTotalSize(),100)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getObservedLatencyHistogram().getTotalCount(),2)@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getAvgMillisPerRecord() < 0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getAvgRecordSize(),100)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(1)).getAvgMillisPerRecord() > 0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "this.extractorStatsTracker.onDecodeableRecord(1,readStartTime,decodeStartTime,100,logAppendTimestamp)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getMinLogAppendTime(),-1)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getDecodeRecordTime() > previousDecodeRecordTime)@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(1)).getAvgRecordSize(),100)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "readStartTime = System.nanoTime()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(1)).getMinLogAppendTime(),logAppendTimestamp)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "this.extractorStatsTracker.updateStatisticsForCurrentPartition(1,readStartTime,0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "long logAppendTimestamp = currentTimeMillis - 15 * 60 * 1000L@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "logAppendTimestamp = currentTimeMillis - 10@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getObservedLatencyHistogram().getTotalCount(),1)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "testOnDecodeableRecord['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getDecodeRecordTime() > 0)@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Thread.sleep(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getPartitionTotalSize(),200)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getSlaMissedRecordCount(),-1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "long previousReadRecordTime = this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getReadRecordTime()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "long previousLogAppendTimestamp = logAppendTimestamp@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Thread.sleep(1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "readStartTime = System.nanoTime()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "currentTimeMillis = System.currentTimeMillis()@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getSlaMissedRecordCount(),1)@@@34@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "this.extractorStatsTracker.onDecodeableRecord(0,readStartTime,decodeStartTime,100,logAppendTimestamp,recordCreationTimestamp)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getStopFetchEpochTime(),0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getAvgMillisPerRecord() > 0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "long currentTimeMillis = System.currentTimeMillis()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "this.extractorStatsTracker.onDecodeableRecord(0,readStartTime,decodeStartTime,100,logAppendTimestamp,recordCreationTimestamp)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "long recordCreationTimestamp = currentTimeMillis - 16 * 60 * 1000L@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "this.extractorStatsTracker.updateStatisticsForCurrentPartition(0,readStartTime,0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertTrue(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getReadRecordTime() > previousReadRecordTime)@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "long previousDecodeRecordTime = this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getDecodeRecordTime()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getSlaMissedRecordCount(),1)@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
65 [style = filled, label = "long decodeStartTime = System.nanoTime()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getProcessedRecordCount(),2)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "recordCreationTimestamp = currentTimeMillis - 20@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(this.extractorStatsTracker.getStatsMap().get(kafkaPartitions.get(0)).getProcessedRecordCount(),2)@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->32 [style = bold, label=""];
22->20 [style = solid, label="logAppendTimestamp"];
32->23 [style = bold, label=""];
65->54 [style = bold, label=""];
5->20 [style = bold, label=""];
36->49 [style = solid, label="recordCreationTimestamp"];
7->30 [style = solid, label="previousDecodeRecordTime"];
30->38 [style = solid, label="previousDecodeRecordTime"];
38->51 [style = bold, label=""];
23->61 [style = dashed, label="0"];
26->34 [style = bold, label=""];
40->39 [style = solid, label="logAppendTimestamp"];
3->23 [style = solid, label="logAppendTimestamp"];
14->28 [style = bold, label=""];
25->6 [style = bold, label=""];
2->64 [style = dashed, label="0"];
35->4 [style = solid, label="logAppendTimestamp"];
35->5 [style = solid, label="logAppendTimestamp"];
32->42 [style = solid, label="previousLogAppendTimestamp"];
45->50 [style = solid, label="currentTimeMillis"];
61->68 [style = bold, label=""];
62->65 [style = bold, label=""];
22->16 [style = solid, label="logAppendTimestamp"];
15->41 [style = bold, label=""];
67->57 [style = bold, label=""];
7->47 [style = solid, label="decodeStartTime"];
50->47 [style = solid, label="recordCreationTimestamp"];
1->31 [style = bold, label=""];
47->0 [style = bold, label=""];
8->27 [style = bold, label=""];
6->23 [style = solid, label="readStartTime"];
46->45 [style = solid, label="currentTimeMillis"];
31->14 [style = bold, label=""];
40->50 [style = bold, label=""];
15->13 [style = bold, label=""];
21->68 [style = dashed, label="0"];
64->71 [style = bold, label=""];
63->6 [style = solid, label="logAppendTimestamp"];
50->30 [style = bold, label=""];
30->26 [style = bold, label=""];
26->47 [style = bold, label=""];
45->40 [style = solid, label="currentTimeMillis"];
41->49 [style = bold, label=""];
20->3 [style = bold, label=""];
34->0 [style = bold, label=""];
56->58 [style = bold, label=""];
6->4 [style = bold, label=""];
6->53 [style = bold, label=""];
16->41 [style = dashed, label="0"];
70->59 [style = bold, label=""];
7->57 [style = dashed, label="0"];
63->62 [style = bold, label=""];
3->7 [style = bold, label=""];
49->18 [style = bold, label=""];
60->31 [style = bold, label=""];
22->29 [style = solid, label="logAppendTimestamp"];
68->6 [style = bold, label=""];
32->26 [style = solid, label="previousReadRecordTime"];
46->36 [style = solid, label="currentTimeMillis"];
66->70 [style = bold, label=""];
18->24 [style = bold, label=""];
22->2 [style = bold, label=""];
52->61 [style = bold, label=""];
65->54 [style = solid, label="decodeStartTime"];
32->52 [style = dashed, label="0"];
43->20 [style = bold, label=""];
42->39 [style = bold, label=""];
31->16 [style = solid, label="readStartTime"];
0->11 [style = bold, label=""];
5->23 [style = solid, label="decodeStartTime"];
3->11 [style = solid, label="logAppendTimestamp"];
27->70 [style = dashed, label="0"];
19->16 [style = bold, label=""];
48->31 [style = bold, label=""];
51->37 [style = bold, label=""];
9->18 [style = bold, label=""];
54->67 [style = bold, label=""];
20->54 [style = dashed, label="0"];
12->8 [style = bold, label=""];
3->45 [style = dashed, label="0"];
27->10 [style = bold, label=""];
46->35 [style = bold, label=""];
36->8 [style = bold, label=""];
10->33 [style = bold, label=""];
13->9 [style = bold, label=""];
59->69 [style = bold, label=""];
33->19 [style = bold, label=""];
10->59 [style = dashed, label="0"];
28->49 [style = solid, label="decodeStartTime"];
4->5 [style = bold, label=""];
71->66 [style = bold, label=""];
35->32 [style = solid, label="logAppendTimestamp"];
37->42 [style = bold, label=""];
28->22 [style = bold, label=""];
45->40 [style = bold, label=""];
22->25 [style = solid, label="logAppendTimestamp"];
58->64 [style = bold, label=""];
12->71 [style = dashed, label="0"];
16->15 [style = bold, label=""];
32->45 [style = bold, label=""];
20->0 [style = solid, label="previousLogAppendTimestamp"];
35->49 [style = solid, label="logAppendTimestamp"];
69->67 [style = solid, label="readStartTime"];
11->38 [style = bold, label=""];
39->44 [style = bold, label=""];
31->64 [style = solid, label="readStartTime"];
22->46 [style = dashed, label="0"];
29->25 [style = bold, label=""];
8->66 [style = dashed, label="0"];
63->54 [style = solid, label="logAppendTimestamp"];
17->30 [style = bold, label=""];
31->49 [style = solid, label="readStartTime"];
24->29 [style = bold, label=""];
40->47 [style = solid, label="logAppendTimestamp"];
30->53 [style = dashed, label="0"];
2->12 [style = bold, label=""];
55->56 [style = bold, label=""];
5->43 [style = bold, label=""];
57->52 [style = bold, label=""];
26->51 [style = solid, label="previousReadRecordTime"];
28->46 [style = bold, label=""];
23->47 [style = dashed, label="0"];
23->21 [style = bold, label=""];
31->55 [style = bold, label=""];
17->6 [style = dashed, label="0"];
35->36 [style = bold, label=""];
28->16 [style = solid, label="decodeStartTime"];
63->53 [style = solid, label="logAppendTimestamp"];
21->17 [style = bold, label=""];
69->63 [style = bold, label=""];
5->65 [style = dashed, label="0"];
46->35 [style = solid, label="currentTimeMillis"];
20->47 [style = solid, label="readStartTime"];
69->54 [style = solid, label="readStartTime"];
}
