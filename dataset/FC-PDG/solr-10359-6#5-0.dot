digraph {
5 [style = filled, label = "isStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@7@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "StreamExpression expression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "isStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Class<? extends Expressible> clazz = classSupplier.get()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "return false@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamExpression expression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(functionNames.get(function),new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f9c7ea,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@f9c7ef)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "classSupplier != null@@@5@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return true@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "String function = expression.getFunctionName()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "functionNames.containsKey(function)@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Class<? extends Expressible> clazz = functionNames.get(function)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return true@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "constructEvaluator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\",expression,expression.getFunctionName()))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return false@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
0->6 [style = solid, label="function"];
12->14 [style = solid, label="clazz"];
17->18 [style = solid, label="expression"];
7->1 [style = bold, label=""];
16->18 [style = bold, label=""];
3->20 [style = dotted, label="true"];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
19->17 [style = dotted, label="true"];
10->11 [style = solid, label="classSupplier"];
7->16 [style = dashed, label="0"];
11->12 [style = dotted, label="true"];
11->14 [style = dotted, label="true"];
3->4 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
3->6 [style = bold, label=""];
11->12 [style = bold, label=""];
3->6 [style = dotted, label="true"];
2->17 [style = dashed, label="0"];
4->7 [style = bold, label=""];
14->13 [style = dotted, label="true"];
19->0 [style = bold, label=""];
3->18 [style = bold, label=""];
2->15 [style = dashed, label="0"];
6->20 [style = bold, label=""];
20->18 [style = bold, label=""];
6->4 [style = bold, label=""];
0->10 [style = bold, label=""];
17->16 [style = solid, label="expression"];
6->20 [style = solid, label="clazz"];
20->16 [style = bold, label=""];
5->0 [style = bold, label=""];
4->20 [style = dashed, label="0"];
12->14 [style = bold, label=""];
6->4 [style = solid, label="clazz"];
11->8 [style = bold, label=""];
9->15 [style = dotted, label="true"];
4->1 [style = bold, label=""];
14->8 [style = bold, label=""];
3->10 [style = dashed, label="0"];
14->13 [style = bold, label=""];
0->3 [style = solid, label="function"];
13->8 [style = bold, label=""];
0->16 [style = solid, label="function"];
0->10 [style = solid, label="function"];
20->16 [style = dotted, label="true"];
5->2 [style = dotted, label="true"];
10->11 [style = bold, label=""];
}
