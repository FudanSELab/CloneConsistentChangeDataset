digraph {
7 [style = filled, label = "indexExpressions = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14480fb@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "IndicesOptions options@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "String expressions@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "dataStreamNames['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Context context = new Context(state,options,false,false,true)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "String indexExpressions@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "ClusterState state@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "return ((dataStreams == null)? List.of(): dataStreams).stream().map(null).filter(null).filter(null).map(null).collect(Collectors.toList())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ClusterState state@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "IndicesOptions options@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return Arrays.stream(indexExpressions).flatMap(null).filter(null).map(null).collect(Collectors.toList())@@@4@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "dataStreamNames['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Context context = new Context(state,IndicesOptions.lenientExpandOpen(),true,false,true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return Set.copyOf(resolvedExpressions)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "resolveExpressions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Context context = new Context(state,options,false,false,true,true)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "List<String> dataStreams = wildcardExpressionResolver.resolve(context,Arrays.asList(indexExpressions))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "String indexExpressions@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "List<String> resolvedExpressions = Arrays.asList(expressions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "indexExpressions == null || indexExpressions.length == 0@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "resolvedExpressions = expressionResolver.resolve(context,resolvedExpressions)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->0 [style = dotted, label="true"];
4->1 [style = solid, label="options"];
10->13 [style = solid, label="options"];
18->16 [style = dotted, label="true"];
2->1 [style = bold, label=""];
1->15 [style = dashed, label="0"];
18->15 [style = bold, label=""];
1->3 [style = bold, label=""];
5->1 [style = solid, label="state"];
15->19 [style = bold, label=""];
7->8 [style = bold, label=""];
9->6 [style = dotted, label="true"];
12->7 [style = bold, label=""];
16->15 [style = solid, label="state"];
15->14 [style = solid, label="context"];
14->20 [style = solid, label="resolvedExpressions"];
6->8 [style = solid, label="indexExpressions"];
1->13 [style = dashed, label="0"];
13->12 [style = bold, label=""];
19->14 [style = bold, label=""];
5->13 [style = solid, label="state"];
17->19 [style = solid, label="expressions"];
12->8 [style = bold, label=""];
2->4 [style = dotted, label="true"];
19->14 [style = solid, label="resolvedExpressions"];
6->12 [style = solid, label="indexExpressions"];
13->8 [style = solid, label="context"];
18->17 [style = dotted, label="true"];
2->5 [style = dotted, label="true"];
12->7 [style = dotted, label="true"];
7->8 [style = solid, label="indexExpressions"];
9->10 [style = dotted, label="true"];
8->11 [style = bold, label=""];
14->20 [style = bold, label=""];
9->13 [style = bold, label=""];
9->5 [style = dotted, label="true"];
}
