digraph {
5 [style = filled, label = "final JmxReporter reporter = new JmxReporter(\"kafka.streams\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "metrics.addReporter(reporter)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "replay(innerStoreMock)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "init()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final String threadId = Thread.currentThread().getName()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "store.init(context,store)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final JmxReporter reporter = new JmxReporter(\"kafka.streams\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",threadId,context.taskId().toString(),\"scope\",\"all\")))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",threadId,context.taskId().toString(),\"scope\",\"mocked-store\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",storeLevelGroup,threadIdTagKey,threadId,taskId.toString(),STORE_TYPE,\"metered\")))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\"scope\",threadId,taskId.toString(),\"scope\",\"all\")))@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",storeLevelGroup,threadIdTagKey,threadId,taskId.toString(),STORE_TYPE,ROLLUP_VALUE)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
13->10 [style = bold, label=""];
3->1 [style = bold, label=""];
11->14 [style = bold, label=""];
3->7 [style = dashed, label="0"];
6->0 [style = bold, label=""];
3->15 [style = bold, label=""];
7->8 [style = bold, label=""];
5->3 [style = solid, label="reporter"];
12->13 [style = bold, label=""];
2->0 [style = bold, label=""];
15->14 [style = solid, label="threadId"];
10->5 [style = bold, label=""];
15->11 [style = bold, label=""];
0->4 [style = bold, label=""];
1->11 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
8->9 [style = bold, label=""];
5->7 [style = bold, label=""];
15->11 [style = solid, label="threadId"];
8->9 [style = dotted, label="true"];
4->5 [style = bold, label=""];
4->5 [style = solid, label="reporter"];
}
