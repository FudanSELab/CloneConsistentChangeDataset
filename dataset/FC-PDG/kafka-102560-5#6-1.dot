digraph {
2 [style = filled, label = "final ForeachAction<Long,String> action = new ForeachAction<Long,String>(){@Override public void apply(final Long key,final String value){results.put(key,value)}}@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "driver.pipeInput(recordFactory.create(topic,2L,\"value2\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(store.get(2L),equalTo(\"value2\"))@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "driver.process(topic,1L,\"value1\")@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final Map<Long,String> results = new HashMap<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "driver = new TopologyTestDriver(builder.build(),props)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(results.get(2L),equalTo(\"value2\"))@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(results.get(2L),equalTo(\"value2\"))@@@21@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "driver.process(topic,2L,\"value2\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "builder.globalTable(topic,Materialized.as(\"store\").withKeySerde(Serdes.Long()).withValueSerde(Serdes.String()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "driver.flushState()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final ConsumerRecordFactory<Long,String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(),new StringSerializer())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "driver.process(topic,2L,\"value2\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final String topic = \"topic\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "driver.setTime(0L)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldUseSerdesDefinedInMaterializedToConsumeTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final KeyValueStore<Long,String> store = (KeyValueStore<Long,String>)driver.allStateStores().get(\"store\")@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "driver.flushState()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "shouldUseSerdesDefinedInMaterializedToConsumeTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(results.get(1L),equalTo(\"value1\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "driver.setTime(0L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(store.get(1L),equalTo(\"value1\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final KeyValueStore<Long,String> store = driver.getKeyValueStore(\"store\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "builder.table(topic,Materialized.as(\"store\").withKeySerde(Serdes.Long()).withValueSerde(Serdes.String())).toStream().foreach(action)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(store.get(2L),equalTo(\"value2\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(store.get(1L),equalTo(\"value1\"))@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "final KeyValueStore<Long,String> store = (KeyValueStore<Long,String>)driver.allStateStores().get(\"store\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "driver.pipeInput(recordFactory.create(topic,1L,\"value1\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "driver.process(topic,1L,\"value1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "driver.setUp(builder,TestUtils.tempDirectory())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25->28 [style = bold, label=""];
29->30 [style = bold, label=""];
9->2 [style = bold, label=""];
0->6 [style = bold, label=""];
9->19 [style = solid, label="topic"];
21->15 [style = bold, label=""];
30->28 [style = solid, label="topic"];
30->9 [style = bold, label=""];
2->10 [style = solid, label="action"];
10->21 [style = bold, label=""];
19->17 [style = bold, label=""];
2->10 [style = bold, label=""];
0->17 [style = dashed, label="0"];
26->13 [style = bold, label=""];
1->9 [style = bold, label=""];
8->7 [style = bold, label=""];
14->1 [style = bold, label=""];
9->5 [style = solid, label="topic"];
30->23 [style = solid, label="topic"];
5->20 [style = dashed, label="0"];
9->27 [style = bold, label=""];
30->9 [style = solid, label="topic"];
6->4 [style = bold, label=""];
24->26 [style = bold, label=""];
3->5 [style = bold, label=""];
11->0 [style = bold, label=""];
23->22 [style = bold, label=""];
18->4 [style = bold, label=""];
13->3 [style = bold, label=""];
10->13 [style = bold, label=""];
16->1 [style = bold, label=""];
11->19 [style = dashed, label="0"];
28->23 [style = bold, label=""];
12->8 [style = bold, label=""];
15->20 [style = bold, label=""];
9->11 [style = solid, label="topic"];
4->12 [style = bold, label=""];
5->11 [style = bold, label=""];
22->24 [style = bold, label=""];
20->19 [style = bold, label=""];
9->20 [style = solid, label="topic"];
27->25 [style = bold, label=""];
17->18 [style = bold, label=""];
}
