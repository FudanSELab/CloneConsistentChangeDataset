digraph {
17 [style = filled, label = "testWriteAfterFlush['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(dummyWriters.get(0).closeCount,1)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "writer.getMessageHandler().handleMessage(new FlushControlMessage(new FlushControlMessage.FlushReason(\"flush\")))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(dummyWriters.get(0).committed)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(dummyWriters.get(1).handlerCalled)@@@25@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "writer.getMessageHandler().handleMessage(new FlushControlMessage(new FlushControlMessage.FlushReason(\"flush\")))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testWriteAfterFlush['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "byte(( record = new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1a04f61@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testCloseOnFlushDisabled['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(dummyWriters.get(1).closeCount,1)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "writer.writeEnvelope(new RecordEnvelope(record))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertFalse(dummyWriters.get(0).committed)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(dummyWriters.get(1).closed)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(dummyWriters.get(0).flushCount,1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(dummyWriters.get(0).handlerCalled)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "writer.writeEnvelope(new RecordEnvelope(record))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(dummyWriters.get(1).flushCount,1)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<DummyWriter> dummyWriters = new ArrayList<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(dummyWriters.get(0).handlerCalled)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CloseOnFlushWriterWrapper<byte((> writer = getCloseOnFlushWriter(dummyWriters,state)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(dummyWriters.get(0).recordsWritten(),1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertFalse(dummyWriters.get(0).closed)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(dummyWriters.get(1).recordsWritten(),1)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "state.getJobState().setProp(ConfigurationKeys.WRITER_CLOSE_ON_FLUSH_KEY,\"true\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(dummyWriters.size(),2)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "WorkUnitState state = new WorkUnitState()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(dummyWriters.size(),1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(dummyWriters.get(1).committed)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(dummyWriters.get(0).closed)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8->21 [style = solid, label="record"];
5->8 [style = bold, label=""];
25->28 [style = bold, label=""];
7->1 [style = bold, label=""];
22->15 [style = bold, label=""];
18->5 [style = solid, label="dummyWriters"];
16->10 [style = bold, label=""];
16->27 [style = dashed, label="0"];
6->18 [style = bold, label=""];
19->20 [style = bold, label=""];
12->11 [style = bold, label=""];
15->6 [style = bold, label=""];
16->23 [style = dashed, label="0"];
3->12 [style = bold, label=""];
11->9 [style = bold, label=""];
15->18 [style = bold, label=""];
14->1 [style = bold, label=""];
20->4 [style = bold, label=""];
14->7 [style = bold, label=""];
24->20 [style = bold, label=""];
8->0 [style = bold, label=""];
13->28 [style = dashed, label="0"];
2->23 [style = bold, label=""];
0->14 [style = bold, label=""];
15->5 [style = solid, label="state"];
10->13 [style = bold, label=""];
18->5 [style = bold, label=""];
26->15 [style = bold, label=""];
17->15 [style = bold, label=""];
23->10 [style = bold, label=""];
9->19 [style = bold, label=""];
2->27 [style = bold, label=""];
1->2 [style = bold, label=""];
19->24 [style = dashed, label="0"];
13->21 [style = bold, label=""];
8->0 [style = solid, label="record"];
27->25 [style = bold, label=""];
9->24 [style = bold, label=""];
10->25 [style = dashed, label="0"];
21->3 [style = bold, label=""];
2->16 [style = bold, label=""];
}
