digraph {
0 [style = filled, label = "groupSets = Lists.newArrayList()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final ImmutableBitSet groupSet = ImmutableBitSet.of(2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testInduceGroupingType1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "groupSets = new ArrayList<>()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "List<ImmutableBitSet> groupSets = Lists.newArrayList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "List<ImmutableBitSet> groupSets = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(Aggregate.Group.SIMPLE,Aggregate.Group.induce(groupSet,groupSets))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "groupSets.add(groupSet)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testInduceGroupingType0['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "groupSets.add(groupSet)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "groupSets = Lists.newArrayList()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Aggregate.Group.CUBE,Aggregate.Group.induce(groupSet,groupSets))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "groupSets = new ArrayList<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "final ImmutableBitSet groupSet = ImmutableBitSet.of()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "groupSets = Lists.newArrayList()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testInduceGroupingType1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "groupSets = new ArrayList<>()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
10->18 [style = bold, label=""];
8->19 [style = dashed, label="0"];
8->11 [style = solid, label="groupSet"];
8->7 [style = solid, label="groupSet"];
12->1 [style = solid, label="groupSets"];
9->11 [style = bold, label=""];
4->16 [style = dashed, label="0"];
7->10 [style = bold, label=""];
17->10 [style = solid, label="groupSets"];
19->7 [style = solid, label="groupSet"];
0->2 [style = bold, label=""];
8->10 [style = solid, label="groupSet"];
16->7 [style = bold, label=""];
6->0 [style = bold, label=""];
12->1 [style = bold, label=""];
8->13 [style = solid, label="groupSet"];
4->7 [style = bold, label=""];
2->13 [style = bold, label=""];
6->14 [style = bold, label=""];
9->10 [style = solid, label="groupSets"];
0->14 [style = dashed, label="0"];
13->17 [style = bold, label=""];
8->6 [style = solid, label="groupSet"];
7->5 [style = bold, label=""];
8->1 [style = solid, label="groupSet"];
5->6 [style = bold, label=""];
18->1 [style = bold, label=""];
11->10 [style = bold, label=""];
10->12 [style = bold, label=""];
4->6 [style = solid, label="groupSets"];
3->8 [style = bold, label=""];
19->10 [style = solid, label="groupSet"];
14->13 [style = solid, label="groupSets"];
9->17 [style = dashed, label="0"];
0->13 [style = solid, label="groupSets"];
12->18 [style = dashed, label="0"];
14->2 [style = bold, label=""];
19->1 [style = solid, label="groupSet"];
13->9 [style = bold, label=""];
19->4 [style = bold, label=""];
8->4 [style = bold, label=""];
4->10 [style = solid, label="groupSets"];
20->19 [style = bold, label=""];
15->8 [style = bold, label=""];
18->1 [style = solid, label="groupSets"];
17->11 [style = bold, label=""];
16->6 [style = solid, label="groupSets"];
}
