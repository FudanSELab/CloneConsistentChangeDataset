digraph {
2 [style = filled, label = "source.addDragListener(new DragSourceListener(){@Override public void dragStart(DragSourceEvent event){if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {event.doit = false}{Rectangle columnBoundsif (headerColumnDragStarted && hoveringColumn != null) {draggingColumn = hoveringColumncolumnBounds = hoveringColumn.getBounds()}if (rowHeaderDragStarted && hoveringRow != null) {draggingRow = hoveringRowint rowFromTop = hoveringRow - getTopIndex()columnBounds = new Rectangle(0,rowFromTop * getItemHeight(),getRowHeaderWidth(),getItemHeight())}{event.doit = falsereturn}GC gc = new GC(this)dragImage = new Image(Display.getCurrent(),columnBounds.width,columnBounds.height)gc.copyArea(dragImage,columnBounds.x,columnBounds.y)event.image = dragImagegc.dispose()}}@Override public void dragSetData(DragSourceEvent event){if (draggingColumn != null) {if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {List<Object> elements = new ArrayList<>()if (isDragSingleColumn()) {elements.add(draggingColumn.getElement())}{for (GridColumn col : selectedColumns){elements.add(col.getElement())}}event.data = elements}if (TextTransfer.getInstance().isSupportedType(event.dataType)) {if (selectedColumns.size() > 1 && !isDragSingleColumn()) {StringBuilder text = new StringBuilder()for (GridColumn column : selectedColumns){if (text.length() > 0) text.append(\", \")text.append(getLabelProvider().getText(column.getElement()))}event.data = text.toString()}{event.data = getLabelProvider().getText(draggingColumn.getElement())}}}if (draggingRow != null) {if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {List<Object> elements = new ArrayList<>()if (isDragSingleRow()) {elements.add(getRowElement(draggingRow))}{for (Integer row : selectedRows.keySet()){elements.add(getRowElement(row))}}event.data = elements}if (TextTransfer.getInstance().isSupportedType(event.dataType)) {List<GridColumn> columns = selectedColumnsif (columns.isEmpty()) {columns = this.columns}Set<Integer> rows = selectedRows.keySet()if (rows.isEmpty()) {rows = Collections.singleton(draggingRow)}StringBuilder text = new StringBuilder()for (Integer row : rows){if (text.length() > 0) text.append(\"\")for (int i = 0 i < columns.size() i++){GridColumn column = columns.get(i)String cellText = getContentProvider().getCellText(column.getElement(),getRowElement(row))if (i > 0) text.append(\", \")text.append(cellText)}}event.data = text.toString()}}}@Override public void dragFinished(DragSourceEvent event){draggingColumn = nulldraggingRow = nullif (dragImage != null) {UIUtils.dispose(dragImage)dragImage = null}lastDragEndTime = System.currentTimeMillis()}})@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "addDragAndDropSupport['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final int operations = DND.DROP_MOVE | DND.DROP_COPY@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DropTarget dropTarget = new DropTarget(this,operations)@@@112@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final int operations = DND.DROP_MOVE | DND.DROP_COPY@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "addControlDropTarget(dndControl,operations)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "source.setTransfer(GridColumnTransfer.INSTANCE,TextTransfer.getInstance())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "addDragAndDropSupport['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "addControlDropTarget(item.getDashboardControl(),operations)@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "DashboardItem item@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "addDragAndDropSupport['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "dropTarget.addDropListener(new DropTargetListener(){@Override public void dragEnter(DropTargetEvent event){handleDragEvent(event)}@Override public void dragLeave(DropTargetEvent event){handleDragEvent(event)}@Override public void dragOperationChanged(DropTargetEvent event){handleDragEvent(event)}@Override public void dragOver(DropTargetEvent event){handleDragEvent(event)}@Override public void drop(DropTargetEvent event){handleDragEvent(event)if (event.detail == DND.DROP_MOVE) {moveColumns(event)}}@Override public void dropAccept(DropTargetEvent event){handleDragEvent(event)}private void handleDragEvent(DropTargetEvent event){if (!isDropSupported(event)) {event.detail = DND.DROP_NONE}{event.detail = DND.DROP_MOVE}event.feedback = DND.FEEDBACK_SELECT}private boolean isDropSupported(DropTargetEvent event){if (!hoveringOnHeaderDragArea) {return false}if (draggingColumn == null || draggingColumn.getGrid() != this) {return false}GridColumn overColumn = getOverColumn(event)return overColumn != null && draggingColumn != overColumn}private GridColumn getOverColumn(DropTargetEvent event){Point dragPoint = getDisplay().map(null,this,new Point(event.x,event.y))return getColumn(dragPoint)}private void moveColumns(DropTargetEvent event){GridColumn overColumn = getOverColumn(event)if (overColumn == null || draggingColumn == null || draggingColumn == overColumn) {return}IGridController gridController = getGridController()if (gridController != null) {IGridController.DropLocation locationPoint dropPoint = getDisplay().map(null,this,new Point(event.x,event.y))Rectangle columnBounds = overColumn.getBounds()if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {location = IGridController.DropLocation.DROP_AFTER}{location = IGridController.DropLocation.DROP_BEFORE}gridController.moveColumn(draggingColumn.getElement(),overColumn.getElement(),location)}draggingColumn = null}})@@@114@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final DragSource source = new DragSource(dndControl,operations)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "dropTarget.setTransfer(GridColumnTransfer.INSTANCE,TextTransfer.getInstance())@@@113@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "source.addDragListener(new DragSourceListener(){@Override public void dragStart(DragSourceEvent event){if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {event.doit = false}{Rectangle columnBounds = selectedItem.getBounds()GC gc = new GC(this)dragImage = new Image(Display.getCurrent(),columnBounds.width,columnBounds.height)gc.copyArea(dragImage,columnBounds.x,columnBounds.y)event.image = dragImagegc.dispose()}}@Override public void dragSetData(DragSourceEvent event){if (selectedItem != null) {if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {event.data = selectedItem}}}@Override public void dragFinished(DragSourceEvent event){if (dragImage != null) {UIUtils.dispose(dragImage)dragImage = null}lastDragEndTime = System.currentTimeMillis()}})@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "source.setTransfer(DashboardTransfer.INSTANCE)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Label dndControl = item.getTitleLabel()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->14 [style = solid, label="operations"];
5->16 [style = dashed, label="0"];
13->15 [style = bold, label=""];
4->7 [style = bold, label=""];
15->10 [style = solid, label="dndControl"];
2->5 [style = bold, label=""];
0->16 [style = solid, label="operations"];
0->10 [style = dashed, label="0"];
15->16 [style = solid, label="dndControl"];
11->16 [style = bold, label=""];
13->9 [style = dotted, label="true"];
0->1 [style = bold, label=""];
10->12 [style = bold, label=""];
0->10 [style = bold, label=""];
15->0 [style = bold, label=""];
7->5 [style = solid, label="operations"];
7->0 [style = solid, label="operations"];
7->0 [style = bold, label=""];
6->3 [style = bold, label=""];
16->14 [style = bold, label=""];
0->10 [style = solid, label="operations"];
1->12 [style = dashed, label="0"];
8->7 [style = bold, label=""];
12->11 [style = bold, label=""];
1->2 [style = bold, label=""];
2->3 [style = solid, label="draggingColumn"];
5->6 [style = bold, label=""];
}
