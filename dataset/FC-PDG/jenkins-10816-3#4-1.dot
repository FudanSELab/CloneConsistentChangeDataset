digraph {
6 [style = filled, label = "expected.add(createFilePath(baseDir,\"top\",\"sub\",\"app.log\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "File baseDir = temp.getRoot()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "list['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Set<FilePath> expected = new HashSet<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "listWithExcludes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "list['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "expected.add(createFilePath(baseDir,\"top\",\"db\",\"trace.log\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final FilePath(( result = new FilePath(baseDir).list(\"**\",\"**/trace.log\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "createFilePath(baseDir,\"top\",\"sub\",\"trace.log\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "expected.add(createFilePath(baseDir,\"top\",\"sub\",\"trace.log\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(expected,new HashSet<>(Arrays.asList(result)))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "expected.add(createFilePath(baseDir,\"top\",\"db\",\"db.log\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "createFilePath(baseDir,\"top\",\"db\",\"trace.log\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final FilePath(( result = new FilePath(baseDir).list(\"**\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Set<FilePath> expected = new HashSet<FilePath>()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(expected,new HashSet<FilePath>(Arrays.asList(result)))@@@10@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
7->6 [style = solid, label="baseDir"];
4->14 [style = bold, label=""];
15->7 [style = bold, label=""];
0->6 [style = bold, label=""];
1->5 [style = solid, label="result"];
7->4 [style = solid, label="baseDir"];
7->12 [style = solid, label="baseDir"];
7->0 [style = bold, label=""];
8->14 [style = dashed, label="0"];
3->4 [style = bold, label=""];
7->8 [style = solid, label="baseDir"];
9->6 [style = bold, label=""];
1->10 [style = solid, label="result"];
1->13 [style = dashed, label="0"];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
3->12 [style = dashed, label="0"];
12->4 [style = bold, label=""];
5->10 [style = dashed, label="0"];
13->5 [style = solid, label="result"];
7->3 [style = solid, label="baseDir"];
13->5 [style = bold, label=""];
4->8 [style = bold, label=""];
0->5 [style = solid, label="expected"];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
0->9 [style = dashed, label="0"];
1->10 [style = bold, label=""];
11->7 [style = bold, label=""];
9->10 [style = solid, label="expected"];
7->14 [style = solid, label="baseDir"];
6->12 [style = bold, label=""];
}
