digraph {
3 [style = filled, label = "BibEntry expectedEntry = createMinimalBibEntry()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "ParserResult actualParserResult = new ParserResult(Collections.singletonList(actualEntry))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "ParserResult actualParserResult = new ParserResult(Collections.singletonList(entry))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "BibEntry actualEntry = createMinimalBibEntry()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "actualEntry.setField(StandardField.REVIEW,\"My Review\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "reviewAndCommentField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "entry.setField(StandardField.COMMENT,\"My Comment\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(expectedEntry,actualParserResult.getDatabase().getEntryByCitationKey(\"Entry1\").get())@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "commentField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(entry,actualParserResult.getDatabase().getEntryByCitationKey(\"Entry1\").get())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "action.performMigration(actualParserResult)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ParserResult actualParserResult = new ParserResult(Collections.singletonList(entry))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "action.performMigration(actualParserResult)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "expectedEntry.setField(StandardField.COMMENT,\"My Comment\" + Localization.lang(\"Review\") + \":My Review\")@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "actualEntry.setField(StandardField.COMMENT,\"My Comment\")@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "reviewAndCommentField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "entry.setField(StandardField.REVIEW,\"My Review\")@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "entry.setField(StandardField.COMMENT,\"My Comment\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "action.performMigration(actualParserResult)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "BibEntry entry = createMinimalBibEntry()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(expectedEntry,actualParserResult.getDatabase().getEntryByCitationKey(\"Entry1\").get())@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
1->4 [style = bold, label=""];
3->1 [style = bold, label=""];
7->17 [style = dashed, label="0"];
17->20 [style = solid, label="entry"];
11->12 [style = bold, label=""];
19->17 [style = bold, label=""];
9->10 [style = bold, label=""];
7->0 [style = solid, label="actualEntry"];
12->9 [style = bold, label=""];
15->16 [style = bold, label=""];
0->4 [style = solid, label="actualParserResult"];
13->1 [style = bold, label=""];
6->18 [style = dashed, label="0"];
6->12 [style = dashed, label="0"];
17->16 [style = solid, label="entry"];
8->0 [style = bold, label=""];
5->16 [style = dashed, label="0"];
3->5 [style = solid, label="expectedEntry"];
18->20 [style = bold, label=""];
10->13 [style = bold, label=""];
7->6 [style = bold, label=""];
6->8 [style = bold, label=""];
2->7 [style = bold, label=""];
20->15 [style = bold, label=""];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
20->15 [style = solid, label="actualParserResult"];
9->13 [style = solid, label="actualParserResult"];
17->18 [style = bold, label=""];
}
