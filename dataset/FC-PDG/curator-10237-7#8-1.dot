digraph {
1 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test/one\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "cache = new MyTreeCache(client.usingNamespace(\"outer\"),\"/\",true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "client.create().forPath(\"/outer/test/one\",\"hey there\".getBytes())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "client.create().forPath(\"/test/one\",\"hey there\".getBytes())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEvent(TreeCacheEvent.Type.INITIALIZED)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testAsyncInitialPopulation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "cache = new MyTreeCache(client,\"/test\",true)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "testWithNamespaceAtRoot['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "client.create().forPath(\"/test\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "client.create().forPath(\"/outer/test\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test/one\").keySet(),ImmutableSet.of())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(new String(cache.getCurrentData(\"/test/one\").getData()),\"hey there\")@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertNoMoreEvents()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/test\").keySet(),ImmutableSet.of(\"one\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/foo\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "cache.start()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testAsyncInitialPopulation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/\").keySet(),ImmutableSet.of(\"foo\",\"test\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEvent(TreeCacheEvent.Type.NODE_ADDED,\"/test\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.create().forPath(\"/outer\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cache = newTreeCacheWithListeners(client,\"/test\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "cache.start()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "client.create().forPath(\"/outer/foo\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(cache.getCurrentChildren(\"/foo\").keySet(),ImmutableSet.of())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
23->25 [style = bold, label=""];
19->18 [style = bold, label=""];
8->3 [style = bold, label=""];
18->15 [style = bold, label=""];
3->6 [style = bold, label=""];
15->6 [style = bold, label=""];
2->9 [style = bold, label=""];
11->19 [style = bold, label=""];
7->8 [style = bold, label=""];
9->8 [style = bold, label=""];
13->11 [style = bold, label=""];
1->17 [style = bold, label=""];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
25->20 [style = bold, label=""];
17->24 [style = bold, label=""];
10->5 [style = bold, label=""];
21->13 [style = bold, label=""];
6->16 [style = bold, label=""];
7->9 [style = dashed, label="0"];
20->12 [style = bold, label=""];
16->14 [style = bold, label=""];
2->11 [style = dashed, label="0"];
4->1 [style = bold, label=""];
2->7 [style = bold, label=""];
12->22 [style = bold, label=""];
0->5 [style = bold, label=""];
14->4 [style = bold, label=""];
24->23 [style = bold, label=""];
}
