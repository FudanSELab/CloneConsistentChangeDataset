digraph {
32 [style = filled, label = "assertFalse(actual.getValue(TestTypedPropertyKey.BOOLEAN_OBJECT_VALUE))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.LONG_OBJECT_VALUE),is(10000L))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "props.setProperty(TestTypedPropertyKey.BOOLEAN_OBJECT_VALUE.getKey(),Boolean.TRUE.toString())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "properties.setProperty(TestTypedPropertyKey.BOOLEAN_VALUE.getKey(),Boolean.TRUE.toString())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "properties.setProperty(TestTypedPropertyKey.INT_VALUE.getKey(),\"100\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Properties properties = new Properties()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertGetDefaultValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "props.setProperty(TestTypedPropertyKey.INT_VALUE.getKey(),\"100\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.LONG_OBJECT_VALUE),is(1000L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "properties.setProperty(TestTypedPropertyKey.LONG_OBJECT_VALUE.getKey(),\"10000\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.INT_OBJECT_VALUE),is(100))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "TestTypedProperties actual = new TestTypedProperties(new Properties())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertFalse(actual.getValue(TestTypedPropertyKey.BOOLEAN_VALUE))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.LONG_VALUE),is(1000L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "properties.setProperty(TestTypedPropertyKey.BOOLEAN_OBJECT_VALUE.getKey(),Boolean.TRUE.toString())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "props.setProperty(TestTypedPropertyKey.BOOLEAN_VALUE.getKey(),Boolean.TRUE.toString())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "props.setProperty(TestTypedPropertyKey.LONG_VALUE.getKey(),\"10000\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.STRING_VALUE),is(\"new_value\"))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "props.setProperty(TestTypedPropertyKey.STRING_VALUE.getKey(),\"new_value\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.STRING_VALUE),is(\"value\"))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertGetValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "properties.setProperty(TestTypedPropertyKey.INT_OBJECT_VALUE.getKey(),\"100\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.INT_VALUE),is(10))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.INT_OBJECT_VALUE),is(10))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "properties.setProperty(TestTypedPropertyKey.LONG_VALUE.getKey(),\"10000\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "TestTypedProperties actual = new TestTypedProperties(properties)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "props.setProperty(TestTypedPropertyKey.LONG_OBJECT_VALUE.getKey(),\"10000\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(actual.getValue(TestTypedPropertyKey.BOOLEAN_VALUE))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "props.setProperty(TestTypedPropertyKey.INT_OBJECT_VALUE.getKey(),\"100\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Properties props = new Properties()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.INT_VALUE),is(100))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "properties.setProperty(TestTypedPropertyKey.STRING_VALUE.getKey(),\"new_value\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(actual.getValue(TestTypedPropertyKey.LONG_VALUE),is(10000L))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(actual.getValue(TestTypedPropertyKey.BOOLEAN_OBJECT_VALUE))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestTypedProperties actual = new TestTypedProperties(props)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertGetValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5->3 [style = bold, label=""];
16->13 [style = bold, label=""];
35->27 [style = bold, label=""];
1->8 [style = bold, label=""];
18->23 [style = bold, label=""];
4->17 [style = dashed, label="0"];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
27->28 [style = bold, label=""];
8->23 [style = dashed, label="0"];
14->10 [style = bold, label=""];
14->22 [style = dashed, label="0"];
10->28 [style = dashed, label="0"];
0->26 [style = dashed, label="0"];
1->18 [style = dashed, label="0"];
6->34 [style = dashed, label="0"];
1->32 [style = dashed, label="0"];
26->24 [style = bold, label=""];
32->30 [style = bold, label=""];
24->18 [style = bold, label=""];
14->27 [style = dashed, label="0"];
17->19 [style = bold, label=""];
9->16 [style = bold, label=""];
12->7 [style = bold, label=""];
30->29 [style = bold, label=""];
12->21 [style = dashed, label="0"];
20->21 [style = bold, label=""];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
0->12 [style = solid, label="props"];
22->20 [style = bold, label=""];
11->19 [style = dashed, label="0"];
10->12 [style = bold, label=""];
7->2 [style = bold, label=""];
6->24 [style = dashed, label="0"];
31->33 [style = bold, label=""];
15->0 [style = bold, label=""];
0->33 [style = dashed, label="0"];
25->26 [style = bold, label=""];
21->7 [style = bold, label=""];
23->17 [style = bold, label=""];
34->32 [style = bold, label=""];
26->21 [style = solid, label="properties"];
10->20 [style = dashed, label="0"];
8->30 [style = dashed, label="0"];
29->35 [style = bold, label=""];
8->4 [style = bold, label=""];
4->29 [style = dashed, label="0"];
4->11 [style = bold, label=""];
19->22 [style = bold, label=""];
33->34 [style = bold, label=""];
11->35 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
