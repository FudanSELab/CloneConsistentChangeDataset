digraph {
20 [style = filled, label = "assertEquals(result.endOffsets().get(tp0).error(),Errors.NONE)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "consumerClient.pollNoWakeup()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(result.endOffsets().containsKey(tp0))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "endOffsetMap.put(tp0,new EpochEndOffset(Errors.LEADER_NOT_AVAILABLE,-1,-1))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(result.endOffsets().get(tp0).endOffset(),10L)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RequestFuture<OffsetsForLeaderEpochClient.OffsetForEpochResult> future = offsetClient.sendAsyncRequest(Node.noNode(),positionMap)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testOkResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(result.partitionsToRetry().isEmpty())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(result.endOffsets().get(tp0).leaderEpoch(),1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "client.prepareResponse(new OffsetsForLeaderEpochResponse(endOffsetMap))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "positionMap.put(tp0,new SubscriptionState.FetchPosition(0,Optional.of(1),new Metadata.LeaderAndEpoch(Optional.empty(),Optional.of(1))))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testRetriableError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(result.partitionsToRetry().contains(tp0))@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "endOffsetMap.put(tp0,new EpochEndOffset(Errors.NONE,1,10L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "consumerClient.pollNoWakeup()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertFalse(future.failed())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertTrue(result.partitionsToRetry().contains(tp0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRetriableError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertFalse(result.endOffsets().containsKey(tp0))@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "OffsetsForLeaderEpochClient.OffsetForEpochResult result = future.value()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<TopicPartition,SubscriptionState.FetchPosition> positionMap = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "OffsetsForLeaderEpochClient offsetClient = newOffsetClient()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<TopicPartition,EpochEndOffset> endOffsetMap = new HashMap<>()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "client.prepareResponse(prepareOffsetForLeaderEpochResponse(tp0,Errors.LEADER_NOT_AVAILABLE,-1,-1))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16->15 [style = bold, label=""];
8->19 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
3->11 [style = solid, label="endOffsetMap"];
9->4 [style = bold, label=""];
18->17 [style = bold, label=""];
10->3 [style = bold, label=""];
19->11 [style = bold, label=""];
4->18 [style = bold, label=""];
6->17 [style = dashed, label="0"];
11->9 [style = bold, label=""];
12->0 [style = bold, label=""];
13->16 [style = bold, label=""];
4->7 [style = bold, label=""];
2->12 [style = bold, label=""];
12->10 [style = solid, label="positionMap"];
20->21 [style = bold, label=""];
10->13 [style = bold, label=""];
3->19 [style = bold, label=""];
15->9 [style = bold, label=""];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
22->12 [style = bold, label=""];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
9->5 [style = bold, label=""];
1->10 [style = bold, label=""];
8->11 [style = bold, label=""];
17->20 [style = bold, label=""];
21->23 [style = bold, label=""];
}
