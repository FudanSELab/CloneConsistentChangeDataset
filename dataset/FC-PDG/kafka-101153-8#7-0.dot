digraph {
2 [style = filled, label = "final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\",ofEpochMilli(1),ofEpochMilli(10))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\",ofEpochMilli(1),ofEpochMilli(10))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "EasyMock.replay(storeProvider)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "emptyIteratorAlwaysReturnsFalse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final CompositeReadOnlyWindowStore<Object,Object> store = new CompositeReadOnlyWindowStore<>(storeProvider,QueryableStoreTypes.windowStore(),\"foo\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "EasyMock.expect(storeProvider.stores(anyString(),anyObject())).andReturn(emptyList())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "windowStoreIterator.next()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "windowStoreIteratorException.expect()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final StateStoreProvider storeProvider = EasyMock.createNiceMock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThrows(,null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final CompositeReadOnlyWindowStore<Object,Object> store = new CompositeReadOnlyWindowStore<>(new StateStoreProviderStub(false),QueryableStoreTypes.windowStore(),\"foo\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "emptyIteratorNextShouldThrowNoSuchElementException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Assert.assertFalse(windowStoreIterator.hasNext())@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "emptyIteratorNextShouldThrowNoSuchElementException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
9->5 [style = bold, label=""];
11->5 [style = solid, label="storeProvider"];
5->10 [style = bold, label=""];
1->8 [style = dashed, label="0"];
11->10 [style = solid, label="storeProvider"];
11->9 [style = bold, label=""];
7->8 [style = bold, label=""];
12->0 [style = bold, label=""];
10->7 [style = bold, label=""];
2->1 [style = bold, label=""];
6->11 [style = bold, label=""];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
2->13 [style = bold, label=""];
1->13 [style = dashed, label="0"];
}
