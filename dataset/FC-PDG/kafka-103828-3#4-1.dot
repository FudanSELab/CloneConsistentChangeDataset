digraph {
5 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "counts.put(\"topic2\",NewPartitions.increaseTo(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertNull(result.values().get(\"topic1\").get())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "long defaultApiTimeout = 60000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic3\"),)@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "MockTime time = new MockTime()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic2\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreatePartitionsRequestWithTopics(\"topic2\"),prepareCreatePartitionsResponse(1000,createPartitionsTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting DeleteTopics requests\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DeleteTopicsResult result = env.adminClient().deleteTopics(asList(\"topic1\",\"topic2\",\"topic3\"),new DeleteTopicsOptions().retryOnQuotaViolation(true))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Map<String,NewPartitions> counts = new HashMap<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic1\",Errors.NONE),deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),deletableTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic3\"),)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "CreatePartitionsResult result = env.adminClient().createPartitions(counts,new CreatePartitionsOptions().retryOnQuotaViolation(true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNull(result.values().get(\"topic1\").get())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "counts.put(\"topic1\",NewPartitions.increaseTo(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next DeleteTopics request\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting CreatePartitions requests\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreatePartitionsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareCreatePartitionsResponse(1000,createPartitionsTopicResult(\"topic1\",Errors.NONE),createPartitionsTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),createPartitionsTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "counts.put(\"topic3\",NewPartitions.increaseTo(3))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic3\"),)@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next CreatePartitions request\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->13 [style = bold, label=""];
9->0 [style = bold, label=""];
21->19 [style = bold, label=""];
2->6 [style = bold, label=""];
22->25 [style = solid, label="counts"];
29->25 [style = bold, label=""];
10->3 [style = bold, label=""];
26->9 [style = bold, label=""];
22->28 [style = bold, label=""];
3->15 [style = bold, label=""];
24->29 [style = bold, label=""];
17->30 [style = bold, label=""];
7->8 [style = bold, label=""];
25->17 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
9->21 [style = solid, label="defaultApiTimeout"];
20->18 [style = bold, label=""];
9->10 [style = solid, label="defaultApiTimeout"];
3->5 [style = bold, label=""];
30->21 [style = bold, label=""];
18->22 [style = bold, label=""];
8->2 [style = bold, label=""];
5->12 [style = bold, label=""];
0->4 [style = bold, label=""];
11->10 [style = bold, label=""];
6->11 [style = bold, label=""];
19->27 [style = bold, label=""];
4->20 [style = bold, label=""];
28->24 [style = bold, label=""];
8->18 [style = dashed, label="0"];
27->23 [style = bold, label=""];
5->15 [style = dashed, label="0"];
13->14 [style = bold, label=""];
16->9 [style = bold, label=""];
}
