digraph {
6 [style = filled, label = "Assert.assertEquals(new TaskStatusResponse(\"othertask\",null),taskStatusResponse2)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\")).andReturn(null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final TaskStatus status = TaskStatus.running(\"mytask\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final Response response2 = overlordResource.getTaskPayload(\"othertask\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testGetTaskStatus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(tsp.getStatusCode(),tsp.getStatus())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testGetTaskStatus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\")).andReturn(new TaskInfo<>(task.getId(),DateTimes.of(\"2018-01-01\"),status,task.getDataSource(),task))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\")).andReturn(new TaskInfo(task.getId(),DateTimes.of(\"2018-01-01\"),status,task.getDataSource(),task))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "TaskStatusPlus tsp = taskStatusResponse1.getStatus()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(new TaskStatusResponse(\"mytask\",new TaskStatusPlus(\"mytask\",\"noop\",DateTimes.of(\"2018-01-01\"),DateTimes.EPOCH,TaskState.RUNNING,RunnerTaskState.RUNNING,-1L,TaskLocation.unknown(),task.getDataSource(),null)),taskStatusResponse1)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\")).andReturn(Optional.absent())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final Task task = NoopTask.create(\"mytask\",0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(taskRunner.getKnownTasks()).andReturn(ImmutableList.of())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Response response1 = overlordResource.getTaskStatus(\"mytask\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(new TaskStatusResponse(\"mytask\",new TaskStatusPlus(\"mytask\",\"mytask\",\"noop\",DateTimes.of(\"2018-01-01\"),DateTimes.EPOCH,TaskState.RUNNING,RunnerTaskState.RUNNING,-1L,TaskLocation.unknown(),task.getDataSource(),null)),taskStatusResponse1)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(new TaskPayloadResponse(\"mytask\",task),taskPayloadResponse1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final Response response1 = overlordResource.getTaskPayload(\"mytask\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\")).andReturn(Optional.of(task))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Response response2 = overlordResource.getTaskStatus(\"othertask\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.replay(taskRunner,taskMaster,taskStorageQueryAdapter,indexerMetadataStorageAdapter,req,workerTaskRunnerQueryAdapter)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final NoopTask task = NoopTask.create(\"mydatasource\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(new TaskPayloadResponse(\"othertask\",null),taskPayloadResponse2)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testGetTaskPayload['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
13->1 [style = solid, label="status"];
8->19 [style = dashed, label="0"];
17->5 [style = bold, label=""];
14->25 [style = bold, label=""];
5->9 [style = bold, label=""];
16->8 [style = bold, label=""];
27->14 [style = bold, label=""];
21->27 [style = bold, label=""];
2->6 [style = bold, label=""];
25->23 [style = bold, label=""];
19->20 [style = bold, label=""];
0->12 [style = bold, label=""];
8->17 [style = solid, label="task"];
10->0 [style = solid, label="taskStatusResponse1"];
0->15 [style = dashed, label="0"];
10->3 [style = bold, label=""];
22->24 [style = solid, label="taskPayloadResponse2"];
13->17 [style = solid, label="status"];
7->0 [style = bold, label=""];
1->18 [style = dashed, label="0"];
19->25 [style = solid, label="task"];
26->19 [style = bold, label=""];
13->1 [style = bold, label=""];
10->15 [style = solid, label="taskStatusResponse1"];
20->18 [style = bold, label=""];
13->17 [style = bold, label=""];
12->2 [style = bold, label=""];
1->17 [style = dashed, label="0"];
23->22 [style = bold, label=""];
3->7 [style = bold, label=""];
11->10 [style = bold, label=""];
8->1 [style = solid, label="task"];
9->14 [style = bold, label=""];
4->8 [style = bold, label=""];
7->15 [style = bold, label=""];
15->12 [style = bold, label=""];
11->27 [style = dashed, label="0"];
18->21 [style = bold, label=""];
22->24 [style = bold, label=""];
14->25 [style = solid, label="taskPayloadResponse1"];
14->11 [style = bold, label=""];
10->14 [style = dashed, label="0"];
8->13 [style = bold, label=""];
19->20 [style = solid, label="task"];
2->6 [style = solid, label="taskStatusResponse2"];
}
