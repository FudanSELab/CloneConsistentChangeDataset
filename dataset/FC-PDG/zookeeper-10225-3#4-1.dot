digraph {
0 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "clientSocket.getOutputStream().flush()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "serverThread.start()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "secureClientSocket = connectWithSSL()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerDisconnectedClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "badClientSocket = connectWithoutSSL()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{forceClose(clientSocket)forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertTrue(handshakeCompleted)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "handshakeCompletedLock@@@18@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testTLSDetectionNonBlockingNonStrictServerIdleClient['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "forceClose(badClientSocket)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertFalse(handshakeCompleted)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "clientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "clientSocket = connectWithoutSSL()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Socket badClientSocket = connectWithoutSSL()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "buf = new byte((((@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Socket badClientSocket = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "byte(( buf = new byte((((@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "serverThread.start()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "handshakeCompletedLock@@@29@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Socket clientSocket = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertFalse(handshakeCompleted)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "clientSocket = connectWithoutSSL()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int bytesRead = clientSocket.getInputStream().read(buf,0,buf.length)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Socket secureClientSocket = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "!handshakeCompleted@@@30@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(1))@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->39 [style = bold, label=""];
10->20 [style = solid, label="buf"];
40->2 [style = bold, label=""];
16->13 [style = bold, label=""];
30->13 [style = bold, label=""];
10->15 [style = bold, label=""];
35->18 [style = bold, label=""];
10->15 [style = solid, label="buf"];
15->34 [style = bold, label=""];
25->22 [style = bold, label=""];
29->30 [style = bold, label=""];
5->21 [style = solid, label="bytesRead"];
4->1 [style = dotted, label="true"];
0->19 [style = bold, label=""];
2->6 [style = bold, label=""];
8->18 [style = bold, label=""];
20->26 [style = bold, label=""];
24->35 [style = bold, label=""];
26->29 [style = bold, label=""];
27->28 [style = bold, label=""];
28->11 [style = bold, label=""];
7->25 [style = solid, label="buf"];
8->35 [style = dashed, label="0"];
4->39 [style = dotted, label="true"];
10->36 [style = solid, label="buf"];
18->17 [style = bold, label=""];
12->20 [style = bold, label=""];
39->3 [style = bold, label=""];
15->12 [style = solid, label="bytesRead"];
7->38 [style = solid, label="buf"];
26->33 [style = dashed, label="0"];
31->38 [style = bold, label=""];
40->3 [style = solid, label="clientSocket"];
1->0 [style = bold, label=""];
21->25 [style = bold, label=""];
44->43 [style = solid, label="badClientSocket"];
11->24 [style = bold, label=""];
36->33 [style = bold, label=""];
8->44 [style = bold, label=""];
37->4 [style = bold, label=""];
44->43 [style = bold, label=""];
22->4 [style = bold, label=""];
33->29 [style = bold, label=""];
5->31 [style = solid, label="bytesRead"];
9->23 [style = bold, label=""];
5->21 [style = bold, label=""];
43->40 [style = bold, label=""];
21->31 [style = dashed, label="0"];
17->44 [style = dashed, label="0"];
7->5 [style = bold, label=""];
22->37 [style = dashed, label="0"];
25->38 [style = dashed, label="0"];
5->31 [style = bold, label=""];
16->30 [style = dashed, label="0"];
20->36 [style = dashed, label="0"];
38->37 [style = bold, label=""];
17->14 [style = bold, label=""];
42->11 [style = bold, label=""];
19->39 [style = dashed, label="0"];
6->10 [style = bold, label=""];
34->36 [style = bold, label=""];
29->30 [style = dotted, label="true"];
13->3 [style = solid, label="secureClientSocket"];
14->2 [style = bold, label=""];
15->12 [style = bold, label=""];
13->9 [style = bold, label=""];
23->7 [style = bold, label=""];
4->1 [style = bold, label=""];
24->8 [style = bold, label=""];
17->3 [style = solid, label="badClientSocket"];
1->19 [style = bold, label=""];
1->0 [style = dotted, label="true"];
32->28 [style = bold, label=""];
29->16 [style = bold, label=""];
19->3 [style = bold, label=""];
29->16 [style = dotted, label="true"];
7->5 [style = solid, label="buf"];
15->34 [style = solid, label="bytesRead"];
12->34 [style = dashed, label="0"];
4->19 [style = dotted, label="true"];
0->39 [style = bold, label=""];
41->42 [style = bold, label=""];
14->3 [style = solid, label="clientSocket"];
}
