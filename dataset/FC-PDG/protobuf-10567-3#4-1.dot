digraph {
23 [style = filled, label = "assertTrue(string.endsWith(ByteString.EMPTY))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertFalse(ByteString.EMPTY.endsWith(suffix))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(suffix.startsWith(prefix)).isFalse()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testStartsWith['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertTrue(string.startsWith(ByteString.EMPTY))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "ByteString suffix = ByteString.copyFrom(bytes,400,600)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(string.startsWith(string)).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testEndsWith['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertTrue(string.endsWith(suffix))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertTrue(ByteString.EMPTY.endsWith(ByteString.EMPTY))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertFalse(prefix.endsWith(suffix))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(string.startsWith(suffix)).isFalse()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(prefix.startsWith(suffix)).isFalse()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertFalse(string.startsWith(suffix))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertTrue(string.startsWith(string))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertFalse(ByteString.EMPTY.startsWith(prefix))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(ByteString.EMPTY.startsWith(ByteString.EMPTY))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertTrue(string.endsWith(string))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertFalse(prefix.startsWith(suffix))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertTrue(string.startsWith(prefix))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(ByteString.EMPTY.startsWith(prefix)).isFalse()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertFalse(suffix.endsWith(prefix))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(string.startsWith(prefix)).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertFalse(string.endsWith(prefix))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "byte(( bytes = getTestBytes(1000,1234L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testStartsWith['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ByteString string = ByteString.copyFrom(bytes)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(string.startsWith(ByteString.EMPTY)).isTrue()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertFalse(suffix.startsWith(prefix))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "ByteString prefix = ByteString.copyFrom(bytes,0,500)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertThat(ByteString.EMPTY.startsWith(ByteString.EMPTY)).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
5->8 [style = bold, label=""];
15->14 [style = bold, label=""];
4->27 [style = solid, label="suffix"];
4->12 [style = solid, label="suffix"];
0->1 [style = solid, label="prefix"];
26->29 [style = bold, label=""];
30->27 [style = bold, label=""];
12->11 [style = bold, label=""];
4->19 [style = bold, label=""];
18->15 [style = bold, label=""];
25->3 [style = bold, label=""];
0->8 [style = solid, label="prefix"];
3->0 [style = solid, label="bytes"];
7->20 [style = dashed, label="0"];
22->28 [style = bold, label=""];
0->30 [style = solid, label="prefix"];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
8->14 [style = dashed, label="0"];
10->22 [style = dashed, label="0"];
1->28 [style = dashed, label="0"];
2->22 [style = solid, label="string"];
9->23 [style = dashed, label="0"];
8->7 [style = bold, label=""];
19->16 [style = bold, label=""];
24->30 [style = bold, label=""];
9->19 [style = dashed, label="0"];
4->26 [style = solid, label="suffix"];
11->5 [style = bold, label=""];
5->27 [style = dashed, label="0"];
4->11 [style = solid, label="suffix"];
2->0 [style = bold, label=""];
0->24 [style = solid, label="prefix"];
4->28 [style = solid, label="suffix"];
23->22 [style = bold, label=""];
1->17 [style = dashed, label="0"];
3->2 [style = bold, label=""];
2->10 [style = solid, label="string"];
0->4 [style = bold, label=""];
11->18 [style = dashed, label="0"];
3->4 [style = solid, label="bytes"];
12->24 [style = dashed, label="0"];
1->12 [style = bold, label=""];
28->24 [style = bold, label=""];
7->29 [style = dashed, label="0"];
17->13 [style = bold, label=""];
10->16 [style = dashed, label="0"];
12->13 [style = dashed, label="0"];
3->2 [style = solid, label="bytes"];
11->30 [style = dashed, label="0"];
10->1 [style = bold, label=""];
5->15 [style = dashed, label="0"];
8->26 [style = dashed, label="0"];
0->5 [style = solid, label="prefix"];
4->23 [style = bold, label=""];
13->18 [style = bold, label=""];
14->20 [style = bold, label=""];
21->3 [style = bold, label=""];
27->26 [style = bold, label=""];
}
