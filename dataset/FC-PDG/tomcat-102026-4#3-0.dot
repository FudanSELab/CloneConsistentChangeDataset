digraph {
24 [style = filled, label = "valve.setInterruptThreadThreshold(5)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "StuckThreadDetectionValve valve = new StuckThreadDetectionValve()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(result.toString().startsWith(\"OK\"))@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertFalse(stuckingServlet.wasInterrupted)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "asyncThread.start()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(0,valve.getStuckThreadIds().length)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final ByteChunk result = new ByteChunk()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "tomcat.start()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "StuckingServlet stuckingServlet = new StuckingServlet(5000L)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Thread.sleep(1000L)@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "context.setBackgroundProcessorDelay(1)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Wrapper servlet = Tomcat.addServlet(context,\"myservlet\",stuckingServlet)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(0,valve.getStuckThreadIds().length)@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(0,valve.getStuckThreadIds().length)@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Thread.sleep(3000L)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Thread asyncThread = new Thread(){@Override public void run(){try {getUrl(\"http://localhost:\" + getPort() + \"/myservlet\",result,null)}catch (IOException e) }}@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(result.toString().startsWith(\"OK\"))@@@31@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "StuckingServlet stuckingServlet = new StuckingServlet(TimeUnit.SECONDS.toMillis(20L))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(1,valve.getStuckThreadIds().length)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testDetection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Thread.sleep(4000L)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "asyncThread.join()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(stuckingServlet.wasInterrupted)@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "context.addValve(valve)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(1,valve.getStuckThreadIds().length)@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testInterruption['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testInterruption['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "servlet.addMapping(\"/myservlet\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Thread.sleep(3000L)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Thread.sleep(2000L)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "valve.setInterruptThreadThreshold(4)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "valve.setThreshold(2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(0,valve.getStuckThreadIds().length)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "{asyncThread.join()}@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->26 [style = bold, label=""];
10->15 [style = bold, label=""];
30->33 [style = bold, label=""];
21->0 [style = bold, label=""];
19->12 [style = bold, label=""];
9->24 [style = dashed, label="0"];
7->10 [style = bold, label=""];
19->12 [style = solid, label="result"];
10->24 [style = bold, label=""];
31->0 [style = bold, label=""];
11->21 [style = bold, label=""];
25->14 [style = bold, label=""];
20->1 [style = bold, label=""];
16->19 [style = bold, label=""];
15->3 [style = bold, label=""];
12->6 [style = bold, label=""];
8->0 [style = dashed, label="0"];
14->33 [style = dashed, label="0"];
4->7 [style = bold, label=""];
8->22 [style = bold, label=""];
1->17 [style = bold, label=""];
6->2 [style = bold, label=""];
5->16 [style = bold, label=""];
21->31 [style = dashed, label="0"];
28->0 [style = bold, label=""];
11->31 [style = bold, label=""];
3->5 [style = bold, label=""];
23->22 [style = bold, label=""];
0->23 [style = bold, label=""];
18->4 [style = bold, label=""];
22->20 [style = bold, label=""];
22->27 [style = bold, label=""];
33->18 [style = bold, label=""];
9->15 [style = bold, label=""];
0->1 [style = bold, label=""];
0->8 [style = bold, label=""];
1->32 [style = bold, label=""];
14->18 [style = bold, label=""];
10->9 [style = bold, label=""];
26->28 [style = bold, label=""];
27->29 [style = bold, label=""];
33->18 [style = solid, label="stuckingServlet"];
13->14 [style = bold, label=""];
14->18 [style = solid, label="stuckingServlet"];
2->11 [style = bold, label=""];
32->17 [style = bold, label=""];
24->15 [style = bold, label=""];
7->15 [style = solid, label="valve"];
}
