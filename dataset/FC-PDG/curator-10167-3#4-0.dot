digraph {
11 [style = filled, label = "closeables.add(discovery)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<ServiceInstance<String>> list = Lists.newArrayList()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "timing.sleepABit()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testUnregisterService['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "list.add(instance)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ServiceInstance<String> instance = ServiceInstance.builder().payload(\"thing\").name(name).port(10064).build()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(discovery.queryForInstances(\"test\"),list)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "{Collections.reverse(closeables)for (Closeable c : closeables){CloseableUtils.closeQuietly(c)}}@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Timing timing = new Timing()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "List<Closeable> closeables = Lists.newArrayList()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "server.restart()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(discovery.queryForInstances(name).isEmpty(),\"Service should have unregistered.\")@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "discovery.unregisterService(instance)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "server.stop()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testNoServerOnStart['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "closeables.add(client)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "closeables.add(discovery)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertFalse(discovery.queryForInstances(name).isEmpty(),\"Service should start registered.\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "restartLatch.countDown()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder().basePath(\"/test\").client(client).thisInstance(instance).serializer(slowSerializer).watchInstances(true).build()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final CountDownLatch restartLatch = new CountDownLatch(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "InstanceSerializer<String> slowSerializer = new JsonInstanceSerializer<String>(){@Override public byte(( serialize(ServiceInstance<String> instance){if (first) {System.out.println(\"Serializer first registration.\")first = false}{System.out.println(\"Waiting for reconnect to finish.\")restartLatch.await()}return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1205e9cinstance}}@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "discovery.start()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.start()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testNoServerOnStart['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "final String name = \"name\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<Closeable> closeables = Lists.newArrayList()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "server.stop()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "{Collections.reverse(closeables)for (Closeable c : closeables){CloseableUtils.closeQuietly(c)}}@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "new Timing().sleepABit()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ServiceDiscovery<String> discovery = ServiceDiscoveryBuilder.builder().basePath(\"/test\").client(client).thisInstance(instance).build()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->3 [style = bold, label=""];
4->31 [style = dashed, label="0"];
8->5 [style = bold, label=""];
23->19 [style = bold, label=""];
22->0 [style = bold, label=""];
30->11 [style = solid, label="discovery"];
28->26 [style = bold, label=""];
6->32 [style = dashed, label="0"];
20->22 [style = bold, label=""];
16->8 [style = bold, label=""];
7->30 [style = dashed, label="0"];
30->11 [style = bold, label=""];
9->0 [style = bold, label=""];
5->9 [style = bold, label=""];
20->29 [style = solid, label="closeables"];
3->13 [style = bold, label=""];
15->6 [style = bold, label=""];
11->2 [style = bold, label=""];
2->28 [style = bold, label=""];
13->4 [style = solid, label="list"];
1->11 [style = bold, label=""];
2->3 [style = bold, label=""];
19->21 [style = bold, label=""];
27->24 [style = bold, label=""];
0->15 [style = bold, label=""];
2->18 [style = bold, label=""];
21->20 [style = bold, label=""];
6->32 [style = bold, label=""];
24->31 [style = bold, label=""];
10->4 [style = bold, label=""];
5->14 [style = solid, label="closeables"];
3->25 [style = bold, label=""];
7->1 [style = solid, label="discovery"];
4->14 [style = bold, label=""];
6->10 [style = solid, label="instance"];
32->30 [style = bold, label=""];
7->1 [style = bold, label=""];
31->29 [style = bold, label=""];
0->15 [style = solid, label="client"];
6->7 [style = bold, label=""];
13->10 [style = bold, label=""];
26->3 [style = bold, label=""];
25->27 [style = bold, label=""];
9->0 [style = solid, label="client"];
17->16 [style = bold, label=""];
12->8 [style = bold, label=""];
32->25 [style = solid, label="instance"];
}
