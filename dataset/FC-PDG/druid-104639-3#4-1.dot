digraph {
8 [style = filled, label = "cf.create().creatingParentsIfNeeded().forPath(JOINER.join(TASKS_PATH,task.getId()),jsonMapper.writeValueAsBytes(task))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testRunTask['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testRunTask['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(task.getId(),taskAnnouncement.getTaskStatus().getId())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "cf.create().creatingParentsIfNeeded().forPath(joiner.join(tasksPath,task.getId()),jsonMapper.writeValueAsBytes(task))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(0,cf.checkExists().forPath(joiner.join(statusPath,task.getId())).getEphemeralOwner())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TaskAnnouncement taskAnnouncement = jsonMapper.readValue(cf.getData().forPath(joiner.join(statusPath,task.getId())),)@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "TaskAnnouncement taskAnnouncement = jsonMapper.readValue(cf.getData().forPath(JOINER.join(STATUS_PATH,task.getId())),)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertTrue(TestUtils.conditionValid(new IndexingServiceCondition(){@Override public boolean isValid(){try {return cf.checkExists().forPath(joiner.join(statusPath,task.getId())) != null}catch (Exception e) }}))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "cf.create().creatingParentsIfNeeded().forPath(joiner.join(tasksPath,task.getId()),jsonMapper.writeValueAsBytes(task))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,taskAnnouncement.getTaskStatus().getStatusCode())@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testStatusAnnouncementsArePersistent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(TestUtils.conditionValid(new IndexingServiceCondition(){@Override public boolean isValid(){try {return cf.checkExists().forPath(JOINER.join(TASKS_PATH,task.getId())) == null}catch (Exception e) }}))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
9->3 [style = bold, label=""];
0->8 [style = dashed, label="0"];
5->2 [style = bold, label=""];
11->12 [style = bold, label=""];
8->4 [style = bold, label=""];
5->7 [style = dashed, label="0"];
12->4 [style = bold, label=""];
0->4 [style = bold, label=""];
4->5 [style = bold, label=""];
2->6 [style = bold, label=""];
3->8 [style = bold, label=""];
7->2 [style = bold, label=""];
4->7 [style = bold, label=""];
3->0 [style = bold, label=""];
5->4 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
