digraph {
23 [style = filled, label = "testReconnectAfterAddressChange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "NetworkClient client = new NetworkClient(metadataUpdater,null,selector,\"mock\",Integer.MAX_VALUE,reconnectBackoffMsTest,reconnectBackoffMaxMsTest,64 * 1024,64 * 1024,defaultRequestTimeoutMs,connectionSetupTimeoutMsTest,connectionSetupTimeoutMaxMsTest,ClientDnsLookup.USE_ALL_DNS_IPS,time,false,new ApiVersions(),null,new LogContext(),mockHostResolver)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "client.ready(node,time.milliseconds())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "client.poll(0,time.milliseconds())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(0,newAddressConns.get())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "selector.serverDisconnect(node.idString())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(client.isReady(node,time.milliseconds()))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "time.sleep(connectionSetupTimeoutMaxMsTest)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "mockHostResolver.changeAddresses()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(1,newAddressConns.get())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "NetworkClient client = new NetworkClient(metadataUpdater,null,selector,\"mock\",Integer.MAX_VALUE,reconnectBackoffMsTest,reconnectBackoffMaxMsTest,64 * 1024,64 * 1024,defaultRequestTimeoutMs,connectionSetupTimeoutMsTest,connectionSetupTimeoutMaxMsTest,time,false,new ApiVersions(),null,new LogContext(),mockHostResolver)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "AtomicInteger initialAddressConns = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "time.sleep(connectionSetupTimeoutMaxMsTest)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(2,mockHostResolver.resolutionCount())@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AtomicInteger newAddressConns = new AtomicInteger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "client.poll(0,time.milliseconds())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(1,mockHostResolver.resolutionCount())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(1,initialAddressConns.get())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.poll(0,time.milliseconds())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertFalse(client.isReady(node,time.milliseconds()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testReconnectAfterAddressChange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(client.isReady(node,time.milliseconds()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "client.ready(node,time.milliseconds())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(initialAddresses.toArray(new InetAddress((((),newAddresses.toArray(new InetAddress(((())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(2,initialAddressConns.get())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testFailedConnectionToFirstAddress['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "MockSelector selector = new MockSelector(this.time,null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "time.sleep(reconnectBackoffMaxMsTest)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
23->5 [style = bold, label=""];
19->20 [style = bold, label=""];
11->21 [style = bold, label=""];
26->25 [style = bold, label=""];
20->14 [style = bold, label=""];
5->18 [style = bold, label=""];
9->10 [style = bold, label=""];
12->1 [style = bold, label=""];
1->13 [style = bold, label=""];
17->19 [style = bold, label=""];
0->15 [style = bold, label=""];
3->0 [style = bold, label=""];
2->12 [style = bold, label=""];
15->26 [style = bold, label=""];
25->24 [style = bold, label=""];
13->17 [style = bold, label=""];
8->2 [style = bold, label=""];
15->9 [style = bold, label=""];
7->6 [style = bold, label=""];
12->22 [style = dashed, label="0"];
9->26 [style = dashed, label="0"];
10->4 [style = bold, label=""];
16->5 [style = bold, label=""];
2->22 [style = solid, label="selector"];
21->7 [style = bold, label=""];
5->12 [style = solid, label="mockHostResolver"];
18->8 [style = bold, label=""];
22->1 [style = bold, label=""];
27->5 [style = bold, label=""];
4->24 [style = dashed, label="0"];
2->22 [style = bold, label=""];
5->22 [style = solid, label="mockHostResolver"];
14->11 [style = bold, label=""];
17->21 [style = bold, label=""];
10->25 [style = dashed, label="0"];
2->12 [style = solid, label="selector"];
}
