digraph {
18 [style = filled, label = "AntAssert.assertContains(\"Processing File\",buildRule.getLog())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "expectLogContaining(\"testOverwriteTrue\",\"Processing File\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "long lastModified = f.lastModified()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assumeTrue(\"Could not change file modificaiton date\",f.setLastModified(f.lastModified() - (FILE_UTILS.getFileTimestampGranularity() * 2)))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "InterruptedException e@@@9@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "File f = new File(getOutputDir(),LARGEIMAGE)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectLogContaining(\"testSimpleScale\",\"Processing File\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "f = new File(getOutputDir(),LARGEIMAGE)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "File f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertTrue(\"File was not overwritten.\",lastModified < overwrittenLastModified)@@@14@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "f = new File(getOutputDir(),LARGEIMAGE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(\"File was not overwritten.\",lastModified < overwrittenLastModified)@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "expectLogContaining(\"testOverwriteFalse\",\"Processing File\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testOverwriteFalse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "AntAssert.assertContains(\"Processing File\",buildRule.getLog())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "{}@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertTrue(\"File was overwritten.\",lastModified == overwrittenLastModified)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "buildRule.executeTarget(\"testOverwriteTrue\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "buildRule.executeTarget(\"testSimpleScale\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testOverwriteTrue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testOverwriteTrue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "long lastModified = f.lastModified()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->19 [style = solid, label="lastModified"];
25->1 [style = bold, label=""];
24->21 [style = solid, label="overwrittenLastModified"];
11->14 [style = bold, label=""];
19->20 [style = bold, label=""];
18->11 [style = bold, label=""];
4->8 [style = solid, label="lastModified"];
5->15 [style = bold, label=""];
16->17 [style = bold, label=""];
9->8 [style = bold, label=""];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
22->23 [style = bold, label=""];
4->24 [style = solid, label="lastModified"];
17->19 [style = bold, label=""];
1->13 [style = dashed, label="0"];
8->0 [style = bold, label=""];
12->13 [style = bold, label=""];
4->21 [style = solid, label="lastModified"];
19->20 [style = solid, label="overwrittenLastModified"];
23->24 [style = bold, label=""];
8->0 [style = solid, label="overwrittenLastModified"];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
24->21 [style = bold, label=""];
5->20 [style = solid, label="lastModified"];
0->21 [style = dashed, label="0"];
7->6 [style = bold, label=""];
4->0 [style = solid, label="lastModified"];
1->2 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
4->5 [style = bold, label=""];
4->22 [style = bold, label=""];
13->18 [style = bold, label=""];
14->5 [style = bold, label=""];
}
