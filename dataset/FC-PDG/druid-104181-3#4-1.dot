digraph {
26 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\",null,null,false){@Override public List<String> getDataSources(){return Collections.singletonList(\"datasource1\")}}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(running)).atLeastOnce()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\",null,null,true){@Override public List<String> getDataSources(){return Collections.singletonList(\"datasource1\")}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\",null,null,true){@Override public List<String> getDataSources(){return Collections.singletonList(\"datasource1\")}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testSpecSuspend['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(400,response.getStatus())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(running.id,responseSpec.id)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "replayAll()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testSpecResume['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"error\",\"(my-id( is already suspended\"),response.getEntity())@@@27@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\",false)).andReturn(true)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "verifyAll()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(suspended.suspended,responseSpec.suspended)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\",null,null,false){@Override public List<String> getDataSources(){return Collections.singletonList(\"datasource1\")}}@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"error\",\"(my-id( is already running\"),response.getEntity())@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended)).times(1).andReturn(Optional.of(running)).times(1)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testSpecSuspend['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\",true)).andReturn(false)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended)).atLeastOnce()@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(running)).times(1).andReturn(Optional.of(suspended)).times(1)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "verifyAll()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(400,response.getStatus())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "replayAll()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(running.suspended,responseSpec.suspended)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(suspended.id,responseSpec.id)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "replayAll()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Response response = supervisorResource.specSuspend(\"my-id\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "resetAll()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "response = supervisorResource.specResume(\"my-id\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Response response = supervisorResource.specResume(\"my-id\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\",true)).andReturn(true)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestSupervisorSpec responseSpec = (TestSupervisorSpec)response.getEntity()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->33 [style = bold, label=""];
4->3 [style = bold, label=""];
0->26 [style = solid, label="suspended"];
12->5 [style = bold, label=""];
26->7 [style = bold, label=""];
18->23 [style = bold, label=""];
12->35 [style = dashed, label="0"];
30->32 [style = solid, label="suspended"];
3->31 [style = dashed, label="0"];
10->34 [style = dashed, label="0"];
24->0 [style = bold, label=""];
31->13 [style = bold, label=""];
2->3 [style = bold, label=""];
27->30 [style = bold, label=""];
22->9 [style = bold, label=""];
36->4 [style = bold, label=""];
0->5 [style = solid, label="suspended"];
35->32 [style = bold, label=""];
1->18 [style = bold, label=""];
10->17 [style = bold, label=""];
11->12 [style = bold, label=""];
30->36 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
15->19 [style = bold, label=""];
0->22 [style = solid, label="suspended"];
3->22 [style = bold, label=""];
32->6 [style = bold, label=""];
11->35 [style = bold, label=""];
19->0 [style = bold, label=""];
20->21 [style = bold, label=""];
5->32 [style = dashed, label="0"];
1->28 [style = bold, label=""];
21->29 [style = bold, label=""];
8->20 [style = bold, label=""];
19->30 [style = dashed, label="0"];
5->6 [style = bold, label=""];
4->37 [style = bold, label=""];
16->1 [style = bold, label=""];
37->31 [style = bold, label=""];
0->4 [style = bold, label=""];
17->14 [style = bold, label=""];
20->25 [style = dashed, label="0"];
2->37 [style = dashed, label="0"];
34->17 [style = bold, label=""];
6->8 [style = bold, label=""];
7->16 [style = bold, label=""];
25->26 [style = bold, label=""];
3->13 [style = bold, label=""];
18->28 [style = dashed, label="0"];
21->7 [style = bold, label=""];
7->29 [style = dashed, label="0"];
13->9 [style = bold, label=""];
20->33 [style = dashed, label="0"];
0->36 [style = dashed, label="0"];
33->21 [style = bold, label=""];
14->11 [style = bold, label=""];
8->25 [style = bold, label=""];
29->16 [style = bold, label=""];
13->22 [style = dashed, label="0"];
9->34 [style = bold, label=""];
}
