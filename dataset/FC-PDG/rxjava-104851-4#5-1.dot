digraph {
20 [style = filled, label = "Observable<Integer> source = Observable.fromIterable(list)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Function<Integer,Observable<Integer>> func@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<Integer> list = new ArrayList<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Function<Integer,Flowable<Integer>> func@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ts.values().size() != 1000@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ts.assertNoErrors()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "System.out.println(to.values())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "TestSubscriberEx<Integer> ts@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ts.assertValueSequence(list)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "to.assertTerminated()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "source.flatMap(func).subscribe(to)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "list.add(i)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Integer> list = new ArrayList<Integer>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "System.out.println(ts.values())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "runMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "runMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Flowable<Integer> source = Flowable.fromIterable(list)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "to.assertNoErrors()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ts.assertTerminated()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i < 1000@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Function<Integer,Flowable<Integer>> func@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "source.flatMap(func).subscribe(ts)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "runMerge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "to.assertValueSequence(list)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "to.values().size() != 1000@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "TestObserverEx<Integer> to@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4->7 [style = solid, label="i"];
4->12 [style = solid, label="i"];
4->9 [style = solid, label="i"];
13->10 [style = solid, label="ts"];
11->20 [style = dashed, label="0"];
16->13 [style = dotted, label="true"];
21->27 [style = bold, label=""];
7->12 [style = bold, label=""];
24->25 [style = dotted, label="true"];
2->6 [style = bold, label=""];
20->26 [style = bold, label=""];
16->15 [style = dotted, label="true"];
12->11 [style = bold, label=""];
17->6 [style = solid, label="list"];
18->19 [style = bold, label=""];
18->19 [style = dotted, label="true"];
12->20 [style = bold, label=""];
8->14 [style = bold, label=""];
2->27 [style = dashed, label="0"];
1->21 [style = dashed, label="0"];
16->17 [style = bold, label=""];
13->25 [style = dashed, label="0"];
9->7 [style = bold, label=""];
12->9 [style = bold, label=""];
27->22 [style = bold, label=""];
23->26 [style = solid, label="to"];
6->22 [style = dashed, label="0"];
17->11 [style = solid, label="list"];
7->9 [style = solid, label="i"];
14->1 [style = bold, label=""];
24->5 [style = bold, label=""];
7->12 [style = solid, label="i"];
8->1 [style = bold, label=""];
3->5 [style = bold, label=""];
10->26 [style = dashed, label="0"];
24->23 [style = dotted, label="true"];
5->17 [style = dashed, label="0"];
10->8 [style = bold, label=""];
11->10 [style = bold, label=""];
8->14 [style = dotted, label="true"];
5->4 [style = bold, label=""];
3->0 [style = dotted, label="true"];
5->20 [style = solid, label="list"];
5->11 [style = solid, label="list"];
4->12 [style = bold, label=""];
5->6 [style = solid, label="list"];
8->18 [style = dashed, label="0"];
14->19 [style = dashed, label="0"];
1->2 [style = bold, label=""];
5->22 [style = solid, label="list"];
18->21 [style = bold, label=""];
12->7 [style = dotted, label="true"];
12->9 [style = dotted, label="true"];
17->4 [style = bold, label=""];
3->13 [style = dotted, label="true"];
26->18 [style = bold, label=""];
15->10 [style = solid, label="ts"];
19->21 [style = bold, label=""];
}
