digraph {
4 [style = filled, label = "testIncorrectSerializer1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testIncorrectSerializer1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "env.generateSequence(1,10 * PARLLELISM).map(new MapFunction<Long,ConsumesTooLittle>(){@Override public ConsumesTooLittle map(Long value){return new ConsumesTooLittle()}}).rebalance().output(new DiscardingOutputFormat<ConsumesTooLittle>())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "env.execute()@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "env.getConfig().disableSysoutLogging()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "env.generateSequence(1,10 * PARLLELISM).map(new MapFunction<Long,ConsumesTooMuch>(){@Override public ConsumesTooMuch map(Long value){return new ConsumesTooMuch()}}).rebalance().output(new DiscardingOutputFormat<ConsumesTooMuch>())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "env.setParallelism(PARLLELISM)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testIncorrectSerializer3['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->2 [style = bold, label=""];
7->0 [style = bold, label=""];
6->0 [style = bold, label=""];
1->8 [style = bold, label=""];
5->6 [style = bold, label=""];
2->8 [style = dashed, label="0"];
0->1 [style = bold, label=""];
2->3 [style = bold, label=""];
4->0 [style = bold, label=""];
8->3 [style = bold, label=""];
}
