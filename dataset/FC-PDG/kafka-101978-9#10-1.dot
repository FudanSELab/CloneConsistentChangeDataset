digraph {
30 [style = filled, label = "expectLastCall()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectLastCall()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(exception.getMessage(),is(\"Unexpected exception while closing task\"))@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "resetToStrict(changeLogReader)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId02))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions),mkEntry(taskId03,taskId03Partitions))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expectLastCall()@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final AtomicBoolean closedDirtyTask03 = new AtomicBoolean(false)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(task02.state(),is(Task.State.CREATED))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask02 = new AtomicBoolean(false)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "replay(activeTaskCreator,standbyTaskCreator,changeLogReader)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final Task task02 = new StateMachineTask(taskId02,taskId02Partitions,true){@Override public Map<TopicPartition,Long> prepareCloseClean(){throw new RuntimeException(\"oops\")}}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId00))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public Map<TopicPartition,Long> prepareCloseClean(){throw new TaskMigratedException(\"migrated\",new RuntimeException(\"cause\"))}}@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(closedDirtyTask03.get(),is(true))@@@92@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(task03.state(),is(Task.State.CREATED))@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02))))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final RuntimeException exception = assertThrows(,null)@@@86@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final TopicPartition changelog = new TopicPartition(\"changelog\",0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectLastCall()@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final AtomicBoolean closedDirtyTask02 = new AtomicBoolean(false)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(task03.state(),is(Task.State.RUNNING))@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask01 = new AtomicBoolean(false)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId03))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(prepareClosedDirtyTask01.get(),is(true))@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId01))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "expectLastCall()@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertThat(task03.state(),is(Task.State.CLOSED))@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@99@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(exception.getCause().getMessage(),is(\"oops\"))@@@98@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02)).anyTimes()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions),mkEntry(taskId02,taskId02Partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertThat(prepareClosedDirtyTask02.get(),is(true))@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@94@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01),mkEntry(taskId02,task02),mkEntry(taskId03,task03))))@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(closedDirtyTask01.get(),is(true))@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "taskManager.shutdown(false)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@52@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "verify(activeTaskCreator,changeLogReader)@@@101@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final AtomicBoolean prepareClosedDirtyTask03 = new AtomicBoolean(false)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(task02.state(),is(Task.State.CLOSED))@@@95@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "shouldCloseActiveTasksAndPropagateExceptionsOnCleanShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "assertThat(task01.state(),is(Task.State.CLOSED))@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final AtomicBoolean closedDirtyTask01 = new AtomicBoolean(false)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 2\"))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever all\"))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "shouldCloseActiveTasksAndIgnoreExceptionsOnUncleanShutdown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 0\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertThat(task00.state(),is(Task.State.CLOSED))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertThat(task01.state(),is(Task.State.RUNNING))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "expectLastCall().andThrow(new RuntimeException(\"whatever 1\"))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(task02.state(),is(Task.State.RUNNING))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public Collection<TopicPartition> changelogPartitions(){return singletonList(changelog)}}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andReturn(asList(task00,task01,task02,task03)).anyTimes()@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(prepareClosedDirtyTask03.get(),is(true))@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.anEmptyMap())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final Task task03 = new StateMachineTask(taskId03,taskId03Partitions,true){@Override public Map<TopicPartition,OffsetAndMetadata> committableOffsetsAndMetadata(){throw new RuntimeException(\"oops\")}@Override public void prepareCloseDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b813bfprepareClosedDirtyTask03.set(true)}@Override public void closeDirty(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b813c9closedDirtyTask03.set(true)}}@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(closedDirtyTask02.get(),is(true))@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "taskManager.tryToCompleteRestoration()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "activeTaskCreator.closeThreadProducerIfNeeded()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37->0 [style = bold, label=""];
12->44 [style = bold, label=""];
52->71 [style = bold, label=""];
20->26 [style = bold, label=""];
2->6 [style = bold, label=""];
22->37 [style = bold, label=""];
12->24 [style = solid, label="task01"];
54->19 [style = bold, label=""];
21->18 [style = bold, label=""];
14->7 [style = bold, label=""];
20->68 [style = dashed, label="0"];
28->21 [style = bold, label=""];
8->20 [style = bold, label=""];
71->64 [style = bold, label=""];
43->24 [style = bold, label=""];
51->61 [style = dashed, label="0"];
50->2 [style = solid, label="assignment"];
58->26 [style = solid, label="assignment"];
41->54 [style = bold, label=""];
30->8 [style = bold, label=""];
47->60 [style = bold, label=""];
9->52 [style = bold, label=""];
3->30 [style = bold, label=""];
4->24 [style = solid, label="task03"];
44->9 [style = solid, label="task02"];
60->66 [style = bold, label=""];
29->47 [style = bold, label=""];
16->3 [style = bold, label=""];
13->25 [style = bold, label=""];
40->50 [style = bold, label=""];
18->12 [style = bold, label=""];
31->2 [style = bold, label=""];
67->26 [style = bold, label=""];
64->35 [style = bold, label=""];
45->11 [style = bold, label=""];
44->4 [style = bold, label=""];
8->67 [style = bold, label=""];
44->41 [style = bold, label=""];
19->59 [style = dashed, label="0"];
58->42 [style = bold, label=""];
54->59 [style = bold, label=""];
51->27 [style = bold, label=""];
61->27 [style = bold, label=""];
43->9 [style = dashed, label="0"];
38->46 [style = bold, label=""];
57->65 [style = bold, label=""];
27->29 [style = bold, label=""];
70->40 [style = bold, label=""];
56->40 [style = bold, label=""];
29->69 [style = dashed, label="0"];
32->17 [style = bold, label=""];
47->16 [style = bold, label=""];
42->24 [style = solid, label="task00"];
39->13 [style = bold, label=""];
4->41 [style = bold, label=""];
59->53 [style = bold, label=""];
50->58 [style = dashed, label="0"];
52->43 [style = bold, label=""];
26->31 [style = bold, label=""];
1->34 [style = bold, label=""];
19->53 [style = bold, label=""];
7->28 [style = bold, label=""];
50->42 [style = bold, label=""];
17->49 [style = bold, label=""];
12->9 [style = solid, label="task01"];
34->39 [style = bold, label=""];
16->60 [style = dashed, label="0"];
22->10 [style = bold, label=""];
27->69 [style = bold, label=""];
49->15 [style = bold, label=""];
33->32 [style = bold, label=""];
46->23 [style = bold, label=""];
65->63 [style = bold, label=""];
10->37 [style = bold, label=""];
53->61 [style = bold, label=""];
0->9 [style = bold, label=""];
15->45 [style = bold, label=""];
11->38 [style = bold, label=""];
53->51 [style = bold, label=""];
24->35 [style = bold, label=""];
66->68 [style = bold, label=""];
35->33 [style = bold, label=""];
42->12 [style = bold, label=""];
5->14 [style = bold, label=""];
62->57 [style = bold, label=""];
6->36 [style = bold, label=""];
48->40 [style = bold, label=""];
44->24 [style = solid, label="task02"];
42->9 [style = solid, label="task00"];
55->1 [style = bold, label=""];
35->62 [style = bold, label=""];
69->47 [style = bold, label=""];
42->5 [style = bold, label=""];
68->8 [style = bold, label=""];
40->42 [style = solid, label="changelog"];
23->55 [style = bold, label=""];
40->58 [style = bold, label=""];
36->22 [style = bold, label=""];
}
