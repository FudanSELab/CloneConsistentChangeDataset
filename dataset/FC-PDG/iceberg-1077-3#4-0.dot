digraph {
4 [style = filled, label = "Schema mapOnly = writeSchema.select(\"properties\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(5,\"properties\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.StringType.get())))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "record.put(\"properties\",properties)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testMapProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Schema keyOnly = writeSchema.select(\"properties.key\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Map<String,String> properties = ImmutableMap.of(\"a\",\"A\",\"b\",\"B\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"properties\")@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "projected = writeAndRead(\"key_only\",writeSchema,keyOnly,record)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "record.put(\"id\",34L)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertNull(\"Should not project properties map\",projected.get(\"properties\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testMapProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "projected = writeAndRead(\"value_only\",writeSchema,valueOnly,record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "projected = writeAndRead(\"map_only\",writeSchema,mapOnly,record)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "TestHelpers.assertEmptyAvroField(projected,\"id\")@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Schema valueOnly = writeSchema.select(\"properties.value\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testMapProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22->2 [style = bold, label=""];
19->3 [style = bold, label=""];
12->26 [style = bold, label=""];
7->23 [style = bold, label=""];
2->19 [style = solid, label="writeSchema"];
21->14 [style = solid, label="properties"];
9->7 [style = solid, label="valueOnly"];
2->13 [style = solid, label="writeSchema"];
3->11 [style = bold, label=""];
2->7 [style = solid, label="writeSchema"];
13->26 [style = solid, label="projected"];
1->19 [style = solid, label="keyOnly"];
20->15 [style = bold, label=""];
18->5 [style = bold, label=""];
11->9 [style = bold, label=""];
17->14 [style = bold, label=""];
10->13 [style = solid, label="record"];
0->13 [style = bold, label=""];
4->20 [style = bold, label=""];
21->10 [style = bold, label=""];
10->18 [style = bold, label=""];
25->11 [style = bold, label=""];
16->2 [style = bold, label=""];
7->23 [style = solid, label="projected"];
19->25 [style = bold, label=""];
13->12 [style = bold, label=""];
5->0 [style = bold, label=""];
10->19 [style = solid, label="record"];
19->25 [style = solid, label="projected"];
10->20 [style = solid, label="record"];
20->24 [style = solid, label="projected"];
26->1 [style = bold, label=""];
10->7 [style = solid, label="record"];
2->20 [style = solid, label="writeSchema"];
21->11 [style = solid, label="properties"];
1->19 [style = bold, label=""];
4->20 [style = solid, label="mapOnly"];
23->14 [style = bold, label=""];
20->24 [style = bold, label=""];
7->17 [style = bold, label=""];
21->5 [style = solid, label="properties"];
2->10 [style = solid, label="writeSchema"];
14->4 [style = bold, label=""];
24->8 [style = bold, label=""];
15->8 [style = bold, label=""];
21->8 [style = solid, label="properties"];
6->1 [style = bold, label=""];
2->21 [style = bold, label=""];
12->6 [style = bold, label=""];
27->2 [style = bold, label=""];
0->13 [style = solid, label="idOnly"];
9->7 [style = bold, label=""];
}
