digraph {
18 [style = filled, label = "assertStream(stream(x,\"test1/dir/dir/\" + p)).asString().contains(\"(home:/files/test1/dir/dir/\" + p + \"(\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertStream(x.getStream(\" / files/test1/dir/dir/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/dir/\" + p + \"(\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "b02_fileSystem_subDir['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "b02_fileSystem_subDir['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertStream(x.getStream(\"_a.txt\")).asString().contains(\"(cp:/org/apache/juneau/cp/_a.txt(\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertStream(x.getStream(\"files/test1/dir/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/\" + p + \"(\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertStream(stream(x,\"/test1/dir/\" + p + \"/\")).asString().contains(\"(home:/files/test1/dir/\" + p + \"(\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertStream(x.getStream(\"test1/\" + p)).asString().contains(\"(home:/files/test1/\" + p + \"(\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertStream(x.getStream(p)).doesNotExist()@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "FileFinder x = FileFinder.create().dir(\"files\").build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertStream(stream(x,\"test1/\" + p)).asString().contains(\"(home:/files/test1/\" + p + \"(\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertStream(x.getStream(\" / files/test1/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/\" + p + \"(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertStream(x.getStream(\"/test1/dir/dir/\" + p + \"/\")).asString().contains(\"(home:/files/test1/dir/dir/\" + p + \"(\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertStream(x.getStream(\" / files/test1/dir/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/\" + p + \"(\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertStream(x.getStream(\"/test1/\" + p + \"/\")).asString().contains(\"(home:/files/test1/\" + p + \"(\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertStream(x.getStream(\"test1/dir/\" + p)).asString().contains(\"(home:/files/test1/dir/\" + p + \"(\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertStream(stream(x,\"test1/dir/\" + p)).asString().contains(\"(home:/files/test1/dir/\" + p + \"(\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertStream(stream(x,p)).doesNotExist()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertStream(x.getStream(\"test1/dir/dir/\" + p)).asString().contains(\"(home:/files/test1/dir/dir/\" + p + \"(\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertStream(stream(x,\"/test1/\" + p + \"/\")).asString().contains(\"(home:/files/test1/\" + p + \"(\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "String(( badPatterns = {\"files/test1/bad.txt\",\"files/test1/../test1/_a.txt\",\"files/bad.txt\",null,\"\",\".\",\"..\"}@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertStream(x.getStream(\"/test1/dir/\" + p + \"/\")).asString().contains(\"(home:/files/test1/dir/\" + p + \"(\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertStream(stream(x,\"/test1/dir/dir/\" + p + \"/\")).asString().contains(\"(home:/files/test1/dir/dir/\" + p + \"(\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertStream(x.getStream(\"files/test1/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/\" + p + \"(\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "d01a_classpathRelative_rootDir['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "FileFinder x = FileFinder.create().cp(,\"\",false).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertStream(x.getStream(\"files/test1/dir/dir/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/dir/\" + p + \"(\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String(( patterns = {\"_a.txt\",\"_b\",\".c\",\".d.txt\",\"e.txt\",\"f\",\"g_foo.txt\",\"h.foo.txt\",\"i_foo\"}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
27->1 [style = bold, label=""];
3->26 [style = dashed, label="0"];
7->14 [style = dashed, label="0"];
1->15 [style = bold, label=""];
0->23 [style = dashed, label="0"];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
5->24 [style = dashed, label="0"];
1->3 [style = bold, label=""];
22->21 [style = bold, label=""];
9->27 [style = dashed, label="0"];
8->12 [style = dashed, label="0"];
8->6 [style = bold, label=""];
21->25 [style = bold, label=""];
1->26 [style = bold, label=""];
19->6 [style = bold, label=""];
12->6 [style = bold, label=""];
24->22 [style = bold, label=""];
0->17 [style = dashed, label="0"];
5->18 [style = dashed, label="0"];
3->0 [style = bold, label=""];
20->27 [style = bold, label=""];
6->4 [style = bold, label=""];
15->17 [style = bold, label=""];
23->24 [style = bold, label=""];
2->21 [style = dashed, label="0"];
7->2 [style = bold, label=""];
2->16 [style = dashed, label="0"];
6->11 [style = bold, label=""];
26->23 [style = bold, label=""];
25->26 [style = bold, label=""];
25->19 [style = bold, label=""];
3->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
8->25 [style = dashed, label="0"];
10->9 [style = bold, label=""];
13->9 [style = bold, label=""];
4->11 [style = dashed, label="0"];
9->1 [style = bold, label=""];
16->12 [style = bold, label=""];
18->14 [style = bold, label=""];
7->22 [style = dashed, label="0"];
17->18 [style = bold, label=""];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
}
