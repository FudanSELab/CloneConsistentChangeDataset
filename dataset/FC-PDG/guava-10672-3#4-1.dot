digraph {
12 [style = filled, label = "removeEdge_existingEdge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertFalse(network.removeEdge(E12))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(network.removeEdge(E12))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assume().that(graphIsMutable()).isTrue()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(networkAsMutableNetwork.edges()).doesNotContain(E12)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(networkAsMutableNetwork.removeEdge(E12))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "removeEdge_existingEdge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(networkAsMutableNetwork.edgesConnecting(N1,N2)).isEmpty()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "addEdge(N1,N2,E12)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(network.edgesConnecting(N1,N2)).isEmpty()@@@7@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(network.edges()).doesNotContain(E12)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertFalse(networkAsMutableNetwork.removeEdge(E12))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "removeEdge_existingEdge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->3 [style = bold, label=""];
6->1 [style = bold, label=""];
11->8 [style = bold, label=""];
4->9 [style = dashed, label="0"];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
7->11 [style = bold, label=""];
5->11 [style = dashed, label="0"];
12->1 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
0->1 [style = bold, label=""];
10->6 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->8 [style = dashed, label="0"];
8->9 [style = bold, label=""];
}
