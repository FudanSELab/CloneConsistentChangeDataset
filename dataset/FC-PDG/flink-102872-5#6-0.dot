digraph {
0 [style = filled, label = "final int TRIGGER_COUNT = 2@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",22),Long.MAX_VALUE))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testDeltaEvictorEvictAfter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "final int WINDOW_SIZE = 4@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final int threshold = 2@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",9),initialTime + 10999))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testDeltaEvictorEvictAfter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",4),initialTime + 3999))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",10),initialTime + 1000))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(TRIGGER_COUNT),DeltaEvictor.of(THRESHOLD,new DeltaFunction<Tuple2<String,Integer>>(){@Override public double getDelta(Tuple2<String,Integer> oldDataPoint,Tuple2<String,Integer> newDataPoint){return newDataPoint.f1 - oldDataPoint.f1}},EVICT_AFTER),0,null)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",5),initialTime + 1998))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",6),initialTime + 1999))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(WINDOW_SLIDE),CountEvictor.of(WINDOW_SIZE),0,null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),Long.MAX_VALUE))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",streamRecordSerializer)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",2),Long.MAX_VALUE))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",16),Long.MAX_VALUE))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.close()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),Long.MAX_VALUE))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final int triggerCount = 2@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final boolean evictAfter = true@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final int THRESHOLD = 2@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",4),Long.MAX_VALUE))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "AtomicInteger closeCalled = new AtomicInteger(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer = (TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "long initialTime = 0L@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final boolean EVICT_AFTER = true@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "final int WINDOW_SLIDE = 2@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(triggerCount),DeltaEvictor.of(threshold,new DeltaFunction<Tuple2<String,Integer>>(){@Override public double getDelta(Tuple2<String,Integer> oldDataPoint,Tuple2<String,Integer> newDataPoint){return newDataPoint.f1 - oldDataPoint.f1}},evictAfter),0,null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",4),Long.MAX_VALUE))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.close()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@40@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.open()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",15),Long.MAX_VALUE))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 10999))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testCountTriggerWithApply['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",5),initialTime + 999))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42->23 [style = bold, label=""];
21->51 [style = bold, label=""];
4->16 [style = dashed, label="0"];
15->9 [style = dashed, label="0"];
30->17 [style = solid, label="initialTime"];
53->5 [style = solid, label="expectedOutput"];
53->45 [style = solid, label="expectedOutput"];
29->22 [style = dashed, label="0"];
1->20 [style = bold, label=""];
0->47 [style = dashed, label="0"];
44->53 [style = bold, label=""];
37->5 [style = bold, label=""];
12->26 [style = dashed, label="0"];
41->48 [style = bold, label=""];
19->34 [style = dashed, label="0"];
20->46 [style = dashed, label="0"];
31->35 [style = bold, label=""];
25->36 [style = dashed, label="0"];
44->38 [style = solid, label="initialTime"];
31->9 [style = solid, label="closeCalled"];
44->1 [style = solid, label="initialTime"];
53->41 [style = bold, label=""];
16->6 [style = solid, label="expectedOutput"];
14->9 [style = bold, label=""];
13->31 [style = bold, label=""];
8->27 [style = bold, label=""];
3->30 [style = bold, label=""];
32->3 [style = bold, label=""];
1->38 [style = bold, label=""];
9->40 [style = bold, label=""];
28->5 [style = bold, label=""];
19->54 [style = dashed, label="0"];
30->1 [style = solid, label="initialTime"];
0->19 [style = bold, label=""];
26->1 [style = bold, label=""];
9->32 [style = bold, label=""];
12->11 [style = bold, label=""];
16->26 [style = bold, label=""];
52->45 [style = bold, label=""];
30->12 [style = solid, label="initialTime"];
24->18 [style = bold, label=""];
44->49 [style = solid, label="initialTime"];
19->25 [style = bold, label=""];
30->21 [style = solid, label="initialTime"];
23->14 [style = bold, label=""];
30->22 [style = solid, label="initialTime"];
7->24 [style = bold, label=""];
21->29 [style = bold, label=""];
5->6 [style = bold, label=""];
17->2 [style = bold, label=""];
47->54 [style = bold, label=""];
2->21 [style = dashed, label="0"];
50->31 [style = bold, label=""];
34->36 [style = bold, label=""];
31->47 [style = bold, label=""];
7->51 [style = dashed, label="0"];
0->35 [style = dashed, label="0"];
35->34 [style = bold, label=""];
6->39 [style = bold, label=""];
14->9 [style = solid, label="streamRecordSerializer"];
6->17 [style = bold, label=""];
31->0 [style = bold, label=""];
25->15 [style = solid, label="THRESHOLD"];
44->3 [style = solid, label="initialTime"];
11->21 [style = bold, label=""];
23->43 [style = bold, label=""];
15->32 [style = dashed, label="0"];
19->15 [style = solid, label="EVICT_AFTER"];
30->20 [style = solid, label="initialTime"];
44->48 [style = solid, label="initialTime"];
15->3 [style = bold, label=""];
35->32 [style = solid, label="triggerCount"];
43->9 [style = bold, label=""];
9->32 [style = solid, label="stateDesc"];
47->9 [style = solid, label="WINDOW_SIZE"];
54->42 [style = bold, label=""];
48->46 [style = bold, label=""];
24->37 [style = dashed, label="0"];
51->37 [style = bold, label=""];
32->3 [style = solid, label="operator"];
23->43 [style = solid, label="streamRecordSerializer"];
22->10 [style = bold, label=""];
4->12 [style = bold, label=""];
18->8 [style = bold, label=""];
44->26 [style = solid, label="initialTime"];
46->3 [style = bold, label=""];
40->44 [style = bold, label=""];
54->9 [style = solid, label="WINDOW_SLIDE"];
25->23 [style = bold, label=""];
45->49 [style = bold, label=""];
31->15 [style = solid, label="closeCalled"];
36->32 [style = solid, label="threshold"];
34->32 [style = solid, label="evictAfter"];
17->49 [style = dashed, label="0"];
9->15 [style = solid, label="stateDesc"];
10->52 [style = bold, label=""];
49->21 [style = bold, label=""];
20->22 [style = bold, label=""];
29->28 [style = bold, label=""];
16->18 [style = solid, label="expectedOutput"];
9->40 [style = solid, label="operator"];
44->30 [style = solid, label="initialTime"];
11->1 [style = dashed, label="0"];
36->23 [style = bold, label=""];
30->10 [style = solid, label="initialTime"];
44->16 [style = solid, label="initialTime"];
9->15 [style = bold, label=""];
10->4 [style = bold, label=""];
33->31 [style = bold, label=""];
44->21 [style = solid, label="initialTime"];
15->3 [style = solid, label="operator"];
2->7 [style = bold, label=""];
30->2 [style = solid, label="initialTime"];
38->22 [style = bold, label=""];
43->9 [style = solid, label="stateDesc"];
30->16 [style = bold, label=""];
44->46 [style = solid, label="initialTime"];
0->15 [style = solid, label="TRIGGER_COUNT"];
30->4 [style = solid, label="initialTime"];
31->32 [style = solid, label="closeCalled"];
28->10 [style = dashed, label="0"];
30->11 [style = solid, label="initialTime"];
}
