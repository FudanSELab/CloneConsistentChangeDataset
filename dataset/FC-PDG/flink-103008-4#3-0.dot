digraph {
9 [style = filled, label = "JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(verticesSorted.get(4),hasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(verticesSorted.get(4),hasOutputPartitionType(ResultPartitionType.BLOCKING))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(JobType.BATCH,jobGraph.getJobType())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(verticesSorted.get(0),hasOutputPartitionType(ResultPartitionType.BLOCKING))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(verticesSorted.get(0),hasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "DataStream<Integer> source = env.fromElements(1)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(verticesSorted.get(1),hasOutputPartitionType(ResultPartitionType.BLOCKING))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "env.fromElements(\"test\").addSink(new DiscardingSink<>())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(verticesSorted.get(3),hasOutputPartitionType(ResultPartitionType.BLOCKING))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(verticesSorted.get(2),hasOutputPartitionType(ResultPartitionType.BLOCKING))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "env.setRuntimeMode(RuntimeExecutionMode.BATCH)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testBatchJobType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testPartitionTypesInBatchMode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "env.disableOperatorChaining()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "env.setParallelism(4)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testPartitionTypesInBatchMode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "source.map(null).setParallelism(1).rescale().map(null).rebalance().map(null).keyBy(null).map(null).addSink(new DiscardingSink<>())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
8->10 [style = bold, label=""];
12->5 [style = bold, label=""];
0->6 [style = bold, label=""];
19->20 [style = bold, label=""];
8->14 [style = bold, label=""];
13->17 [style = dashed, label="0"];
11->12 [style = bold, label=""];
15->6 [style = bold, label=""];
9->8 [style = bold, label=""];
2->4 [style = bold, label=""];
17->19 [style = bold, label=""];
4->7 [style = bold, label=""];
5->16 [style = bold, label=""];
7->9 [style = bold, label=""];
5->1 [style = bold, label=""];
18->6 [style = bold, label=""];
1->16 [style = dashed, label="0"];
3->13 [style = bold, label=""];
3->17 [style = bold, label=""];
14->11 [style = bold, label=""];
10->14 [style = dashed, label="0"];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
