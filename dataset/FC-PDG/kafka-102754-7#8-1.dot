digraph {
5 [style = filled, label = "testLeftInner['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testOuterInner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "runTest(expectedFinalMultiJoinResult,storeName)@@@6@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "leftTable.leftJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final List<List<TestRecord<Long,String>>> expectedResult = Arrays.asList(null,null,null,Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"A-a-a\",null,4L),new TestRecord<>(ANY_UNIQUE_KEY,\"A-a-a\",null,4L)),Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,\"B-a-a\",null,5L)),Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"B-b-b\",null,6L),new TestRecord<>(ANY_UNIQUE_KEY,\"B-b-b\",null,6L)),Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,null,null,7L)),null,null,Arrays.asList(new TestRecord<>(ANY_UNIQUE_KEY,\"C-c-c\",null,10L),new TestRecord<>(ANY_UNIQUE_KEY,\"C-c-c\",null,10L)),Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,null,null,11L)),null,null,null,Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY,\"D-d-d\",null,15L)))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "leftTable.outerJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "runTestWithDriver(expectedResult,storeName)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final List<List<KeyValueTimestamp<Long,String>>> expectedResult = Arrays.asList(null,null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-a\",4L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-a\",4L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a-a\",5L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-b\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-b\",6L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"null-b-b\",7L)),null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-c\",10L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,null,11L)),null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"null-d-d\",14L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"null-d-d\",14L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d-d\",15L)))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final List<List<KeyValueTimestamp<Long,String>>> expectedResult = Arrays.asList(null,null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-a\",4L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"A-a-a\",4L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-a-a\",5L)),Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-b\",6L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"B-b-b\",6L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,null,7L)),null,null,Arrays.asList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-c\",10L),new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"C-c-c\",10L)),Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,null,11L)),null,null,null,Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY,\"D-d-d\",15L)))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testLeftInner['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "leftTable.outerJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "runTest(expectedResult,storeName)@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appID + \"-inner-inner\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "runTestWithDriver(expectedFinalMultiJoinResult,storeName)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "leftTable.leftJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().to(OUTPUT_TOPIC)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "leftTable.leftJoin(rightTable,valueJoiner).join(rightTable,valueJoiner,materialized).toStream().peek(new CountingPeek(true)).to(OUTPUT_TOPIC)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cacheEnabled@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
4->10 [style = bold, label=""];
9->12 [style = solid, label="expectedResult"];
2->1 [style = dotted, label="false"];
2->15 [style = dotted, label="false"];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
0->16 [style = dashed, label="0"];
3->6 [style = bold, label=""];
15->1 [style = solid, label="expectedResult"];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
2->0 [style = dotted, label="false"];
15->16 [style = bold, label=""];
2->16 [style = dotted, label="false"];
2->9 [style = dotted, label="false"];
2->7 [style = dotted, label="false"];
2->12 [style = dotted, label="false"];
16->1 [style = bold, label=""];
2->6 [style = dotted, label="true"];
0->1 [style = bold, label=""];
2->14 [style = bold, label=""];
2->15 [style = bold, label=""];
5->4 [style = bold, label=""];
7->15 [style = dashed, label="0"];
2->14 [style = dotted, label="true"];
10->2 [style = bold, label=""];
9->12 [style = bold, label=""];
2->7 [style = bold, label=""];
7->1 [style = solid, label="expectedResult"];
3->14 [style = dashed, label="0"];
14->6 [style = bold, label=""];
2->8 [style = dotted, label="true"];
2->8 [style = bold, label=""];
13->4 [style = bold, label=""];
}
