digraph {
5 [style = filled, label = "JobOffer o = createMockOffer(c.getExecutors().get(0))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,mw.works.size())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "MappingWorksheet mw = new MappingWorksheet(wrap(t),asList(o))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "when(t.getEstimatedDuration()).thenReturn(10000L)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MappingWorksheet mw = new MappingWorksheet(wrap(t),Collections.singletonList(o))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "test1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "when(e.getEstimatedRemainingTimeMillis()).thenReturn(300L)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1,mw.works.size())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Computer c = createMockComputer(1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(e.isIdle()).thenReturn(false)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "JobOffer o = createMockOffer(c.getExecutors().get(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "test2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(1,mw.executors.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Computer c = createMockComputer(2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Executor e = c.getExecutors().get(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(t.getSubTasks()).thenReturn((Collection)asList(t))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "test1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(mw.executors.isEmpty())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Task t = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "MappingWorksheet mw = new MappingWorksheet(wrap(t),asList(o))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
1->8 [style = bold, label=""];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
4->6 [style = bold, label=""];
6->9 [style = solid, label="t"];
1->15 [style = bold, label=""];
8->15 [style = dashed, label="0"];
0->2 [style = bold, label=""];
6->7 [style = solid, label="t"];
7->0 [style = bold, label=""];
19->6 [style = bold, label=""];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
6->1 [style = solid, label="t"];
12->13 [style = bold, label=""];
5->7 [style = solid, label="o"];
5->9 [style = solid, label="o"];
8->5 [style = bold, label=""];
17->14 [style = bold, label=""];
6->14 [style = solid, label="t"];
7->9 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
5->7 [style = bold, label=""];
11->17 [style = bold, label=""];
14->18 [style = bold, label=""];
15->12 [style = bold, label=""];
17->14 [style = solid, label="o"];
18->16 [style = bold, label=""];
}
