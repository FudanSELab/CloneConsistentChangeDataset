digraph {
5 [style = filled, label = "ByteString.Output output = ByteString.newOutput()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "output.writeTo(bos)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"Output Size returns correct result\",output.size(),testString.size())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testNewOutput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertWithMessage(\"Writing an output stream to itself is successful\").that(testString.concat(testString)).isEqualTo(output.toByteString())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"Output.reset() resets the output\",EMPTY,output.toByteString())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertTrue(\"Output.writeTo() must give back the same bytes\",Arrays.equals(referenceBytes,bos.toByteArray()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertWithMessage(\"Output.reset() resets the output\").that(output.size()).isEqualTo(0)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(\"Writing an output stream to itself is successful\",stringUnderTest.concat(stringUnderTest),output.toByteString())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertWithMessage(\"Output.reset() resets the output\").that(output.toByteString()).isEqualTo(EMPTY)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testString.writeTo(output)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"Output.reset() resets the output\",0,output.size())@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testNewOutput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(\"Writing an output stream to itself is successful\",testString.concat(testString),output.toByteString())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "stringUnderTest.writeTo(output)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "output.reset()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertWithMessage(\"Output.writeTo() must give back the same bytes\").that(Arrays.equals(BYTES,bos.toByteArray())).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(\"Output.reset() resets the output\",ByteString.EMPTY,output.toByteString())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "output.writeTo(output)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ByteArrayOutputStream bos = new ByteArrayOutputStream()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"Output Size returns correct result\",output.size(),stringUnderTest.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertWithMessage(\"Output Size returns correct result\").that(output.size()).isEqualTo(testString.size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testNewOutput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(\"Output.writeTo() must give back the same bytes\",Arrays.equals(BYTES,bos.toByteArray()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->17 [style = bold, label=""];
4->9 [style = bold, label=""];
5->8 [style = bold, label=""];
0->16 [style = bold, label=""];
2->19 [style = dashed, label="0"];
16->11 [style = bold, label=""];
11->14 [style = bold, label=""];
20->9 [style = bold, label=""];
7->17 [style = dashed, label="0"];
2->6 [style = bold, label=""];
18->11 [style = bold, label=""];
3->22 [style = dashed, label="0"];
1->0 [style = bold, label=""];
8->21 [style = dashed, label="0"];
11->19 [style = bold, label=""];
19->6 [style = bold, label=""];
12->0 [style = bold, label=""];
23->0 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
5->11 [style = solid, label="output"];
8->1 [style = bold, label=""];
5->21 [style = bold, label=""];
7->22 [style = bold, label=""];
1->12 [style = dashed, label="0"];
0->10 [style = bold, label=""];
2->14 [style = dashed, label="0"];
5->21 [style = solid, label="output"];
9->0 [style = solid, label="bos"];
17->15 [style = bold, label=""];
9->5 [style = bold, label=""];
3->15 [style = dashed, label="0"];
0->18 [style = bold, label=""];
13->9 [style = bold, label=""];
5->8 [style = solid, label="output"];
10->16 [style = dashed, label="0"];
6->7 [style = bold, label=""];
21->23 [style = bold, label=""];
1->23 [style = dashed, label="0"];
14->6 [style = bold, label=""];
8->12 [style = bold, label=""];
10->18 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
