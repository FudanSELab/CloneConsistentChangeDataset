digraph {
25 [style = filled, label = "testHashConflictWithDeletion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEquals(map.size(),2)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int Buckets = 16@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "int bucket1 = ConcurrentOpenHashMap.signSafeMod(ConcurrentOpenHashMap.hash(key1),Buckets)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "long key1 = 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(map.size(),2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(map.remove(key2),\"value-2-overwrite\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ConcurrentOpenHashMap<Long,String> map = new ConcurrentOpenHashMap<>(Buckets,1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "int bucket2 = ConcurrentLongHashMap.signSafeMod(ConcurrentLongHashMap.hash(key2),Buckets)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertNull(map.put(key1,\"value-1-overwrite\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(bucket1,bucket2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertNull(map.put(key2,\"value-2\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "testHashConflictWithDeletion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "int bucket2 = ConcurrentOpenHashMap.signSafeMod(ConcurrentOpenHashMap.hash(key2),Buckets)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(map.get(key2),\"value-2-overwrite\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(map.put(key1,\"value-1\"),null)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(map.put(key2,\"value-2\"),null)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(map.size(),1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(map.size(),1)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(map.put(key1,\"value-1-overwrite\"),null)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNull(map.put(key1,\"value-1\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "long key2 = 27@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ConcurrentLongHashMap<String> map = new ConcurrentLongHashMap<>(Buckets,1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(map.put(key2,\"value-2-overwrite\"),\"value-2\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(map.remove(key1),\"value-1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(map.isEmpty())@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHashConflictWithDeletion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int bucket1 = ConcurrentLongHashMap.signSafeMod(ConcurrentLongHashMap.hash(key1),Buckets)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(map.size(),1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(map.remove(key1),\"value-1-overwrite\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
1->0 [style = solid, label="Buckets"];
16->0 [style = bold, label=""];
25->1 [style = bold, label=""];
16->13 [style = solid, label="key2"];
12->5 [style = bold, label=""];
16->27 [style = bold, label=""];
21->6 [style = bold, label=""];
9->27 [style = solid, label="key1"];
3->24 [style = bold, label=""];
17->24 [style = dashed, label="0"];
26->3 [style = bold, label=""];
9->18 [style = solid, label="key1"];
18->11 [style = bold, label=""];
29->9 [style = bold, label=""];
26->3 [style = solid, label="bucket2"];
2->18 [style = bold, label=""];
15->3 [style = solid, label="bucket2"];
28->1 [style = bold, label=""];
0->27 [style = dashed, label="0"];
15->3 [style = bold, label=""];
1->7 [style = bold, label=""];
1->7 [style = solid, label="Buckets"];
16->15 [style = solid, label="key2"];
9->24 [style = solid, label="key1"];
9->16 [style = bold, label=""];
0->3 [style = solid, label="bucket1"];
0->15 [style = bold, label=""];
14->1 [style = bold, label=""];
7->9 [style = bold, label=""];
8->22 [style = dashed, label="0"];
6->4 [style = bold, label=""];
13->19 [style = bold, label=""];
8->20 [style = bold, label=""];
1->29 [style = solid, label="Buckets"];
27->26 [style = bold, label=""];
22->20 [style = bold, label=""];
1->27 [style = solid, label="Buckets"];
1->15 [style = solid, label="Buckets"];
9->22 [style = solid, label="key1"];
16->6 [style = solid, label="key2"];
1->26 [style = solid, label="Buckets"];
16->19 [style = solid, label="key2"];
5->13 [style = bold, label=""];
16->26 [style = solid, label="key2"];
20->12 [style = bold, label=""];
9->0 [style = solid, label="key1"];
16->10 [style = solid, label="key2"];
11->22 [style = bold, label=""];
15->26 [style = dashed, label="0"];
9->12 [style = solid, label="key1"];
9->8 [style = solid, label="key1"];
3->17 [style = bold, label=""];
10->2 [style = bold, label=""];
11->8 [style = bold, label=""];
7->29 [style = dashed, label="0"];
16->23 [style = solid, label="key2"];
23->2 [style = bold, label=""];
27->3 [style = solid, label="bucket1"];
1->29 [style = bold, label=""];
10->23 [style = dashed, label="0"];
9->17 [style = solid, label="key1"];
24->23 [style = bold, label=""];
19->21 [style = bold, label=""];
}
