digraph {
6 [style = filled, label = "DataFile file = DataFiles.builder(PartitionSpec.unpartitioned()).withFileSizeInBytes(parquetFile.length()).withPath(parquetFile.toString()).withMetrics(fileMetrics(localInput(parquetFile))).build()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "File dataFolder = new File(location,\"data\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should contain 100 rows\",100,rows.size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "DataFile file = DataFiles.builder(PartitionSpec.unpartitioned()).withRecordCount(100).withFileSizeInBytes(avroFile.length()).withPath(avroFile.toString()).build()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "writeAndValidate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestHelpers.assertEqualsSafe(tableSchema.asStruct(),expected.get(i),rows.get(i))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "HadoopTables tables = new HadoopTables(CONF)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "File parent = temp.newFolder(\"parquet\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "File parquetFile = new File(dataFolder,FileFormat.PARQUET.addExtension(UUID.randomUUID().toString()))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assume.assumeTrue(\"Cannot handle non-string map keys in parquet-avro\",null == TypeUtil.find(schema,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "List<Record> expected = RandomData.generateList(tableSchema,100,1L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DataFile file = DataFiles.builder(PartitionSpec.unpartitioned()).withFileSizeInBytes(parquetFile.length()).withPath(parquetFile.toString()).withRecordCount(100).build()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "int i = 0@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "File location = new File(parent,\"test\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "writeAndValidate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "List<GenericData.Record> expected = RandomData.generateList(tableSchema,100,1L)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "i < expected.size()@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "File avroFile = new File(dataFolder,FileFormat.AVRO.addExtension(UUID.randomUUID().toString()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "dataFolder.mkdirs()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "i += 1@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "table.newAppend().appendFile(file).commit()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<Row> rows = df.collectAsList()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "writeAndValidate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "writer.addAll(expected)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "File parent = temp.newFolder(\"avro\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Schema schema@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Table table = tables.create(schema,PartitionSpec.unpartitioned(),location.toString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "writer.addAll(expected)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Schema tableSchema = table.schema()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Dataset<Row> df = spark.read().format(\"iceberg\").load(location.toString())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestHelpers.assertEqualsSafe(tableSchema.asStruct(),expected.get(i),rows.get(i))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18->12 [style = solid, label="i"];
16->0 [style = bold, label=""];
0->9 [style = solid, label="dataFolder"];
7->17 [style = bold, label=""];
5->9 [style = bold, label=""];
17->18 [style = dotted, label="true"];
19->8 [style = solid, label="tableSchema"];
10->14 [style = bold, label=""];
21->6 [style = bold, label=""];
24->0 [style = bold, label=""];
4->15 [style = solid, label="schema"];
26->1 [style = bold, label=""];
8->29 [style = solid, label="expected"];
12->17 [style = bold, label=""];
23->15 [style = bold, label=""];
23->4 [style = dotted, label="true"];
18->12 [style = bold, label=""];
14->19 [style = bold, label=""];
28->26 [style = bold, label=""];
7->18 [style = solid, label="i"];
9->30 [style = bold, label=""];
12->18 [style = dotted, label="true"];
5->10 [style = solid, label="dataFolder"];
9->10 [style = bold, label=""];
15->16 [style = bold, label=""];
27->4 [style = dotted, label="true"];
6->22 [style = dashed, label="0"];
19->8 [style = bold, label=""];
20->21 [style = solid, label="expected"];
1->11 [style = bold, label=""];
18->13 [style = solid, label="i"];
17->12 [style = solid, label="i"];
20->21 [style = bold, label=""];
29->28 [style = bold, label=""];
10->9 [style = dashed, label="0"];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
7->17 [style = solid, label="i"];
25->24 [style = bold, label=""];
6->28 [style = dashed, label="0"];
4->8 [style = solid, label="schema"];
17->12 [style = bold, label=""];
24->0 [style = solid, label="location"];
8->20 [style = bold, label=""];
8->20 [style = solid, label="tableSchema"];
4->19 [style = solid, label="schema"];
12->13 [style = dotted, label="true"];
12->17 [style = solid, label="i"];
17->13 [style = solid, label="i"];
11->3 [style = bold, label=""];
3->7 [style = bold, label=""];
21->22 [style = bold, label=""];
17->12 [style = dotted, label="true"];
20->8 [style = dashed, label="0"];
0->5 [style = solid, label="location"];
2->15 [style = bold, label=""];
2->4 [style = dotted, label="true"];
25->24 [style = solid, label="parent"];
30->14 [style = bold, label=""];
4->14 [style = solid, label="schema"];
16->0 [style = solid, label="parent"];
22->1 [style = bold, label=""];
12->18 [style = solid, label="i"];
8->29 [style = bold, label=""];
27->25 [style = bold, label=""];
17->18 [style = bold, label=""];
13->18 [style = bold, label=""];
0->5 [style = bold, label=""];
}
