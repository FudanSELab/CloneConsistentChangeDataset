digraph {
9 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateHeavyLoad['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testWhenInstanceIsFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "float normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(score,0.5f)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(score,0.5f)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "double score = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "when(_clusterContext.getEstimatedMaxPartitionCount()).thenReturn(10)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testWhenInstanceIsFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "when(_testNode.getAssignedReplicaCount()).thenReturn(10)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "float score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "when(_clusterContext.getEstimatedMaxTopStateCount()).thenReturn(20)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "float score = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "when(_testNode.getAssignedTopStatePartitionsCount()).thenReturn(20)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(score,0.5)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(normalizedScore,0.5f)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7->6 [style = solid, label="score"];
5->3 [style = bold, label=""];
1->3 [style = bold, label=""];
11->12 [style = solid, label="normalizedScore"];
8->14 [style = bold, label=""];
0->4 [style = solid, label="score"];
9->10 [style = bold, label=""];
4->6 [style = dashed, label="0"];
2->8 [style = dashed, label="0"];
13->11 [style = bold, label=""];
11->15 [style = bold, label=""];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
10->8 [style = bold, label=""];
13->15 [style = solid, label="score"];
0->4 [style = bold, label=""];
7->6 [style = bold, label=""];
15->12 [style = bold, label=""];
3->10 [style = dashed, label="0"];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
0->7 [style = dashed, label="0"];
}
