digraph {
16 [style = filled, label = "lookupReferencesManager.start()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "lookupMap.put(\"testMockForRemoveNonExisting\",container)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "lookupReferencesManager.start()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "StringFullResponseHolder responseHolder = new StringFullResponseHolder(HttpResponseStatus.OK,newEmptyResponse(),StandardCharsets.UTF_8).addChunk(strResult)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(Optional.of(testContainer),lookupReferencesManager.get(\"test\"))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "EasyMock.replay(config)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "lookupReferencesManager.remove(\"test\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "lookupReferencesManager.remove(\"test\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(Optional.empty(),lookupReferencesManager.get(\"test\"))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "lookupMap.put(\"testMockForAddGetRemove\",container)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.replay(druidLeaderClient)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String strResult = mapper.writeValueAsString(lookupMap)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testRemoveNonExisting['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "lookupReferencesManager.handlePendingNotices()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Request request = new Request(HttpMethod.GET,new URL(\"http://localhost:1234/xx\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testAddGetRemove['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "EasyMock.replay(druidLeaderClient)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "LookupExtractorFactory lookupExtractorFactory = EasyMock.createMock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNull(lookupReferencesManager.get(\"test\"))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testAddGetRemove['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "lookupReferencesManager.handlePendingNotices()@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "lookupReferencesManager.add(\"test\",testContainer)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(Optional.empty(),lookupReferencesManager.get(\"test\"))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(druidLeaderClient.makeRequest(HttpMethod.GET,\"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\")).andReturn(request)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "lookupReferencesManager.handlePendingNotices()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.replay(lookupExtractorFactory)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(lookupReferencesManager.get(\"test\"))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(testContainer,lookupReferencesManager.get(\"test\"))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Map<String,Object> lookupMap = new HashMap<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "LookupExtractorFactoryContainer testContainer = new LookupExtractorFactoryContainer(\"0\",lookupExtractorFactory)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
5->6 [style = solid, label="request"];
11->20 [style = bold, label=""];
15->2 [style = bold, label=""];
16->0 [style = bold, label=""];
23->5 [style = bold, label=""];
17->20 [style = solid, label="testContainer"];
8->18 [style = bold, label=""];
0->17 [style = bold, label=""];
1->27 [style = dashed, label="0"];
4->15 [style = bold, label=""];
17->24 [style = solid, label="testContainer"];
18->19 [style = bold, label=""];
3->6 [style = bold, label=""];
26->9 [style = bold, label=""];
16->25 [style = bold, label=""];
5->12 [style = solid, label="responseHolder"];
17->13 [style = solid, label="testContainer"];
29->23 [style = bold, label=""];
9->10 [style = bold, label=""];
11->24 [style = bold, label=""];
32->23 [style = solid, label="request"];
2->30 [style = dashed, label="0"];
13->11 [style = bold, label=""];
25->17 [style = bold, label=""];
14->1 [style = bold, label=""];
19->16 [style = bold, label=""];
22->4 [style = bold, label=""];
28->32 [style = bold, label=""];
20->21 [style = bold, label=""];
7->9 [style = bold, label=""];
2->23 [style = bold, label=""];
8->18 [style = solid, label="responseHolder"];
30->28 [style = bold, label=""];
23->8 [style = solid, label="strResult"];
0->25 [style = dashed, label="0"];
5->12 [style = bold, label=""];
24->21 [style = bold, label=""];
9->4 [style = solid, label="lookupExtractorFactory"];
20->24 [style = dashed, label="0"];
31->28 [style = solid, label="lookupMap"];
6->8 [style = bold, label=""];
31->30 [style = bold, label=""];
32->15 [style = bold, label=""];
9->17 [style = solid, label="lookupExtractorFactory"];
33->31 [style = bold, label=""];
17->13 [style = bold, label=""];
12->3 [style = bold, label=""];
14->27 [style = bold, label=""];
28->5 [style = solid, label="strResult"];
15->29 [style = bold, label=""];
15->23 [style = solid, label="lookupMap"];
21->14 [style = bold, label=""];
}
