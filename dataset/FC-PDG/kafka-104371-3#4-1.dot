digraph {
9 [style = filled, label = "Set<Integer> voters = Utils.mkSet(localId,node1,node2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testInitializeAsUnattached['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "state.initialize(new OffsetAndEpoch(0L,logEndEpoch))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(electionTimeoutMs + jitterMs,unattachedState.remainingElectionTimeMs(time.milliseconds()))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "VotedState votedState = state.votedStateOrThrow()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "QuorumState state = buildQuorumState(voters)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int jitterMs = 2500@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "store.writeElectionState(ElectionState.withVotedCandidate(epoch,node1,voters))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "random.mockNextInt(jitterMs)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "store.writeElectionState(ElectionState.withUnknownLeader(epoch,voters))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(electionTimeoutMs + jitterMs,votedState.remainingElectionTimeMs(time.milliseconds()))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(epoch,unattachedState.epoch())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "state.initialize(new OffsetAndEpoch(0L,0))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(epoch,state.epoch())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(state.isVoted())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(epoch,votedState.epoch())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int epoch = 5@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int node1 = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testInitializeAsUnattached['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int node2 = 2@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testInitializeAsVoted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(node1,votedState.votedId())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "UnattachedState unattachedState = state.unattachedStateOrThrow()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(state.isUnattached())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
15->10 [style = bold, label=""];
7->11 [style = bold, label=""];
3->1 [style = bold, label=""];
22->19 [style = bold, label=""];
16->10 [style = bold, label=""];
8->3 [style = bold, label=""];
12->20 [style = bold, label=""];
10->9 [style = solid, label="node1"];
11->12 [style = bold, label=""];
7->24 [style = solid, label="jitterMs"];
19->17 [style = bold, label=""];
2->9 [style = bold, label=""];
2->17 [style = solid, label="epoch"];
7->13 [style = solid, label="jitterMs"];
9->6 [style = solid, label="voters"];
8->21 [style = dashed, label="0"];
0->20 [style = dashed, label="0"];
12->0 [style = bold, label=""];
1->13 [style = bold, label=""];
17->23 [style = bold, label=""];
9->6 [style = bold, label=""];
6->18 [style = dashed, label="0"];
7->14 [style = bold, label=""];
20->21 [style = bold, label=""];
10->23 [style = solid, label="node1"];
9->12 [style = solid, label="voters"];
5->9 [style = solid, label="node2"];
5->2 [style = bold, label=""];
23->24 [style = bold, label=""];
9->18 [style = bold, label=""];
10->5 [style = bold, label=""];
2->1 [style = solid, label="epoch"];
21->22 [style = bold, label=""];
10->18 [style = solid, label="node1"];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
2->22 [style = solid, label="epoch"];
2->6 [style = solid, label="epoch"];
2->18 [style = solid, label="epoch"];
7->14 [style = solid, label="jitterMs"];
6->7 [style = bold, label=""];
18->7 [style = bold, label=""];
9->18 [style = solid, label="voters"];
}
