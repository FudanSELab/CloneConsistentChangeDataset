digraph {
2 [style = filled, label = "MessageType messageType = ParquetSchemaUtil.convert(schema,\"complex_schema\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Schema newSchema = ParquetSchemaUtil.convert(typeWithIdsFromNameMapping)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "testAssignIdsByNameMapping['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(messageTypeWithIds,messageTypeWithIdsFromNameMapping)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(schema.asStruct(),newSchema.asStruct())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "writeAndValidate(schema)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "MessageType messageTypeWithIds = ParquetSchemaUtil.convert(schema,\"parquet_type\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "MessageType typeWithIdsFromNameMapping = ParquetSchemaUtil.applyNameMapping(messageType,nameMapping)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "StructType structType = StructType.of(required(0,\"id\",LongType.get()),optional(1,\"list_of_maps\",ListType.ofOptional(2,MapType.ofOptional(3,4,Types.StringType.get(),SUPPORTED_PRIMITIVES))),optional(5,\"map_of_lists\",MapType.ofOptional(6,7,Types.StringType.get(),ListType.ofOptional(8,SUPPORTED_PRIMITIVES))),required(9,\"list_of_lists\",ListType.ofOptional(10,ListType.ofOptional(11,SUPPORTED_PRIMITIVES))),required(12,\"map_of_maps\",MapType.ofOptional(13,14,Types.StringType.get(),MapType.ofOptional(15,16,Types.StringType.get(),SUPPORTED_PRIMITIVES))),required(17,\"list_of_struct_of_nested_types\",ListType.ofOptional(19,StructType.of(Types.NestedField.required(20,\"m1\",MapType.ofOptional(21,22,Types.StringType.get(),SUPPORTED_PRIMITIVES)),Types.NestedField.optional(23,\"l1\",ListType.ofRequired(24,SUPPORTED_PRIMITIVES)),Types.NestedField.required(25,\"l2\",ListType.ofRequired(26,SUPPORTED_PRIMITIVES)),Types.NestedField.optional(27,\"m2\",MapType.ofOptional(28,29,Types.StringType.get(),SUPPORTED_PRIMITIVES))))))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testMixedTypes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Types.StructType structType = Types.StructType.of(required(0,\"id\",Types.LongType.get()),optional(1,\"list_of_maps\",Types.ListType.ofOptional(2,Types.MapType.ofOptional(3,4,Types.StringType.get(),SUPPORTED_PRIMITIVES))),optional(5,\"map_of_lists\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.ListType.ofOptional(8,SUPPORTED_PRIMITIVES))),required(9,\"list_of_lists\",Types.ListType.ofOptional(10,Types.ListType.ofOptional(11,SUPPORTED_PRIMITIVES))),required(12,\"map_of_maps\",Types.MapType.ofOptional(13,14,Types.StringType.get(),Types.MapType.ofOptional(15,16,Types.StringType.get(),SUPPORTED_PRIMITIVES))),required(17,\"list_of_struct_of_nested_types\",Types.ListType.ofOptional(19,Types.StructType.of(Types.NestedField.required(20,\"m1\",Types.MapType.ofOptional(21,22,Types.StringType.get(),SUPPORTED_PRIMITIVES)),Types.NestedField.optional(23,\"l1\",Types.ListType.ofRequired(24,SUPPORTED_PRIMITIVES)),Types.NestedField.required(25,\"l2\",Types.ListType.ofRequired(26,SUPPORTED_PRIMITIVES)),Types.NestedField.optional(27,\"m2\",Types.MapType.ofOptional(28,29,Types.StringType.get(),SUPPORTED_PRIMITIVES))))))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "NameMapping nameMapping = MappingUtil.create(schema)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testAssignIdsByNameMapping['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Schema schema = new Schema(TypeUtil.assignFreshIds(structType,null).asStructType().fields())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "MessageType messageTypeWithIdsFromNameMapping = ParquetSchemaUtil.applyNameMapping(RemoveIds.removeIds(messageTypeWithIds),nameMapping)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->13 [style = dashed, label="0"];
14->3 [style = bold, label=""];
6->3 [style = bold, label=""];
5->9 [style = solid, label="nameMapping"];
11->8 [style = solid, label="messageTypeWithIds"];
2->0 [style = solid, label="messageType"];
3->5 [style = solid, label="schema"];
3->11 [style = solid, label="schema"];
11->9 [style = bold, label=""];
9->8 [style = bold, label=""];
10->6 [style = bold, label=""];
3->2 [style = solid, label="schema"];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
3->13 [style = solid, label="schema"];
0->4 [style = bold, label=""];
5->0 [style = solid, label="nameMapping"];
7->6 [style = bold, label=""];
12->14 [style = bold, label=""];
4->8 [style = dashed, label="0"];
3->13 [style = bold, label=""];
2->11 [style = dashed, label="0"];
4->1 [style = bold, label=""];
5->11 [style = bold, label=""];
0->4 [style = solid, label="typeWithIdsFromNameMapping"];
0->9 [style = dashed, label="0"];
9->8 [style = solid, label="messageTypeWithIdsFromNameMapping"];
11->9 [style = solid, label="messageTypeWithIds"];
}
