digraph {
16 [style = filled, label = "assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.ERROR_KIND),is(\"java.io.IOException\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<String,Object> tags = span.tags()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(spans.get(0).logEntries().size(),is(0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ADVICE.beforeMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@168ce85,new MethodInvocationResult())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(tags.get(\"span.kind\"),is(\"client\"))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(tags.get(\"db.type\"),is(JaegerConstants.DB_TYPE_VALUE))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "MockSpan span = spans.get(0)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<MockSpan.LogEntry> entries = span.logEntries()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(tags.get(\"db.instance\"),is(\"mock.db\"))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertExceptionHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "List<MockSpan> spans = COLLECTOR.finishedSpans()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(spans.size(),is(1))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ADVICE.afterMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@168cea7,new MethodInvocationResult())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Map<String,?> fields = entries.get(0).fields()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(span.operationName(),is(\"/ShardingSphere/executeSQL/\"))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<MockSpan> spans = collector.finishedSpans()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ADVICE.onThrowing(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@168ce96,new IOException())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(fields.get(JaegerConstants.ErrorLogTagKeys.EVENT),is(\"error\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(tags.get(\"db.statement\"),is(\"select 1\"))@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
5->8 [style = bold, label=""];
15->10 [style = bold, label=""];
19->18 [style = bold, label=""];
7->10 [style = bold, label=""];
11->1 [style = bold, label=""];
1->3 [style = bold, label=""];
12->6 [style = bold, label=""];
17->19 [style = bold, label=""];
2->12 [style = bold, label=""];
14->7 [style = bold, label=""];
0->7 [style = bold, label=""];
3->9 [style = bold, label=""];
6->4 [style = bold, label=""];
13->12 [style = bold, label=""];
10->13 [style = bold, label=""];
2->13 [style = dashed, label="0"];
7->15 [style = bold, label=""];
4->8 [style = bold, label=""];
10->2 [style = bold, label=""];
16->4 [style = bold, label=""];
20->7 [style = bold, label=""];
8->11 [style = bold, label=""];
4->5 [style = bold, label=""];
18->16 [style = bold, label=""];
}
