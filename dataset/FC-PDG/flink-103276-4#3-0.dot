digraph {
31 [style = filled, label = "testHarness1.open()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testHarness2.setup()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(MAX_PARALLELISM / 2) - 1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,MAX_PARALLELISM)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_PROC_TIME_TIMER:10\"),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:10\"),0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:10\"),0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testHarness1.processWatermark(10L)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,MAX_PARALLELISM,2,1)@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,MAX_PARALLELISM,1,0)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "testHarness2.setProcessingTime(10L)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness2.open()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testHarness1.processWatermark(20L)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(extractResult(testHarness).isEmpty())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testHarness2.initializeState(snapshot)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,MAX_PARALLELISM)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,MAX_PARALLELISM,2,0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_EVENT_TIME:HELLO\"))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "OperatorStateHandles snapshot = testHarness.snapshot(0,0)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:CIAO\"))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "testHarness1.setProcessingTime(0L)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_STATE:HELLO\"),0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness1.initializeState(snapshot)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final int MAX_PARALLELISM = 10@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testHarness1.initializeState(snapshot)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testHarness2.processWatermark(20L)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:20\"),0)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testHarness1.setup()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "testHarness1.setup()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,MAX_PARALLELISM - 1)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "testHarness1.open()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "testEnsureProcessingTimeTimerRegisteredOnRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_PROC_TIME_TIMER:20\"),0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:20\"),0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final int maxParallelism = 10@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "testHarness.setProcessingTime(0L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testHarness.processWatermark(0L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_PROC_TIME:CIAO\"))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_EVENT_TIME:CIAO\"))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "testHarness.open()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testHarness2.setProcessingTime(20L)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_STATE:CIAO\"),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testHarness2.processWatermark(10L)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54->55 [style = bold, label=""];
42->41 [style = bold, label=""];
22->15 [style = bold, label=""];
65->67 [style = bold, label=""];
70->64 [style = bold, label=""];
42->11 [style = solid, label="subKeyGroupRange2"];
69->60 [style = bold, label=""];
4->63 [style = bold, label=""];
20->43 [style = solid, label="MAX_PARALLELISM"];
47->7 [style = bold, label=""];
31->9 [style = bold, label=""];
67->25 [style = bold, label=""];
41->47 [style = solid, label="key1"];
43->60 [style = dashed, label="0"];
45->27 [style = bold, label=""];
38->12 [style = bold, label=""];
41->11 [style = bold, label=""];
25->48 [style = bold, label=""];
54->36 [style = solid, label="key1"];
1->30 [style = bold, label=""];
50->51 [style = solid, label="maxParallelism"];
25->59 [style = bold, label=""];
20->28 [style = solid, label="MAX_PARALLELISM"];
5->34 [style = bold, label=""];
21->2 [style = bold, label=""];
56->14 [style = solid, label="testHarness2"];
4->43 [style = solid, label="testOperator1"];
37->31 [style = bold, label=""];
52->21 [style = solid, label="testHarness1"];
2->44 [style = bold, label=""];
9->21 [style = bold, label=""];
60->46 [style = solid, label="testHarness1"];
41->34 [style = solid, label="key1"];
50->48 [style = solid, label="maxParallelism"];
60->63 [style = solid, label="testHarness1"];
23->17 [style = bold, label=""];
34->32 [style = bold, label=""];
43->0 [style = bold, label=""];
50->52 [style = solid, label="maxParallelism"];
52->23 [style = solid, label="testHarness1"];
44->18 [style = bold, label=""];
59->22 [style = bold, label=""];
60->68 [style = bold, label=""];
43->23 [style = solid, label="testHarness1"];
40->26 [style = solid, label="testHarness2"];
11->25 [style = bold, label=""];
64->62 [style = solid, label="testOperator"];
14->16 [style = bold, label=""];
11->7 [style = solid, label="key2"];
25->28 [style = bold, label=""];
47->59 [style = dashed, label="0"];
8->23 [style = bold, label=""];
51->54 [style = bold, label=""];
6->40 [style = solid, label="testOperator2"];
50->54 [style = solid, label="maxParallelism"];
61->71 [style = bold, label=""];
20->40 [style = solid, label="MAX_PARALLELISM"];
55->7 [style = solid, label="key2"];
22->5 [style = bold, label=""];
40->14 [style = solid, label="testHarness2"];
42->51 [style = dashed, label="0"];
3->10 [style = bold, label=""];
71->46 [style = bold, label=""];
55->25 [style = bold, label=""];
27->46 [style = bold, label=""];
52->0 [style = bold, label=""];
46->4 [style = bold, label=""];
29->41 [style = solid, label="subKeyGroupRange1"];
51->55 [style = solid, label="subKeyGroupRange2"];
20->29 [style = solid, label="MAX_PARALLELISM"];
66->61 [style = bold, label=""];
57->65 [style = bold, label=""];
25->28 [style = solid, label="testOperator"];
55->32 [style = solid, label="key2"];
54->34 [style = solid, label="key1"];
39->20 [style = bold, label=""];
7->22 [style = dashed, label="0"];
19->33 [style = bold, label=""];
43->52 [style = dashed, label="0"];
4->52 [style = solid, label="testOperator1"];
20->42 [style = solid, label="MAX_PARALLELISM"];
20->41 [style = solid, label="MAX_PARALLELISM"];
40->19 [style = bold, label=""];
12->24 [style = bold, label=""];
69->60 [style = solid, label="testOperator1"];
46->37 [style = solid, label="snapshot"];
10->6 [style = bold, label=""];
49->50 [style = bold, label=""];
58->66 [style = bold, label=""];
20->11 [style = solid, label="MAX_PARALLELISM"];
25->48 [style = solid, label="testOperator"];
6->56 [style = bold, label=""];
64->62 [style = bold, label=""];
30->35 [style = bold, label=""];
23->46 [style = dashed, label="0"];
13->26 [style = bold, label=""];
5->66 [style = solid, label="snapshot"];
29->42 [style = bold, label=""];
43->21 [style = solid, label="testHarness1"];
11->45 [style = solid, label="key2"];
41->36 [style = solid, label="key1"];
50->53 [style = solid, label="maxParallelism"];
17->3 [style = bold, label=""];
56->26 [style = solid, label="testHarness2"];
18->8 [style = bold, label=""];
50->55 [style = solid, label="maxParallelism"];
11->55 [style = dashed, label="0"];
46->33 [style = solid, label="snapshot"];
29->53 [style = dashed, label="0"];
28->22 [style = bold, label=""];
7->36 [style = bold, label=""];
32->25 [style = dashed, label="0"];
11->32 [style = solid, label="key2"];
4->43 [style = bold, label=""];
0->37 [style = bold, label=""];
53->51 [style = bold, label=""];
20->29 [style = bold, label=""];
54->47 [style = solid, label="key1"];
40->56 [style = dashed, label="0"];
33->1 [style = bold, label=""];
48->22 [style = bold, label=""];
41->54 [style = dashed, label="0"];
50->56 [style = solid, label="maxParallelism"];
62->57 [style = bold, label=""];
6->56 [style = solid, label="testOperator2"];
15->5 [style = bold, label=""];
24->14 [style = bold, label=""];
26->38 [style = bold, label=""];
20->50 [style = dashed, label="0"];
4->52 [style = bold, label=""];
28->48 [style = dashed, label="0"];
32->47 [style = bold, label=""];
6->40 [style = bold, label=""];
5->69 [style = bold, label=""];
34->67 [style = dashed, label="0"];
53->54 [style = solid, label="subKeyGroupRange1"];
55->45 [style = solid, label="key2"];
56->19 [style = bold, label=""];
28->62 [style = dashed, label="0"];
36->45 [style = bold, label=""];
35->13 [style = bold, label=""];
10->63 [style = dashed, label="0"];
50->53 [style = bold, label=""];
68->58 [style = bold, label=""];
}
