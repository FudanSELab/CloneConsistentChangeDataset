digraph {
5 [style = filled, label = "shouldPeekNextStoreKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "shouldPeekNextStoreKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "cache.put(namespace,WindowStoreUtils.toBinaryKey(\"a\",10L,0,stateSerdes),new LRUCacheEntry(\"b\".getBytes()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "iterator.next()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "shouldPeekNextCacheKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final KeyValueIterator<Long,byte((> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\",new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\",100,0,stateSerdes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "cache.put(namespace,WindowStoreUtils.toBinaryKey(\"a\",0,0,stateSerdes),new LRUCacheEntry(\"b\".getBytes()))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final MergedSortedCacheWindowStoreIterator<byte((> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator,storeIterator,new StateSerdes<>(\"name\",Serdes.Long(),Serdes.ByteArray()))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace,fromBytes,toBytes)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(iterator.peekNextKey(),equalTo(10L))@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cache.put(namespace,SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\",0,0,stateSerdes)),new LRUCacheEntry(\"b\".getBytes()))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final MergedSortedCacheWindowStoreIterator<byte((> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator,storeIterator,new StateSerdes<>(\"name\",Serdes.Long(),Serdes.ByteArray()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "windowStoreKvPairs.add(KeyValue.pair(0L,\"a\".getBytes()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\",0,0,stateSerdes)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "windowStoreKvPairs.add(KeyValue.pair(10L,\"a\".getBytes()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(iterator.peekNextKey(),equalTo(0L))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace,SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes),SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
0->13 [style = bold, label=""];
16->8 [style = bold, label=""];
11->1 [style = bold, label=""];
1->15 [style = dashed, label="0"];
8->13 [style = solid, label="fromBytes"];
8->3 [style = solid, label="fromBytes"];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
9->10 [style = bold, label=""];
6->13 [style = solid, label="toBytes"];
15->16 [style = bold, label=""];
3->13 [style = dashed, label="0"];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
14->7 [style = bold, label=""];
7->9 [style = bold, label=""];
5->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
6->3 [style = solid, label="toBytes"];
12->8 [style = bold, label=""];
2->16 [style = dashed, label="0"];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
0->14 [style = solid, label="storeIterator"];
4->14 [style = dashed, label="0"];
1->2 [style = bold, label=""];
13->14 [style = bold, label=""];
13->14 [style = solid, label="cacheIterator"];
0->4 [style = solid, label="storeIterator"];
2->8 [style = bold, label=""];
3->4 [style = solid, label="cacheIterator"];
}
