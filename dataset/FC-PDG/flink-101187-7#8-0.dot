digraph {
11 [style = filled, label = "WaitOnFinalizeJobVertex.resetFinalizedOnMaster()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final JobVertex sink = new JobVertex(\"sink\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "sink.setInvokableClass()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "source.setParallelism(parallelism)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testCallFinalizeOnMasterBeforeJobCompletes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "sink.setParallelism(PARALLELISM)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final CompletableFuture<JobSubmissionResult> submissionFuture = miniCluster.submitJob(jobGraph)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final JobGraph jobGraph = JobGraphTestUtils.streamingJobGraph(source,sink)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "source.setInvokableClass()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final MiniClusterConfiguration cfg = new MiniClusterConfiguration.Builder().setNumTaskManagers(1).setNumSlotsPerTaskManager(2 * parallelism).setConfiguration(getDefaultConfiguration()).build()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "sink.connectNewDataSetAsInput(source,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "sink.setInvokableClass()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "sink.setParallelism(parallelism)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "createJobGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final JobVertex source = new JobVertex(\"Source\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "jobResultFuture.get().toJobExecutionResult(getClass().getClassLoader())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final MiniClusterConfiguration cfg = new MiniClusterConfiguration.Builder().setNumTaskManagers(1).setNumSlotsPerTaskManager(parallelism).setConfiguration(getDefaultConfiguration()).build()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "sink.connectNewDataSetAsInput(source,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testCallFinalizeOnMasterBeforeJobCompletes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\",20L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "source.setInvokableClass()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(WaitOnFinalizeJobVertex.finalizedOnMaster.get())@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final CompletableFuture<JobResult> jobResultFuture = submissionFuture.thenCompose(null)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final int parallelism = 11@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "miniCluster.start()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "source.setParallelism(PARALLELISM)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "return JobGraphTestUtils.streamingJobGraph(source,sink)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23->25 [style = bold, label=""];
15->10 [style = bold, label=""];
6->0 [style = solid, label="parallelism"];
26->21 [style = solid, label="sink"];
9->11 [style = bold, label=""];
9->24 [style = dashed, label="0"];
17->6 [style = bold, label=""];
4->6 [style = bold, label=""];
2->1 [style = bold, label=""];
6->18 [style = bold, label=""];
0->19 [style = dashed, label="0"];
22->21 [style = bold, label=""];
5->15 [style = bold, label=""];
10->3 [style = bold, label=""];
15->21 [style = dashed, label="0"];
1->0 [style = bold, label=""];
11->2 [style = bold, label=""];
6->14 [style = bold, label=""];
25->24 [style = bold, label=""];
24->26 [style = bold, label=""];
26->12 [style = bold, label=""];
12->5 [style = solid, label="source"];
23->21 [style = solid, label="source"];
13->12 [style = bold, label=""];
20->23 [style = bold, label=""];
12->15 [style = solid, label="source"];
3->7 [style = bold, label=""];
6->9 [style = solid, label="parallelism"];
12->8 [style = bold, label=""];
15->10 [style = solid, label="jobGraph"];
23->22 [style = solid, label="source"];
7->16 [style = bold, label=""];
8->9 [style = bold, label=""];
18->13 [style = bold, label=""];
8->25 [style = dashed, label="0"];
14->13 [style = bold, label=""];
14->18 [style = dashed, label="0"];
12->19 [style = bold, label=""];
2->15 [style = solid, label="sink"];
19->22 [style = bold, label=""];
0->5 [style = bold, label=""];
}
