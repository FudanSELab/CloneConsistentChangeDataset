digraph {
14 [style = filled, label = "Assert.assertEquals(Status.VERIFY_TENANT_CODE_ERROR,result.get(Constants.STATUS))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Map<String,Object> result = tenantService.updateTenant(getLoginUser(),912222,tenantCode,tenantName,1,\"desc\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "result = tenantService.updateTenant(getLoginUser(),1,tenantCode,1,\"desc\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testUpdateTenant['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "logger.info(result.toString())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.when(tenantMapper.queryByTenantCode(tenantCode)).thenReturn(getList())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "logger.info(result.toString())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Map<String,Object> result = tenantService.updateTenant(getLoginUser(),912222,tenantCode,1,\"desc\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testCreateTenant['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Map<String,Object> result = tenantService.createTenant(getLoginUser(),\"%!1111\",tenantName,1,\"TenantServiceTest\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "logger.info(result.toString())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "logger.info(result.toString())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testUpdateTenant['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "User loginUser = getLoginUser()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR,result.get(Constants.STATUS))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "logger.info(result.toString())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "result = tenantService.createTenant(loginUser,tenantCode,tenantName,1,\"TenantServiceTest\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "result = tenantService.updateTenant(getLoginUser(),1,tenantCode,\"TenantServiceTest001\",1,\"desc\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "result = tenantService.createTenant(loginUser,\"test\",\"test\",1,\"TenantServiceTest\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,result.get(Constants.STATUS))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
11->16 [style = solid, label="loginUser"];
5->12 [style = dashed, label="0"];
19->20 [style = bold, label=""];
1->0 [style = bold, label=""];
16->17 [style = bold, label=""];
11->19 [style = bold, label=""];
2->10 [style = bold, label=""];
15->16 [style = bold, label=""];
0->20 [style = dashed, label="0"];
13->11 [style = bold, label=""];
12->7 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
20->2 [style = bold, label=""];
8->1 [style = bold, label=""];
6->1 [style = bold, label=""];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
5->10 [style = dashed, label="0"];
14->12 [style = bold, label=""];
2->14 [style = bold, label=""];
5->4 [style = bold, label=""];
10->4 [style = bold, label=""];
11->12 [style = solid, label="loginUser"];
9->3 [style = bold, label=""];
7->15 [style = bold, label=""];
0->9 [style = dashed, label="0"];
17->18 [style = bold, label=""];
2->5 [style = bold, label=""];
}
