digraph {
48 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,currentOffsets)))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
52 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@40@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "kafkaProducer.commitTransaction()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "insertData()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "kafkaProducer.initTransactions()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "insertData()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L,1,0L))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "maxTotalRows = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets) || checkpoint2.getPartitionSequenceNumberMap().equals(currentOffsets))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "kafkaProducer.beginTransaction()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,4L,1,2L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
32->53 [style = bold, label=""];
14->3 [style = bold, label=""];
6->3 [style = bold, label=""];
52->44 [style = bold, label=""];
26->32 [style = solid, label="currentOffsets"];
28->50 [style = bold, label=""];
42->56 [style = solid, label="task"];
9->2 [style = solid, label="baseSequenceName"];
9->7 [style = bold, label=""];
30->49 [style = solid, label="desc1"];
36->55 [style = bold, label=""];
54->49 [style = solid, label="desc5"];
25->31 [style = bold, label=""];
48->54 [style = bold, label=""];
8->1 [style = bold, label=""];
42->41 [style = solid, label="task"];
31->30 [style = bold, label=""];
33->48 [style = bold, label=""];
28->42 [style = solid, label="consumerProps"];
9->38 [style = bold, label=""];
4->2 [style = solid, label="endPartitions"];
20->15 [style = bold, label=""];
17->16 [style = bold, label=""];
51->49 [style = solid, label="desc7"];
10->11 [style = bold, label=""];
48->49 [style = solid, label="desc4"];
33->27 [style = solid, label="desc3"];
47->28 [style = bold, label=""];
43->32 [style = bold, label=""];
42->24 [style = solid, label="task"];
11->12 [style = bold, label=""];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
54->41 [style = bold, label=""];
16->19 [style = bold, label=""];
22->18 [style = bold, label=""];
27->46 [style = bold, label=""];
37->42 [style = solid, label="endPartitions"];
17->16 [style = solid, label="task"];
41->49 [style = solid, label="desc6"];
7->38 [style = dashed, label="0"];
38->47 [style = bold, label=""];
30->45 [style = solid, label="desc1"];
0->20 [style = bold, label=""];
56->33 [style = bold, label=""];
24->3 [style = bold, label=""];
51->44 [style = solid, label="desc7"];
39->37 [style = bold, label=""];
56->40 [style = solid, label="desc2"];
35->9 [style = bold, label=""];
3->26 [style = bold, label=""];
42->33 [style = solid, label="task"];
42->51 [style = solid, label="task"];
36->42 [style = solid, label="startPartitions"];
55->39 [style = bold, label=""];
42->24 [style = bold, label=""];
3->14 [style = dotted, label="true"];
15->22 [style = bold, label=""];
54->46 [style = solid, label="desc5"];
2->8 [style = solid, label="task"];
9->17 [style = solid, label="baseSequenceName"];
56->49 [style = solid, label="desc2"];
26->29 [style = solid, label="currentOffsets"];
40->27 [style = bold, label=""];
5->4 [style = bold, label=""];
13->9 [style = bold, label=""];
18->21 [style = bold, label=""];
18->17 [style = solid, label="startPartitions"];
37->42 [style = bold, label=""];
45->40 [style = bold, label=""];
14->5 [style = bold, label=""];
26->8 [style = solid, label="currentOffsets"];
9->42 [style = solid, label="baseSequenceName"];
29->8 [style = bold, label=""];
53->25 [style = bold, label=""];
3->2 [style = solid, label="consumerProps"];
1->43 [style = bold, label=""];
26->29 [style = bold, label=""];
34->45 [style = bold, label=""];
3->14 [style = bold, label=""];
42->30 [style = solid, label="task"];
41->52 [style = solid, label="desc6"];
42->54 [style = solid, label="task"];
51->49 [style = bold, label=""];
49->34 [style = bold, label=""];
5->36 [style = dashed, label="0"];
12->6 [style = bold, label=""];
46->52 [style = bold, label=""];
48->46 [style = solid, label="desc4"];
0->10 [style = bold, label=""];
15->17 [style = solid, label="consumerProps"];
41->51 [style = bold, label=""];
50->36 [style = bold, label=""];
5->2 [style = solid, label="startPartitions"];
30->56 [style = bold, label=""];
36->32 [style = solid, label="startPartitions"];
21->17 [style = solid, label="endPartitions"];
33->49 [style = solid, label="desc3"];
23->9 [style = bold, label=""];
21->17 [style = bold, label=""];
2->8 [style = bold, label=""];
42->48 [style = solid, label="task"];
}
