digraph {
31 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "PowerMock.verifyAll()@@@44@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "workerTask.iteration()@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "expectConvertMessages(1)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "testWakeupInCommitSyncCausesRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "workerTask.iteration()@@@42@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "EasyMock.expectLastCall().andThrow(new WakeupException())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "EasyMock.expectLastCall()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION2))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expectLastCall().andThrow(e)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "offsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "EasyMock.expectLastCall()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PowerMock.replayAll()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expectLastCall()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)rebalanceListener.getValue().onPartitionsAssigned(partitions)return ConsumerRecords.empty()}})@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsRevoked(partitions)return ConsumerRecords.empty()}})@@@6@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "sinkTask.preCommit(offsets)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "EasyMock.expectLastCall()@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "workerTask.initializeAndStart()@@@40@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "EasyMock.expectLastCall()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expectLastCall().andReturn(offsets)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "workerTask.initialize(TASK_CONFIG)@@@39@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "offsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "EasyMock.expectLastCall().andThrow(new WakeupException())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "sinkTask.put(EasyMock.anyObject())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "sinkTask.close(new HashSet<>(partitions))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectInitializeTask()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "expectRebalanceRevocationError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expectLastCall()@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testWakeupInCommitSyncCausesRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expectLastCall()@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "sinkTask.open(partitions)@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "RuntimeException e@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions))@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION))@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expectConsumerPoll(1)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
54 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "EasyMock.expectLastCall()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "consumer.commitSync(EasyMock.anyObject())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final List<TopicPartition> partitions = asList(TOPIC_PARTITION,TOPIC_PARTITION2)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "consumer.resume(Collections.singleton(TOPIC_PARTITION2))@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "workerTask.iteration()@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "expectPollInitialAssignment()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expectLastCall()@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expectLastCall()@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "final Map<TopicPartition,OffsetAndMetadata> offsets = new HashMap<>()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50->48 [style = solid, label="offsets"];
54->52 [style = bold, label=""];
18->31 [style = bold, label=""];
22->25 [style = bold, label=""];
53->5 [style = solid, label="e"];
25->1 [style = bold, label=""];
8->15 [style = bold, label=""];
48->36 [style = bold, label=""];
0->13 [style = bold, label=""];
27->14 [style = bold, label=""];
8->32 [style = bold, label=""];
6->22 [style = bold, label=""];
51->54 [style = bold, label=""];
20->0 [style = bold, label=""];
18->26 [style = bold, label=""];
28->49 [style = bold, label=""];
42->39 [style = bold, label=""];
8->32 [style = dashed, label="0"];
11->5 [style = dashed, label="0"];
49->48 [style = bold, label=""];
32->23 [style = solid, label="partitions"];
19->10 [style = bold, label=""];
15->6 [style = bold, label=""];
12->16 [style = bold, label=""];
38->41 [style = bold, label=""];
5->26 [style = solid, label="partitions"];
30->37 [style = bold, label=""];
16->19 [style = bold, label=""];
4->7 [style = bold, label=""];
50->28 [style = bold, label=""];
5->2 [style = solid, label="partitions"];
3->27 [style = bold, label=""];
26->21 [style = bold, label=""];
47->30 [style = bold, label=""];
43->40 [style = bold, label=""];
37->42 [style = bold, label=""];
5->2 [style = bold, label=""];
52->5 [style = bold, label=""];
32->46 [style = solid, label="partitions"];
31->35 [style = bold, label=""];
50->36 [style = solid, label="offsets"];
1->24 [style = bold, label=""];
7->23 [style = bold, label=""];
32->40 [style = solid, label="partitions"];
5->27 [style = solid, label="partitions"];
13->5 [style = bold, label=""];
9->47 [style = bold, label=""];
5->18 [style = solid, label="partitions"];
11->8 [style = bold, label=""];
14->18 [style = bold, label=""];
23->12 [style = bold, label=""];
10->9 [style = bold, label=""];
13->38 [style = bold, label=""];
40->45 [style = bold, label=""];
41->33 [style = bold, label=""];
45->46 [style = bold, label=""];
51->53 [style = dotted, label="true"];
35->34 [style = bold, label=""];
54->52 [style = solid, label="partitions"];
34->43 [style = bold, label=""];
32->31 [style = solid, label="partitions"];
33->8 [style = bold, label=""];
21->17 [style = bold, label=""];
24->3 [style = bold, label=""];
2->11 [style = bold, label=""];
17->4 [style = bold, label=""];
46->23 [style = bold, label=""];
54->2 [style = solid, label="partitions"];
39->29 [style = bold, label=""];
44->0 [style = bold, label=""];
32->50 [style = bold, label=""];
36->3 [style = bold, label=""];
}
