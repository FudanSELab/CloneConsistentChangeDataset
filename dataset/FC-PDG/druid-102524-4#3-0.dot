digraph {
7 [style = filled, label = "kafkaProducer.commitTransaction()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "unlockAppenderatorBasePersistDirForTask(task1)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2010/P1D\",0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(5,task1.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "insertData()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "kafkaProducer.initTransactions()@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@55@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2011/P1D\",0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "final KafkaIndexTask task2 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "task1.getRunner().getStatus() != Status.PAUSED@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc6 = sd(task1,\"2011/P1D\",0)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2008/P1D\",0)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "kafkaProducer.commitTransaction()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testRestoreAfterPersistingSequences['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc7 = sd(task1,\"2012/P1D\",0)@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testRestoreAfterPersistingSequences['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2008/P1D\",1)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SegmentDescriptor desc5 = sd(task1,\"2010/P1D\",0)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "SegmentDescriptor desc4 = sd(task1,\"2009/P1D\",1)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "kafkaProducer.beginTransaction()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "task1.getRunner().setEndOffsets(ImmutableMap.of(0,5L),false)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "kafkaProducer.send(record).get()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "records = generateSinglePartitionRecords(topic)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "SegmentDescriptor desc3 = sd(task1,\"2009/P1D\",0)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task1.getRunner().getCurrentOffsets())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "task1.stopGracefully(toolboxFactory.build(task1).getConfig())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Thread.sleep(10)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testRunReplicas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "kafkaProducer.beginTransaction()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,5L),ImmutableSet.of(0))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(4,task2.getRunner().getRowIngestionMeters().getProcessed())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "kafkaProducer.initTransactions()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "kafkaProducer.send(record).get()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(),currentOffsets)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final KafkaIndexTask task1 = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final KafkaIndexTask task2 = createTask(task1.getId(),new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L)),consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18->9 [style = solid, label="task1"];
54->56 [style = bold, label=""];
12->44 [style = bold, label=""];
26->18 [style = solid, label="consumerProps"];
57->62 [style = bold, label=""];
23->61 [style = dashed, label="0"];
46->14 [style = solid, label="task1"];
50->55 [style = solid, label="desc2"];
26->46 [style = solid, label="consumerProps"];
18->46 [style = dashed, label="0"];
47->10 [style = bold, label=""];
11->46 [style = bold, label=""];
46->9 [style = solid, label="task1"];
1->45 [style = dashed, label="0"];
30->10 [style = dashed, label="0"];
26->11 [style = bold, label=""];
46->0 [style = solid, label="task1"];
26->47 [style = solid, label="consumerProps"];
16->41 [style = bold, label=""];
20->44 [style = dashed, label="0"];
8->36 [style = bold, label=""];
52->60 [style = bold, label=""];
65->50 [style = solid, label="task1"];
23->13 [style = bold, label=""];
43->24 [style = bold, label=""];
65->63 [style = solid, label="task1"];
47->10 [style = solid, label="task2"];
8->47 [style = bold, label=""];
14->12 [style = solid, label="desc3"];
35->10 [style = bold, label=""];
18->37 [style = solid, label="task1"];
45->35 [style = bold, label=""];
17->21 [style = bold, label=""];
22->13 [style = bold, label=""];
46->37 [style = solid, label="task1"];
22->23 [style = dotted, label="true"];
63->51 [style = bold, label=""];
51->54 [style = bold, label=""];
24->0 [style = bold, label=""];
27->30 [style = bold, label=""];
33->28 [style = bold, label=""];
60->64 [style = bold, label=""];
1->35 [style = bold, label=""];
56->57 [style = bold, label=""];
9->8 [style = bold, label=""];
36->10 [style = solid, label="task2"];
22->23 [style = bold, label=""];
11->18 [style = bold, label=""];
18->0 [style = solid, label="task1"];
6->2 [style = bold, label=""];
37->12 [style = solid, label="desc2"];
18->1 [style = bold, label=""];
50->52 [style = solid, label="desc2"];
18->35 [style = solid, label="task1"];
59->35 [style = bold, label=""];
37->50 [style = dashed, label="0"];
18->39 [style = solid, label="task1"];
39->12 [style = solid, label="desc5"];
29->38 [style = bold, label=""];
65->61 [style = bold, label=""];
17->21 [style = dotted, label="true"];
32->42 [style = bold, label=""];
61->63 [style = bold, label=""];
32->62 [style = dashed, label="0"];
18->34 [style = solid, label="task1"];
40->29 [style = bold, label=""];
7->17 [style = bold, label=""];
18->14 [style = solid, label="task1"];
35->15 [style = bold, label=""];
30->43 [style = bold, label=""];
64->55 [style = bold, label=""];
38->9 [style = bold, label=""];
3->26 [style = bold, label=""];
12->20 [style = bold, label=""];
46->28 [style = solid, label="task1"];
49->65 [style = bold, label=""];
19->40 [style = solid, label="currentOffsets"];
28->12 [style = bold, label=""];
28->12 [style = solid, label="desc7"];
39->33 [style = bold, label=""];
36->47 [style = dashed, label="0"];
58->66 [style = bold, label=""];
53->50 [style = bold, label=""];
46->35 [style = solid, label="task1"];
10->16 [style = bold, label=""];
53->64 [style = solid, label="desc1"];
5->4 [style = bold, label=""];
34->39 [style = bold, label=""];
25->5 [style = bold, label=""];
42->27 [style = bold, label=""];
26->36 [style = solid, label="consumerProps"];
19->40 [style = bold, label=""];
33->12 [style = solid, label="desc6"];
46->33 [style = solid, label="task1"];
53->52 [style = solid, label="desc1"];
34->12 [style = solid, label="desc4"];
46->34 [style = solid, label="task1"];
36->10 [style = bold, label=""];
62->59 [style = bold, label=""];
31->22 [style = bold, label=""];
0->37 [style = bold, label=""];
66->53 [style = bold, label=""];
61->51 [style = solid, label="task2"];
0->12 [style = solid, label="desc1"];
0->53 [style = dashed, label="0"];
14->34 [style = bold, label=""];
15->6 [style = bold, label=""];
48->22 [style = bold, label=""];
17->19 [style = bold, label=""];
50->52 [style = bold, label=""];
37->14 [style = bold, label=""];
13->3 [style = bold, label=""];
65->53 [style = solid, label="task1"];
18->33 [style = solid, label="task1"];
46->45 [style = bold, label=""];
18->28 [style = solid, label="task1"];
46->39 [style = solid, label="task1"];
41->25 [style = bold, label=""];
2->7 [style = bold, label=""];
10->58 [style = bold, label=""];
21->17 [style = bold, label=""];
4->32 [style = bold, label=""];
}
