digraph {
17 [style = filled, label = "assertEquals(\"norm 4\",1.00F,sim.computeLengthNorm(4),0.0F)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "i++@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"norm 5\",1.00F,sim.computeLengthNorm(5),0.0F)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"tf: i=\" + i,d.tf(i),sim.tf(i),0.0F)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ClassicSimilarity d = new ClassicSimilarity()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),sim.computeLengthNorm(6) < 1.0F)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int i = 6@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "SweetSpotSimilarity sim = getSimilarity(\"text_baseline\",)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "i <= 6@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "assertEquals(\"norm 1 == 7\",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int i = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testBaselineParameters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "i <= 1000@@@11@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"tf i=\" + i,1.5F,sim.tf(i),0.0F)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"norm 20\",0.25F,sim.computeLengthNorm(20),0.0F)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "i++@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"norm 16\",0.25F,computeNorm(sim,16),0.0F)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(\"norm 3\",1.00F,sim.computeLengthNorm(3),0.0F)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(\"tf: i=\" + i + \" : s=\" + sim.tf(i) + \" < d=\" + d.tf(i),sim.tf(i) < d.tf(i))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"norm 4\",0.50F,computeNorm(sim,4),0.0F)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(\"norm 1\",1.00F,computeNorm(sim,1),0.0F)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"norm 2 == 6\",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"norm 1\",1.00F,sim.computeLengthNorm(1),0.0F)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "int i = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(\"norm 7 higher then norm 6\",sim.computeLengthNorm(7) < sim.computeLengthNorm(6))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "SweetSpotSimilarity sim = getSimilarity(\"text\",)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i <= 1000@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18->9 [style = solid, label="i"];
2->23 [style = dashed, label="0"];
28->29 [style = bold, label=""];
5->11 [style = solid, label="sim"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
22->15 [style = bold, label=""];
3->1 [style = bold, label=""];
7->3 [style = solid, label="i"];
9->2 [style = bold, label=""];
1->27 [style = dashed, label="0"];
7->1 [style = solid, label="i"];
26->25 [style = bold, label=""];
27->9 [style = bold, label=""];
25->18 [style = bold, label=""];
3->11 [style = bold, label=""];
4->1 [style = solid, label="i"];
9->2 [style = solid, label="i"];
3->4 [style = dotted, label="true"];
7->20 [style = dashed, label="0"];
4->3 [style = solid, label="i"];
18->27 [style = solid, label="i"];
2->9 [style = bold, label=""];
8->24 [style = dashed, label="0"];
18->2 [style = bold, label=""];
20->19 [style = solid, label="i"];
20->25 [style = bold, label=""];
7->4 [style = solid, label="i"];
7->3 [style = bold, label=""];
2->10 [style = dashed, label="0"];
0->7 [style = bold, label=""];
5->10 [style = solid, label="sim"];
6->5 [style = bold, label=""];
26->25 [style = solid, label="i"];
2->9 [style = dotted, label="true"];
16->28 [style = bold, label=""];
20->26 [style = solid, label="i"];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
23->21 [style = bold, label=""];
2->27 [style = dotted, label="true"];
11->10 [style = bold, label=""];
10->12 [style = bold, label=""];
19->26 [style = bold, label=""];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
9->21 [style = dashed, label="0"];
25->19 [style = bold, label=""];
29->14 [style = bold, label=""];
13->5 [style = bold, label=""];
2->27 [style = bold, label=""];
20->25 [style = solid, label="i"];
0->20 [style = bold, label=""];
9->12 [style = dashed, label="0"];
18->2 [style = solid, label="i"];
9->27 [style = solid, label="i"];
2->24 [style = bold, label=""];
5->12 [style = solid, label="sim"];
8->11 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
25->19 [style = dotted, label="true"];
21->17 [style = bold, label=""];
3->1 [style = dotted, label="true"];
25->26 [style = dotted, label="true"];
17->16 [style = bold, label=""];
26->19 [style = solid, label="i"];
24->23 [style = bold, label=""];
}
