digraph {
1 [style = filled, label = "StreamExpression expression@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expression.getParameters().size() != streamExpressions.size() + 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression,,)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "StreamExpressionNamedParameter byExpression = factory.getNamedOperand(expression,\"by\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "this.comp = factory.constructComparator(((StreamExpressionValue)byExpression.getParameter()).getValue(),)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "null == byExpression || !(byExpression.getParameter() instanceof StreamExpressionValue)@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "this.tupleStream = factory.constructStream(streamExpressions.get(0))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "init(factory.constructStream(streamExpressions.get(0)),factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(),))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "this.eq = factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(),)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "UniqueStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression,\"over\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StreamExpression expression@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'by' parameter listing fields to group by but didn't find one\",expression))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "1 != streamExpressions.size()@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression,streamExpressions.size()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StreamFactory factory@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StreamFactory factory@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "UniqueStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "ReducerStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\",expression))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "this.tupleStream = new PushBackStream(factory.constructStream(streamExpressions.get(0)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->8 [style = solid, label="expression"];
1->9 [style = solid, label="expression"];
16->0 [style = bold, label=""];
10->21 [style = dashed, label="0"];
12->23 [style = dashed, label="0"];
22->23 [style = dotted, label="true"];
13->0 [style = solid, label="expression"];
11->14 [style = bold, label=""];
0->19 [style = bold, label=""];
2->6 [style = bold, label=""];
8->18 [style = bold, label=""];
6->18 [style = bold, label=""];
16->17 [style = dotted, label="true"];
11->12 [style = dotted, label="true"];
11->22 [style = dashed, label="0"];
22->21 [style = bold, label=""];
3->4 [style = dotted, label="true"];
13->8 [style = solid, label="expression"];
16->20 [style = dotted, label="true"];
11->12 [style = bold, label=""];
19->2 [style = bold, label=""];
2->9 [style = bold, label=""];
5->18 [style = dashed, label="0"];
1->0 [style = solid, label="expression"];
22->23 [style = bold, label=""];
13->9 [style = solid, label="expression"];
17->9 [style = solid, label="expression"];
3->0 [style = bold, label=""];
15->4 [style = dotted, label="true"];
9->6 [style = bold, label=""];
15->13 [style = dotted, label="true"];
0->7 [style = bold, label=""];
1->8 [style = solid, label="expression"];
13->12 [style = solid, label="expression"];
6->5 [style = bold, label=""];
17->19 [style = solid, label="expression"];
12->10 [style = bold, label=""];
13->7 [style = solid, label="expression"];
18->22 [style = bold, label=""];
2->9 [style = dotted, label="true"];
8->5 [style = bold, label=""];
23->21 [style = bold, label=""];
17->23 [style = solid, label="expression"];
7->19 [style = dashed, label="0"];
4->20 [style = dashed, label="0"];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
7->11 [style = solid, label="overExpression"];
6->8 [style = dotted, label="true"];
6->11 [style = bold, label=""];
15->0 [style = bold, label=""];
6->8 [style = bold, label=""];
1->12 [style = solid, label="expression"];
12->14 [style = bold, label=""];
1->7 [style = solid, label="expression"];
5->11 [style = bold, label=""];
8->11 [style = bold, label=""];
3->1 [style = dotted, label="true"];
10->14 [style = dashed, label="0"];
17->0 [style = solid, label="expression"];
19->22 [style = solid, label="byExpression"];
}
