digraph {
2 [style = filled, label = "fetchFileChunk['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "FetchResult res = fetchChunks(Lists.newArrayList(FILE_CHUNK_INDEX))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "fetchBothChunks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(res.successChunks,Sets.newHashSet(FILE_CHUNK_INDEX))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "FetchResult res = fetchChunks(Arrays.asList(FILE_CHUNK_INDEX))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "fetchFileChunk['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(res.successChunks,Sets.newHashSet(BUFFER_CHUNK_INDEX,FILE_CHUNK_INDEX))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "res.releaseBuffers()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Sets.newHashSet(FILE_CHUNK_INDEX),res.successChunks)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertTrue(res.failedChunks.isEmpty())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertBufferListsEqual(res.buffers,Lists.newArrayList(fileChunk))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertBufferListsEqual(Arrays.asList(fileChunk),res.buffers)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "FetchResult res = fetchChunks(Lists.newArrayList(BUFFER_CHUNK_INDEX,FILE_CHUNK_INDEX))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertBufferListsEqual(res.buffers,Lists.newArrayList(bufferChunk,fileChunk))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
5->12 [style = dashed, label="0"];
2->1 [style = bold, label=""];
9->4 [style = bold, label=""];
8->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
3->9 [style = bold, label=""];
0->4 [style = bold, label=""];
10->12 [style = bold, label=""];
11->10 [style = bold, label=""];
1->6 [style = dashed, label="0"];
0->13 [style = dashed, label="0"];
3->13 [style = bold, label=""];
12->3 [style = bold, label=""];
0->9 [style = dashed, label="0"];
5->7 [style = dashed, label="0"];
6->7 [style = bold, label=""];
13->4 [style = bold, label=""];
}
