digraph {
16 [style = filled, label = "assertGetTracesReturns(traceIds,asList(span1))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "List<String> traceIds = asList(LOTS_OF_SPANS(0(.traceId(),LOTS_OF_SPANS(1(.traceId())@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(traces().getTraces(traceIds).execute()).isEmpty()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "accept(LOTS_OF_SPANS(0(,LOTS_OF_SPANS(1()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "getTraces_onlyReturnsTracesThatMatch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "getTraces_onlyReturnsTracesThatMatch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Span span1 = spanBuilder(testSuffix).build(),span2 = spanBuilder(testSuffix).build()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertGetTracesReturnsEmpty(traceIds)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "accept(LOTS_OF_SPANS(0(,LOTS_OF_SPANS(2()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "String testSuffix = testSuffix(testInfo)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "accept(span1,span2)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertGetTracesReturnsEmpty(shortTraceIds)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "getTraces_returnsEmptyOnNotFound['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<String> traceIds = asList(span1.traceId(),newTraceId())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "List<String> shortTraceIds = traceIds.stream().map(null).collect(Collectors.toList())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "List<String> longTraceIds = traceIds.stream().map(null).collect(Collectors.toList())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestInfo testInfo@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(traces().getTraces(traceIds).execute()).containsExactlyInAnyOrder(asList(LOTS_OF_SPANS(0(),asList(LOTS_OF_SPANS(1())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(traces().getTraces(longTraceIds).execute()).isEmpty()@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(traces().getTraces(traceIds).execute()).containsOnly(asList(LOTS_OF_SPANS(0())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
17->5 [style = bold, label=""];
16->13 [style = bold, label=""];
3->17 [style = dashed, label="0"];
13->15 [style = solid, label="shortTraceIds"];
18->17 [style = bold, label=""];
1->18 [style = bold, label=""];
9->16 [style = solid, label="traceIds"];
12->16 [style = bold, label=""];
11->9 [style = bold, label=""];
11->12 [style = solid, label="span1"];
19->0 [style = bold, label=""];
9->14 [style = solid, label="traceIds"];
6->18 [style = dashed, label="0"];
7->8 [style = solid, label="testInfo"];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
10->8 [style = bold, label=""];
0->1 [style = bold, label=""];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
9->14 [style = bold, label=""];
13->15 [style = bold, label=""];
8->11 [style = bold, label=""];
11->16 [style = solid, label="span1"];
10->7 [style = dotted, label="true"];
}
