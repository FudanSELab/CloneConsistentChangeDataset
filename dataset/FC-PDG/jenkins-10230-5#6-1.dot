digraph {
18 [style = filled, label = "assertThat(result,failedWith(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-,2,3\" is not a valid option\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,-\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,-,3\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-,2,3\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1--', expected correct notation M,N or M-N\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,2,-\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,-,3\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,-', expected string with a range M-N\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"---\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1--\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"-,2,3\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsHyphen['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeContainsHyphen['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,-,3', expected string with a range M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsHyphen['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"---\" is not a valid option\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"--1\" is not a valid option\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"--1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->6 [style = solid, label="result"];
10->21 [style = dashed, label="0"];
13->8 [style = solid, label="result"];
14->6 [style = solid, label="result"];
12->6 [style = solid, label="result"];
21->18 [style = solid, label="result"];
0->23 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
16->7 [style = bold, label=""];
16->7 [style = solid, label="result"];
12->5 [style = solid, label="result"];
23->3 [style = solid, label="result"];
10->13 [style = dashed, label="0"];
17->22 [style = bold, label=""];
15->16 [style = bold, label=""];
12->6 [style = bold, label=""];
1->13 [style = bold, label=""];
21->18 [style = bold, label=""];
7->3 [style = bold, label=""];
14->5 [style = solid, label="result"];
0->7 [style = bold, label=""];
3->9 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
11->0 [style = bold, label=""];
8->20 [style = bold, label=""];
12->14 [style = dashed, label="0"];
24->21 [style = bold, label=""];
4->20 [style = dashed, label="0"];
1->24 [style = dashed, label="0"];
5->24 [style = bold, label=""];
19->23 [style = bold, label=""];
0->7 [style = solid, label="result"];
22->5 [style = solid, label="result"];
23->7 [style = solid, label="result"];
9->17 [style = dashed, label="0"];
12->22 [style = dashed, label="0"];
9->14 [style = bold, label=""];
0->3 [style = solid, label="result"];
2->18 [style = dashed, label="0"];
13->2 [style = solid, label="result"];
3->17 [style = bold, label=""];
10->2 [style = bold, label=""];
23->7 [style = bold, label=""];
9->12 [style = bold, label=""];
18->8 [style = bold, label=""];
8->4 [style = bold, label=""];
10->2 [style = solid, label="result"];
21->8 [style = solid, label="result"];
1->10 [style = bold, label=""];
10->8 [style = solid, label="result"];
14->6 [style = bold, label=""];
16->3 [style = solid, label="result"];
2->8 [style = bold, label=""];
22->6 [style = bold, label=""];
13->2 [style = bold, label=""];
}
