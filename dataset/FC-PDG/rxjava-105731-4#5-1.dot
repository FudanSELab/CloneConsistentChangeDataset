digraph {
4 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"b\",\"cc\",\"dd\",\"eee\",\"fff\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Supplier<Map<Integer,Collection<String>>> mapFactory = new Supplier<Map<Integer,Collection<String>>>(){@Override public Map<Integer,Collection<String>> get(){throw new RuntimeException(\"Forced failure\")}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(objectSubscriber,never()).onNext(expected)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "toMultimapWithMapThrowingFactoryObservable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<>()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Observable<Map<Integer,Collection<String>>> mapped = source.toMultimap(lengthFunc,new Function<String,String>(){@Override public String apply(String v){return v}},mapFactory).toObservable()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "verify(objectObserver,never()).onNext(expected)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Flowable<Map<Integer,Collection<String>>> mapped = source.toMultimap(lengthFunc,new Function<String,String>(){@Override public String apply(String v){return v}},mapFactory).toFlowable()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "verify(objectSubscriber,never()).onComplete()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected.put(3,Arrays.asList(\"eee\",\"fff\"))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "mapped.subscribe(objectObserver)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "verify(objectObserver,never()).onComplete()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expected.put(2,Arrays.asList(\"cc\",\"dd\"))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<Integer,Collection<String>> expected = new HashMap<Integer,Collection<String>>()@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "mapped.subscribe(objectSubscriber)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "verify(objectObserver,times(1)).onError(any())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verify(objectSubscriber,times(1)).onError(any())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "toMultimapWithMapThrowingFactoryFlowable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "toMultimapWithMapThrowingFactoryFlowable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"b\",\"cc\",\"dd\",\"eee\",\"fff\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
16->13 [style = bold, label=""];
12->5 [style = bold, label=""];
17->1 [style = bold, label=""];
2->6 [style = bold, label=""];
0->17 [style = bold, label=""];
7->14 [style = dashed, label="0"];
11->4 [style = bold, label=""];
1->7 [style = solid, label="expected"];
18->19 [style = bold, label=""];
2->18 [style = bold, label=""];
12->7 [style = solid, label="expected"];
9->7 [style = bold, label=""];
7->3 [style = bold, label=""];
4->0 [style = bold, label=""];
6->18 [style = dashed, label="0"];
9->19 [style = dashed, label="0"];
8->1 [style = bold, label=""];
1->12 [style = dashed, label="0"];
5->2 [style = bold, label=""];
1->14 [style = solid, label="expected"];
19->14 [style = bold, label=""];
0->8 [style = bold, label=""];
10->4 [style = bold, label=""];
3->15 [style = dashed, label="0"];
8->17 [style = dashed, label="0"];
14->15 [style = bold, label=""];
6->9 [style = bold, label=""];
4->13 [style = dashed, label="0"];
8->12 [style = bold, label=""];
13->0 [style = bold, label=""];
}
