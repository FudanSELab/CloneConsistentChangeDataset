digraph {
22 [style = filled, label = "assertThat(doc.getFields(\"very.inner.field\").length,equalTo(1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "DocumentMapper docMapper = createDocumentMapper(mapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(doc.getFields(\"very.far.inner.field\")(0(.stringValue(),equalTo(\"foo\"))@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"copy_test\").field(\"type\",\"text\").field(\"copy_to\",\"very.inner.field\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(doc.getFields(\"very.far.inner.field\")(0(.stringValue(),equalTo(\"foo\"))@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(doc.getFields(\"very.far.inner.field\").length,equalTo(1))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(doc.getFields(\"very.inner.field\")(0(.stringValue(),equalTo(\"foo\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(doc.getFields(\"copy_test\").length,equalTo(1))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(doc.getFields(\"copy_test\").length,equalTo(1))@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(doc.getFields(\"new_field\").length,equalTo(1))@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "ParseContext.Document doc = docMapper.parse(source(null)).rootDoc()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(doc.getFields(\"copy_test\")(0(.stringValue(),equalTo(\"foo\"))@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(doc.getFields(\"new_field\")(0(.stringValue(),equalTo(\"bar\"))@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testCopyToDynamicInnerInnerObjectParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "ParseContext.Document doc = docMapper.parse(new SourceToParse(\"test\",\"1\",json,XContentType.JSON)).rootDoc()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(doc.getFields(\"copy_test\")(0(.stringValue(),equalTo(\"foo\"))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type1\").startObject(\"properties\").startObject(\"copy_test\").field(\"type\",\"text\").field(\"copy_to\",\"very.far.inner.field\").endObject().startObject(\"very\").field(\"type\",\"object\").startObject(\"properties\").startObject(\"far\").field(\"type\",\"object\").endObject().endObject().endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(doc.getFields(\"new_field\")(0(.stringValue(),equalTo(\"bar\"))@@@32@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(doc.getFields(\"very.far.inner.field\").length,equalTo(1))@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(doc.getFields(\"new_field\").length,equalTo(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BytesReference json = BytesReference.bytes(jsonBuilder().startObject().field(\"copy_test\",\"foo\").field(\"new_field\",\"bar\").endObject())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testCopyToDynamicInnerObjectParsing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testCopyToDynamicInnerInnerObjectParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23->2 [style = bold, label=""];
13->15 [style = bold, label=""];
4->23 [style = dashed, label="0"];
7->8 [style = bold, label=""];
8->4 [style = bold, label=""];
9->3 [style = bold, label=""];
15->17 [style = bold, label=""];
14->12 [style = bold, label=""];
7->22 [style = bold, label=""];
16->13 [style = bold, label=""];
1->6 [style = bold, label=""];
3->7 [style = bold, label=""];
5->10 [style = bold, label=""];
20->1 [style = bold, label=""];
4->2 [style = bold, label=""];
12->16 [style = bold, label=""];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
21->20 [style = bold, label=""];
11->19 [style = bold, label=""];
2->0 [style = bold, label=""];
22->23 [style = bold, label=""];
20->1 [style = solid, label="mapping"];
10->20 [style = dashed, label="0"];
18->11 [style = bold, label=""];
8->22 [style = dashed, label="0"];
10->1 [style = solid, label="mapping"];
17->18 [style = bold, label=""];
}
