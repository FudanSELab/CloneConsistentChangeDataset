digraph {
4 [style = filled, label = "assertEquals(LONG_VAL,converter.convert(new StringWrapper(STR_VAL)))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testAndThen['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "testAndThen['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Converter<StringWrapper,Long> converter = first.andThen(STR_TO_LONG)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testAndThen['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"StringWrapper.andThen(string2long)\",converter.toString())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(first.andThen(STR_TO_LONG),first.andThen(STR_TO_LONG))@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Converter<StringWrapper,String> first = new Converter<StringWrapper,String>(){@Override public String doForward(StringWrapper object){return object.value}@Override public StringWrapper doBackward(String object){return new StringWrapper(object)}@Override public String toString(){return \"StringWrapper\"}}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(STR_VAL,converter.reverse().convert(LONG_VAL).value)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->0 [style = bold, label=""];
4->3 [style = bold, label=""];
5->1 [style = bold, label=""];
3->5 [style = bold, label=""];
7->0 [style = bold, label=""];
6->0 [style = bold, label=""];
2->4 [style = bold, label=""];
0->2 [style = bold, label=""];
}
