digraph {
5 [style = filled, label = "String originalExpressionString = \"search(collection1,fl=\"id,first\",sort=\"first asc\",q=\"presentTitles:\\\"chief, executive officer\\\" AND age:(36 TO *(\")\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(expressionString.contains(\"name=model\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString),factory)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "testTextLogitStreamWithFeaturesSelection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(expressionString.contains(\"field=tv_text\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String secondExpressionString = secondStream.toExpression(factory).toString()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String expressionString = logitStream.toExpression(factory).toString()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"*:*\"\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertFalse(expressionString.contains(\"terms=\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testCloudSolrStreamWithEscapedQuote['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String expr = \"tlogit(\" + \"collection1, \" + \"q=\"*:*\", \" + \"name=\"model\", \" + \"featuresSelection(collection1, q=\"*:*\", featureSet=\"first\", field=\"tv_text\", outcome=\"out_i\", numTerms=4), \" + \"field=\"tv_text\", \" + \"outcome=\"out_i\", \" + \"maxIterations=100)\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TextLogitStream logitStream = new TextLogitStream(StreamExpressionParser.parse(expr),factory)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(expressionString.contains(\"featuresSelection(\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(expressionString.contains(\"maxIterations=100\"))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(secondExpressionString.contains(\"q=\"presentTitles:\\\"chief, executive officer\\\" AND age:(36 TO *(\"\"))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString),factory)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "String firstExpressionString = firstStream.toExpression(factory).toString()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testCloudSolrStreamWithEscapedQuote['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertTrue(expressionString.contains(\"outcome=out_i\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(firstExpressionString.contains(\"q=\"presentTitles:\\\"chief, executive officer\\\" AND age:(36 TO *(\"\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
10->14 [style = bold, label=""];
16->10 [style = bold, label=""];
0->19 [style = dashed, label="0"];
9->12 [style = solid, label="expr"];
17->9 [style = bold, label=""];
12->15 [style = bold, label=""];
18->19 [style = bold, label=""];
4->2 [style = solid, label="firstExpressionString"];
7->0 [style = bold, label=""];
4->2 [style = bold, label=""];
4->7 [style = bold, label=""];
11->18 [style = bold, label=""];
19->16 [style = bold, label=""];
6->12 [style = dashed, label="0"];
6->4 [style = bold, label=""];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
15->11 [style = bold, label=""];
4->15 [style = dashed, label="0"];
5->4 [style = bold, label=""];
9->12 [style = bold, label=""];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
3->16 [style = dashed, label="0"];
5->6 [style = solid, label="originalExpressionString"];
}
