digraph {
4 [style = filled, label = "Flowable<String> os = ASYNC_OBSERVABLE_OF_INFINITE_INTEGERS(new CountDownLatch(1)).onBackpressureBuffer().zipWith(ASYNC_OBSERVABLE_OF_INFINITE_INTEGERS(new CountDownLatch(1)).onBackpressureBuffer(),new BiFunction<Integer,Integer,String>(){@Override public String apply(Integer a,Integer b){return a + \"-\" + b}}).take(5)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(5,ts.values().size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"2-2\",ts.values().get(1))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"2-2\",to.values().get(1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Observable<String> os = ASYNC_OBSERVABLE_OF_INFINITE_INTEGERS(new CountDownLatch(1)).zipWith(ASYNC_OBSERVABLE_OF_INFINITE_INTEGERS(new CountDownLatch(1)),new BiFunction<Integer,Integer,String>(){@Override public String apply(Integer a,Integer b){return a + \"-\" + b}}).take(5)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"5-5\",ts.values().get(4))@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "os.subscribe(to)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "to.assertNoErrors()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"1-1\",ts.values().get(0))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"5-5\",to.values().get(4))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TestObserver<String> to = new TestObserver<String>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "startAsync['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(5,to.values().size())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ts.assertNoErrors()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<String>()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "startAsync['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"1-1\",to.values().get(0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "os.subscribe(ts)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "startAsync['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
11->4 [style = bold, label=""];
18->12 [style = bold, label=""];
2->9 [style = solid, label="ts"];
12->16 [style = bold, label=""];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
8->21 [style = dashed, label="0"];
0->20 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
15->18 [style = bold, label=""];
7->3 [style = bold, label=""];
2->10 [style = dashed, label="0"];
0->7 [style = bold, label=""];
5->16 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->4 [style = bold, label=""];
1->17 [style = dashed, label="0"];
19->13 [style = bold, label=""];
5->0 [style = bold, label=""];
7->19 [style = dashed, label="0"];
4->15 [style = dashed, label="0"];
3->8 [style = bold, label=""];
2->18 [style = dashed, label="0"];
9->5 [style = bold, label=""];
18->12 [style = solid, label="to"];
14->15 [style = bold, label=""];
10->9 [style = bold, label=""];
9->12 [style = dashed, label="0"];
20->19 [style = bold, label=""];
13->21 [style = bold, label=""];
16->20 [style = bold, label=""];
10->9 [style = solid, label="ts"];
21->17 [style = bold, label=""];
}
