digraph {
1 [style = filled, label = "assertThat(enumerable.longCount(),equalTo(0L))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(enumerable.any(),is(true))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(enumerator.current(),equalTo(\"foo\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(enumerable.longCount(),equalTo(1L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(enumerable.any(),is(false))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Enumerable<Object> enumerable = Linq4j.emptyEnumerable()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testEmptyEnumerable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(enumerator.moveNext(),is(false))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testSingletonEnumerable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Enumerator<Object> enumerator = enumerable.enumerator()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testEmptyEnumerable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(enumerator.moveNext(),is(false))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Enumerator<String> enumerator = enumerable.enumerator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Enumerable<String> enumerable = Linq4j.singletonEnumerable(\"foo\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(enumerator.moveNext(),is(true))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
7->13 [style = bold, label=""];
8->14 [style = bold, label=""];
6->4 [style = bold, label=""];
14->9 [style = bold, label=""];
4->14 [style = dashed, label="0"];
13->12 [style = bold, label=""];
0->9 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
9->10 [style = bold, label=""];
5->7 [style = dashed, label="0"];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
0->1 [style = bold, label=""];
4->0 [style = bold, label=""];
12->11 [style = bold, label=""];
}
