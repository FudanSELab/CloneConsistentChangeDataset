digraph {
17 [style = filled, label = "Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).toQuery(createShardContext())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testToQueryMultipleFieldsBooleanQuery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,0).getTerm(),equalTo(new Term(STRING_FIELD_NAME_2,\"test\")))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,2).getTerm(),equalTo(new Term(STRING_FIELD_NAME,\"test\")))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(bQuery.getDisjuncts().size(),equalTo(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testToQueryFieldsWildcard['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(dQuery.getTieBreakerMultiplier(),equalTo(1.0f))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery)query@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assumeTrue(\"test runs only when at least a type is registered\",getCurrentTypes().length > 0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(query,instanceOf())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(dQuery.getDisjuncts().size(),equalTo(3))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "DisjunctionMaxQuery bQuery = (DisjunctionMaxQuery)query@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testToQueryFieldsWildcard['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,1).getTerm(),equalTo(new Term(STRING_FIELD_NAME,\"test\")))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,0).getTerm(),equalTo(new Term(STRING_FIELD_NAME,\"test\")))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,1).getTerm(),equalTo(new Term(STRING_FIELD_NAME_2,\"test\")))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(dQuery.getDisjuncts().size(),equalTo(2))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,1).getTerm(),equalTo(new Term(STRING_FIELD_NAME_2,\"test\")))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(assertDisjunctionSubQuery(query,,0).getTerm(),equalTo(new Term(STRING_FIELD_NAME,\"test\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
17->8 [style = bold, label=""];
5->12 [style = dashed, label="0"];
16->18 [style = bold, label=""];
7->17 [style = dashed, label="0"];
2->3 [style = bold, label=""];
17->14 [style = solid, label="query"];
8->14 [style = bold, label=""];
8->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
7->8 [style = bold, label=""];
15->16 [style = bold, label=""];
17->8 [style = solid, label="query"];
5->16 [style = dashed, label="0"];
12->13 [style = bold, label=""];
6->4 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
0->1 [style = bold, label=""];
0->13 [style = dashed, label="0"];
4->12 [style = bold, label=""];
0->18 [style = dashed, label="0"];
3->17 [style = bold, label=""];
14->15 [style = bold, label=""];
10->9 [style = bold, label=""];
4->5 [style = bold, label=""];
19->3 [style = bold, label=""];
7->8 [style = solid, label="query"];
7->6 [style = solid, label="query"];
}
