digraph {
4 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset4\")@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(Lists.newArrayList(dataset5,dataset4,dataset3,dataset2,dataset1))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
71 [style = filled, label = "MySource mySource = new MySource(true,finder)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(Lists.newArrayList(dataset3,dataset2,dataset1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "SourceState sourceStateSpy = Mockito.spy(sourceState)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p2\")@@@49@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset3\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "List<WorkUnitState> workUnitStates = workUnits.stream().map(null).collect(Collectors.toList())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset3\")@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "SourceState sourceStateSpy = Mockito.spy(sourceState)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
58 [style = filled, label = "Assert.assertEquals(workUnits.size(),3)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "workUnitStates = workUnits.stream().map(null).collect(Collectors.toList())@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "verifyWorkUnitState(workUnits,\"dataset3\",null,false,false)@@@28@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "Dataset dataset3 = new SimpleDatasetForTesting(\"dataset3\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "workUnitStream = mySource.getWorkunitStream(sourceStateSpy)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(workUnits.size(),3)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "workUnits = Lists.newArrayList(workUnitStream.getWorkUnits())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset2\")@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "workUnits = Lists.newArrayList(workUnitStream.getWorkUnits())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
59 [style = filled, label = "workUnits = Lists.newArrayList(workUnitStream.getWorkUnits())@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p2\")@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "testDrilldown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "List<WorkUnitState> workUnitStates = workUnits.stream().map(null).collect(Collectors.toList())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testNonDrilldown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset2\")@@@46@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testNonDrilldown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "workUnitStream = mySource.getWorkunitStream(sourceStateSpy)@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p1\")@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset2\")@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset3\")@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset3\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
61 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset1\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "workUnitStream = mySource.getWorkunitStream(sourceStateSpy)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(Lists.newArrayList(dataset5,dataset4,dataset3,dataset2,dataset1))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN))@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset1\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(workUnits.size(),4)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "MySource mySource = new MySource(false,finder)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(workUnits.get(2).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p2\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertTrue(workUnits.get(1).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset5\")@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN))@@@45@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(workUnits.size(),2)@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN))@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p1\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Dataset dataset3 = new SimplePartitionableDatasetForTesting(\"dataset3\",Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),new SimpleDatasetPartitionForTesting(\"p2\"),new SimpleDatasetPartitionForTesting(\"p3\")))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset2\")@@@48@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Dataset dataset4 = new SimpleDatasetForTesting(\"dataset4\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\",Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),new SimpleDatasetPartitionForTesting(\"p2\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset2\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Dataset dataset5 = new SimpleDatasetForTesting(\"dataset5\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p3\")@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY,3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p1\")@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "workUnitStates = workUnits.stream().map(null).collect(Collectors.toList())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(workUnits.size(),4)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "SourceState sourceState = new SourceState()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\",Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),new SimpleDatasetPartitionForTesting(\"p2\"),new SimpleDatasetPartitionForTesting(\"p3\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "workUnitStates = workUnits.stream().map(null).collect(Collectors.toList())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN),\"dataset3\")@@@36@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "verifyWorkUnitState(workUnits,\"dataset3\",null,false,false)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
57 [style = filled, label = "Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN),\"p3\")@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "workUnitStream = mySource.getWorkunitStream(sourceStateSpy)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "workUnits = Lists.newArrayList(workUnitStream.getWorkUnits())@@@34@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(workUnits.size(),3)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->15 [style = solid, label="sourceStateSpy"];
67->75 [style = solid, label="sourceState"];
47->2 [style = solid, label="finder"];
70->69 [style = bold, label=""];
73->74 [style = bold, label=""];
38->68 [style = dashed, label="0"];
34->13 [style = solid, label="dataset3"];
52->55 [style = bold, label=""];
59->58 [style = bold, label=""];
75->66 [style = solid, label="sourceStateSpy"];
39->47 [style = solid, label="dataset5"];
18->55 [style = dashed, label="0"];
0->12 [style = solid, label="sourceStateSpy"];
37->42 [style = dashed, label="0"];
16->26 [style = dashed, label="0"];
71->67 [style = bold, label=""];
51->48 [style = bold, label=""];
33->42 [style = bold, label=""];
14->69 [style = solid, label="dataset1"];
31->30 [style = bold, label=""];
39->47 [style = bold, label=""];
31->46 [style = bold, label=""];
13->2 [style = solid, label="finder"];
10->47 [style = solid, label="dataset2"];
19->3 [style = bold, label=""];
26->68 [style = bold, label=""];
28->33 [style = dashed, label="0"];
64->52 [style = bold, label=""];
30->46 [style = dashed, label="0"];
36->31 [style = bold, label=""];
10->13 [style = solid, label="dataset2"];
37->21 [style = bold, label=""];
14->10 [style = bold, label=""];
54->66 [style = bold, label=""];
41->49 [style = bold, label=""];
67->56 [style = bold, label=""];
11->18 [style = bold, label=""];
3->0 [style = bold, label=""];
46->41 [style = bold, label=""];
55->76 [style = bold, label=""];
35->47 [style = solid, label="dataset4"];
31->41 [style = solid, label="workUnits"];
8->17 [style = bold, label=""];
67->40 [style = solid, label="sourceState"];
26->16 [style = bold, label=""];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
10->34 [style = bold, label=""];
25->37 [style = bold, label=""];
47->2 [style = bold, label=""];
11->52 [style = dashed, label="0"];
34->35 [style = bold, label=""];
4->24 [style = dashed, label="0"];
63->29 [style = bold, label=""];
10->62 [style = dashed, label="0"];
56->40 [style = bold, label=""];
22->11 [style = bold, label=""];
14->47 [style = solid, label="dataset1"];
32->73 [style = bold, label=""];
74->75 [style = bold, label=""];
60->54 [style = bold, label=""];
58->61 [style = bold, label=""];
27->14 [style = bold, label=""];
39->13 [style = bold, label=""];
33->4 [style = bold, label=""];
35->39 [style = bold, label=""];
23->32 [style = bold, label=""];
61->21 [style = bold, label=""];
45->0 [style = solid, label="workUnits"];
30->9 [style = bold, label=""];
14->13 [style = solid, label="dataset1"];
33->43 [style = solid, label="workUnits"];
44->14 [style = bold, label=""];
22->64 [style = dashed, label="0"];
70->69 [style = solid, label="dataset3"];
6->15 [style = bold, label=""];
49->50 [style = bold, label=""];
53->14 [style = bold, label=""];
24->33 [style = bold, label=""];
21->5 [style = bold, label=""];
32->8 [style = bold, label=""];
75->3 [style = bold, label=""];
69->71 [style = solid, label="finder"];
75->29 [style = solid, label="sourceStateSpy"];
26->1 [style = dashed, label="0"];
35->13 [style = solid, label="dataset4"];
65->63 [style = bold, label=""];
28->22 [style = bold, label=""];
7->36 [style = bold, label=""];
19->73 [style = dashed, label="0"];
13->2 [style = bold, label=""];
37->57 [style = bold, label=""];
62->70 [style = bold, label=""];
40->36 [style = solid, label="sourceState"];
42->43 [style = bold, label=""];
39->13 [style = solid, label="dataset5"];
20->29 [style = bold, label=""];
0->6 [style = bold, label=""];
45->3 [style = bold, label=""];
17->32 [style = dashed, label="0"];
2->40 [style = bold, label=""];
50->48 [style = solid, label="sourceStateSpy"];
34->47 [style = solid, label="dataset3"];
1->26 [style = bold, label=""];
57->72 [style = bold, label=""];
72->60 [style = bold, label=""];
40->0 [style = solid, label="sourceState"];
17->19 [style = bold, label=""];
50->24 [style = solid, label="sourceStateSpy"];
4->28 [style = bold, label=""];
75->0 [style = solid, label="sourceStateSpy"];
9->23 [style = bold, label=""];
34->70 [style = dashed, label="0"];
40->7 [style = bold, label=""];
29->12 [style = bold, label=""];
48->45 [style = bold, label=""];
69->71 [style = bold, label=""];
12->25 [style = bold, label=""];
50->51 [style = bold, label=""];
15->24 [style = bold, label=""];
76->65 [style = bold, label=""];
40->50 [style = solid, label="sourceState"];
14->62 [style = bold, label=""];
13->47 [style = dashed, label="0"];
62->69 [style = solid, label="dataset2"];
33->64 [style = bold, label=""];
66->59 [style = bold, label=""];
16->38 [style = bold, label=""];
8->23 [style = dashed, label="0"];
}
