digraph {
12 [style = filled, label = "assertEquals(1234,casted.getObject())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(\"1234\",casted.getString())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "val.setValue(1234).setExists(true)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(casted.exists())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(val instanceof StringValue)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "objectCastingTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertTrue(val instanceof AnalyticsValue)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "StringValue casted = (StringValue)val@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "val.setValue(20).setExists(true)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "TestLongValue val = new TestLongValue()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(20,casted.getObject())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "AnalyticsValue casted = (AnalyticsValue)val@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(new Integer(1234),casted.getObject())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(new Integer(20),casted.getObject())@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "TestIntValue val = new TestIntValue()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "val.setValue(20L).setExists(true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "val.setValue(1234L).setExists(true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"20\",casted.getString())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(casted.exists())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "objectCastingTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "stringCastingTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
14->16 [style = bold, label=""];
1->4 [style = bold, label=""];
16->13 [style = bold, label=""];
7->16 [style = dashed, label="0"];
18->16 [style = solid, label="val"];
0->12 [style = bold, label=""];
0->15 [style = dashed, label="0"];
3->15 [style = bold, label=""];
8->14 [style = dashed, label="0"];
10->6 [style = bold, label=""];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
20->4 [style = bold, label=""];
6->18 [style = dashed, label="0"];
1->20 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
13->19 [style = bold, label=""];
12->4 [style = bold, label=""];
5->11 [style = dashed, label="0"];
11->3 [style = bold, label=""];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
15->20 [style = bold, label=""];
2->13 [style = dashed, label="0"];
6->8 [style = bold, label=""];
6->7 [style = solid, label="val"];
6->8 [style = solid, label="val"];
5->19 [style = dashed, label="0"];
19->3 [style = bold, label=""];
18->14 [style = bold, label=""];
2->11 [style = bold, label=""];
17->18 [style = bold, label=""];
18->14 [style = solid, label="val"];
2->5 [style = bold, label=""];
}
