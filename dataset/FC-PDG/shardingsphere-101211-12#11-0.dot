digraph {
2 [style = filled, label = "assertThat(actual.getStatementId(),is(\"sql\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNewInstance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "PostgreSQLComParsePacket actual = new PostgreSQLComParsePacket(payload)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<PostgreSQLBinaryStatementParameterType> types = actual.getBinaryStatementParameterTypes()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertNewInstance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "verify(payload).readInt4()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(types.get(0).getColumnType(),is(PostgreSQLBinaryColumnType.POSTGRESQL_TYPE_UNSPECIFIED))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(actual.getIdentifier(),is(PostgreSQLCommandPacketType.PARSE_COMMAND))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(types.size(),equalTo(1))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(actual.getSql(),is(\"sql\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "actual.write(payload)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "List<PostgreSQLBinaryColumnType> types = actual.getBinaryStatementColumnTypes()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "when(payload.readStringNul()).thenReturn(\"sql\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertNewInstance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "PostgreSQLComQueryPacket actual = new PostgreSQLComQueryPacket(payload)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(types.get(0),is(PostgreSQLBinaryColumnType.POSTGRESQL_TYPE_UNSPECIFIED))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(actual.getIdentifier(),is(PostgreSQLCommandPacketType.SIMPLE_QUERY))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(payload.readInt4()).thenReturn(0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertNotNull(types)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(payload.readInt2()).thenReturn(1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
1->4 [style = bold, label=""];
15->3 [style = solid, label="types"];
16->11 [style = bold, label=""];
0->11 [style = bold, label=""];
4->18 [style = bold, label=""];
6->0 [style = bold, label=""];
4->2 [style = bold, label=""];
9->10 [style = bold, label=""];
10->13 [style = dashed, label="0"];
15->3 [style = bold, label=""];
12->1 [style = bold, label=""];
3->9 [style = bold, label=""];
17->12 [style = bold, label=""];
5->3 [style = solid, label="types"];
2->15 [style = bold, label=""];
7->6 [style = bold, label=""];
2->18 [style = dashed, label="0"];
8->17 [style = dashed, label="0"];
11->8 [style = bold, label=""];
11->17 [style = bold, label=""];
19->4 [style = bold, label=""];
12->19 [style = bold, label=""];
5->15 [style = dashed, label="0"];
14->6 [style = bold, label=""];
8->12 [style = bold, label=""];
2->5 [style = bold, label=""];
9->13 [style = bold, label=""];
}
