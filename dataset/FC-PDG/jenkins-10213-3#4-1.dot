digraph {
9 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(result,failedWith(2))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "dummyRangeNumberSingleShouldFailIfBuildNumberIsHyphen['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1-3-', expected correct notation M,N or M-N\"))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "dummyRangeNumberSingleShouldFailIfBuildNumberIsHyphen['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1-3-\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"-\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: \"-\" is not a valid option\"))@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->8 [style = bold, label=""];
5->2 [style = bold, label=""];
0->7 [style = bold, label=""];
2->0 [style = solid, label="result"];
4->2 [style = bold, label=""];
9->0 [style = bold, label=""];
1->7 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
8->9 [style = solid, label="result"];
2->3 [style = solid, label="result"];
2->8 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
8->0 [style = solid, label="result"];
2->3 [style = bold, label=""];
8->9 [style = bold, label=""];
}
