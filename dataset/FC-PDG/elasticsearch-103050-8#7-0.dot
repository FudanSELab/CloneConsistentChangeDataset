digraph {
2 [style = filled, label = "IllegalArgumentException e@@@10@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(((FieldMapper)mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),equalTo(\"long\"))@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"foo\").field(\"type\",\"double\").endObject().endObject().endObject().endObject()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(e.getMessage(),containsString(\"mapper (foo( cannot be changed from type (long( to (double(\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "mapperService.merge(\"type\",new CompressedXContent(Strings.toString(update)),MapperService.MergeReason.MAPPING_UPDATE)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "fail()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testConflictNewType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "fail()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testConflictSameType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(e.getMessage(),e.getMessage().contains(\"mapper (foo( cannot be changed from type (long( to (double(\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testConflictNewType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IllegalArgumentException e = expectThrows(,null)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(e.getMessage(),containsString(\"mapper (foo( cannot be changed from type (long( to (double(\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MapperService mapperService = createIndex(\"test\",Settings.builder().build(),mapping).mapperService()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "mapperService.merge(\"type\",new CompressedXContent(Strings.toString(update)),MapperService.MergeReason.MAPPING_UPDATE)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "IllegalArgumentException e@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(e.getMessage(),containsString(\"mapper (foo( cannot be changed from type (long( to (double(\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\").startObject(\"properties\").startObject(\"foo\").field(\"type\",\"long\").endObject().endObject().endObject().endObject()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(((FieldMapper)mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),equalTo(\"long\"))@@@20@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
1->4 [style = bold, label=""];
4->15 [style = solid, label="update"];
2->6 [style = bold, label=""];
3->15 [style = bold, label=""];
9->10 [style = bold, label=""];
12->0 [style = bold, label=""];
14->7 [style = bold, label=""];
2->13 [style = bold, label=""];
8->0 [style = bold, label=""];
17->7 [style = bold, label=""];
15->17 [style = bold, label=""];
6->13 [style = dashed, label="0"];
3->7 [style = bold, label=""];
2->6 [style = dotted, label="true"];
0->1 [style = bold, label=""];
4->5 [style = solid, label="update"];
16->14 [style = dotted, label="true"];
16->14 [style = bold, label=""];
13->15 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
18->0 [style = bold, label=""];
2->13 [style = dotted, label="true"];
10->11 [style = bold, label=""];
}
