digraph {
1 [style = filled, label = "wuState.getJobState().setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY,\"any\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Map<String,Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER_ENCRYPT,wuState)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(parsedProperties.size(),4,\"Did not expect abc.def to be picked up in config\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "wuState.getJobState().setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\"keyname\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<String,Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER,wuState)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(EncryptionConfigParser.getEncryptionType(parsedProperties),\"aes_rotating\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "WorkUnitState wuState = new WorkUnitState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final String entityName = \"MyConverter\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertNotNull(parsedProperties,\"Expected parser to only return one record\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\",\"foobar\")@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertNull(parsedWriterProperties,\"Did not expect to find writer properties\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "wuState.getJobState().setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + entityName + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY,\"aes_rotating\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testConverterWithEntityPrefix['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "WorkUnitState wuState = new WorkUnitState()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertNotNull(parsedProperties,\"Expected parser to only return one record\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Map<String,Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER,entityName,wuState)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testConverter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testConverter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "wuState.getJobState().setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\"/tmp/foobar\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "wuState.getJobState().setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\"abracadabra\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->15 [style = solid, label="parsedProperties"];
3->12 [style = solid, label="wuState"];
2->14 [style = solid, label="wuState"];
2->1 [style = bold, label=""];
0->17 [style = bold, label=""];
11->4 [style = bold, label=""];
4->15 [style = bold, label=""];
6->10 [style = solid, label="parsedProperties"];
6->14 [style = dashed, label="0"];
16->2 [style = bold, label=""];
9->8 [style = bold, label=""];
16->19 [style = solid, label="entityName"];
2->0 [style = solid, label="wuState"];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
16->14 [style = solid, label="entityName"];
6->12 [style = dashed, label="0"];
6->14 [style = bold, label=""];
12->10 [style = bold, label=""];
5->6 [style = bold, label=""];
8->5 [style = bold, label=""];
3->2 [style = bold, label=""];
5->12 [style = bold, label=""];
13->3 [style = bold, label=""];
19->9 [style = bold, label=""];
0->17 [style = solid, label="parsedWriterProperties"];
15->0 [style = bold, label=""];
6->10 [style = bold, label=""];
3->4 [style = solid, label="wuState"];
4->0 [style = solid, label="parsedWriterProperties"];
14->11 [style = solid, label="parsedProperties"];
3->6 [style = solid, label="wuState"];
1->19 [style = bold, label=""];
14->11 [style = bold, label=""];
12->10 [style = solid, label="parsedProperties"];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
