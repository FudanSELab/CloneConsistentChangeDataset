digraph {
15 [style = filled, label = "final IndexTemplateV2 template = new IndexTemplateV2(Arrays.asList(\"foo-*\",\"bar-*\"),null,Collections.singletonList(\"ct\"),null,null,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testHiddenAffectsResolvedV2ComponentTemplates['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testHiddenAffectsResolvedV2ComponentTemplates['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final IllegalArgumentException ex = expectThrows(,null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata,indexName,aliasName,Boolean.TRUE)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Map<String,AliasMetadata> aliases = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final ComponentTemplate ct = new ComponentTemplate(new Template(null,null,aliases),null,null)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5,7)),false).put(\"ct\",ct).put(\"test-template\",template).build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "aliases.put(\"foo-write\",AliasMetadata.builder(\"foo-write\").build())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "aliases.put(\"bar-write\",AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()).build())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final IllegalArgumentException ex = expectThrows(,null)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final IllegalArgumentException ex = expectThrows(,null)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(ex.getMessage(),containsString(\"index template (test-template(\"))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final IndexTemplateV2 template = new IndexTemplateV2(Collections.singletonList(\"*\"),null,Collections.singletonList(\"ct\"),null,null,null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String aliasName = randomFrom(\"foo-write\",\"bar-write\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testRejectDuplicateAliasV2UsingComponentTemplates['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(ex.getMessage(),containsString(\"index template (test-template(\"))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String indexName = randomFrom(\"foo-123\",\"bar-xyz\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
8->15 [style = dashed, label="0"];
0->2 [style = bold, label=""];
16->7 [style = bold, label=""];
14->17 [style = bold, label=""];
11->12 [style = bold, label=""];
2->9 [style = bold, label=""];
12->1 [style = bold, label=""];
10->6 [style = bold, label=""];
4->7 [style = bold, label=""];
6->15 [style = bold, label=""];
2->11 [style = solid, label="indexName"];
8->0 [style = bold, label=""];
7->5 [style = bold, label=""];
3->12 [style = dashed, label="0"];
11->3 [style = bold, label=""];
0->11 [style = solid, label="metadata"];
13->7 [style = bold, label=""];
11->14 [style = dashed, label="0"];
15->0 [style = bold, label=""];
6->8 [style = bold, label=""];
9->14 [style = bold, label=""];
7->6 [style = solid, label="aliases"];
9->11 [style = solid, label="aliasName"];
}
