digraph {
35 [style = filled, label = "Assert.assertTrue(\"Output must have the first three characters of the input\",cmp.compare(truncateStringMin(Literal.of(test1),3).value(),test1_3_expected) == 0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "String test3_3_expected = \"a�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "String test7 = \"😂😂😂\"@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(\"No truncation required as truncate length is greater than the input size\",cmp.compare(truncateStringMax(Literal.of(test1),8).value(),test1) == 0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertTrue(\"Output must have the first seven characters of the input\",cmp.compare(truncateStringMin(Literal.of(test2),7).value(),test2_7_expected) == 0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(\"Truncated upper bound should be greater than or equal to the actual upper bound\",cmp.compare(truncateStringMax(Literal.of(test4),1).value(),test4) >= 0)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(\"Truncated lower bound should be lower than or equal to the actual lower bound\",cmp.compare(truncateStringMin(Literal.of(test1),3).value(),test1) <= 0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "String test4 = \"￿￿\"@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertTrue(\"Test input with multiple 4 byte UTF-8 character where the second unicode \" + \"character should be incremented\",cmp.compare(truncateStringMax(Literal.of(test7),2).value(),test7_2_expected) == 0)@@@34@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "String test4_1_expected = \"𐀀\"@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(\"Truncated upper bound should be greater than or equal to the actual upper \" + \"bound\",cmp.compare(truncateStringMax(Literal.of(test3),3).value(),test3) >= 0)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertNull(\"An upper bound doesn't exist since the first two characters are max UTF-8 \" + \"characters\",truncateStringMax(Literal.of(test5),1))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String test5 = \"􏿿􏿿\"@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "String test7_2_expected = \"😂😃\"@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "String test7_1_expected = \"😃\"@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertTrue(\"Output must have three characters and the third character of the input must \" + \"be incremented. The second perceivable character in this string is actually a glyph. It consists of \" + \"two unicode characters\",cmp.compare(truncateStringMax(Literal.of(test3),3).value(),test3_3_expected) == 0)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Output must have seven characters and the seventh character of the input \" + \"must be incremented\",cmp.compare(truncateStringMax(Literal.of(test2),7).value(),test2_7_expected) == 0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String test2_7_expected = \"�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Assert.assertTrue(\"Truncated lower bound should be lower than or equal to the actual lower bound\",cmp.compare(truncateStringMin(Literal.of(test2),16).value(),test2) <= 0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertTrue(\"Truncated upper bound should be greater than or equal to the actual upper bound\",cmp.compare(truncateStringMax(Literal.of(test7),2).value(),test7) >= 0)@@@33@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(\"No truncation required as truncate length is equal to the input size\",cmp.compare(truncateStringMax(Literal.of(test1),7).value(),test1) == 0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String test6 = \"𐏿𐏿\"@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "String test3 = \"a�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ￿￿\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(\"Output must have three characters and the third character of the input must \" + \"be incremented\",cmp.compare(truncateStringMax(Literal.of(test1),3).value(),test1_3_expected) == 0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertTrue(\"No truncation required as truncate length is equal to the input size\",cmp.compare(truncateStringMin(Literal.of(test3),2).value(),test3) == 0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String test1_3_expected = \"�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertTrue(\"Output must have the first two characters of the input\",cmp.compare(truncateStringMin(Literal.of(test1),2).value(),test1_2_expected) == 0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertTrue(\"Truncated upper bound should be greater than or equal to the actual upper bound\",cmp.compare(truncateStringMax(Literal.of(test1),4).value(),test1) >= 0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testTruncateStringMin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertTrue(\"Test input with multiple 4 byte UTF-8 character where the first unicode \" + \"character should be incremented\",cmp.compare(truncateStringMax(Literal.of(test7),1).value(),test7_1_expected) == 0)@@@35@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Comparator<CharSequence> cmp = Literal.of(test1).comparator()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "String test1 = \"�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String test6_2_expected = \"𐐀\"@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertTrue(\"Test 4 byte UTF-8 character increment. Output must have one character with \" + \"the first character incremented\",cmp.compare(truncateStringMax(Literal.of(test6),1).value(),test6_2_expected) == 0)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testTruncateStringMax['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testTruncateStringMax['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "Assert.assertTrue(\"Truncated lower bound should be lower than or equal to the actual lower bound\",cmp.compare(truncateStringMin(Literal.of(test3),2).value(),test3) <= 0)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "String test4 = \"𐀀𐀀\"@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Truncated upper bound should be greater than or equal to the actual upper bound\",cmp.compare(truncateStringMax(Literal.of(test6),2).value(),test6) >= 0)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "String test3 = \"￿￿\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertTrue(\"Truncated lower bound should be lower than or equal to the actual lower bound\",cmp.compare(truncateStringMin(Literal.of(test4),1).value(),test4) <= 0)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(\"Output must have two characters and the second character of the input must \" + \"be incremented\",cmp.compare(truncateStringMax(Literal.of(test1),2).value(),test1_2_expected) == 0)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertTrue(\"Output must have the first 4 byte UTF-8 character of the input\",cmp.compare(truncateStringMin(Literal.of(test4),1).value(),test4_1_expected) == 0)@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String test1_2_expected = \"�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String test2 = \"�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ�ｿｽ\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertTrue(\"No truncation required as truncate length is greater than the input size\",cmp.compare(truncateStringMin(Literal.of(test1),8).value(),test1) == 0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Truncated upper bound should be greater than or equal to the actual upper \" + \"bound\",cmp.compare(truncateStringMax(Literal.of(test2),8).value(),test2) >= 0)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(\"Output must have one character. Since the first character is the max 3 byte \" + \"UTF-8 character, it should be incremented to the lowest 4 byte UTF-8 character\",cmp.compare(truncateStringMax(Literal.of(test4),1).value(),test4_1_expected) == 0)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->46 [style = solid, label="test2_7_expected"];
5->19 [style = bold, label=""];
2->21 [style = solid, label="test1_3_expected"];
26->18 [style = bold, label=""];
21->14 [style = bold, label=""];
20->3 [style = bold, label=""];
27->33 [style = bold, label=""];
40->47 [style = bold, label=""];
1->9 [style = bold, label=""];
17->6 [style = solid, label="test1"];
17->18 [style = solid, label="test1"];
23->18 [style = dashed, label="0"];
7->13 [style = solid, label="test5"];
3->16 [style = solid, label="test3_3_expected"];
12->36 [style = dashed, label="0"];
29->34 [style = solid, label="test7_2_expected"];
15->18 [style = bold, label=""];
11->45 [style = solid, label="test2"];
37->44 [style = bold, label=""];
2->11 [style = bold, label=""];
20->9 [style = solid, label="test3"];
15->19 [style = solid, label="test4_1_expected"];
9->16 [style = bold, label=""];
42->37 [style = solid, label="test3"];
25->26 [style = bold, label=""];
18->39 [style = bold, label=""];
41->43 [style = bold, label=""];
10->1 [style = solid, label="test2_7_expected"];
12->21 [style = bold, label=""];
47->43 [style = solid, label="test4_1_expected"];
33->34 [style = bold, label=""];
42->44 [style = solid, label="test3"];
5->43 [style = dashed, label="0"];
10->42 [style = bold, label=""];
31->18 [style = bold, label=""];
14->24 [style = bold, label=""];
22->15 [style = bold, label=""];
3->40 [style = dashed, label="0"];
15->7 [style = bold, label=""];
47->15 [style = bold, label=""];
19->13 [style = bold, label=""];
4->2 [style = bold, label=""];
8->27 [style = bold, label=""];
24->1 [style = bold, label=""];
35->45 [style = bold, label=""];
17->23 [style = solid, label="test1"];
17->4 [style = bold, label=""];
39->36 [style = bold, label=""];
17->14 [style = solid, label="test1"];
4->12 [style = solid, label="test1_2_expected"];
21->35 [style = dashed, label="0"];
23->6 [style = bold, label=""];
11->10 [style = bold, label=""];
45->46 [style = bold, label=""];
17->39 [style = solid, label="test1"];
46->37 [style = bold, label=""];
6->39 [style = dashed, label="0"];
32->17 [style = bold, label=""];
42->40 [style = bold, label=""];
44->41 [style = bold, label=""];
29->31 [style = bold, label=""];
22->5 [style = solid, label="test4"];
11->24 [style = solid, label="test2"];
7->25 [style = bold, label=""];
4->36 [style = solid, label="test1_2_expected"];
38->17 [style = bold, label=""];
6->12 [style = bold, label=""];
0->17 [style = bold, label=""];
26->28 [style = bold, label=""];
16->5 [style = bold, label=""];
31->30 [style = solid, label="test7_1_expected"];
20->42 [style = dashed, label="0"];
28->33 [style = solid, label="test7"];
3->22 [style = bold, label=""];
13->8 [style = bold, label=""];
26->27 [style = solid, label="test6_2_expected"];
34->30 [style = bold, label=""];
36->35 [style = bold, label=""];
2->35 [style = solid, label="test1_3_expected"];
28->29 [style = bold, label=""];
25->8 [style = solid, label="test6"];
18->23 [style = bold, label=""];
40->41 [style = solid, label="test4"];
10->20 [style = bold, label=""];
}
