digraph {
13 [style = filled, label = "int(( elementsPerSplit = new int((((@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "format.close()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Tuple2<Long,Long> state = format.getCurrentState()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final int recordsUntilCheckpoint = 132@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(format.getRecordsReadFromBlock(),recordsUntilCheckpoint)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(1203,elementsPerSplit(1()@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertTrue(u.getName().toString().startsWith(TEST_NAME))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "format.configure(parameters)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "AvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()),)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(1026,elementsPerSplit(1()@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "format.reopen(splits(i(,state)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(990,elementsPerSplit(3()@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "i++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Configuration parameters = new Configuration()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(NUM_RECORDS,elements)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testAvroRecoveryWithFailureAtStart['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "User u = format.nextRecord(null)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "FileInputSplit(( splits = format.createInputSplits(4)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "format.close()@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()),)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "format.getRecordsReadFromBlock() == recordsUntilCheckpoint@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(1604,elementsPerSplit(0()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "elements++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(0()@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "format.open(splits(i()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(896,elementsPerSplit(3()@@@32@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(1539,elementsPerSplit(2()@@@31@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "i < splits.length@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "!format.reachedEnd()@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "int elements = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "format.reopen(splits(i(,format.getCurrentState())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "AvroInputFormat<User> format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()),)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assert.assertEquals(1203,elementsPerSplit(2()@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testAvroRecovery['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(splits.length,4)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testAvroRecoveryWithFailureAtStart['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "elementsPerSplit(i(++@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->25 [style = bold, label=""];
29->5 [style = bold, label=""];
14->19 [style = dotted, label="true"];
1->25 [style = solid, label="splits"];
12->37 [style = solid, label="i"];
11->14 [style = bold, label=""];
16->35 [style = dashed, label="0"];
12->25 [style = solid, label="i"];
18->37 [style = dotted, label="true"];
21->28 [style = bold, label=""];
7->14 [style = bold, label=""];
21->30 [style = dashed, label="0"];
26->12 [style = bold, label=""];
7->32 [style = solid, label="elementsPerSplit"];
34->2 [style = bold, label=""];
36->2 [style = bold, label=""];
13->30 [style = solid, label="elementsPerSplit"];
14->7 [style = dotted, label="true"];
12->18 [style = bold, label=""];
18->32 [style = bold, label=""];
7->28 [style = solid, label="elementsPerSplit"];
14->9 [style = bold, label=""];
7->33 [style = solid, label="elementsPerSplit"];
12->18 [style = solid, label="i"];
4->25 [style = solid, label="state"];
13->21 [style = solid, label="elementsPerSplit"];
13->6 [style = solid, label="elementsPerSplit"];
8->11 [style = solid, label="i"];
33->3 [style = bold, label=""];
19->17 [style = dotted, label="true"];
24->33 [style = dashed, label="0"];
8->18 [style = bold, label=""];
6->32 [style = dashed, label="0"];
18->11 [style = bold, label=""];
7->21 [style = solid, label="elementsPerSplit"];
14->27 [style = dotted, label="true"];
3->0 [style = bold, label=""];
8->25 [style = solid, label="i"];
7->12 [style = solid, label="i"];
18->11 [style = dotted, label="true"];
13->31 [style = solid, label="elementsPerSplit"];
28->31 [style = dashed, label="0"];
1->11 [style = solid, label="splits"];
19->4 [style = dotted, label="true"];
18->26 [style = dotted, label="true"];
1->37 [style = solid, label="splits"];
31->33 [style = bold, label=""];
7->30 [style = solid, label="elementsPerSplit"];
13->24 [style = solid, label="elementsPerSplit"];
28->24 [style = bold, label=""];
10->2 [style = bold, label=""];
12->11 [style = solid, label="i"];
23->7 [style = bold, label=""];
13->32 [style = solid, label="elementsPerSplit"];
20->19 [style = bold, label=""];
8->7 [style = solid, label="i"];
27->20 [style = bold, label=""];
24->3 [style = bold, label=""];
13->7 [style = solid, label="elementsPerSplit"];
2->19 [style = solid, label="recordsUntilCheckpoint"];
13->33 [style = solid, label="elementsPerSplit"];
18->37 [style = bold, label=""];
4->17 [style = bold, label=""];
35->15 [style = bold, label=""];
22->16 [style = bold, label=""];
6->21 [style = bold, label=""];
32->30 [style = bold, label=""];
9->27 [style = bold, label=""];
2->23 [style = solid, label="recordsUntilCheckpoint"];
13->28 [style = solid, label="elementsPerSplit"];
18->6 [style = bold, label=""];
30->31 [style = bold, label=""];
5->20 [style = solid, label="elements"];
7->31 [style = solid, label="elementsPerSplit"];
5->13 [style = bold, label=""];
7->6 [style = solid, label="elementsPerSplit"];
1->29 [style = bold, label=""];
7->24 [style = solid, label="elementsPerSplit"];
22->35 [style = bold, label=""];
8->12 [style = solid, label="i"];
12->7 [style = solid, label="i"];
15->1 [style = bold, label=""];
16->15 [style = bold, label=""];
19->25 [style = dotted, label="true"];
25->23 [style = bold, label=""];
8->18 [style = solid, label="i"];
19->23 [style = dotted, label="true"];
7->25 [style = solid, label="i"];
18->14 [style = dotted, label="true"];
14->26 [style = bold, label=""];
14->20 [style = dotted, label="true"];
37->14 [style = bold, label=""];
18->12 [style = dotted, label="true"];
5->3 [style = solid, label="elements"];
20->3 [style = solid, label="elements"];
22->15 [style = solid, label="parameters"];
11->37 [style = dashed, label="0"];
19->4 [style = bold, label=""];
14->9 [style = dotted, label="true"];
13->8 [style = bold, label=""];
2->22 [style = bold, label=""];
19->7 [style = bold, label=""];
8->37 [style = solid, label="i"];
}
