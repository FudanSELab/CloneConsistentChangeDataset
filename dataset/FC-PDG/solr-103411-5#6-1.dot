digraph {
20 [style = filled, label = "CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder().collection(\"collection1\").onlyNrt(false).zkStateReader(zkStateReader).replicaListTransformer(replicaListTransformer).allowListUrlChecker(checker).params(params).build()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ModifiableSolrParams params = new ModifiableSolrParams()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<String> sliceNames = cloudReplicaSource.getSliceNames()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ReplicaListTransformer replicaListTransformer = Mockito.mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "CloudReplicaSource cloudReplicaSource = new CloudReplicaSource.Builder().collection(\"collection1\").onlyNrt(false).zkStateReader(zkStateReader).replicaListTransformer(replicaListTransformer).whitelistHostChecker(whitelistHostChecker).params(params).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(2,sliceNames.size())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testMultipleCollections['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"http://baseUrl1:8983/slice1_replica1/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"http://baseUrl2:8984/slice2_replica2/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1,cloudReplicaSource.getReplicasBySlice(i).size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "String sliceName = sliceNames.get(i)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(3,sliceNames.size())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "sliceName@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"http://baseUrl2:8984/slice2_replica2/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(2,cloudReplicaSource.getSliceCount())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSimple_UsingClusterState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testMultipleCollections['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"http://baseUrl1:8983/slice1_replica1/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(3,cloudReplicaSource.getSliceCount())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "AllowListUrlChecker checker = Mockito.mock()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "HttpShardHandlerFactory.WhitelistHostChecker whitelistHostChecker = Mockito.mock()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "params.set(\"collection\",\"collection1,collection2\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < cloudReplicaSource.getSliceCount()@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"http://baseUrl1:8983/slice1_replica3/\",cloudReplicaSource.getReplicasBySlice(i).get(0))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->11 [style = dotted, label="true"];
4->9 [style = bold, label=""];
13->10 [style = bold, label=""];
11->16 [style = bold, label=""];
5->8 [style = bold, label=""];
1->4 [style = bold, label=""];
0->16 [style = bold, label=""];
24->0 [style = solid, label="i"];
20->17 [style = bold, label=""];
3->16 [style = solid, label="i"];
15->20 [style = dashed, label="0"];
13->24 [style = bold, label=""];
12->5 [style = dashed, label="0"];
24->11 [style = solid, label="i"];
25->13 [style = bold, label=""];
15->25 [style = bold, label=""];
2->1 [style = bold, label=""];
21->15 [style = bold, label=""];
14->22 [style = bold, label=""];
3->11 [style = bold, label=""];
4->21 [style = bold, label=""];
11->14 [style = dotted, label="true"];
24->3 [style = solid, label="i"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
2->18 [style = bold, label=""];
9->20 [style = bold, label=""];
7->0 [style = bold, label=""];
11->3 [style = solid, label="i"];
11->5 [style = dotted, label="true"];
19->2 [style = bold, label=""];
14->22 [style = dotted, label="true"];
5->12 [style = dotted, label="true"];
10->13 [style = dashed, label="0"];
12->0 [style = bold, label=""];
3->0 [style = bold, label=""];
3->14 [style = dotted, label="true"];
6->2 [style = bold, label=""];
3->0 [style = solid, label="i"];
8->0 [style = bold, label=""];
8->22 [style = dashed, label="0"];
15->17 [style = bold, label=""];
14->5 [style = dotted, label="true"];
18->4 [style = bold, label=""];
17->15 [style = dashed, label="0"];
5->12 [style = bold, label=""];
11->3 [style = bold, label=""];
0->16 [style = solid, label="i"];
5->7 [style = dotted, label="true"];
9->15 [style = bold, label=""];
11->0 [style = dotted, label="true"];
0->11 [style = solid, label="i"];
16->5 [style = solid, label="sliceName"];
3->0 [style = dotted, label="true"];
11->16 [style = dotted, label="true"];
16->14 [style = bold, label=""];
5->7 [style = bold, label=""];
17->13 [style = bold, label=""];
5->11 [style = bold, label=""];
23->2 [style = bold, label=""];
3->11 [style = solid, label="i"];
0->14 [style = solid, label="sliceName"];
5->8 [style = dotted, label="true"];
11->0 [style = solid, label="i"];
24->3 [style = bold, label=""];
22->11 [style = bold, label=""];
3->16 [style = dotted, label="true"];
14->5 [style = bold, label=""];
}
