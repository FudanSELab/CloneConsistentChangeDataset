digraph {
4 [style = filled, label = "final String q0 = \"select\" + \" \"fname\" || ' ' || \"lname\" as \"full_name\",\" + \" count(*) as c,\" + \" avg(\"total_children\" - \"num_children_at_home\")\" + \"from \"customer\"\" + \"group by \"fname\", \"lname\"\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testExpressionInJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Lattice lattice = Iterables.getOnlyElement(t.s.latticeMap.values())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(Iterables.getOnlyElement(t.s.latticeMap.keySet()),is(l0))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "checkDerivedColumn(lattice,tables,derivedColumns,1,\"full_name\",false)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testExpression['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(t.s.latticeMap.size(),is(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(derivedColumns.get(1).tables,is(tables))@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final String l0 = \"customer:(COUNT(), AVG($f2)(\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testExpression['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final List<Lattice.DerivedColumn> derivedColumns = lattice.columns.stream().filter(null).map(null).collect(Collectors.toList())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final List<String> tables = ImmutableList.of(\"customer\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Tester t = new Tester().foodmart().withEvolve(true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "checkDerivedColumn(lattice,tables,derivedColumns,0,\"$f2\",true)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "t.addQuery(q0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final String l0 = \"sales_fact_1997 (customer:customer_id)\" + \":(COUNT(), AVG($f2)(\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final String q0 = \"select\" + \" \"fname\" || ' ' || \"lname\" as \"full_name\",\" + \" count(*) as c,\" + \" avg(\"total_children\" - \"num_children_at_home\")\" + \"from \"customer\" join \"sales_fact_1997\" using (\"customer_id\")\" + \"group by \"fname\", \"lname\"\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(derivedColumns.size(),is(2))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(derivedColumns.get(0).tables,is(tables))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->8 [style = solid, label="l0"];
1->13 [style = solid, label="tables"];
9->4 [style = bold, label=""];
4->5 [style = solid, label="q0"];
3->2 [style = bold, label=""];
7->10 [style = bold, label=""];
7->15 [style = solid, label="lattice"];
12->1 [style = bold, label=""];
4->17 [style = dashed, label="0"];
14->9 [style = bold, label=""];
17->5 [style = solid, label="q0"];
6->9 [style = bold, label=""];
10->12 [style = bold, label=""];
0->16 [style = dashed, label="0"];
18->9 [style = bold, label=""];
1->3 [style = bold, label=""];
16->8 [style = solid, label="l0"];
5->11 [style = bold, label=""];
11->8 [style = bold, label=""];
9->17 [style = bold, label=""];
15->13 [style = bold, label=""];
3->15 [style = dashed, label="0"];
1->15 [style = bold, label=""];
16->5 [style = bold, label=""];
8->7 [style = bold, label=""];
10->13 [style = solid, label="derivedColumns"];
0->5 [style = bold, label=""];
1->15 [style = solid, label="tables"];
17->16 [style = bold, label=""];
10->15 [style = solid, label="derivedColumns"];
1->3 [style = solid, label="tables"];
7->13 [style = solid, label="lattice"];
1->2 [style = solid, label="tables"];
4->0 [style = bold, label=""];
2->13 [style = dashed, label="0"];
}
