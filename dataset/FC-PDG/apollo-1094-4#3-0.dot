digraph {
13 [style = filled, label = "Assert.assertEquals(CONFIG_TEXT,createdItem.getValue())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(0,changeSets.getCreateItems().size())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "existedItem.setValue(\"before\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(CONFIG_TEXT,updatedItem.getValue())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "existedItem.setKey(ConfigConsts.CONFIG_FILE_CONTENT_KEY)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ItemChangeSets changeSets = resolver.resolve(NAMESPACE,CONFIG_TEXT,Collections.singletonList(existedItem))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "ItemDTO createdItem = changeSets.getCreateItems().get(0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(0,changeSets.getDeleteItems().size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(1,changeSets.getCreateItems().size())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testCreateItem['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ItemChangeSets changeSets = resolver.resolve(NAMESPACE,CONFIG_TEXT,Arrays.asList(existedItem))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "ItemDTO updatedItem = changeSets.getUpdateItems().get(0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testUpdateItem['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "ItemChangeSets changeSets = resolver.resolve(NAMESPACE,CONFIG_TEXT,Collections.emptyList())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testUpdateItem['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(0,changeSets.getUpdateItems().size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "existedItem.setId(1000)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,changeSets.getDeleteItems().size())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(1,changeSets.getUpdateItems().size())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ItemDTO existedItem = new ItemDTO()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
5->10 [style = bold, label=""];
16->15 [style = bold, label=""];
1->4 [style = bold, label=""];
15->13 [style = bold, label=""];
19->18 [style = bold, label=""];
12->5 [style = bold, label=""];
3->1 [style = bold, label=""];
5->11 [style = solid, label="existedItem"];
5->4 [style = solid, label="existedItem"];
18->17 [style = bold, label=""];
10->3 [style = bold, label=""];
8->6 [style = bold, label=""];
1->11 [style = bold, label=""];
6->2 [style = bold, label=""];
7->9 [style = bold, label=""];
17->14 [style = bold, label=""];
9->13 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
4->8 [style = bold, label=""];
11->8 [style = bold, label=""];
2->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
0->5 [style = bold, label=""];
}
