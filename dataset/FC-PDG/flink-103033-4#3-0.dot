digraph {
5 [style = filled, label = "assertTrue(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testBoundedDetection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,unbounded)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testMixedDetection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final StreamGraph graph = generateStreamGraph(RuntimeExecutionMode.AUTOMATIC,bounded)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Boundedness.CONTINUOUS_UNBOUNDED,unbounded.getBoundedness())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testMixedDetection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertEquals(ScheduleMode.EAGER,graph.getScheduleMode())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "final SourceTransformation<Integer> unbounded = getSourceTransformation(\"Unbounded Source\",Boundedness.CONTINUOUS_UNBOUNDED)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST,graph.getScheduleMode())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(graph,hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,ScheduleMode.EAGER,true))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertFalse(graph.isAllVerticesInSameSlotSharingGroupByDefault())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final SourceTransformation<Integer> bounded = getSourceTransformation(\"Bounded Source\",Boundedness.BOUNDED)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(Boundedness.BOUNDED,bounded.getBoundedness())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(GlobalDataExchangeMode.ALL_EDGES_PIPELINED,graph.getGlobalDataExchangeMode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertEquals(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED,graph.getGlobalDataExchangeMode())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->13 [style = bold, label=""];
5->12 [style = dashed, label="0"];
1->8 [style = bold, label=""];
8->10 [style = dashed, label="0"];
13->0 [style = solid, label="bounded"];
2->1 [style = bold, label=""];
0->2 [style = bold, label=""];
11->12 [style = bold, label=""];
6->0 [style = bold, label=""];
8->2 [style = dashed, label="0"];
9->7 [style = bold, label=""];
1->10 [style = solid, label="graph"];
14->0 [style = bold, label=""];
3->7 [style = bold, label=""];
7->6 [style = bold, label=""];
7->1 [style = solid, label="unbounded"];
8->4 [style = bold, label=""];
4->11 [style = dashed, label="0"];
1->10 [style = bold, label=""];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
2->11 [style = bold, label=""];
1->0 [style = dashed, label="0"];
}
