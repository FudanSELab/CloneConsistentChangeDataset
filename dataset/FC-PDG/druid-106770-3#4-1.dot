digraph {
4 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(new RegexDimFilter(QueryRunnerTestHelper.marketDimension,\"^.p.*$\",null)).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexLongSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).build()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",11L,\"index\",3783L,\"addRowsIndexConstant\",3795.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",11L,\"index\",3313L,\"addRowsIndexConstant\",3325.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testTimeseriesWithRegexFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(new RegexDimFilter(QueryRunnerTestHelper.marketDimension,\"^.p.*$\",null)).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexLongSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",13L,\"index\",6619L,\"addRowsIndexConstant\",6633.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",13L,\"index\",5827L,\"addRowsIndexConstant\",5841.0,\"uniques\",QueryRunnerTestHelper.UNIQUES_9))))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testTimeseriesWithRegexFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testTimeseriesWithNonExistentFilterInOr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(QueryRunnerTestHelper.marketDimension,\"spot\",\"upfront\",\"total_market\",\"billyblank\").intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexLongSum,QueryRunnerTestHelper.qualityUniques).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->0 [style = bold, label=""];
6->1 [style = bold, label=""];
1->8 [style = dashed, label="0"];
8->4 [style = solid, label="expectedResults"];
1->0 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
0->4 [style = solid, label="results"];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
0->4 [style = bold, label=""];
2->7 [style = dashed, label="0"];
2->1 [style = bold, label=""];
1->4 [style = solid, label="expectedResults"];
2->6 [style = dashed, label="0"];
}
