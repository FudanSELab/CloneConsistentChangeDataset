digraph {
1 [style = filled, label = "OperatorStateHandles snapshot = testHarness.snapshot(0,0)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InnerTestFun innerTestFun = new InnerTestFun()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "operator = new StreamMap<>(new WrappingTestFun(new WrappingTestFun(innerTestFun)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSnapshotAndRestoreWrappedListCheckpointed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "StreamMap<Integer,Integer> operator = new StreamMap<>(new WrappingTestFun(new WrappingTestFun(new InnerTestFunList())))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "OperatorSubtaskState snapshot = testHarness.snapshot(0,0)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertTrue(innerTestFun.wasRestored)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testHarness.open()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testSnapshotAndRestoreWrappedCheckpointedFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.close()@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testHarness.setup()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "StreamMap<Integer,Integer> operator = new StreamMap<>(new WrappingTestFun(new WrappingTestFun(new InnerTestFun())))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testHarness.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testHarness.initializeState(snapshot)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "OneInputStreamOperatorTestHarness<Integer,Integer> testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testHarness.open()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testSnapshotAndRestoreWrappedCheckpointedFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testHarness.processElement(new StreamRecord<>(5,12L))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness.setup()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InnerTestFunList innerTestFun = new InnerTestFunList()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->11 [style = solid, label="innerTestFun"];
1->8 [style = bold, label=""];
12->20 [style = dashed, label="0"];
9->11 [style = bold, label=""];
0->13 [style = bold, label=""];
16->8 [style = bold, label=""];
1->2 [style = solid, label="snapshot"];
8->19 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
16->2 [style = solid, label="snapshot"];
19->11 [style = solid, label="innerTestFun"];
19->11 [style = bold, label=""];
15->16 [style = bold, label=""];
12->7 [style = bold, label=""];
3->0 [style = bold, label=""];
6->15 [style = bold, label=""];
7->14 [style = bold, label=""];
9->19 [style = dashed, label="0"];
18->20 [style = bold, label=""];
5->2 [style = bold, label=""];
17->12 [style = bold, label=""];
11->4 [style = solid, label="operator"];
10->12 [style = bold, label=""];
1->16 [style = dashed, label="0"];
8->9 [style = bold, label=""];
12->7 [style = solid, label="operator"];
20->7 [style = solid, label="operator"];
20->7 [style = bold, label=""];
4->5 [style = bold, label=""];
14->6 [style = bold, label=""];
15->1 [style = bold, label=""];
}
