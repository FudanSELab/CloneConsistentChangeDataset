digraph {
17 [style = filled, label = "PhysLeafRel resultLeaf = (PhysLeafRel)result@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testTransformSingleGood['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "NoneLeafRel leafRel = new NoneLeafRel(cluster,\"a\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RelOptCluster cluster = newCluster(planner)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "planner.addRule(new GoodSingleRule())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(result instanceof PhysSingleRel)@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testTransformSingleGood['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "planner.addRule(PhysLeafRule.INSTANCE)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "planner.addRule(new GoodRemoveSingleRule())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "NoneSingleRel singleRel = new NoneSingleRel(cluster,leafRel)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "planner.setRoot(convertedRel)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "planner.addRule(GoodSingleRule.INSTANCE)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testRemoveSingleGood['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(result instanceof PhysLeafRel)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"c\",resultLeaf.label)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "planner.addRule(new PhysLeafRule())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "RelNode convertedRel = planner.changeTraits(singleRel,cluster.traitSetOf(PHYS_CALLING_CONVENTION))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->13 [style = bold, label=""];
4->17 [style = solid, label="result"];
4->11 [style = bold, label=""];
0->9 [style = bold, label=""];
0->9 [style = solid, label="singleRel"];
12->1 [style = bold, label=""];
3->14 [style = dashed, label="0"];
2->10 [style = bold, label=""];
4->19 [style = solid, label="result"];
3->18 [style = bold, label=""];
8->0 [style = solid, label="cluster"];
11->19 [style = dashed, label="0"];
5->4 [style = bold, label=""];
10->3 [style = bold, label=""];
8->7 [style = solid, label="cluster"];
4->19 [style = bold, label=""];
16->1 [style = bold, label=""];
17->15 [style = bold, label=""];
19->17 [style = bold, label=""];
4->11 [style = solid, label="result"];
7->0 [style = bold, label=""];
3->8 [style = bold, label=""];
14->8 [style = bold, label=""];
7->0 [style = solid, label="leafRel"];
8->7 [style = bold, label=""];
9->5 [style = solid, label="convertedRel"];
18->8 [style = bold, label=""];
13->14 [style = bold, label=""];
9->5 [style = bold, label=""];
6->1 [style = bold, label=""];
1->2 [style = bold, label=""];
1->8 [style = solid, label="planner"];
10->13 [style = dashed, label="0"];
}
