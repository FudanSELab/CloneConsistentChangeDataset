digraph {
1 [style = filled, label = "allTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertHasNoStandbyTasks(client1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "createTaskAssignor()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "clientStates = getClientStatesWithTwoClients()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "statefulTasks = mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(client1.activeTasks(),equalTo(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "maxWarmupReplicas = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "shouldNotAssignMoreThanMaxWarmupReplicas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "numStandbyReplicas = 1@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "clientStates = getClientStatesMap(client1,client2)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "maxWarmupReplicas = 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldNotAssignWarmupAndStandbyToTheSameClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shouldNotAssignMoreThanMaxWarmupReplicas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertHasNoStandbyTasks(client1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "taskAssignor.assign()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertHasNoActiveTasks(client2)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(client2.standbyTasks(),equalTo(mkSet(TASK_0_0,TASK_0_1,TASK_0_2,TASK_0_3)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->15 [style = bold, label=""];
17->5 [style = bold, label=""];
7->18 [style = solid, label="client2"];
11->13 [style = solid, label="client1"];
3->5 [style = solid, label="client1"];
12->17 [style = bold, label=""];
12->17 [style = dashed, label="0"];
14->10 [style = bold, label=""];
15->6 [style = bold, label=""];
5->18 [style = bold, label=""];
2->9 [style = bold, label=""];
3->5 [style = solid, label="client2"];
9->8 [style = bold, label=""];
10->6 [style = bold, label=""];
1->11 [style = bold, label=""];
6->1 [style = bold, label=""];
0->10 [style = bold, label=""];
12->4 [style = bold, label=""];
3->7 [style = bold, label=""];
11->3 [style = bold, label=""];
7->2 [style = bold, label=""];
11->4 [style = solid, label="client1"];
7->13 [style = dashed, label="0"];
3->13 [style = bold, label=""];
3->13 [style = solid, label="client2"];
4->5 [style = bold, label=""];
8->12 [style = bold, label=""];
13->2 [style = bold, label=""];
}
