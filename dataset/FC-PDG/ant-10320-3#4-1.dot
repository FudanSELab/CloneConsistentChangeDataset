digraph {
7 [style = filled, label = "testNoPatternAtAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNotNull(\"Should match foo*bar\",result)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"only one result for foobar\",1,result.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"only one result for foo.bar\",1,result.length)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"plonkpling\",result(0()@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "m.setTo(\"plonk*pling\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"plonk.baz.pling\",result(0()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNotNull(\"Should match foobar\",result)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertNotNull(\"Should match foo*bar\",result)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String(( result = m.mapFileName(\"foo.bar\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "result = m.mapFileName(\"foo.baz.bar\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"plonk.pling\",result(0()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertNull(\"Shouldn't match foo*bar\",m.mapFileName(\"bar.baz\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "GlobPatternMapper m = new GlobPatternMapper()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "result = m.mapFileName(\"foobar\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNull(\"Shouldn't match foobar\",m.mapFileName(\"plonk\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testNoPatternAtAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "m.setTo(\"baz\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String(( result = m.mapFileName(\"foobar\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "m.setFrom(\"foo*bar\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"only one result for foobar\",1,result.length)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testPreAndPostfix['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNotNull(\"Should match foo*bar\",result)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"baz\",result(0()@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "m.setFrom(\"foobar\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(\"only one result for foo.baz.bar\",1,result.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->18 [style = dashed, label="0"];
2->6 [style = solid, label="result"];
16->18 [style = bold, label=""];
7->1 [style = bold, label=""];
3->17 [style = dashed, label="0"];
18->23 [style = bold, label=""];
2->4 [style = solid, label="result"];
10->12 [style = solid, label="result"];
22->16 [style = bold, label=""];
10->15 [style = solid, label="result"];
1->3 [style = bold, label=""];
19->10 [style = bold, label=""];
8->6 [style = bold, label=""];
0->11 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
2->4 [style = bold, label=""];
16->19 [style = solid, label="result"];
16->18 [style = solid, label="result"];
3->0 [style = bold, label=""];
1->17 [style = bold, label=""];
20->24 [style = solid, label="result"];
5->2 [style = bold, label=""];
20->14 [style = solid, label="result"];
10->12 [style = bold, label=""];
12->25 [style = bold, label=""];
15->20 [style = bold, label=""];
23->19 [style = bold, label=""];
2->16 [style = dashed, label="0"];
21->1 [style = bold, label=""];
11->22 [style = bold, label=""];
25->15 [style = bold, label=""];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
20->24 [style = bold, label=""];
13->14 [style = bold, label=""];
0->5 [style = bold, label=""];
24->13 [style = bold, label=""];
17->11 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
