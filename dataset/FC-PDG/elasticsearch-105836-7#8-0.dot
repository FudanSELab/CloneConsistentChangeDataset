digraph {
5 [style = filled, label = "SearchScrollRequest request = new SearchScrollRequest()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",new SearchContextId(UUIDs.randomBase64UUID(),1)),new ScrollIdForNode(null,\"node2\",new SearchContextId(UUIDs.randomBase64UUID(),2)),new ScrollIdForNode(null,\"node3\",new SearchContextId(UUIDs.randomBase64UUID(),17)),new ScrollIdForNode(null,\"node1\",new SearchContextId(UUIDs.randomBase64UUID(),0)),new ScrollIdForNode(null,\"node3\",new SearchContextId(UUIDs.randomBase64UUID(),0)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testSendRequestsToNodes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "request.scroll(new Scroll(TimeValue.timeValueMinutes(1)))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "int i = 0@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testFailNextPhase['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(context(i(.getScrollId(),results.get(i).getRequestId())@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertNotNull(results.get(i))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ParsedScrollId scrollId = getParsedScrollId(new ScrollIdForNode(null,\"node1\",1),new ScrollIdForNode(null,\"node2\",2),new ScrollIdForNode(null,\"node3\",17),new ScrollIdForNode(null,\"node1\",0),new ScrollIdForNode(null,\"node3\",0))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < results.length()@@@42@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "latch.await()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "latch.await()@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "ShardSearchFailure(( shardSearchFailures = action.buildShardFailures()@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "i < results.length()@@@65@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>(){@Override public void onResponse(SearchResponse o){try {fail(\"got a result\")}{latch.countDown()}}@Override public void onFailure(Exception e){try {assertTrue(e instanceof SearchPhaseExecutionException)SearchPhaseExecutionException ex = (SearchPhaseExecutionException)eassertEquals(\"BOOM\",ex.getCause().getMessage())assertEquals(\"TEST_PHASE\",ex.getPhaseName())assertEquals(\"Phase failed\",ex.getMessage())}{latch.countDown()}}}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ShardSearchFailure(( shardSearchFailures = action.buildShardFailures()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertEquals(context(i(.getNode(),results.get(i).node.getId())@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "i++@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "ScrollIdForNode(( context = scrollId.getContext()@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int i = 0@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(0,shardSearchFailures.length)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "action.run()@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().add(new DiscoveryNode(\"node1\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node2\",buildNewFakeTransportAddress(),Version.CURRENT)).add(new DiscoveryNode(\"node3\",buildNewFakeTransportAddress(),Version.CURRENT)).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(0,shardSearchFailures.length)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(context(i(.getScrollId(),results.get(i).getRequestId())@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,dummyListener(),null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"test\"){@Override public void run(){latch.countDown()}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(context(i(.getContextId(),results.get(i).getContextId())@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "action.run()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertNotNull(results.get(i))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action = new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId,logger,discoveryNodes,listener,null,request,null){@Override protected void executeInitialPhase(Transport.Connection connection,InternalScrollSearchRequest internalRequest,SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener){new Thread(null).start()}@Override protected Transport.Connection getConnection(String clusterAlias,DiscoveryNode node){return new SearchAsyncActionTests.MockConnection(node)}@Override protected SearchPhase moveToNextPhase(BiFunction<String,String,DiscoveryNode> clusterNodeLookup){assertEquals(1,movedCounter.incrementAndGet())return new SearchPhase(\"TEST_PHASE\"){@Override public void run(){throw new IllegalArgumentException(\"BOOM\")}}}@Override protected void onFirstPhaseResult(int shardId,SearchAsyncActionTests.TestSearchPhaseResult result){results.setOnce(shardId,result)}}@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testSendRequestsToNodes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "AtomicInteger movedCounter = new AtomicInteger(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "i++@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
35->31 [style = bold, label=""];
8->10 [style = bold, label=""];
23->25 [style = bold, label=""];
17->5 [style = bold, label=""];
33->35 [style = bold, label=""];
27->32 [style = dotted, label="true"];
2->19 [style = bold, label=""];
9->11 [style = bold, label=""];
19->12 [style = bold, label=""];
4->6 [style = bold, label=""];
6->18 [style = bold, label=""];
31->32 [style = bold, label=""];
27->33 [style = dotted, label="true"];
26->36 [style = bold, label=""];
36->27 [style = solid, label="i"];
16->7 [style = bold, label=""];
29->0 [style = bold, label=""];
5->15 [style = bold, label=""];
24->34 [style = bold, label=""];
32->27 [style = bold, label=""];
32->27 [style = solid, label="i"];
2->21 [style = dotted, label="true"];
32->33 [style = solid, label="i"];
18->2 [style = bold, label=""];
12->9 [style = bold, label=""];
0->28 [style = solid, label="scrollId"];
0->22 [style = dashed, label="0"];
11->2 [style = bold, label=""];
12->21 [style = dashed, label="0"];
20->22 [style = bold, label=""];
22->1 [style = solid, label="scrollId"];
7->14 [style = bold, label=""];
2->11 [style = dotted, label="true"];
22->3 [style = bold, label=""];
25->24 [style = bold, label=""];
21->9 [style = bold, label=""];
30->28 [style = bold, label=""];
3->1 [style = solid, label="discoveryNodes"];
5->1 [style = solid, label="request"];
36->27 [style = bold, label=""];
36->32 [style = solid, label="i"];
2->9 [style = dotted, label="true"];
34->26 [style = bold, label=""];
1->16 [style = bold, label=""];
28->23 [style = bold, label=""];
5->28 [style = solid, label="request"];
30->28 [style = solid, label="listener"];
11->19 [style = solid, label="i"];
18->19 [style = solid, label="i"];
27->31 [style = dotted, label="true"];
11->2 [style = solid, label="i"];
18->11 [style = solid, label="i"];
3->28 [style = solid, label="discoveryNodes"];
2->12 [style = dotted, label="true"];
3->17 [style = bold, label=""];
27->33 [style = bold, label=""];
18->2 [style = solid, label="i"];
10->1 [style = bold, label=""];
0->1 [style = solid, label="scrollId"];
27->35 [style = dotted, label="true"];
10->30 [style = bold, label=""];
15->8 [style = bold, label=""];
36->33 [style = solid, label="i"];
2->19 [style = dotted, label="true"];
13->0 [style = bold, label=""];
14->4 [style = bold, label=""];
19->21 [style = bold, label=""];
}
