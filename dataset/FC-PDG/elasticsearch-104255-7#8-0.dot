digraph {
31 [style = filled, label = "parser.nextToken()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "ElasticsearchGeoAssertions.assertPolygon(shape)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "Shape shape = ShapeParser.parse(parser).buildS4J()@@@36@@@['0', '1', '0']", fillcolor = red, shape = ShapeParser.parse(parser).buildS4J()@@@36@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "parser.nextToken()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "ElasticsearchGeoAssertions.assertMultiPolygon(shape,true)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "parser.nextToken()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Shape shape = ShapeParser.parse(parser).build()@@@18@@@['1', '0', '0']", fillcolor = red, shape = ShapeParser.parse(parser).build()@@@18@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\",\"Polygon\").startArray(\"coordinates\").startArray().startArray().value(-177.0).value(10.0).endArray().startArray().value(176.0).value(15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(-177.0).value(-10.0).endArray().startArray().value(-177.0).value(10.0).endArray().endArray().startArray().startArray().value(178.0).value(8.0).endArray().startArray().value(-178.0).value(8.0).endArray().startArray().value(-180.0).value(-8.0).endArray().startArray().value(178.0).value(8.0).endArray().endArray().endArray().endObject())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ElasticsearchGeoAssertions.assertPolygon(shape,true)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "parser.nextToken()@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Shape shape = ShapeParser.parse(parser).build()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ShapeParser.parse(parser).build()@@@6@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Shape shape = ShapeParser.parse(parser).build()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ShapeParser.parse(parser).build()@@@12@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testParseOGCPolygonWithHoles['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "parser.nextToken()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ElasticsearchGeoAssertions.assertMultiPolygon(shape,true)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\",\"Polygon\").startArray(\"coordinates\").startArray().startArray().value(176.0).value(15.0).endArray().startArray().value(180.0).value(10.0).endArray().startArray().value(179.0).value(-10.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(15.0).endArray().endArray().startArray().startArray().value(177.0).value(8.0).endArray().startArray().value(179.0).value(10.0).endArray().startArray().value(179.0).value(-8.0).endArray().startArray().value(177.0).value(8.0).endArray().endArray().endArray().endObject())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildLucene(),false)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "ElasticsearchGeoAssertions.assertPolygon(shape)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildLucene(),false)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\",\"Polygon\").startArray(\"coordinates\").startArray().startArray().value(183.0).value(10.0).endArray().startArray().value(183.0).value(-10.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(15.0).endArray().startArray().value(183.0).value(10.0).endArray().endArray().startArray().startArray().value(178.0).value(8.0).endArray().startArray().value(182.0).value(8.0).endArray().startArray().value(180.0).value(-8.0).endArray().startArray().value(178.0).value(8.0).endArray().endArray().endArray().endObject())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ElasticsearchGeoAssertions.assertPolygon(shape,true)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Shape shape = ShapeParser.parse(parser).buildS4J()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ShapeParser.parse(parser).buildS4J()@@@6@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "parser.nextToken()@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "parser.nextToken()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "testParseOGCPolygonWithHoles['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "parser.nextToken()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ElasticsearchGeoAssertions.assertMultiPolygon(shape)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "assertNull(parser.nextToken())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ElasticsearchGeoAssertions.assertMultiPolygon(shape)@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "testParseSelfCrossingPolygon['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Shape shape = ShapeParser.parse(parser).buildS4J()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ShapeParser.parse(parser).buildS4J()@@@16@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\",\"Polygon\").startArray(\"coordinates\").startArray().startArray().value(176.0).value(15.0).endArray().startArray().value(-177.0).value(10.0).endArray().startArray().value(-177.0).value(-10.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(-177.0).value(15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(15.0).endArray().endArray().endArray().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildLucene(),false)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildLucene(),false)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Shape shape = ShapeParser.parse(parser).build()@@@24@@@['1', '0', '0']", fillcolor = red, shape = ShapeParser.parse(parser).build()@@@24@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Shape shape = ShapeParser.parse(parser).buildS4J()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ShapeParser.parse(parser).buildS4J()@@@26@@@", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\",\"Polygon\").startArray(\"coordinates\").startArray().startArray().value(176.0).value(15.0).endArray().startArray().value(-177.0).value(10.0).endArray().startArray().value(-177.0).value(-10.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(15.0).endArray().endArray().startArray().startArray().value(-172.0).value(8.0).endArray().startArray().value(174.0).value(10.0).endArray().startArray().value(-172.0).value(-8.0).endArray().startArray().value(-172.0).value(8.0).endArray().endArray().endArray().endObject())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ElasticsearchGeoAssertions.assertValidException(parser,)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19->33 [style = bold, label=""];
36->6 [style = bold, label=""];
8->16 [style = bold, label=""];
29->17 [style = bold, label=""];
10->21 [style = dashed, label="0"];
2->19 [style = dashed, label="0"];
13->36 [style = dashed, label="0"];
6->34 [style = bold, label=""];
3->1 [style = bold, label=""];
37->36 [style = bold, label=""];
24->15 [style = bold, label=""];
16->10 [style = bold, label=""];
25->23 [style = bold, label=""];
9->4 [style = bold, label=""];
4->15 [style = bold, label=""];
23->32 [style = bold, label=""];
10->3 [style = bold, label=""];
28->13 [style = bold, label=""];
27->29 [style = solid, label="shape"];
20->3 [style = bold, label=""];
16->10 [style = solid, label="shape"];
17->22 [style = bold, label=""];
7->8 [style = bold, label=""];
12->0 [style = bold, label=""];
22->7 [style = bold, label=""];
11->2 [style = bold, label=""];
15->5 [style = bold, label=""];
1->9 [style = bold, label=""];
0->7 [style = bold, label=""];
26->21 [style = bold, label=""];
16->26 [style = dashed, label="0"];
6->27 [style = bold, label=""];
30->19 [style = bold, label=""];
21->31 [style = bold, label=""];
12->0 [style = solid, label="shape"];
33->18 [style = bold, label=""];
26->21 [style = solid, label="shape"];
9->4 [style = solid, label="shape"];
11->2 [style = solid, label="shape"];
9->25 [style = dashed, label="0"];
0->29 [style = dashed, label="0"];
12->27 [style = dashed, label="0"];
5->11 [style = bold, label=""];
5->30 [style = bold, label=""];
14->13 [style = bold, label=""];
13->6 [style = bold, label=""];
27->29 [style = bold, label=""];
31->20 [style = bold, label=""];
34->35 [style = bold, label=""];
30->19 [style = solid, label="shape"];
11->30 [style = dashed, label="0"];
32->24 [style = bold, label=""];
25->23 [style = solid, label="shape"];
1->25 [style = bold, label=""];
4->23 [style = dashed, label="0"];
8->26 [style = bold, label=""];
6->12 [style = bold, label=""];
}
