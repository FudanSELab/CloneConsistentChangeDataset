digraph {
14 [style = filled, label = "MemberData netMember1 = mock()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "InetAddress host1 = InetAddress.getByAddress(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@112f57)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "member.setUniqueTag(\"tag1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(netMember2.getInetAddress()).thenReturn(host1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "equalsReturnsFalseIfUniqueTagsDiffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result).isFalse()@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "InternalDistributedMember member = new InternalDistributedMember(netMember1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(netMember1.getName()).thenReturn(\"name1\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "other.setUniqueTag(\"tag2\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(netMember2.getName()).thenReturn(\"name2\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "GMSMemberData netMember1 = mock()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "equalsReturnsFalseIfUniqueTagsDiffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "GMSMemberData netMember2 = mock()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(netMember1.getInetAddress()).thenReturn(host1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "member.setIsPartial(false)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "other.setIsPartial(false)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "equalsReturnsFalseIfNotPartialAndNamesDiffer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "InternalDistributedMember other = new InternalDistributedMember(netMember2)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "boolean result = member.equals(other)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "MemberData netMember2 = mock()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8->16 [style = bold, label=""];
7->1 [style = bold, label=""];
14->4 [style = solid, label="netMember1"];
7->12 [style = bold, label=""];
11->15 [style = dashed, label="0"];
4->15 [style = bold, label=""];
0->7 [style = solid, label="host1"];
1->3 [style = bold, label=""];
6->0 [style = bold, label=""];
2->9 [style = bold, label=""];
10->4 [style = solid, label="netMember1"];
16->2 [style = bold, label=""];
10->7 [style = bold, label=""];
3->4 [style = bold, label=""];
14->7 [style = bold, label=""];
12->8 [style = solid, label="netMember2"];
5->16 [style = dashed, label="0"];
8->2 [style = solid, label="other"];
1->12 [style = dashed, label="0"];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
0->14 [style = bold, label=""];
17->0 [style = bold, label=""];
8->5 [style = bold, label=""];
18->1 [style = bold, label=""];
3->19 [style = bold, label=""];
7->18 [style = bold, label=""];
11->8 [style = bold, label=""];
12->3 [style = bold, label=""];
19->4 [style = bold, label=""];
4->11 [style = bold, label=""];
0->3 [style = solid, label="host1"];
15->8 [style = bold, label=""];
1->8 [style = solid, label="netMember2"];
10->14 [style = dashed, label="0"];
13->0 [style = bold, label=""];
}
