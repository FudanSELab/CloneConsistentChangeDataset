digraph {
16 [style = filled, label = "assertThat(merged.getOneofInner().getNum()).isEqualTo(115)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(merged.getNum()).isEqualTo(119)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testMergeDefaultValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(merged.getOneofInner().getNumWithDefault()).isEqualTo(42)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "LazyMessageLite merged = LazyMessageLite.newBuilder(outerBase).mergeFrom(outerMerging).build()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testMergeValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertEquals(115,merged.getInner().getNum())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(119,merged.getNum())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "LazyMessageLite outerBase = LazyMessageLite.newBuilder().setNum(119).setNumWithDefault(122).setInner(innerBase).setOneofInner(innerBase).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(115,merged.getOneofInner().getNum())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(42,merged.getOneofInner().getNumWithDefault())@@@12@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "LazyMessageLite outerBase = LazyMessageLite.newBuilder().setNumWithDefault(122).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "LazyInnerMessageLite innerMerging = LazyInnerMessageLite.newBuilder().setNum(115).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(merged.getInner().getNum()).isEqualTo(115)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "LazyMessageLite outerMerging = LazyMessageLite.getDefaultInstance()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "LazyMessageLite outerMerging = LazyMessageLite.newBuilder().setNum(119).setInner(innerMerging).setOneofInner(innerMerging).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(42,merged.getInner().getNumWithDefault())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(merged.getInner().getNumWithDefault()).isEqualTo(42)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(merged.getNumWithDefault()).isEqualTo(122)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(122,merged.getNumWithDefault())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "LazyInnerMessageLite innerBase = LazyInnerMessageLite.newBuilder().setNum(115).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testMergeValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
16->15 [style = bold, label=""];
19->18 [style = bold, label=""];
1->8 [style = bold, label=""];
2->20 [style = dashed, label="0"];
7->16 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
8->6 [style = bold, label=""];
10->17 [style = bold, label=""];
4->2 [style = bold, label=""];
8->14 [style = dashed, label="0"];
2->10 [style = bold, label=""];
4->21 [style = dashed, label="0"];
12->0 [style = bold, label=""];
3->0 [style = bold, label=""];
20->10 [style = bold, label=""];
1->13 [style = dashed, label="0"];
7->5 [style = bold, label=""];
21->20 [style = bold, label=""];
0->4 [style = bold, label=""];
9->17 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
10->9 [style = bold, label=""];
17->13 [style = bold, label=""];
18->21 [style = bold, label=""];
9->1 [style = bold, label=""];
6->7 [style = bold, label=""];
5->15 [style = dashed, label="0"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
}
