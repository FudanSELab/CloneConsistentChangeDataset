digraph {
22 [style = filled, label = "Assert.assertEquals(\"Should have expected delete files\",Sets.newHashSet(UNPARTITIONED_POS_DELETES.path(),UNPARTITIONED_EQ_DELETES.path()),Sets.newHashSet(Iterables.transform(task.deletes(),null)))@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Should have one associated delete file\",1,task.deletes().size())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DeleteFile unpartitionedPosDeleteFile = unpartitionedPosDeletes(unpartitioned.spec())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "DataFile unpartitionedFile = unpartitionedFile(unpartitioned.spec())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should have one task\",1,tasks.size())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Table unpartitioned = TestTables.create(location,\"unpartitioned\",SCHEMA,PartitionSpec.unpartitioned(),2)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(\"Should have the correct data file path\",UNPARTITIONED_FILE.path(),task.file().path())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "task = tasks.get(0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testUnpartitionedTableSequenceNumbers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(location.delete())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"Should have the correct data file path\",UNPARTITIONED_FILE.path(),task.file().path())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "unpartitioned.newRowDelta().addRows(UNPARTITIONED_FILE).addDeletes(UNPARTITIONED_POS_DELETES).addDeletes(UNPARTITIONED_EQ_DELETES).commit()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "File location = temp.newFolder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Should have expected delete file\",UNPARTITIONED_POS_DELETES.path(),task.deletes().get(0).path())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "unpartitioned.newRowDelta().addRows(unpartitionedFile).addDeletes(unpartitionedPosDeleteFile).addDeletes(unpartitionedEqDeletes(unpartitioned.spec())).commit()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "unpartitioned.newRowDelta().addDeletes(UNPARTITIONED_EQ_DELETES).commit()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "FileScanTask task = tasks.get(0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(\"Should have only pos delete file\",UNPARTITIONED_POS_DELETES.path(),task.deletes().get(0).path())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Should have two associated delete files\",2,task.deletes().size())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "unpartitioned.newAppend().appendFile(UNPARTITIONED_FILE).commit()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testUnpartitionedTableScan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Should have one associated delete file\",1,task.deletes().size())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testUnpartitionedTableSequenceNumbers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(\"Table should contain 2 delete files\",2,(long)unpartitioned.currentSnapshot().deleteManifests().get(0).addedFilesCount())@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(\"Should have the correct data file path\",unpartitionedFile.path(),task.file().path())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "Assert.assertEquals(\"Should have only pos delete file\",unpartitionedPosDeleteFile.path(),task.deletes().get(0).path())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "List<FileScanTask> tasks = Lists.newArrayList(unpartitioned.newScan().planFiles().iterator())@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "unpartitioned.newRowDelta().addDeletes(UNPARTITIONED_POS_DELETES).commit()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->8 [style = bold, label=""];
2->6 [style = bold, label=""];
9->4 [style = bold, label=""];
25->9 [style = bold, label=""];
26->19 [style = bold, label=""];
11->9 [style = bold, label=""];
15->16 [style = bold, label=""];
12->9 [style = bold, label=""];
1->13 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
20->27 [style = bold, label=""];
24->20 [style = bold, label=""];
13->17 [style = bold, label=""];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
0->14 [style = bold, label=""];
1->28 [style = bold, label=""];
8->5 [style = bold, label=""];
18->6 [style = bold, label=""];
21->22 [style = bold, label=""];
28->23 [style = bold, label=""];
0->24 [style = bold, label=""];
14->15 [style = bold, label=""];
4->1 [style = bold, label=""];
23->2 [style = bold, label=""];
9->1 [style = solid, label="location"];
10->16 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
6->7 [style = bold, label=""];
10->24 [style = dashed, label="0"];
17->18 [style = bold, label=""];
27->26 [style = bold, label=""];
19->21 [style = bold, label=""];
}
