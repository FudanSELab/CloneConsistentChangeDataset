digraph {
0 [style = filled, label = "isNullAt(ordinal)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int size = (int)offsetAndSize@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return null@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return null@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final int offset = getElementOffset(ordinal)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final byte(( bytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int size = getElementSize(offset,ordinal)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Platform.copyMemory(baseObject,baseOffset + offset,bytes,Platform.BYTE_ARRAY_OFFSET,size)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "offset < 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "return array@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return bytes@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "getArray['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final UnsafeArrayData array = new UnsafeArrayData()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "array.pointTo(baseObject,baseOffset + offset,size)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
6->3 [style = bold, label=""];
8->3 [style = solid, label="offset"];
1->8 [style = bold, label=""];
0->8 [style = dotted, label="false"];
0->6 [style = dotted, label="false"];
1->8 [style = solid, label="offsetAndSize"];
0->4 [style = dotted, label="true"];
7->1 [style = solid, label="ordinal"];
7->0 [style = solid, label="ordinal"];
15->18 [style = dotted, label="true"];
13->19 [style = solid, label="ordinal"];
11->6 [style = bold, label=""];
13->12 [style = solid, label="ordinal"];
0->2 [style = dotted, label="false"];
19->14 [style = solid, label="size"];
12->15 [style = bold, label=""];
18->19 [style = bold, label=""];
6->3 [style = solid, label="bytes"];
1->11 [style = solid, label="offsetAndSize"];
0->1 [style = dotted, label="false"];
15->19 [style = bold, label=""];
0->20 [style = dashed, label="0"];
12->14 [style = solid, label="offset"];
11->3 [style = solid, label="size"];
15->18 [style = bold, label=""];
9->6 [style = bold, label=""];
1->9 [style = solid, label="offsetAndSize"];
0->9 [style = dotted, label="false"];
21->16 [style = solid, label="array"];
0->11 [style = dotted, label="false"];
12->15 [style = solid, label="offset"];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
0->3 [style = dotted, label="false"];
0->4 [style = bold, label=""];
5->7 [style = dotted, label="true"];
0->1 [style = bold, label=""];
12->19 [style = solid, label="offset"];
6->2 [style = solid, label="bytes"];
10->0 [style = bold, label=""];
20->12 [style = bold, label=""];
8->9 [style = bold, label=""];
7->13 [style = dashed, label="0"];
9->11 [style = dashed, label="0"];
13->20 [style = solid, label="ordinal"];
17->20 [style = bold, label=""];
9->3 [style = solid, label="size"];
17->13 [style = dotted, label="true"];
8->11 [style = bold, label=""];
10->7 [style = dotted, label="true"];
21->14 [style = bold, label=""];
19->21 [style = bold, label=""];
}
