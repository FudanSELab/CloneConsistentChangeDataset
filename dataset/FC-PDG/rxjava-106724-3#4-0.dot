digraph {
4 [style = filled, label = "int i = 0@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ts.request(Flowable.bufferSize())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ts.assertNoValues()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "overflowMissingBackpressureExceptionDelayed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "overflowMissingBackpressureException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "ts.assertError()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "pp.onNext(i)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertFalse(\"Source has subscribers?\",pp.hasSubscribers())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "new FlowablePublishMulticast<Integer,Integer>(pp,new Function<Flowable<Integer>,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Flowable<Integer> f){return f}},Flowable.bufferSize(),true).subscribe(ts)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "overflowMissingBackpressureException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ts.assertValueCount(Flowable.bufferSize())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "i++@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i < Flowable.bufferSize() * 2@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"Could not emit value due to lack of requests\",ts.errors().get(0).getMessage())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ts.assertError()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ts.assertNotComplete()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "PublishProcessor<Integer> pp = PublishProcessor.create()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "pp.publish(new Function<Flowable<Integer>,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Flowable<Integer> f){return f}}).subscribe(ts)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
4->9 [style = solid, label="i"];
7->9 [style = solid, label="i"];
6->19 [style = solid, label="ts"];
8->12 [style = bold, label=""];
18->2 [style = bold, label=""];
9->0 [style = dotted, label="true"];
7->0 [style = solid, label="i"];
6->1 [style = solid, label="ts"];
0->7 [style = bold, label=""];
7->9 [style = bold, label=""];
16->18 [style = bold, label=""];
12->15 [style = bold, label=""];
9->16 [style = bold, label=""];
9->7 [style = dotted, label="true"];
4->0 [style = solid, label="i"];
14->13 [style = bold, label=""];
6->13 [style = dashed, label="0"];
9->0 [style = bold, label=""];
11->6 [style = bold, label=""];
4->7 [style = solid, label="i"];
3->1 [style = bold, label=""];
2->8 [style = bold, label=""];
1->19 [style = dashed, label="0"];
17->6 [style = bold, label=""];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
3->19 [style = bold, label=""];
1->4 [style = bold, label=""];
19->4 [style = bold, label=""];
13->3 [style = bold, label=""];
10->5 [style = bold, label=""];
9->10 [style = bold, label=""];
13->1 [style = solid, label="ts"];
}
