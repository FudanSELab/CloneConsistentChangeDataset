digraph {
3 [style = filled, label = "Cluster discoveredCluster = mockCluster(0)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "env.kafkaClient().prepareResponse(null,new MetadataResponse(discoveredCluster.nodes(),discoveredCluster.clusterResource().clusterId(),1,Collections.emptyList()))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "KafkaFuture<Void> future = env.adminClient().createTopics(Collections.singleton(new NewTopic(\"myTopic\",Collections.singletonMap(0,asList(0,1,2)))),new CreateTopicsOptions().timeoutMs(10000)).all()@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testUnreachableBootstrapServer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "mockClient.setNodeApiVersions(NodeApiVersions.create())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\",8121)))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "env.kafkaClient().prepareResponse(null,new CreateTopicsResponse(Collections.singletonMap(\"myTopic\",new ApiError(Errors.NONE,\"\"))))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "mockClient.setNode(cluster.nodes().get(0))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testConnectionFailureOnMetadataUpdate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "KafkaFuture<Void> future = env.adminClient().createTopics(Collections.singleton(new NewTopic(\"myTopic\",Collections.singletonMap(0,asList(0,1,2)))),new CreateTopicsOptions().timeoutMs(10000)).all()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "env.kafkaClient().prepareResponse(null,null,true)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "MockClient mockClient = new MockClient(Time.SYSTEM)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testConnectionFailureOnMetadataUpdate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Cluster cluster = mockBootstrapCluster()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Cluster discoveredCluster = mockCluster(0)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "future.get()@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "env.kafkaClient().prepareResponse(null,new CreateTopicsResponse(Collections.singletonMap(\"myTopic\",new ApiError(Errors.NONE,\"\"))))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "future.get()@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "mockClient.setUnreachable(cluster.nodes().get(0),200)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->16 [style = bold, label=""];
19->3 [style = bold, label=""];
9->19 [style = bold, label=""];
3->10 [style = bold, label=""];
14->17 [style = bold, label=""];
5->8 [style = bold, label=""];
4->5 [style = bold, label=""];
9->3 [style = bold, label=""];
17->12 [style = bold, label=""];
4->3 [style = dashed, label="0"];
11->14 [style = bold, label=""];
12->13 [style = bold, label=""];
6->9 [style = bold, label=""];
10->4 [style = bold, label=""];
3->15 [style = bold, label=""];
2->6 [style = bold, label=""];
13->3 [style = bold, label=""];
8->7 [style = bold, label=""];
0->2 [style = bold, label=""];
18->0 [style = bold, label=""];
15->10 [style = bold, label=""];
3->4 [style = bold, label=""];
1->0 [style = bold, label=""];
}
