digraph {
9 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "when(restTemplate.postForEntity(serviceTwo + \"/\" + path,request,)).thenReturn(entity)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.POST),any(),eq())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "actualResult = retryableRestTemplate.post(Env.DEV,path,request,)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "verify(restTemplate).getForObject(serviceOne + \"/\" + path,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertSame(socketTimeoutException,exception)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "when(restTemplate.getForObject(serviceOne + \"/\" + path,)).thenThrow(socketTimeoutException)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(restTemplate.postForEntity(serviceOne + \"/\" + path,request,)).thenThrow(socketTimeoutException)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Throwable ex@@@13@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "verify(restTemplate).postForEntity(serviceOne + \"/\" + path,request,)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testAllServerDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertNull(actualResult)@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "ResponseEntity someEntity = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "verify(restTemplate).getForObject(serviceTwo + \"/\" + path,)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(restTemplate.exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.POST),any(),eq())).thenThrow(socketTimeoutException)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "verify(restTemplate).getForObject(serviceThree + \"/\" + path,)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(restTemplate,times(0)).postForEntity(serviceTwo + \"/\" + path,request,)@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Throwable exception = null@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "retryableRestTemplate.get(Env.DEV,path,)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(someEntity.getBody()).thenReturn(result)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "exception = ex@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "when(restTemplate.getForObject(serviceTwo + \"/\" + path,)).thenThrow(httpHostConnectException)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "when(restTemplate.getForObject(serviceThree + \"/\" + path,)).thenThrow(connectTimeoutException)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verify(restTemplate,never()).exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.POST),any(),eq())@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testPostSocketTimeoutNotRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "retryableRestTemplate.post(Env.DEV,path,request,)@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Object actualResult = null@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testPostSocketTimeoutNotRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "when(restTemplate.exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.POST),any(),eq())).thenReturn(someEntity)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0->6 [style = bold, label=""];
4->29 [style = dashed, label="0"];
6->4 [style = bold, label=""];
14->16 [style = bold, label=""];
3->2 [style = bold, label=""];
0->27 [style = dashed, label="0"];
19->20 [style = bold, label=""];
5->1 [style = bold, label=""];
9->15 [style = bold, label=""];
21->14 [style = solid, label="exception"];
3->26 [style = dashed, label="0"];
11->17 [style = bold, label=""];
15->7 [style = bold, label=""];
7->21 [style = bold, label=""];
21->10 [style = bold, label=""];
17->7 [style = solid, label="someEntity"];
25->1 [style = bold, label=""];
8->19 [style = dotted, label="true"];
13->20 [style = solid, label="actualResult"];
16->12 [style = bold, label=""];
27->24 [style = bold, label=""];
18->9 [style = bold, label=""];
1->3 [style = bold, label=""];
10->13 [style = bold, label=""];
22->28 [style = bold, label=""];
2->23 [style = dashed, label="0"];
29->22 [style = bold, label=""];
1->26 [style = bold, label=""];
26->23 [style = bold, label=""];
2->0 [style = bold, label=""];
13->20 [style = bold, label=""];
24->29 [style = bold, label=""];
20->14 [style = bold, label=""];
19->14 [style = solid, label="exception"];
8->19 [style = bold, label=""];
23->27 [style = bold, label=""];
17->18 [style = bold, label=""];
}
