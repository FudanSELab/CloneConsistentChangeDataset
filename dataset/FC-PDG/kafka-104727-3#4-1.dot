digraph {
1 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET)@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "PowerMock.expectPrivate(workerTask,\"createWorkerThread\").andReturn(workerThread)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)),EasyMock.capture(rebalanceListener))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "PowerMock.expectLastCall()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION3)).andReturn(FIRST_OFFSET)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "PowerMock.expectLastCall()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "workerThread = PowerMock.createPartialMock(,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@bc816a,workerTask,\"mock-worker-thread\",time,workerConfig)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "PowerMock.expectPrivate(workerTask,\"createConsumer\").andReturn(consumer)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "expectInitializeTask['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectInitializeTask['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "workerThread.start()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "PowerMock.expectLastCall()@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "PowerMock.expectLastCall()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte((,byte((>>(){@Override public ConsumerRecords<byte((,byte((> answer(){rebalanceListener.getValue().onPartitionsAssigned(Arrays.asList(TOPIC_PARTITION,TOPIC_PARTITION2))return ConsumerRecords.empty()}})@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "sinkTask.start(TASK_PROPS)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectInitializeTask['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "sinkTask.initialize(EasyMock.capture(sinkTaskContext))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->3 [style = bold, label=""];
16->11 [style = bold, label=""];
3->1 [style = bold, label=""];
7->12 [style = bold, label=""];
0->2 [style = bold, label=""];
11->9 [style = bold, label=""];
9->8 [style = bold, label=""];
1->7 [style = bold, label=""];
10->6 [style = bold, label=""];
6->15 [style = bold, label=""];
2->12 [style = bold, label=""];
12->10 [style = bold, label=""];
11->0 [style = bold, label=""];
5->0 [style = bold, label=""];
2->14 [style = bold, label=""];
1->12 [style = bold, label=""];
13->5 [style = bold, label=""];
11->8 [style = bold, label=""];
9->8 [style = solid, label="workerThread"];
4->11 [style = bold, label=""];
8->13 [style = bold, label=""];
17->11 [style = bold, label=""];
}
