digraph {
3 [style = filled, label = "Assert.assertEquals(25,fromJson.getTaskPriority())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final String json = objectMapper.writeValueAsString(config)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(config.getTaskContext(),fromJson.getTaskContext())@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(config.getMaxNumSegmentsToCompact(),fromJson.getMaxNumSegmentsToCompact())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testSerdeBasic['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(config.getMaxRowsPerSegment(),fromJson.getMaxRowsPerSegment())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(fromJson.isKeepSegmentGranularity())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\"dataSource\",null,null,500L,100L,null,20,new Period(3600),null,ImmutableMap.of(\"key\",\"val\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\"dataSource\",null,null,500L,null,30,20,new Period(3600),null,ImmutableMap.of(\"key\",\"val\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final DataSourceCompactionConfig fromJson = objectMapper.readValue(json,)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(config.getTuningConfig(),fromJson.getTuningConfig())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(config.getInputSegmentSizeBytes(),fromJson.getInputSegmentSizeBytes())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSerdeBasic['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(config.getTargetCompactionSizeBytes(),fromJson.getTargetCompactionSizeBytes())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\"dataSource\",null,500L,100L,null,20,new Period(3600),null,ImmutableMap.of(\"key\",\"val\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertNull(fromJson.getTargetCompactionSizeBytes())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(config.getDataSource(),fromJson.getDataSource())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(config.getSkipOffsetFromLatest(),fromJson.getSkipOffsetFromLatest())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSerdeWithMaxRowsPerSegment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
5->0 [style = solid, label="json"];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
7->16 [style = dashed, label="0"];
7->14 [style = dashed, label="0"];
13->17 [style = dashed, label="0"];
10->3 [style = bold, label=""];
11->12 [style = bold, label=""];
16->5 [style = solid, label="config"];
7->5 [style = solid, label="config"];
9->8 [style = bold, label=""];
13->11 [style = bold, label=""];
10->6 [style = bold, label=""];
1->13 [style = bold, label=""];
1->17 [style = bold, label=""];
7->5 [style = bold, label=""];
0->10 [style = bold, label=""];
5->0 [style = bold, label=""];
12->4 [style = bold, label=""];
14->5 [style = solid, label="config"];
16->5 [style = bold, label=""];
2->7 [style = bold, label=""];
14->5 [style = bold, label=""];
17->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
