digraph {
23 [style = filled, label = "testMapProjection['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "record.put(\"properties\",properties)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "projected = writeAndRead(\"key_only\",writeSchema,keyOnly,record)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(\"Should not project properties map\",projected.get(\"properties\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Schema idOnly = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testMapProjection['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "projected = writeAndRead(\"map_only\",writeSchema,mapOnly,record)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Schema keyOnly = writeSchema.select(\"properties.key\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "record.put(\"id\",34L)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"id\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(5,\"properties\",Types.MapType.ofOptional(6,7,Types.StringType.get(),Types.StringType.get())))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Schema valueOnly = writeSchema.select(\"properties.value\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Schema mapOnly = writeSchema.select(\"properties\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Map<String,String> properties = ImmutableMap.of(\"a\",\"A\",\"b\",\"B\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "AssertHelpers.assertEmptyAvroField(projected,\"properties\")@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNull(\"Should not project id\",projected.get(\"id\"))@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "projected = writeAndRead(\"value_only\",writeSchema,valueOnly,record)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Record projected = writeAndRead(\"id_only\",writeSchema,idOnly,record)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"Should project entire map\",properties,toStringMap((Map)projected.get(\"properties\")))@@@23@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testMapProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11->18 [style = solid, label="writeSchema"];
13->26 [style = bold, label=""];
16->21 [style = solid, label="properties"];
4->18 [style = solid, label="record"];
3->11 [style = bold, label=""];
26->8 [style = bold, label=""];
15->1 [style = bold, label=""];
5->8 [style = bold, label=""];
11->12 [style = solid, label="writeSchema"];
4->17 [style = solid, label="record"];
16->4 [style = bold, label=""];
24->7 [style = bold, label=""];
6->17 [style = solid, label="idOnly"];
12->22 [style = solid, label="projected"];
14->21 [style = bold, label=""];
22->0 [style = bold, label=""];
10->9 [style = bold, label=""];
17->24 [style = solid, label="projected"];
13->26 [style = solid, label="projected"];
12->2 [style = bold, label=""];
18->25 [style = bold, label=""];
0->19 [style = bold, label=""];
6->17 [style = bold, label=""];
11->16 [style = bold, label=""];
15->24 [style = bold, label=""];
23->11 [style = bold, label=""];
4->12 [style = solid, label="record"];
27->11 [style = bold, label=""];
4->13 [style = solid, label="record"];
16->0 [style = solid, label="properties"];
12->22 [style = bold, label=""];
9->6 [style = bold, label=""];
11->4 [style = solid, label="writeSchema"];
25->21 [style = bold, label=""];
20->13 [style = bold, label=""];
7->12 [style = bold, label=""];
21->20 [style = bold, label=""];
17->15 [style = bold, label=""];
18->25 [style = solid, label="projected"];
11->13 [style = solid, label="writeSchema"];
16->9 [style = solid, label="properties"];
19->18 [style = solid, label="valueOnly"];
4->10 [style = bold, label=""];
2->0 [style = bold, label=""];
1->7 [style = bold, label=""];
18->14 [style = bold, label=""];
16->8 [style = solid, label="properties"];
20->13 [style = solid, label="mapOnly"];
11->17 [style = solid, label="writeSchema"];
19->18 [style = bold, label=""];
13->5 [style = bold, label=""];
7->12 [style = solid, label="keyOnly"];
}
