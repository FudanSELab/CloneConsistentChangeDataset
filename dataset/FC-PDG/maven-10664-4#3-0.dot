digraph {
9 [style = filled, label = "MavenProject projectC = createSucceededMavenProject(\"C\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "MavenProject projectD = createFailedMavenProject(\"D\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MavenProject projectA = createSucceededMavenProject(\"A\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "projectsDependingOnFailedProjectsAreNotExcluded['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "projectsFailingAfterAnotherFailedProjectAreNotExcluded['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(result.get().getProjectsToSkip(),not(contains(\"test:D\")))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(result.get().getResumeFrom(),is(Optional.of(\"test:B\")))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB,projectC,projectD))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "executionResult.setTopologicallySortedProjects(asList(projectA,projectB,projectC))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "MavenProject projectB = createFailedMavenProject(\"B\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result.get().getResumeFrom(),is(\"test:B\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(result.get().getProjectsToSkip(),contains(\"test:C\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(result.get().getProjectsToSkip().isEmpty(),is(true))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "projectsFailingAfterAnotherFailedProjectAreNotExcluded['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Optional<BuildResumptionData> result = analyzer.determineBuildResumptionData(executionResult)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result.isPresent(),is(true))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "projectC.setDependencies(singletonList(toDependency(projectB)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
12->5 [style = bold, label=""];
9->4 [style = bold, label=""];
5->1 [style = solid, label="projectA"];
0->11 [style = bold, label=""];
4->1 [style = solid, label="projectD"];
9->16 [style = solid, label="projectC"];
8->14 [style = dashed, label="0"];
16->2 [style = bold, label=""];
15->16 [style = bold, label=""];
10->7 [style = bold, label=""];
6->1 [style = solid, label="projectB"];
6->15 [style = solid, label="projectB"];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
0->14 [style = bold, label=""];
5->6 [style = bold, label=""];
11->10 [style = bold, label=""];
9->15 [style = bold, label=""];
1->16 [style = dashed, label="0"];
0->8 [style = bold, label=""];
13->5 [style = bold, label=""];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
9->1 [style = solid, label="projectC"];
6->9 [style = bold, label=""];
8->11 [style = dashed, label="0"];
6->16 [style = solid, label="projectB"];
5->16 [style = solid, label="projectA"];
}
