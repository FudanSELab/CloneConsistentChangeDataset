digraph {
8 [style = filled, label = "Assert.assertEquals(originalSchema.getTransformSpec(),deserialized.getTransformSpec())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSerdeWithUpdatedDataSchemaAddedField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(VALID_DATASOURCE_CHARS_NAME,null,null,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f2a04,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,parser,jsonMapper,\"some arbitrary string\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DataSchema originalSchema = new DataSchema(VALID_DATASOURCE_CHARS_NAME,parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f28c1,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "DataSchema originalSchema = new DataSchema(TaskIdUtilsTest.VALID_ID_CHARS,parser,new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8f2963,new ArbitraryGranularitySpec(Granularities.DAY,ImmutableList.of(Intervals.of(\"2014/2015\"))),null,jsonMapper)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertArrayEquals(originalSchema.getAggregators(),deserialized.getAggregators())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(originalSchema.getGranularitySpec(),deserialized.getGranularitySpec())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(originalSchema.getParser().getParseSpec(),deserialized.getParser().getParseSpec())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testSerdeWithUpdatedDataSchemaRemovedField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(null,deserialized.getExtra())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Map<String,Object> parser = jsonMapper.convertValue(new StringInputRowParser(new JSONParseSpec(new TimestampSpec(\"time\",\"auto\",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\",\"dimA\")),null,null),null,null),null),JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(originalSchema.getParserMap(),deserialized.getParserMap())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String serialized = jsonMapper.writeValueAsString(originalSchema)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized,)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DataSchema deserialized = jsonMapper.readValue(serialized,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testSerdeWithUpdatedDataSchemaAddedField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(originalSchema.getDataSource(),deserialized.getDataSource())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(originalSchema.getParserMap(),deserialized.getParserMap())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
6->9 [style = solid, label="serialized"];
11->6 [style = solid, label="originalSchema"];
15->2 [style = bold, label=""];
11->16 [style = dashed, label="0"];
16->6 [style = bold, label=""];
11->6 [style = bold, label=""];
2->13 [style = solid, label="parser"];
14->17 [style = bold, label=""];
7->4 [style = bold, label=""];
10->7 [style = bold, label=""];
2->13 [style = bold, label=""];
6->14 [style = bold, label=""];
6->14 [style = solid, label="serialized"];
3->10 [style = bold, label=""];
2->11 [style = solid, label="parser"];
12->2 [style = bold, label=""];
11->13 [style = dashed, label="0"];
9->14 [style = dashed, label="0"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
16->6 [style = solid, label="originalSchema"];
13->6 [style = solid, label="originalSchema"];
9->3 [style = bold, label=""];
2->16 [style = solid, label="parser"];
4->8 [style = bold, label=""];
1->2 [style = bold, label=""];
13->6 [style = bold, label=""];
6->9 [style = bold, label=""];
2->11 [style = bold, label=""];
2->16 [style = bold, label=""];
}
