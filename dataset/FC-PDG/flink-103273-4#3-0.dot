digraph {
20 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_STATE:HELLO\"),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_STATE:CIAO\"),0)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(extractResult(testHarness).isEmpty())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testHarness2.processWatermark(20L)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness1.setProcessingTime(20L)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_EVENT_TIME:CIAO\"))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testHarness.setProcessingTime(0L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,MAX_PARALLELISM)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "testHarness.setProcessingTime(20L)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,MAX_PARALLELISM,2,1)@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_STATE:HELLO\"),0)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "testHarness.open()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "TestOperator testOperator2 = new TestOperator()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestOperator testOperator1 = new TestOperator()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int key2 = getKeyInKeyGroupRange(subKeyGroupRange2,MAX_PARALLELISM)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(MAX_PARALLELISM / 2) - 1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testHarness2.initializeState(snapshot)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_PROC_TIME_TIMER:10\"),0)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testHarness2.setProcessingTime(10L)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,MAX_PARALLELISM,2,0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "testHarness1.open()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(extractResult(testHarness2),contains(\"ON_PROC_TIME:CIAO\"))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:HELLO\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "int key1 = getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "testHarness1.initializeState(snapshot)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "KeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0,(maxParallelism / 2) - 1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testHarness1.setProcessingTime(10L)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "OperatorStateHandles snapshot = testHarness.snapshot(0,0)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_PROC_TIME_TIMER:20\"),0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testProcessingTimeTimersDontInterfere['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testHarness.processWatermark(0L)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.setProcessingTime(10L)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_EVENT_TIME_TIMER:20\"),0)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testHarness1.setup()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,MAX_PARALLELISM - 1)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_EVENT_TIME:HELLO\"))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness2.processWatermark(10L)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.processElement(new Tuple2<>(key2,\"SET_PROC_TIME_TIMER:20\"),0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,MAX_PARALLELISM,1,0)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final int MAX_PARALLELISM = 10@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertTrue(extractResult(testHarness1).isEmpty())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testHarness2.setProcessingTime(20L)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testHarness.processElement(new Tuple2<>(key1,\"SET_EVENT_TIME_TIMER:10\"),0)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "KeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testHarness1.processWatermark(10L)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testHarness1.processWatermark(20L)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2 = new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertTrue(extractResult(testHarness2).isEmpty())@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness.processElement(new Tuple2<>(0,\"SET_PROC_TIME_TIMER:10\"),0)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testStateAndTimerStateShufflingScalingUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "testHarness2.setup()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final int maxParallelism = 10@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "testHarness.processElement(new Tuple2<>(1,\"SET_STATE:CIAO\"),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertThat(extractResult(testHarness),contains(\"ON_PROC_TIME:CIAO\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "testHarness2.open()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness = new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "TestOperator testOperator = new TestOperator()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertThat(extractResult(testHarness1),contains(\"ON_PROC_TIME:HELLO\"))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50->23 [style = solid, label="testHarness2"];
54->56 [style = bold, label=""];
30->13 [style = bold, label=""];
39->17 [style = solid, label="MAX_PARALLELISM"];
65->57 [style = bold, label=""];
21->32 [style = solid, label="key2"];
59->62 [style = bold, label=""];
17->28 [style = solid, label="subKeyGroupRange1"];
61->59 [style = bold, label=""];
25->35 [style = bold, label=""];
1->63 [style = dashed, label="0"];
9->37 [style = bold, label=""];
13->65 [style = dashed, label="0"];
39->37 [style = solid, label="MAX_PARALLELISM"];
28->20 [style = solid, label="key1"];
49->47 [style = solid, label="testHarness1"];
7->26 [style = bold, label=""];
19->44 [style = bold, label=""];
48->54 [style = bold, label=""];
9->63 [style = bold, label=""];
44->66 [style = dashed, label="0"];
28->21 [style = bold, label=""];
28->44 [style = solid, label="key1"];
50->33 [style = solid, label="testHarness2"];
51->48 [style = bold, label=""];
52->14 [style = bold, label=""];
46->7 [style = bold, label=""];
21->24 [style = solid, label="key2"];
26->15 [style = bold, label=""];
54->20 [style = solid, label="key1"];
9->37 [style = solid, label="testOperator"];
45->0 [style = solid, label="testHarness1"];
53->51 [style = solid, label="maxParallelism"];
9->52 [style = bold, label=""];
49->40 [style = bold, label=""];
18->25 [style = solid, label="testOperator2"];
61->59 [style = solid, label="testOperator"];
4->16 [style = bold, label=""];
37->59 [style = dashed, label="0"];
60->66 [style = bold, label=""];
56->24 [style = solid, label="key2"];
53->54 [style = solid, label="maxParallelism"];
42->46 [style = bold, label=""];
27->12 [style = bold, label=""];
59->57 [style = solid, label="testHarness"];
62->60 [style = bold, label=""];
41->4 [style = bold, label=""];
21->30 [style = solid, label="key2"];
56->30 [style = solid, label="key2"];
40->34 [style = bold, label=""];
53->48 [style = solid, label="maxParallelism"];
56->9 [style = bold, label=""];
8->22 [style = bold, label=""];
22->49 [style = bold, label=""];
18->50 [style = bold, label=""];
24->20 [style = bold, label=""];
24->14 [style = dashed, label="0"];
51->54 [style = solid, label="subKeyGroupRange1"];
21->9 [style = bold, label=""];
5->6 [style = bold, label=""];
18->50 [style = solid, label="testOperator2"];
39->45 [style = solid, label="MAX_PARALLELISM"];
44->32 [style = bold, label=""];
32->9 [style = dashed, label="0"];
25->33 [style = solid, label="testHarness2"];
18->25 [style = bold, label=""];
47->41 [style = bold, label=""];
43->33 [style = bold, label=""];
21->56 [style = dashed, label="0"];
48->56 [style = solid, label="subKeyGroupRange2"];
22->49 [style = solid, label="testOperator1"];
54->1 [style = solid, label="key1"];
6->47 [style = bold, label=""];
39->53 [style = dashed, label="0"];
63->14 [style = bold, label=""];
3->48 [style = dashed, label="0"];
36->43 [style = bold, label=""];
45->47 [style = solid, label="testHarness1"];
53->56 [style = solid, label="maxParallelism"];
58->61 [style = bold, label=""];
28->54 [style = dashed, label="0"];
39->25 [style = solid, label="MAX_PARALLELISM"];
16->18 [style = bold, label=""];
19->64 [style = bold, label=""];
22->45 [style = bold, label=""];
53->50 [style = solid, label="maxParallelism"];
35->42 [style = bold, label=""];
39->3 [style = solid, label="MAX_PARALLELISM"];
14->19 [style = bold, label=""];
53->52 [style = solid, label="maxParallelism"];
25->23 [style = solid, label="testHarness2"];
56->32 [style = solid, label="key2"];
17->51 [style = dashed, label="0"];
11->5 [style = bold, label=""];
3->28 [style = bold, label=""];
8->34 [style = solid, label="snapshot"];
29->19 [style = bold, label=""];
66->9 [style = bold, label=""];
39->17 [style = bold, label=""];
64->65 [style = bold, label=""];
32->1 [style = bold, label=""];
14->29 [style = bold, label=""];
17->3 [style = bold, label=""];
39->21 [style = solid, label="MAX_PARALLELISM"];
8->42 [style = solid, label="snapshot"];
31->39 [style = bold, label=""];
50->35 [style = bold, label=""];
22->45 [style = solid, label="testOperator1"];
2->11 [style = bold, label=""];
25->50 [style = dashed, label="0"];
45->40 [style = bold, label=""];
54->44 [style = solid, label="key1"];
9->52 [style = solid, label="testOperator"];
15->23 [style = bold, label=""];
53->51 [style = bold, label=""];
0->2 [style = bold, label=""];
49->0 [style = solid, label="testHarness1"];
38->36 [style = bold, label=""];
33->10 [style = bold, label=""];
37->52 [style = dashed, label="0"];
12->0 [style = bold, label=""];
45->49 [style = dashed, label="0"];
3->21 [style = solid, label="subKeyGroupRange2"];
37->14 [style = bold, label=""];
1->24 [style = bold, label=""];
53->49 [style = solid, label="maxParallelism"];
39->28 [style = solid, label="MAX_PARALLELISM"];
23->38 [style = bold, label=""];
55->53 [style = bold, label=""];
28->1 [style = solid, label="key1"];
13->8 [style = bold, label=""];
20->30 [style = bold, label=""];
59->64 [style = solid, label="testHarness"];
34->27 [style = bold, label=""];
}
