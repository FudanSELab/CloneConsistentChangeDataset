digraph {
13 [style = filled, label = "Assert.assertTrue(new Timing().awaitLatch(latch))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Watcher watcher = new Watcher(){@Override public void process(WatchedEvent event){if (event.getType() == Event.EventType.NodeCreated) {latch.countDown()}}}@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(createdLatch))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Timing timing = new Timing()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(removerClient.getRemovalManager().getEntries().size(),0)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testTriggered['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(removerClient.getRemovalManager().getEntries().size(),0)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "removerClient.create().forPath(\"/yo\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final CountDownLatch createdLatch = new CountDownLatch(1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(removerClient.getRemovalManager().getEntries().size(),1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Watcher watcher = new Watcher(){@Override public void process(WatchedEvent event){if (event.getType() == Event.EventType.NodeCreated) {try {removerClient.checkExists().usingWatcher(this).forPath(\"/yo\")}catch (Exception e) createdLatch.countDown()}if (event.getType() == Event.EventType.NodeDeleted) {deletedLatch.countDown()}}}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testResetFromWatcher['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertTrue(timing.awaitLatch(deletedLatch))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(deletedLatch))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "removerClient.create().forPath(\"/yo\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(removerClient.getRemovalManager().getEntries().size(),0)@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(removerClient.getRemovalManager().getEntries().size(),1)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "removerClient.delete().forPath(\"/yo\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final CountDownLatch deletedLatch = new CountDownLatch(1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testResetFromWatcher['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(removerClient.getRemovalManager().getEntries().size(),1)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "removerClient.checkExists().usingWatcher(watcher).forPath(\"/yo\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(timing.awaitLatch(createdLatch))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertEquals(removerClient.getRemovalManager().getEntries().size(),1)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "client.start()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@36@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
10->18 [style = bold, label=""];
21->10 [style = bold, label=""];
9->1 [style = solid, label="client"];
4->17 [style = bold, label=""];
15->28 [style = dashed, label="0"];
15->14 [style = bold, label=""];
3->21 [style = dashed, label="0"];
26->29 [style = bold, label=""];
14->17 [style = solid, label="deletedLatch"];
15->18 [style = solid, label="createdLatch"];
23->26 [style = bold, label=""];
31->30 [style = solid, label="client"];
5->28 [style = bold, label=""];
12->1 [style = bold, label=""];
24->23 [style = bold, label=""];
15->11 [style = solid, label="createdLatch"];
0->22 [style = dashed, label="0"];
17->19 [style = bold, label=""];
6->15 [style = bold, label=""];
29->13 [style = bold, label=""];
14->7 [style = bold, label=""];
22->4 [style = bold, label=""];
25->31 [style = bold, label=""];
3->10 [style = bold, label=""];
19->1 [style = bold, label=""];
11->13 [style = dashed, label="0"];
11->0 [style = bold, label=""];
18->22 [style = bold, label=""];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
31->27 [style = bold, label=""];
12->19 [style = dashed, label="0"];
0->4 [style = bold, label=""];
11->18 [style = dashed, label="0"];
28->13 [style = solid, label="latch"];
6->5 [style = dashed, label="0"];
8->12 [style = bold, label=""];
9->5 [style = bold, label=""];
28->24 [style = bold, label=""];
8->17 [style = dashed, label="0"];
4->8 [style = bold, label=""];
27->5 [style = bold, label=""];
13->21 [style = bold, label=""];
3->30 [style = bold, label=""];
14->8 [style = solid, label="deletedLatch"];
16->9 [style = bold, label=""];
10->11 [style = bold, label=""];
2->16 [style = bold, label=""];
}
