digraph {
4 [style = filled, label = "Node coordinator = new Node(Integer.MAX_VALUE - node.id(),node.host(),node.port())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "client.prepareResponseFrom(offsetResponse(Collections.singletonMap(tp0,539L),Errors.NONE),coordinator)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testMissingOffsetNoResetPolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "PartitionAssignor assignor = new RoundRobinAssignor()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testResetToCommittedOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Time time = new MockTime()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Metadata metadata = createMetadata()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMissingOffsetNoResetPolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "initMetadata(client,Collections.singletonMap(topic,1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "metadata.update(cluster,Collections.emptySet(),time.milliseconds())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "client.prepareResponseFrom(new FindCoordinatorResponse(Errors.NONE,node),node)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(topic,1)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Node coordinator = new Node(Integer.MAX_VALUE - node.id(),node.host(),node.port())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "consumer.assign(singletonList(tp0))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.setNode(node)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "consumer.poll(Duration.ZERO)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(539L,consumer.position(tp0))@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Node node = cluster.nodes().get(0)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,metadata,assignor,OffsetResetStrategy.NONE,true)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "consumer.poll(Duration.ZERO)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->14 [style = solid, label="time"];
8->10 [style = solid, label="node"];
4->1 [style = solid, label="coordinator"];
15->4 [style = solid, label="node"];
3->17 [style = dashed, label="0"];
11->14 [style = solid, label="client"];
15->14 [style = bold, label=""];
20->9 [style = bold, label=""];
2->6 [style = bold, label=""];
2->14 [style = solid, label="metadata"];
0->2 [style = bold, label=""];
2->11 [style = solid, label="metadata"];
4->20 [style = solid, label="coordinator"];
0->12 [style = solid, label="time"];
14->12 [style = solid, label="assignor"];
5->14 [style = bold, label=""];
7->8 [style = bold, label=""];
5->14 [style = solid, label="assignor"];
9->16 [style = bold, label=""];
1->9 [style = bold, label=""];
19->0 [style = bold, label=""];
0->7 [style = bold, label=""];
1->20 [style = dashed, label="0"];
7->6 [style = solid, label="cluster"];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
8->2 [style = bold, label=""];
11->3 [style = bold, label=""];
2->12 [style = solid, label="metadata"];
6->11 [style = bold, label=""];
14->12 [style = bold, label=""];
11->12 [style = solid, label="client"];
4->20 [style = bold, label=""];
17->15 [style = bold, label=""];
9->21 [style = bold, label=""];
10->4 [style = bold, label=""];
0->11 [style = solid, label="time"];
11->17 [style = bold, label=""];
11->17 [style = solid, label="client"];
4->1 [style = bold, label=""];
2->11 [style = bold, label=""];
18->0 [style = bold, label=""];
1->9 [style = solid, label="coordinator"];
8->3 [style = solid, label="node"];
13->0 [style = bold, label=""];
}
