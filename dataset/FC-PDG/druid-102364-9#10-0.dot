digraph {
20 [style = filled, label = "verifyAll()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(2,13)).once().andReturn(records.subList(3,13)).once()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getThrownAway())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "SegmentDescriptor desc4 = sd(task2,\"2012/P1D\",0)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final KinesisIndexTask task2 = createTask(null,new KinesisIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId0,\"1\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final KinesisIndexTask task2 = createTask(null,new KinesisIndexTaskIOConfig(1,\"sequence1\",new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"3\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getThrownAway())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectLastCall().once()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final ListenableFuture<TaskStatus> future1 = runTask(task1)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(4,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testRunTwoTasksTwoPartitions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(3,task2.getRunner().getRowIngestionMeters().getProcessed())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testRunConflicting['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(ImmutableList.of(\"d\",\"e\"),ImmutableList.of(\"h\")),ImmutableSet.of(readSegmentColumn(\"dim1\",desc2),readSegmentColumn(\"dim1\",desc3)))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(2,13)).once().andReturn(records.subList(13,15)).once()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "recordSupplier.close()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SegmentDescriptor desc1 = sd(task1,\"2010/P1D\",0)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(0,task1.getRunner().getRowIngestionMeters().getUnparseable())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectLastCall().anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SegmentDescriptor desc2 = sd(task1,\"2011/P1D\",0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future1.get().getStatusCode())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future2.get().getStatusCode())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc4))@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "SegmentDescriptor desc3 = sd(task2,\"2011/P1D\",1)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(TaskState.FAILED,future2.get().getStatusCode())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(3,task1.getRunner().getRowIngestionMeters().getProcessed())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "replayAll()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final KinesisIndexTask task1 = createTask(null,new KinesisIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"2\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\")),true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "expectLastCall().times(2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(2,task2.getRunner().getRowIngestionMeters().getProcessed())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\",shardId0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "recordSupplier.assign(anyObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4),publishedDescriptors())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expectLastCall().atLeastOnce()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(0,task2.getRunner().getRowIngestionMeters().getUnparseable())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final ListenableFuture<TaskStatus> future2 = runTask(task2)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRunConflicting['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41->44 [style = solid, label="desc3"];
26->19 [style = solid, label="task2"];
17->25 [style = bold, label=""];
8->28 [style = bold, label=""];
44->42 [style = bold, label=""];
16->18 [style = bold, label=""];
35->41 [style = solid, label="task2"];
27->43 [style = bold, label=""];
9->11 [style = bold, label=""];
41->38 [style = solid, label="desc3"];
3->1 [style = bold, label=""];
5->9 [style = bold, label=""];
25->34 [style = bold, label=""];
15->14 [style = solid, label="task1"];
14->10 [style = solid, label="desc2"];
0->19 [style = bold, label=""];
15->28 [style = solid, label="task1"];
6->43 [style = dashed, label="0"];
31->32 [style = bold, label=""];
2->3 [style = bold, label=""];
27->30 [style = bold, label=""];
23->31 [style = dashed, label="0"];
19->39 [style = bold, label=""];
10->44 [style = dashed, label="0"];
22->32 [style = dashed, label="0"];
12->16 [style = bold, label=""];
14->5 [style = solid, label="desc2"];
14->44 [style = solid, label="desc2"];
26->35 [style = dashed, label="0"];
4->39 [style = dashed, label="0"];
40->38 [style = bold, label=""];
27->6 [style = bold, label=""];
26->13 [style = bold, label=""];
1->23 [style = bold, label=""];
28->14 [style = bold, label=""];
15->35 [style = bold, label=""];
15->26 [style = bold, label=""];
20->2 [style = bold, label=""];
43->7 [style = bold, label=""];
22->8 [style = bold, label=""];
35->19 [style = solid, label="task2"];
28->11 [style = solid, label="desc1"];
25->24 [style = bold, label=""];
40->42 [style = solid, label="desc4"];
32->8 [style = bold, label=""];
23->22 [style = bold, label=""];
41->40 [style = bold, label=""];
38->37 [style = bold, label=""];
35->40 [style = solid, label="task2"];
11->10 [style = bold, label=""];
40->38 [style = solid, label="desc4"];
30->7 [style = bold, label=""];
15->13 [style = solid, label="task1"];
4->20 [style = bold, label=""];
28->5 [style = solid, label="desc1"];
28->38 [style = solid, label="desc1"];
36->16 [style = bold, label=""];
7->15 [style = bold, label=""];
14->38 [style = solid, label="desc2"];
6->30 [style = dashed, label="0"];
19->4 [style = bold, label=""];
18->21 [style = bold, label=""];
6->7 [style = bold, label=""];
35->13 [style = bold, label=""];
39->20 [style = bold, label=""];
34->27 [style = bold, label=""];
1->31 [style = bold, label=""];
37->33 [style = bold, label=""];
21->17 [style = bold, label=""];
24->27 [style = bold, label=""];
29->16 [style = bold, label=""];
14->41 [style = bold, label=""];
33->44 [style = bold, label=""];
28->33 [style = solid, label="desc1"];
24->34 [style = dashed, label="0"];
13->0 [style = bold, label=""];
14->5 [style = bold, label=""];
}
