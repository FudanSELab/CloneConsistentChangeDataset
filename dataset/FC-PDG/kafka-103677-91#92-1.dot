digraph {
17 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPS)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "client.poll(1,time.milliseconds())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "client.send(request,time.milliseconds())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "client.close()@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.forCurrentMagic(new ProduceRequestData().setTopicData(new ProduceRequestData.TopicProduceDataCollection()).setAcks((short)1).setTimeoutMs(1000))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,10 * 1000,127 * 1000,ClientDnsLookup.USE_ALL_DNS_IPS,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "builder.rackId(\"\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "buffer = response.serializeWithHeader(ApiKeys.FETCH.latestVersion(),request.correlationId())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "i++@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "buffer = RequestTestUtils.serializeResponseWithHeader(response,ApiKeys.PRODUCE.latestVersion(),request.correlationId())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertEquals(250,(Double)avgMetric.metricValue(),EPSILON)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "int i = 1@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPS)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,10 * 1000,127 * 1000,ClientDnsLookup.USE_ALL_DNS_IPS,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Node node = cluster.nodes().get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "buffer = response.serializeWithHeader(ApiKeys.PRODUCE.latestVersion(),request.correlationId())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "client.poll(1,time.milliseconds())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "i <= 3@@@17@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serializeWithHeader(ApiKeys.API_VERSIONS.latestVersion(),0)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "client.poll(1,time.milliseconds())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "FetchResponse<MemoryRecords> response = fullFetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(this.senderMetricsRegistry.produceThrottleTimeMax)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int throttleTimeMs = 100 * i@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "selector.clear()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "ByteBuffer buffer = RequestTestUtils.serializeResponseWithHeader(ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE),ApiKeys.API_VERSIONS.latestVersion(),0)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "selector.clear()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(this.senderMetricsRegistry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "client.close()@@@35@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<>())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(400,(Double)maxMetric.metricValue(),EPSILON)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "time.sleep(client.throttleDelayMs(node,time.milliseconds()))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "buildFetcher()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serializeWithHeader(ApiKeys.API_VERSIONS.latestVersion(),0)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
0->18 [style = solid, label="i"];
0->28 [style = solid, label="i"];
10->24 [style = bold, label=""];
28->14 [style = dotted, label="true"];
10->35 [style = bold, label=""];
28->19 [style = dotted, label="true"];
25->29 [style = bold, label=""];
9->7 [style = bold, label=""];
28->6 [style = dotted, label="true"];
17->41 [style = dashed, label="0"];
28->30 [style = dotted, label="true"];
31->6 [style = bold, label=""];
33->25 [style = bold, label=""];
0->49 [style = solid, label="i"];
7->3 [style = solid, label="node"];
28->18 [style = dotted, label="true"];
24->17 [style = bold, label=""];
1->12 [style = bold, label=""];
28->13 [style = dotted, label="true"];
3->30 [style = bold, label=""];
8->28 [style = solid, label="i"];
17->21 [style = bold, label=""];
12->23 [style = solid, label="buffer"];
4->16 [style = bold, label=""];
11->25 [style = bold, label=""];
8->49 [style = solid, label="i"];
18->31 [style = bold, label=""];
8->28 [style = bold, label=""];
13->42 [style = dashed, label="0"];
36->37 [style = solid, label="throttleTimeSensor"];
7->1 [style = bold, label=""];
28->18 [style = bold, label=""];
36->9 [style = bold, label=""];
35->44 [style = bold, label=""];
25->36 [style = bold, label=""];
7->15 [style = solid, label="node"];
26->14 [style = bold, label=""];
7->37 [style = bold, label=""];
28->2 [style = dotted, label="true"];
47->43 [style = bold, label=""];
32->26 [style = bold, label=""];
13->32 [style = dashed, label="0"];
45->23 [style = solid, label="buffer"];
28->46 [style = dotted, label="true"];
19->13 [style = bold, label=""];
7->30 [style = solid, label="node"];
38->0 [style = bold, label=""];
18->19 [style = solid, label="throttleTimeMs"];
44->41 [style = bold, label=""];
8->19 [style = solid, label="i"];
46->20 [style = bold, label=""];
37->45 [style = bold, label=""];
28->38 [style = dotted, label="true"];
12->34 [style = dashed, label="0"];
27->8 [style = bold, label=""];
10->35 [style = dashed, label="0"];
6->20 [style = solid, label="request"];
1->37 [style = dashed, label="0"];
34->23 [style = solid, label="buffer"];
25->37 [style = solid, label="selector"];
12->45 [style = dashed, label="0"];
39->46 [style = bold, label=""];
45->23 [style = bold, label=""];
28->20 [style = dotted, label="true"];
28->3 [style = dotted, label="true"];
29->1 [style = solid, label="throttleTimeSensor"];
19->32 [style = solid, label="response"];
24->44 [style = dashed, label="0"];
4->15 [style = dotted, label="true"];
42->14 [style = bold, label=""];
6->20 [style = bold, label=""];
13->26 [style = solid, label="buffer"];
21->5 [style = bold, label=""];
1->34 [style = bold, label=""];
28->0 [style = dotted, label="true"];
28->32 [style = dotted, label="true"];
19->32 [style = bold, label=""];
18->39 [style = bold, label=""];
41->40 [style = bold, label=""];
13->26 [style = bold, label=""];
28->42 [style = dotted, label="true"];
22->10 [style = bold, label=""];
34->23 [style = bold, label=""];
30->0 [style = bold, label=""];
20->2 [style = solid, label="request"];
18->49 [style = solid, label="throttleTimeMs"];
25->1 [style = solid, label="selector"];
28->22 [style = bold, label=""];
16->15 [style = bold, label=""];
49->42 [style = bold, label=""];
30->38 [style = bold, label=""];
28->31 [style = dotted, label="true"];
8->0 [style = solid, label="i"];
29->36 [style = dashed, label="0"];
2->19 [style = bold, label=""];
28->10 [style = bold, label=""];
40->48 [style = bold, label=""];
8->18 [style = solid, label="i"];
29->9 [style = bold, label=""];
39->20 [style = solid, label="builder"];
23->4 [style = bold, label=""];
31->6 [style = solid, label="builder"];
28->49 [style = dotted, label="true"];
19->49 [style = dashed, label="0"];
20->2 [style = bold, label=""];
32->26 [style = solid, label="buffer"];
19->49 [style = bold, label=""];
28->26 [style = dotted, label="true"];
4->27 [style = bold, label=""];
15->4 [style = bold, label=""];
21->40 [style = dashed, label="0"];
12->23 [style = bold, label=""];
4->16 [style = dotted, label="true"];
0->19 [style = solid, label="i"];
43->25 [style = bold, label=""];
28->39 [style = dotted, label="true"];
42->14 [style = solid, label="buffer"];
0->28 [style = bold, label=""];
}
