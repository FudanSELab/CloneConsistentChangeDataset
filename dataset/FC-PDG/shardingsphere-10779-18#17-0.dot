digraph {
2 [style = filled, label = "assertBuild['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertBuild['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\",Collections.emptyList(),mock(),Collections.emptyMap(),new ConfigurationProperties(new Properties())),algorithmProvidedRuleConfig,Collections.emptyList()),instanceOf())@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "DatabaseDiscoveryDataSourceRuleConfiguration ruleConfig = new DatabaseDiscoveryDataSourceRuleConfiguration(\"name\",Collections.singletonList(\"name\"),\"discoveryTypeName\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertBuild['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(builder.build(new SchemaRulesBuilderMaterials(\"\",Collections.emptyList(),mock(),Collections.emptyMap(),new ConfigurationProperties(new Properties())),algorithmProvidedRuleConfig,Collections.emptyList()),instanceOf())@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\"name\",\"pr_ds\",\"writeDataSourceName\",Collections.singletonList(\"name\"),\"loadBalancerName\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "ReadwriteSplittingDataSourceRuleConfiguration ruleConfig = new ReadwriteSplittingDataSourceRuleConfiguration(\"name\",\"pr_ds\",\"writeDataSourceName\",Collections.singletonList(\"name\"),\"loadBalancerName\",false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "AlgorithmProvidedDatabaseDiscoveryRuleConfiguration algorithmProvidedRuleConfig = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "when(algorithmProvidedRuleConfig.getDataSources()).thenReturn(Collections.singletonList(ruleConfig))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "AlgorithmProvidedReadwriteSplittingRuleConfiguration algorithmProvidedRuleConfig = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SchemaRuleBuilder builder = OrderedSPIRegistry.getRegisteredServices(,Collections.singletonList(algorithmProvidedRuleConfig)).get(algorithmProvidedRuleConfig)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
6->3 [style = bold, label=""];
0->1 [style = solid, label="ruleConfig"];
7->1 [style = bold, label=""];
7->1 [style = solid, label="ruleConfig"];
2->3 [style = bold, label=""];
10->5 [style = solid, label="algorithmProvidedRuleConfig"];
10->11 [style = solid, label="algorithmProvidedRuleConfig"];
9->10 [style = bold, label=""];
3->0 [style = bold, label=""];
8->1 [style = bold, label=""];
10->8 [style = bold, label=""];
3->7 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
8->1 [style = solid, label="ruleConfig"];
0->8 [style = dashed, label="0"];
5->11 [style = bold, label=""];
3->10 [style = dashed, label="0"];
4->11 [style = dashed, label="0"];
0->7 [style = dashed, label="0"];
3->5 [style = solid, label="algorithmProvidedRuleConfig"];
3->4 [style = solid, label="algorithmProvidedRuleConfig"];
}
