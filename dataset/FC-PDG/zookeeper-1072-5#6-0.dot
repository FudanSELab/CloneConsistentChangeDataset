digraph {
11 [style = filled, label = "assertEquals(\"avg_key1_test should =0.5\",0.5D,values.get(\"avg_key1_test\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertEquals(5L,values.get(\"max_key2_test\"),\"max_key2_test should =5\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(\"max_key2_test should =5\",5L,values.get(\"max_key2_test\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"sum_key1_test should =1\",1L,values.get(\"sum_key1_test\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertEquals(14L,values.get(\"sum_key2_test\"),\"sum_key2_test should =14\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "testValues['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"should have p99=990\",990L,values.get(\"p99_test\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"cnt_key2_test should =4\",4L,values.get(\"cnt_key2_test\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "assertEquals(\"should have min=0\",0L,values.get(\"min_test\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"avg_key2_test should =3.5\",3.5,values.get(\"avg_key2_test\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(3.5,values.get(\"avg_key2_test\"),\"avg_key2_test should =3.5\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "addDataPoints()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(0.5D,values.get(\"avg_key1_test\"),\"avg_key1_test should =0.5\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(\"should have p50=500\",500L,values.get(\"p50_test\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Map<String,Object> values = testCounter.values()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "assertEquals(1L,values.get(\"max_key1_test\"),\"max_key1_test should =1\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(\"should have p999=999\",999L,values.get(\"p999_test\"))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"cnt_key1_test should =2\",2L,values.get(\"cnt_key1_test\"))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"max_key1_test should =1\",1L,values.get(\"max_key1_test\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(2L,values.get(\"cnt_key1_test\"),\"cnt_key1_test should =2\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertEquals(\"should have sum=999*500\",999 * 500L,values.get(\"sum_test\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"should have cnt=1000\",1000L,values.get(\"cnt_test\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(1L,values.get(\"sum_key1_test\"),\"sum_key1_test should =1\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Map<String,Object> values = testCounterSet.values()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(0L,values.get(\"min_key1_test\"),\"min_key1_test should =0\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(\"should have max=999\",999L,values.get(\"max_test\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(\"should avg=499.5\",999D / 2,values.get(\"avg_test\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"sum_key2_test should =14\",14L,values.get(\"sum_key2_test\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertEquals(10,values.size(),\"There should be 10 values in the set\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertEquals(\"There should be 9 values in the set\",9,values.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(4L,values.get(\"cnt_key2_test\"),\"cnt_key2_test should =4\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(\"There should be 10 values in the set\",10,values.size())@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"min_key2_test should =2\",2L,values.get(\"min_key2_test\"))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(2L,values.get(\"min_key2_test\"),\"min_key2_test should =2\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(\"should have p95=950\",950L,values.get(\"p95_test\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
8->10 [style = bold, label=""];
7->11 [style = bold, label=""];
7->21 [style = dashed, label="0"];
5->14 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
13->36 [style = dashed, label="0"];
5->9 [style = bold, label=""];
6->20 [style = dashed, label="0"];
5->26 [style = dashed, label="0"];
15->25 [style = bold, label=""];
37->30 [style = bold, label=""];
9->18 [style = dashed, label="0"];
11->4 [style = bold, label=""];
0->2 [style = bold, label=""];
36->31 [style = bold, label=""];
1->29 [style = dashed, label="0"];
18->19 [style = bold, label=""];
9->27 [style = dashed, label="0"];
30->32 [style = bold, label=""];
11->17 [style = dashed, label="0"];
16->23 [style = bold, label=""];
12->0 [style = bold, label=""];
13->15 [style = dashed, label="0"];
10->6 [style = bold, label=""];
29->26 [style = bold, label=""];
3->19 [style = dashed, label="0"];
23->14 [style = bold, label=""];
24->20 [style = bold, label=""];
32->29 [style = bold, label=""];
28->0 [style = bold, label=""];
0->34 [style = bold, label=""];
25->24 [style = bold, label=""];
26->27 [style = bold, label=""];
4->32 [style = dashed, label="0"];
22->0 [style = bold, label=""];
31->35 [style = bold, label=""];
34->37 [style = bold, label=""];
2->21 [style = bold, label=""];
33->36 [style = bold, label=""];
2->34 [style = dashed, label="0"];
3->13 [style = bold, label=""];
9->3 [style = bold, label=""];
8->25 [style = dashed, label="0"];
14->18 [style = bold, label=""];
7->37 [style = dashed, label="0"];
4->1 [style = bold, label=""];
27->33 [style = bold, label=""];
2->7 [style = bold, label=""];
8->31 [style = dashed, label="0"];
13->8 [style = bold, label=""];
19->15 [style = bold, label=""];
11->30 [style = dashed, label="0"];
1->23 [style = dashed, label="0"];
21->17 [style = bold, label=""];
10->24 [style = dashed, label="0"];
10->35 [style = dashed, label="0"];
17->16 [style = bold, label=""];
}
