digraph {
2 [style = filled, label = "assertEquals(nio0.get(),nio1.get())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int len = nio0.remaining()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ByteBuffer nio1 = buffer1.nioByteBuffer()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ManagedBuffer buffer0@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertBuffersEqual['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertBuffersEqual['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ByteBuffer nio0 = buffer0.nioByteBuffer()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertBuffersEqual['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ManagedBuffer buffer0@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "int i = 0@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ManagedBuffer buffer1@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "ManagedBuffer buffer1@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < len@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "i++@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ManagedBuffer buffer1@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(nio0.remaining(),nio1.remaining())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
1->8 [style = bold, label=""];
12->5 [style = bold, label=""];
8->2 [style = dotted, label="true"];
8->7 [style = dotted, label="true"];
15->10 [style = dotted, label="true"];
1->8 [style = solid, label="i"];
10->13 [style = dashed, label="0"];
15->14 [style = dotted, label="true"];
7->8 [style = bold, label=""];
9->6 [style = dotted, label="true"];
15->5 [style = bold, label=""];
3->0 [style = bold, label=""];
12->11 [style = dotted, label="true"];
12->13 [style = dotted, label="true"];
8->2 [style = bold, label=""];
0->4 [style = bold, label=""];
9->5 [style = bold, label=""];
4->1 [style = bold, label=""];
2->7 [style = bold, label=""];
0->8 [style = solid, label="len"];
7->8 [style = solid, label="i"];
9->10 [style = dotted, label="true"];
1->7 [style = solid, label="i"];
}
