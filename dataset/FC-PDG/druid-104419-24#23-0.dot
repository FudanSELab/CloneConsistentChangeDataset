digraph {
17 [style = filled, label = "mapper.registerSubtypes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final QueryRunnerFactoryConglomerate conglomerate = new DefaultQueryRunnerFactoryConglomerate(ImmutableMap.of(,new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(queryRunnerDecorator),new TimeseriesQueryEngine(),new QueryWatcher(){@Override public void registerQuery(Query query,ListenableFuture future){}})))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "taskLockbox = new TaskLockbox(taskStorage,mdc)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final QueryRunnerFactoryConglomerate conglomerate = new DefaultQueryRunnerFactoryConglomerate(ImmutableMap.of(,new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(queryRunnerDecorator),new TimeseriesQueryEngine(),null)))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final TestUtils testUtils = new TestUtils()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "mapper.registerSubtypes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "IndexerSQLMetadataStorageCoordinator mdc = new IndexerSQLMetadataStorageCoordinator(mapper,derbyConnectorRule.metadataTablesConfigSupplier().get(),derbyConnectorRule.getConnector()){@Override public Set<DataSegment> announceHistoricalSegments(Set<DataSegment> segments){Set<DataSegment> result = super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@aa1433segmentsAssert.assertFalse(\"Segment latch not initialized, did you forget to call expectPublishSegments?\",segmentLatch == null)publishedSegments.addAll(result)segments.forEach(null)return result}@Override public SegmentPublishResult announceHistoricalSegments(Set<DataSegment> segments,DataSourceMetadata startMetadata,DataSourceMetadata endMetadata){SegmentPublishResult result = super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@aa1457segmentsstartMetadataendMetadataAssert.assertFalse(\"Segment latch not initialized, did you forget to call expectPublishSegments?\",segmentLatch == null)publishedSegments.addAll(result.getSegments())result.getSegments().forEach(null)return result}}@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EntryExistsException e@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final Task task@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final IndexerMetadataStorageCoordinator mdc@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "SegmentLoaderConfig segmentLoaderConfig = new SegmentLoaderConfig(){@Override public List<StorageLocationConfig> getLocations(){return new ArrayList<>()}}@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "makeToolbox['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "publishedSegments = new CopyOnWriteArrayList<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "taskLockbox.syncFromStorage()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final TaskStorage taskStorage@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "taskToolboxFactory = new TaskToolboxFactory(taskConfig,taskActionClientFactory,emitter,new TestDataSegmentPusher(),new TestDataSegmentKiller(),null,null,new TestDataSegmentAnnouncer(),EasyMock.createNiceMock(),handoffNotifierFactory,null,Execs.directExecutor(),EasyMock.createMock(),new SegmentLoaderFactory(null,testUtils.getTestObjectMapper()),testUtils.getTestObjectMapper(),testUtils.getTestIndexIO(),MapCache.create(1024),new CacheConfig(),new CachePopulatorStats(),testUtils.getTestIndexMergerV9(),EasyMock.createNiceMock(),EasyMock.createNiceMock(),new LookupNodeService(\"tier\"),new DataNodeService(\"tier\",1000,ServerType.INDEXER_EXECUTOR,0),new SingleFileTaskReportFileWriter(reportsFile))@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "handOffCallbacks = new ConcurrentHashMap<>()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final TaskConfig taskConfig = new TaskConfig(directory.getPath(),null,null,50000,null,true,null,null,null)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "SegmentLoaderConfig segmentLoaderConfig = new SegmentLoaderConfig(){@Override public List<StorageLocationConfig> getLocations(){return new ArrayList<>()}}@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final SegmentHandoffNotifierFactory handoffNotifierFactory = new SegmentHandoffNotifierFactory(){@Override public SegmentHandoffNotifier createSegmentHandoffNotifier(String dataSource){return new SegmentHandoffNotifier(){@Override public boolean registerSegmentHandoffCallback(SegmentDescriptor descriptor,Executor exec,Runnable handOffRunnable){handOffCallbacks.put(descriptor,new Pair<>(exec,handOffRunnable))return true}@Override public void start(){}@Override public void close(){}}}}@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "taskToolboxFactory = new TaskToolboxFactory(taskConfig,new DruidNode(\"druid/middlemanager\",\"localhost\",false,8091,null,true,false),taskActionClientFactory,emitter,new TestDataSegmentPusher(),new TestDataSegmentKiller(),null,null,new TestDataSegmentAnnouncer(),EasyMock.createNiceMock(),handoffNotifierFactory,null,Execs.directExecutor(),EasyMock.createMock(),new SegmentLoaderFactory(null,testUtils.getTestObjectMapper()),testUtils.getTestObjectMapper(),testUtils.getTestIndexIO(),MapCache.create(1024),new CacheConfig(),new CachePopulatorStats(),testUtils.getTestIndexMergerV9(),EasyMock.createNiceMock(),EasyMock.createNiceMock(),new LookupNodeService(\"tier\"),new DataNodeService(\"tier\",1000,ServerType.INDEXER_EXECUTOR,0),new SingleFileTaskReportFileWriter(reportsFile))@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "final File directory@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "IntervalChunkingQueryRunnerDecorator queryRunnerDecorator = new IntervalChunkingQueryRunnerDecorator(null,null,null){@Override public QueryRunner<T> decorate(QueryRunner<T> delegate,QueryToolChest<T,? extends Query<T>> toolChest){return delegate}}@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final TaskConfig taskConfig = new TaskConfig(directory.getPath(),null,null,50000,null,true,null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "return toolboxFactory.build(task)@@@49@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "IntervalChunkingQueryRunnerDecorator queryRunnerDecorator = new IntervalChunkingQueryRunnerDecorator(null,null,null){@Override public QueryRunner<T> decorate(QueryRunner<T> delegate,QueryToolChest<T,? extends Query<T>> toolChest){return delegate}}@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "handOffCallbacks = new ConcurrentHashMap<>()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "rowIngestionMetersFactory = testUtils.getRowIngestionMetersFactory()@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final File directory@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final TaskLockbox taskLockbox = new TaskLockbox(taskStorage,mdc)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final TaskActionClientFactory taskActionClientFactory = new LocalTaskActionClientFactory(taskStorage,taskActionToolbox,new TaskAuditLogConfig(false))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final TestUtils testUtils = new TestUtils()@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final TaskActionToolbox taskActionToolbox = new TaskActionToolbox(taskLockbox,taskStorage,mdc,emitter,EasyMock.createMock())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ObjectMapper mapper = new DefaultObjectMapper()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "final TaskActionToolbox taskActionToolbox = new TaskActionToolbox(taskLockbox,taskStorage,mdc,emitter,EasyMock.createMock())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "makeToolboxFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final TaskToolboxFactory toolboxFactory = new TaskToolboxFactory(taskConfig,taskActionClientFactory,emitter,new TestDataSegmentPusher(),new TestDataSegmentKiller(),null,null,new TestDataSegmentAnnouncer(),EasyMock.createNiceMock(),handoffNotifierFactory,null,Execs.directExecutor(),EasyMock.createMock(),new SegmentLoaderFactory(null,testUtils.getTestObjectMapper()),testUtils.getTestObjectMapper(),testUtils.getTestIndexIO(),MapCache.create(1024),new CacheConfig(),new CachePopulatorStats(),testUtils.getTestIndexMergerV9(),EasyMock.createNiceMock(),EasyMock.createNiceMock(),new LookupNodeService(\"tier\"),new DataNodeService(\"tier\",1000,ServerType.INDEXER_EXECUTOR,0),new NoopTestTaskReportFileWriter())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "taskStorage.insert(task,TaskStatus.running(task.getId()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final TaskActionClientFactory taskActionClientFactory = new LocalTaskActionClientFactory(taskStorage,taskActionToolbox,new TaskAuditLogConfig(false))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "makeToolboxFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "taskStorage = new HeapMemoryTaskStorage(new TaskStorageConfig(null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "{}@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SegmentHandoffNotifierFactory handoffNotifierFactory = null@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->2 [style = solid, label="mdc"];
17->10 [style = bold, label=""];
35->22 [style = solid, label="handoffNotifierFactory"];
5->8 [style = bold, label=""];
18->3 [style = bold, label=""];
23->25 [style = bold, label=""];
35->27 [style = bold, label=""];
20->6 [style = dotted, label="true"];
28->37 [style = bold, label=""];
31->29 [style = solid, label="task"];
5->21 [style = solid, label="taskConfig"];
12->35 [style = dashed, label="0"];
38->41 [style = solid, label="taskStorage"];
8->18 [style = bold, label=""];
8->18 [style = solid, label="taskActionToolbox"];
9->4 [style = bold, label=""];
5->1 [style = solid, label="taskConfig"];
3->14 [style = bold, label=""];
2->8 [style = solid, label="taskLockbox"];
40->22 [style = solid, label="taskConfig"];
26->33 [style = solid, label="mdc"];
6->38 [style = dashed, label="0"];
11->12 [style = bold, label=""];
1->21 [style = dashed, label="0"];
12->21 [style = solid, label="handoffNotifierFactory"];
30->26 [style = dotted, label="true"];
16->17 [style = bold, label=""];
10->8 [style = solid, label="mdc"];
15->19 [style = bold, label=""];
25->35 [style = bold, label=""];
24->22 [style = bold, label=""];
9->6 [style = dotted, label="true"];
31->39 [style = solid, label="task"];
4->2 [style = solid, label="taskStorage"];
30->36 [style = dotted, label="true"];
1->22 [style = dashed, label="0"];
20->4 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
33->29 [style = bold, label=""];
26->32 [style = solid, label="mdc"];
32->41 [style = solid, label="taskActionToolbox"];
41->22 [style = solid, label="taskActionClientFactory"];
34->23 [style = solid, label="queryRunnerDecorator"];
12->13 [style = bold, label=""];
18->1 [style = solid, label="taskActionClientFactory"];
19->1 [style = bold, label=""];
40->33 [style = bold, label=""];
14->23 [style = dashed, label="0"];
30->31 [style = dotted, label="true"];
38->32 [style = solid, label="taskStorage"];
12->1 [style = solid, label="handoffNotifierFactory"];
38->33 [style = solid, label="taskStorage"];
29->42 [style = bold, label=""];
18->21 [style = solid, label="taskActionClientFactory"];
7->16 [style = bold, label=""];
42->32 [style = bold, label=""];
22->39 [style = bold, label=""];
30->40 [style = bold, label=""];
33->32 [style = solid, label="taskLockbox"];
10->2 [style = bold, label=""];
32->41 [style = bold, label=""];
34->23 [style = bold, label=""];
13->15 [style = bold, label=""];
27->24 [style = bold, label=""];
30->38 [style = dotted, label="true"];
3->14 [style = solid, label="queryRunnerDecorator"];
4->18 [style = solid, label="taskStorage"];
14->11 [style = bold, label=""];
41->34 [style = bold, label=""];
37->42 [style = bold, label=""];
4->8 [style = solid, label="taskStorage"];
2->5 [style = bold, label=""];
7->10 [style = solid, label="mapper"];
19->21 [style = bold, label=""];
}
