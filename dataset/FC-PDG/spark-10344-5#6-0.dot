digraph {
3 [style = filled, label = "assertIndexIsValid(ordinal)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "return null@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "return null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "getArray['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "array.pointTo(baseObject,baseOffset + offset,size)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "getArray['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "int ordinal@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return null@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "return UTF8String.fromAddress(baseObject,baseOffset + offset,size)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final int size = getElementSize(offset,ordinal)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "int ordinal@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "getUTF8String['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final int size = (int)offsetAndSize@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final UnsafeArrayData array = new UnsafeArrayData()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final int offset = getElementOffset(ordinal)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "offset < 0@@@5@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return array@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21->18 [style = solid, label="ordinal"];
16->23 [style = solid, label="offset"];
19->18 [style = bold, label=""];
11->1 [style = dotted, label="true"];
18->22 [style = solid, label="offsetAndSize"];
2->8 [style = solid, label="size"];
5->6 [style = dotted, label="true"];
21->20 [style = solid, label="ordinal"];
1->13 [style = solid, label="ordinal"];
11->12 [style = bold, label=""];
18->16 [style = solid, label="offsetAndSize"];
1->21 [style = dashed, label="0"];
14->8 [style = solid, label="offset"];
6->14 [style = dashed, label="0"];
0->5 [style = solid, label="offset"];
16->22 [style = bold, label=""];
0->2 [style = solid, label="offset"];
1->3 [style = solid, label="ordinal"];
2->4 [style = bold, label=""];
22->23 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
13->14 [style = solid, label="offsetAndSize"];
1->2 [style = solid, label="ordinal"];
15->8 [style = solid, label="size"];
4->9 [style = solid, label="array"];
6->2 [style = bold, label=""];
20->18 [style = bold, label=""];
2->15 [style = dashed, label="0"];
0->8 [style = solid, label="offset"];
12->13 [style = bold, label=""];
5->2 [style = bold, label=""];
18->16 [style = bold, label=""];
12->10 [style = bold, label=""];
6->16 [style = dashed, label="0"];
3->12 [style = dashed, label="0"];
5->6 [style = bold, label=""];
12->10 [style = dotted, label="true"];
10->13 [style = bold, label=""];
1->12 [style = solid, label="ordinal"];
0->13 [style = dashed, label="0"];
3->20 [style = dashed, label="0"];
15->4 [style = bold, label=""];
8->9 [style = bold, label=""];
0->18 [style = dashed, label="0"];
4->8 [style = bold, label=""];
14->15 [style = bold, label=""];
20->19 [style = dotted, label="true"];
1->0 [style = solid, label="ordinal"];
20->19 [style = bold, label=""];
7->1 [style = dotted, label="true"];
17->21 [style = dotted, label="true"];
2->22 [style = dashed, label="0"];
13->14 [style = bold, label=""];
13->15 [style = solid, label="offsetAndSize"];
0->5 [style = bold, label=""];
17->20 [style = bold, label=""];
22->23 [style = solid, label="size"];
}
