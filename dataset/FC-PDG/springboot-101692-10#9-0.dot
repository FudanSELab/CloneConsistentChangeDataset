digraph {
17 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"location2\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "MockPropertySource propertySource = new MockPropertySource()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(initialPropertySource)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "withProcessedImportsResolvesAndLoads['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "imported.put(new TestConfigDataResource(\"a\"),new ConfigData(Arrays.asList(propertySource)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(secondPropertySource)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "List<ConfigDataLocation> locations = Arrays.asList(LOCATION_1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<ConfigDataLocation> secondLocations = Arrays.asList(LOCATION_2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "secondImported.put(new TestConfigDataResource(\"b\"),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Map<ConfigDataResource,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Map<ConfigDataResource,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "List<ConfigDataLocation> initialLocations = Arrays.asList(LOCATION_1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "initialImported.put(new TestConfigDataResource(\"a\"),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(propertySource)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "secondImported.put(new ConfigDataResolutionResult(LOCATION_2,new TestConfigDataResource(\"b\")),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "initialImported.put(new ConfigDataResolutionResult(LOCATION_1,new TestConfigDataResource(\"a\")),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Map<ConfigDataResource,ConfigData> imported = new LinkedHashMap<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(locations))).willReturn(imported)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->7 [style = solid, label="importer"];
29->34 [style = solid, label="imported"];
16->0 [style = bold, label=""];
24->19 [style = bold, label=""];
17->1 [style = bold, label=""];
21->6 [style = bold, label=""];
20->9 [style = bold, label=""];
7->10 [style = bold, label=""];
26->3 [style = bold, label=""];
1->15 [style = bold, label=""];
8->14 [style = solid, label="contributor"];
15->24 [style = dashed, label="0"];
30->27 [style = bold, label=""];
12->20 [style = bold, label=""];
8->14 [style = bold, label=""];
0->11 [style = bold, label=""];
25->3 [style = solid, label="initialImported"];
21->38 [style = dashed, label="0"];
10->21 [style = bold, label=""];
29->37 [style = bold, label=""];
38->31 [style = bold, label=""];
0->27 [style = dashed, label="0"];
2->3 [style = solid, label="initialImported"];
15->19 [style = bold, label=""];
23->19 [style = solid, label="secondImported"];
5->17 [style = bold, label=""];
36->33 [style = bold, label=""];
13->26 [style = dashed, label="0"];
4->36 [style = solid, label="importer"];
17->23 [style = bold, label=""];
11->2 [style = bold, label=""];
19->8 [style = bold, label=""];
27->37 [style = solid, label="propertySource"];
14->7 [style = bold, label=""];
2->13 [style = bold, label=""];
22->4 [style = bold, label=""];
34->28 [style = bold, label=""];
28->35 [style = bold, label=""];
3->5 [style = bold, label=""];
23->24 [style = bold, label=""];
1->19 [style = solid, label="secondImported"];
28->35 [style = solid, label="contributor"];
0->13 [style = solid, label="initialPropertySource"];
18->4 [style = bold, label=""];
13->3 [style = bold, label=""];
4->30 [style = bold, label=""];
17->15 [style = solid, label="secondPropertySource"];
16->30 [style = dashed, label="0"];
17->24 [style = solid, label="secondPropertySource"];
37->34 [style = bold, label=""];
2->37 [style = dashed, label="0"];
25->26 [style = bold, label=""];
2->25 [style = dashed, label="0"];
27->38 [style = solid, label="propertySource"];
33->38 [style = bold, label=""];
17->21 [style = solid, label="secondPropertySource"];
32->4 [style = bold, label=""];
0->6 [style = solid, label="initialPropertySource"];
27->29 [style = bold, label=""];
35->36 [style = bold, label=""];
1->23 [style = dashed, label="0"];
31->8 [style = bold, label=""];
4->16 [style = bold, label=""];
11->25 [style = bold, label=""];
0->26 [style = solid, label="initialPropertySource"];
6->12 [style = bold, label=""];
}
