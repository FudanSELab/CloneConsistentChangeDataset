digraph {
6 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),equalTo(\"1\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(doc.docs().get(1).get(\"field\"),equalTo(\"value\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(docMapper.hasNestedObjects(),equalTo(true))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(doc.docs().get(2).get(\"field\"),equalTo(\"value\"))@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePathAsString()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startObject(\"nested1\").field(\"field1\",\"1\").field(\"field2\",\"2\").endObject().endObject()),XContentType.JSON))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").field(\"field2\",\"2\").endObject().startObject().field(\"field1\",\"3\").field(\"field2\",\"4\").endObject().endArray().endObject()),XContentType.JSON))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),equalTo(\"1\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(doc.docs().get(1).get(TypeFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePathAsString()))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field2\"),equalTo(\"2\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePathAsString()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testReorderParent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePathAsString()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\",Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),VersionUtils.randomIndexCompatibleVersion(random())).build()).mapperService().documentMapperParser().parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field1\"),equalTo(\"1\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\",new CompressedXContent(mapping))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(doc.docs().size(),equalTo(2))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").field(\"field2\",\"2\").endObject().startObject().field(\"field1\",\"3\").field(\"field2\",\"4\").endObject().endArray().endObject()),XContentType.JSON))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "doc = docMapper.parse(new SourceToParse(\"test\",\"type\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"value\").startArray(\"nested1\").startObject().field(\"field1\",\"1\").field(\"field2\",\"2\").endObject().startObject().field(\"field1\",\"3\").field(\"field2\",\"4\").endObject().endArray().endObject()),XContentType.JSON))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(nested1Mapper.nested().isNested(),equalTo(true))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field2\"),equalTo(\"4\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"nested1\").field(\"type\",\"nested\").endObject().endObject().endObject().endObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field2\"),equalTo(\"2\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field2\"),equalTo(\"4\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(doc.docs().size(),equalTo(3))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field1\"),equalTo(\"3\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(doc.docs().size(),equalTo(3))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(doc.docs().get(0).get(\"nested1.field2\"),equalTo(\"2\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testSingleNested['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(doc.docs().get(1).get(\"nested1.field1\"),equalTo(\"3\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testReorderParent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15->13 [style = bold, label=""];
28->20 [style = bold, label=""];
0->6 [style = bold, label=""];
13->22 [style = solid, label="mapping"];
18->26 [style = bold, label=""];
30->25 [style = bold, label=""];
17->30 [style = bold, label=""];
7->4 [style = bold, label=""];
16->17 [style = bold, label=""];
8->14 [style = dashed, label="0"];
24->18 [style = bold, label=""];
1->7 [style = bold, label=""];
31->12 [style = bold, label=""];
19->24 [style = bold, label=""];
20->27 [style = bold, label=""];
3->10 [style = bold, label=""];
6->1 [style = bold, label=""];
5->2 [style = bold, label=""];
11->0 [style = bold, label=""];
21->31 [style = bold, label=""];
10->5 [style = bold, label=""];
13->3 [style = bold, label=""];
23->13 [style = bold, label=""];
13->3 [style = solid, label="mapping"];
2->14 [style = bold, label=""];
22->10 [style = bold, label=""];
4->12 [style = bold, label=""];
13->22 [style = bold, label=""];
26->28 [style = bold, label=""];
12->19 [style = bold, label=""];
2->29 [style = bold, label=""];
8->11 [style = bold, label=""];
14->11 [style = bold, label=""];
29->16 [style = bold, label=""];
8->29 [style = dashed, label="0"];
25->21 [style = bold, label=""];
2->8 [style = bold, label=""];
9->13 [style = bold, label=""];
}
