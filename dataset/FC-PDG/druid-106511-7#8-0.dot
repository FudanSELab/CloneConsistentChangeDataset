digraph {
2 [style = filled, label = "RegexFilteredDimensionSpec regexSpec = new RegexFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityNumericString\",\"ql\",ValueType.LONG),\"170000\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Row> expectedResults@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",0L,\"qf\",0.0,\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "NullHandling.replaceWithDefault()@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testGroupByNumericStringsAsNumericWithDecoration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testGroupByNumericStringsAsNumericWithDecoration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "RegexFilteredDimensionSpec regexSpec = new RegexFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityLong\",\"ql\",ValueType.LONG),\"1700\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"numeric\")@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "cannotVectorize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testGroupByDecorationOnNumerics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedResults = Arrays.asList(makeRow(query,\"2011-04-01\",\"ql\",NullHandling.defaultLongValue(),\"qf\",NullHandling.defaultDoubleValue(),\"count\",2L),makeRow(query,\"2011-04-01\",\"ql\",170000L,\"qf\",170000.0,\"count\",2L))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expectedException.expect()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",null,\"qf\",null,\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "ListFilteredDimensionSpec listFilteredSpec = new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityFloat\",\"qf\",ValueType.FLOAT),Sets.newHashSet(\"17000.0\"),true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",NullHandling.defaultLongValue(),\"qf\",NullHandling.defaultDoubleValue(),\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",170000L,\"qf\",170000.0,\"count\",2L))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "List<ResultRow> expectedResults@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 only supports dimensions with an outputType of STRING.\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(regexSpec,listFilteredSpec).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).build()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ListFilteredDimensionSpec listFilteredSpec = new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityNumericString\",\"qf\",ValueType.FLOAT),Sets.newHashSet(\"170000\"),true)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"numeric-string\")@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(regexSpec,listFilteredSpec).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).addOrderByColumn(\"ql\").build()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->8 [style = solid, label="results"];
21->20 [style = solid, label="query"];
6->3 [style = bold, label=""];
5->10 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
19->18 [style = bold, label=""];
5->14 [style = dashed, label="0"];
3->1 [style = bold, label=""];
22->16 [style = bold, label=""];
11->6 [style = bold, label=""];
12->15 [style = bold, label=""];
19->18 [style = dotted, label="true"];
10->12 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
3->4 [style = dotted, label="true"];
4->2 [style = bold, label=""];
19->17 [style = bold, label=""];
19->17 [style = dotted, label="false"];
8->24 [style = dashed, label="0"];
10->8 [style = solid, label="expectedResults"];
7->8 [style = bold, label=""];
3->22 [style = bold, label=""];
10->7 [style = bold, label=""];
9->12 [style = solid, label="query"];
18->24 [style = solid, label="expectedResults"];
5->19 [style = bold, label=""];
21->5 [style = bold, label=""];
18->20 [style = bold, label=""];
2->0 [style = bold, label=""];
20->24 [style = solid, label="results"];
3->2 [style = bold, label=""];
12->8 [style = solid, label="expectedResults"];
9->21 [style = dashed, label="0"];
7->8 [style = solid, label="results"];
16->21 [style = bold, label=""];
23->6 [style = bold, label=""];
14->12 [style = bold, label=""];
17->24 [style = solid, label="expectedResults"];
9->14 [style = bold, label=""];
9->7 [style = solid, label="query"];
9->5 [style = bold, label=""];
7->15 [style = dashed, label="0"];
13->6 [style = bold, label=""];
20->24 [style = bold, label=""];
2->22 [style = dashed, label="0"];
3->1 [style = dotted, label="true"];
4->22 [style = bold, label=""];
15->8 [style = bold, label=""];
9->15 [style = solid, label="query"];
17->20 [style = bold, label=""];
}
