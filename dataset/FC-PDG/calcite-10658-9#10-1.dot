digraph {
1 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RelNode transform2 = planner.transform(0,traitSet,transform)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Planner planner = getPlanner(traitDefs,Programs.of(ruleSet))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(FilterMergeRule.INSTANCE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "RelTraitSet traitSet = planner.getEmptyTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "traitDefs.add(ConventionTraitDef.INSTANCE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testPlanWithExplicitTraitDefs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final List<RelTraitDef> traitDefs = new ArrayList<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "traitDefs.add(RelCollationTraitDef.INSTANCE)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testPlanWithExplicitTraitDefs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(toString(transform2),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testPlanTransformTwice['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "RelNode convert = planner.rel(validate).project()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
6->17 [style = bold, label=""];
6->11 [style = solid, label="ruleSet"];
1->2 [style = solid, label="transform"];
15->1 [style = solid, label="convert"];
2->5 [style = solid, label="convert"];
7->10 [style = bold, label=""];
13->5 [style = solid, label="traitSet"];
7->11 [style = solid, label="traitDefs"];
12->6 [style = bold, label=""];
2->4 [style = bold, label=""];
9->6 [style = bold, label=""];
4->5 [style = solid, label="traitSet"];
2->13 [style = bold, label=""];
2->4 [style = solid, label="transform2"];
5->3 [style = solid, label="transform"];
11->0 [style = bold, label=""];
10->8 [style = bold, label=""];
16->14 [style = solid, label="parse"];
18->6 [style = bold, label=""];
0->1 [style = bold, label=""];
0->1 [style = solid, label="parse"];
15->0 [style = bold, label=""];
6->17 [style = solid, label="ruleSet"];
13->5 [style = bold, label=""];
16->14 [style = bold, label=""];
14->15 [style = bold, label=""];
1->2 [style = bold, label=""];
6->7 [style = bold, label=""];
0->2 [style = solid, label="traitSet"];
4->13 [style = dashed, label="0"];
8->11 [style = bold, label=""];
0->1 [style = solid, label="traitSet"];
4->5 [style = bold, label=""];
17->16 [style = bold, label=""];
}
