digraph {
11 [style = filled, label = "AndDimFilter andDimFilter = new AndDimFilter(new SelectorDimFilter(QueryRunnerTestHelper.marketDimension,\"spot\",null),new SelectorDimFilter(QueryRunnerTestHelper.qualityDimension,\"business\",null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",1L,\"index\",new Float(135.885094).doubleValue(),\"addRowsIndexConstant\",new Float(137.885094).doubleValue(),\"uniques\",QueryRunnerTestHelper.UNIQUES_1))),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",1L,\"index\",new Float(147.425935).doubleValue(),\"addRowsIndexConstant\",new Float(149.425935).doubleValue(),\"uniques\",QueryRunnerTestHelper.UNIQUES_1))))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(andDimFilter).intervals(QueryRunnerTestHelper.firstToThird).aggregators(aggregatorFactoryList).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "AndDimFilter andDimFilter = new AndDimFilter(new SelectorDimFilter(QueryRunnerTestHelper.marketDimension,\"spot\",null),new SelectorDimFilter(QueryRunnerTestHelper.qualityDimension,\"automotive\",null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query),CONTEXT).toList()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testTimeseriesWithOtherMultiDimFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Iterable<Result<TimeseriesResultValue>> results = runner.run(QueryPlus.wrap(query)).toList()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "TimeseriesQuery query = Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(andDimFilter).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.commonDoubleAggregators).postAggregators(QueryRunnerTestHelper.addRowsIndexConstant).descending(descending).context(makeContext()).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<Result<TimeseriesResultValue>> expectedResults = Arrays.asList(new Result<>(DateTimes.of(\"2011-04-01\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",1L,\"index\",new Float(118.570340).doubleValue(),\"addRowsIndexConstant\",new Float(120.570340).doubleValue(),\"uniques\",QueryRunnerTestHelper.UNIQUES_1))),new Result<>(DateTimes.of(\"2011-04-02\"),new TimeseriesResultValue(ImmutableMap.of(\"rows\",1L,\"index\",new Float(112.987027).doubleValue(),\"addRowsIndexConstant\",new Float(114.987027).doubleValue(),\"uniques\",QueryRunnerTestHelper.UNIQUES_1))))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testTimeseriesWithMultiDimFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testTimeseriesWithMultiDimFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertExpectedResults(expectedResults,results)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11->8 [style = bold, label=""];
4->3 [style = bold, label=""];
3->6 [style = bold, label=""];
1->4 [style = bold, label=""];
6->5 [style = bold, label=""];
8->10 [style = bold, label=""];
10->0 [style = bold, label=""];
7->1 [style = bold, label=""];
3->5 [style = solid, label="expectedResults"];
6->5 [style = solid, label="results"];
9->11 [style = bold, label=""];
0->6 [style = dashed, label="0"];
0->5 [style = solid, label="results"];
4->8 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
2->1 [style = bold, label=""];
3->0 [style = bold, label=""];
0->5 [style = bold, label=""];
10->5 [style = solid, label="expectedResults"];
}
