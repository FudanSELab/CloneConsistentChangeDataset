digraph {
7 [style = filled, label = "assertEquals(\"foo\",qp.parse(\"\"foo\"\",\"\").toString())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"\"? quick brown\"\",qp.parse(\"\"the quick brown\"\",\"\").toString())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"foo foobar\",qp.parse(\"foo foobar\",\"\").toString())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"field:\"(multi multi2) foo\"\",qp.parse(\"field:\"multi foo\"\",\"\").toString())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMultiAnalyzer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "qp.setPhraseSlop(0)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(\"(field:multi field:multi2) field:foo\",qp.parse(\"field:multi field:foo\",\"\").toString())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"\"(multi multi2) foo\"~99 bar\",qp.parse(\"\"multi foo\" bar\",\"\").toString())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"\"foo foobar blah\"\",qp.parse(\"\"foo foobar blah\"\",\"\").toString())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",qp.parse(\"+(foo multi) +(bar multi)\",\"\").toString())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"\"foo foobar\"\",qp.parse(\"\"foo foobar\"\",\"\").toString())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"+(foo (multi multi2)) field:\"bar (multi multi2)\"\",qp.parse(\"+(foo multi) field:\"bar multi\"\",\"\").toString())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"\"foo (multi multi2) foobar (multi multi2)\"\",qp.parse(\"\"foo multi foobar multi\"\",\"\").toString())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"\"(multi multi2) foo\"^2.0\",qp.parse(\"\"multi foo\"^2\",\"\").toString())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "qp.setPhraseSlop(99)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testMultiAnalyzer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(\"triplemulti multi3 multi2\",qp.parse(\"triplemulti\",\"\").toString())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "qp.setAnalyzer(new PosIncrementAnalyzer())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"(multi multi2) foo\",qp.parse(\"multi foo\",\"\").toString())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"\"(multi multi2) foo\"~99 \"foo bar\"~2\",qp.parse(\"\"multi foo\" \"foo bar\"~2\",\"\").toString())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(\"foo (triplemulti multi3 multi2) foobar\",qp.parse(\"foo triplemulti foobar\",\"\").toString())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "qp.setDefaultPhraseSlop(99)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "qp.setDefaultPhraseSlop(0)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"\"(multi multi2) foo\"~10\",qp.parse(\"\"multi foo\"~10\",\"\").toString())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"+(multi multi2) +foo\",qp.parse(\"multi foo\",\"\").toString())@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "StandardQueryParser qp = new StandardQueryParser()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"foo\",qp.parse(\"foo\",\"\").toString())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"foo (multi multi2)\",qp.parse(\"foo multi\",\"\").toString())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(\"\"foo (multi multi2)\"\",qp.parse(\"\"foo multi\"\",\"\").toString())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"\"? quick brown fox\"\",qp.parse(\"\"the quick brown fox\"\",\"\").toString())@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"(multi multi2) (multi multi2)\",qp.parse(\"multi multi\",\"\").toString())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "qp.setAnalyzer(new MultiAnalyzer())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertEquals(\"quick brown fox\",qp.parse(\"the quick brown fox\",\"\").toString())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testPosIncrementAnalyzer['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(\"\"(multi multi2) foo\"\",qp.parse(\"\"multi foo\"\",\"\").toString())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(\"quick brown\",qp.parse(\"the quick brown\",\"\").toString())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->31 [style = bold, label=""];
24->28 [style = bold, label=""];
2->19 [style = bold, label=""];
16->32 [style = dashed, label="0"];
3->1 [style = bold, label=""];
21->0 [style = bold, label=""];
36->34 [style = bold, label=""];
9->2 [style = bold, label=""];
30->23 [style = bold, label=""];
12->11 [style = bold, label=""];
18->12 [style = bold, label=""];
4->26 [style = bold, label=""];
10->31 [style = dashed, label="0"];
31->36 [style = bold, label=""];
25->6 [style = bold, label=""];
5->36 [style = dashed, label="0"];
32->33 [style = bold, label=""];
6->15 [style = bold, label=""];
9->33 [style = dashed, label="0"];
20->21 [style = bold, label=""];
17->28 [style = dashed, label="0"];
29->6 [style = bold, label=""];
35->23 [style = bold, label=""];
10->5 [style = bold, label=""];
0->4 [style = bold, label=""];
7->16 [style = bold, label=""];
24->17 [style = bold, label=""];
7->34 [style = dashed, label="0"];
13->23 [style = bold, label=""];
11->22 [style = bold, label=""];
23->10 [style = bold, label=""];
25->29 [style = dashed, label="0"];
5->7 [style = bold, label=""];
34->32 [style = bold, label=""];
1->14 [style = bold, label=""];
28->27 [style = bold, label=""];
22->24 [style = bold, label=""];
17->27 [style = bold, label=""];
19->3 [style = bold, label=""];
27->8 [style = bold, label=""];
8->25 [style = bold, label=""];
16->9 [style = bold, label=""];
8->29 [style = bold, label=""];
14->20 [style = bold, label=""];
26->18 [style = bold, label=""];
}
