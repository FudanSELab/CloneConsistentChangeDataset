digraph {
24 [style = filled, label = "Assert.assertEquals(base.getSegmentWriteOutMediumFactory(),deserialized.getSegmentWriteOutMediumFactory())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TestModifiedKafkaIndexTaskTuningConfig deserialized = mapper.readValue(serialized,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "KinesisIndexTaskTuningConfig base = new KinesisIndexTaskTuningConfig(null,1,3L,null,2,100L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,5L,true,false,1000,1000,500,null,42,null,false,500,500,6000,new Period(\"P3D\"))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(base.getMaxRowsPerSegment(),deserialized.getMaxRowsPerSegment())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(base.getIntermediatePersistPeriod(),deserialized.getIntermediatePersistPeriod())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testSerdeWithModifiedTuningConfigAddedField['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(base.getBasePersistDirectory(),deserialized.getBasePersistDirectory())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(base.getBuildV9Directly(),deserialized.getBuildV9Directly())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSerdeWithModifiedTuningConfigRemovedField['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(base.getMaxSavedParseExceptions(),deserialized.getMaxSavedParseExceptions())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(base.isReportParseExceptions(),deserialized.isReportParseExceptions())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(base.getAppendableIndexSpec(),deserialized.getAppendableIndexSpec())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(base.getRecordBufferSize(),deserialized.getRecordBufferSize())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(base.getMaxBytesInMemory(),deserialized.getMaxBytesInMemory())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "KinesisIndexTaskTuningConfig deserialized = mapper.readValue(serialized,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(base.isLogParseExceptions(),deserialized.isLogParseExceptions())@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(base.getMaxRowsInMemory(),deserialized.getMaxRowsInMemory())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(base.getIntermediateHandoffPeriod(),deserialized.getIntermediateHandoffPeriod())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String serialized = mapper.writeValueAsString(new TestModifiedKinesisIndexTaskTuningConfig(base,\"loool\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(base.getAppendableIndexSpec(),deserialized.getAppendableIndexSpec())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(base.getHandoffConditionTimeout(),deserialized.getHandoffConditionTimeout())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "String serialized = mapper.writeValueAsString(base)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "KinesisIndexTaskTuningConfig base = new KinesisIndexTaskTuningConfig(null,1,3L,null,2,100L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,true,5L,true,false,1000,1000,500,null,42,null,false,500,500,6000,new Period(\"P3D\"))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(base.isResetOffsetAutomatically(),deserialized.isResetOffsetAutomatically())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(base.getRecordBufferOfferTimeout(),deserialized.getRecordBufferOfferTimeout())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(base.getMaxPendingPersists(),deserialized.getMaxPendingPersists())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(base.getIndexSpec(),deserialized.getIndexSpec())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(base.getMaxParseExceptions(),deserialized.getMaxParseExceptions())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(null,deserialized.getExtra())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testSerdeWithModifiedTuningConfigRemovedField['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(base.getMaxTotalRows(),deserialized.getMaxTotalRows())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "KafkaIndexTaskTuningConfig base = new KafkaIndexTaskTuningConfig(null,1,null,null,2,10L,new Period(\"PT3S\"),new File(\"/tmp/xxx\"),4,new IndexSpec(),new IndexSpec(),true,true,5L,null,null,null,true,42,42)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(base.getMaxRecordsPerPoll(),deserialized.getMaxRecordsPerPoll())@@@26@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31->14 [style = bold, label=""];
11->32 [style = dashed, label="0"];
8->16 [style = bold, label=""];
7->1 [style = bold, label=""];
15->7 [style = bold, label=""];
4->25 [style = bold, label=""];
32->28 [style = solid, label="serialized"];
0->17 [style = bold, label=""];
28->31 [style = bold, label=""];
25->3 [style = bold, label=""];
18->15 [style = bold, label=""];
22->21 [style = bold, label=""];
27->11 [style = solid, label="base"];
19->10 [style = bold, label=""];
6->11 [style = solid, label="base"];
2->9 [style = bold, label=""];
24->18 [style = bold, label=""];
1->13 [style = bold, label=""];
30->29 [style = bold, label=""];
3->0 [style = bold, label=""];
20->5 [style = bold, label=""];
5->19 [style = bold, label=""];
11->22 [style = solid, label="serialized"];
26->27 [style = bold, label=""];
17->24 [style = bold, label=""];
6->29 [style = dashed, label="0"];
27->11 [style = bold, label=""];
12->4 [style = bold, label=""];
22->28 [style = dashed, label="0"];
6->27 [style = dashed, label="0"];
12->25 [style = bold, label=""];
29->32 [style = bold, label=""];
6->11 [style = bold, label=""];
23->6 [style = bold, label=""];
11->22 [style = bold, label=""];
29->32 [style = solid, label="base"];
10->2 [style = bold, label=""];
9->12 [style = bold, label=""];
13->8 [style = bold, label=""];
32->28 [style = bold, label=""];
14->20 [style = bold, label=""];
21->14 [style = bold, label=""];
}
