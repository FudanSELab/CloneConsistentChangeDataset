digraph {
9 [style = filled, label = "Pair<RangesAtEndpoint,RangesAtEndpoint> result = RangeRelocator.calculateStreamAndFetchRanges(current,updated)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Pair<RangesAtEndpoint,RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current,updated)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertContentsIgnoreOrder(result.left,fullReplica(aAddress,twoToken,threeToken))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertContentsIgnoreOrder(result.left)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "calculateStreamAndFetchRangesMoveForward['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "calculateStreamAndFetchRangesMoveForward['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertContentsIgnoreOrder(result.right)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RangesAtEndpoint updated = RangesAtEndpoint.of(new Replica(address01,aPrimeRange,true),new Replica(address01,range_11_1,true),new Replica(address01,range_9_11,false))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "calculateStreamAndFetchRangesMoveBackward['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Range<Token> aPrimeRange = new Range<>(oneToken,twoToken)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertContentsIgnoreOrder(result.right,fullReplica(address01,threeToken,fourToken))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertContentsIgnoreOrder(result.right,fullReplica(aAddress,threeToken,fourToken))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "return result@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RangesAtEndpoint updated = RangesAtEndpoint.of(new Replica(aAddress,aPrimeRange,true),new Replica(aAddress,eRange,true),new Replica(aAddress,dRange,false))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Range<Token> aPrimeRange = new Range<>(oneToken,fourToken)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->12 [style = dashed, label="0"];
2->1 [style = bold, label=""];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
1->9 [style = dashed, label="0"];
0->11 [style = dashed, label="0"];
1->6 [style = solid, label="result"];
12->6 [style = bold, label=""];
13->11 [style = bold, label=""];
11->2 [style = bold, label=""];
11->2 [style = solid, label="aPrimeRange"];
2->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
8->0 [style = bold, label=""];
3->5 [style = bold, label=""];
0->10 [style = bold, label=""];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
2->1 [style = solid, label="updated"];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
0->10 [style = solid, label="aPrimeRange"];
0->2 [style = solid, label="aPrimeRange"];
9->3 [style = bold, label=""];
1->14 [style = bold, label=""];
10->9 [style = bold, label=""];
5->7 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
9->6 [style = solid, label="result"];
10->9 [style = solid, label="updated"];
}
