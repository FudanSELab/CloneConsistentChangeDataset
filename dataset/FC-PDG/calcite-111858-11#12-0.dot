digraph {
4 [style = filled, label = "literal == root && config.sqlConformance().isSortByOrdinal()@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10dac6fliteral@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "return SqlUtil.stripAs(select.getSelectList().get(ordinal))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "isOrdinalLiteral = true@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "operandList@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10dabd5literal@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SqlLiteral literal@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "boolean isOrdinalLiteral = literal == root@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int ordinal = intValue - 1@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "visit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "intValue >= 0@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int intValue = literal.intValue(false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "root.getKind()@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "intValue < 1 || intValue > select.getSelectList().size()@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "SqlNode node@@@10@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "throw validator.newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "visit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "intValue >= 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "root instanceof SqlBasicCall@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "List<SqlNode> operandList = ((SqlBasicCall)root).getOperandList()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "havingExpr || !validator.config().sqlConformance().isGroupByOrdinal()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final int intValue = literal.intValue(false)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "intValue < 1 || intValue > aliasList.size()@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "isOrdinalLiteral@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "literal.getTypeName()@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10dabf0literal@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "node.equals(literal)@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return nthSelectItem(ordinal,literal.getParserPosition())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "throw newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "int ordinal = intValue - 1@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SqlLiteral literal@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "visit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "literal.getTypeName()@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20->23 [style = bold, label=""];
11->4 [style = bold, label=""];
18->20 [style = bold, label=""];
1->22 [style = dashed, label="0"];
12->7 [style = solid, label="literal"];
26->16 [style = dotted, label="true"];
31->16 [style = solid, label="intValue"];
24->22 [style = dotted, label="true"];
31->27 [style = solid, label="intValue"];
16->23 [style = bold, label=""];
5->0 [style = solid, label="intValue"];
6->24 [style = dashed, label="0"];
26->23 [style = bold, label=""];
24->27 [style = bold, label=""];
13->20 [style = bold, label=""];
10->5 [style = bold, label=""];
17->18 [style = dotted, label="true"];
18->20 [style = solid, label="isOrdinalLiteral"];
27->25 [style = bold, label=""];
11->12 [style = dotted, label="true"];
31->24 [style = solid, label="intValue"];
21->17 [style = dotted, label="true"];
3->4 [style = solid, label="literal"];
21->15 [style = dotted, label="true"];
3->23 [style = solid, label="literal"];
9->7 [style = bold, label=""];
30->32 [style = dotted, label="true"];
10->7 [style = bold, label=""];
14->30 [style = bold, label=""];
21->20 [style = bold, label=""];
21->29 [style = dotted, label="true"];
3->12 [style = dashed, label="0"];
31->16 [style = bold, label=""];
28->17 [style = bold, label=""];
1->0 [style = bold, label=""];
3->32 [style = solid, label="literal"];
3->19 [style = solid, label="literal"];
4->7 [style = bold, label=""];
3->1 [style = solid, label="literal"];
3->7 [style = solid, label="literal"];
14->3 [style = dotted, label="true"];
2->7 [style = bold, label=""];
6->0 [style = bold, label=""];
6->1 [style = dotted, label="true"];
17->20 [style = bold, label=""];
19->13 [style = bold, label=""];
0->9 [style = solid, label="ordinal"];
16->27 [style = dotted, label="true"];
12->1 [style = solid, label="literal"];
27->25 [style = solid, label="ordinal"];
30->32 [style = bold, label=""];
19->20 [style = solid, label="isOrdinalLiteral"];
4->10 [style = bold, label=""];
2->6 [style = bold, label=""];
8->3 [style = dotted, label="true"];
3->17 [style = solid, label="literal"];
6->1 [style = bold, label=""];
21->28 [style = dotted, label="true"];
5->2 [style = bold, label=""];
25->23 [style = bold, label=""];
10->2 [style = dotted, label="true"];
16->24 [style = bold, label=""];
13->21 [style = dotted, label="true"];
20->26 [style = dotted, label="true"];
16->24 [style = dotted, label="true"];
8->4 [style = bold, label=""];
2->9 [style = dotted, label="true"];
4->10 [style = dotted, label="true"];
26->31 [style = bold, label=""];
22->27 [style = bold, label=""];
0->9 [style = bold, label=""];
5->6 [style = solid, label="intValue"];
2->6 [style = dotted, label="true"];
12->4 [style = solid, label="literal"];
4->30 [style = dashed, label="0"];
24->22 [style = bold, label=""];
5->2 [style = solid, label="intValue"];
3->22 [style = solid, label="literal"];
16->25 [style = dotted, label="true"];
2->0 [style = dotted, label="true"];
20->26 [style = bold, label=""];
30->19 [style = bold, label=""];
32->19 [style = bold, label=""];
21->28 [style = bold, label=""];
26->31 [style = dotted, label="true"];
10->5 [style = dotted, label="true"];
13->21 [style = bold, label=""];
17->18 [style = bold, label=""];
}
