digraph {
24 [style = filled, label = "final PublishSubject<Integer> close = PublishSubject.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "source.window(open,new Function<Integer,Observable<Integer>>(){@Override public Observable<Integer> apply(Integer t){return close}}).doOnNext(new Consumer<Observable<Integer>>(){@Override public void accept(Observable<Integer> w){w.subscribe(Functions.emptyConsumer(),Functions.emptyConsumer())}}).subscribe(to)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertFalse(open.hasObservers())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "PublishSubject<Integer> source = PublishSubject.create()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "PublishProcessor<Integer> source = PublishProcessor.create()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final PublishProcessor<Integer> close = PublishProcessor.create()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(close.hasObservers())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertFalse(open.hasSubscribers())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "source.onComplete()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "to.assertNoErrors()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "noUnsubscribeAndNoLeak['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertFalse(close.hasObservers())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "to.assertValueCount(1)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(close.hasObservers())@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "to.assertComplete()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "source.window(open,new Function<Integer,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Integer t){return close}}).doOnNext(new Consumer<Flowable<Integer>>(){@Override public void accept(Flowable<Integer> w){w.subscribe(Functions.emptyConsumer(),Functions.emptyConsumer())}}).subscribe(ts)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(open.hasObservers())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "unsubscribeAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "open.onNext(1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "source.onNext(1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(close.hasSubscribers())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "PublishSubject<Integer> open = PublishSubject.create()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "close.onNext(1)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "unsubscribeAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<>()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "ts.cancel()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PublishProcessor<Integer> open = PublishProcessor.create()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(close.hasSubscribers())@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(open.hasSubscribers())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->17 [style = bold, label=""];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
9->7 [style = solid, label="ts"];
8->16 [style = dashed, label="0"];
19->18 [style = bold, label=""];
14->27 [style = solid, label="to"];
30->20 [style = bold, label=""];
2->1 [style = bold, label=""];
3->24 [style = dashed, label="0"];
18->26 [style = bold, label=""];
1->3 [style = bold, label=""];
3->12 [style = bold, label=""];
25->29 [style = bold, label=""];
9->7 [style = bold, label=""];
27->6 [style = bold, label=""];
12->7 [style = bold, label=""];
11->2 [style = bold, label=""];
12->7 [style = solid, label="ts"];
1->22 [style = dashed, label="0"];
24->14 [style = bold, label=""];
26->30 [style = bold, label=""];
7->27 [style = dashed, label="0"];
8->0 [style = bold, label=""];
3->9 [style = bold, label=""];
4->25 [style = dashed, label="0"];
6->5 [style = bold, label=""];
0->10 [style = bold, label=""];
9->14 [style = dashed, label="0"];
29->19 [style = bold, label=""];
23->21 [style = bold, label=""];
15->28 [style = bold, label=""];
2->21 [style = dashed, label="0"];
21->22 [style = bold, label=""];
7->6 [style = bold, label=""];
10->4 [style = bold, label=""];
28->25 [style = bold, label=""];
9->12 [style = dashed, label="0"];
14->27 [style = bold, label=""];
22->24 [style = bold, label=""];
17->16 [style = bold, label=""];
13->2 [style = bold, label=""];
}
