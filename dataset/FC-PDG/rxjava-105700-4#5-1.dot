digraph {
1 [style = filled, label = "final AtomicBoolean isFirst = new AtomicBoolean(true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final List<Long> list = new CopyOnWriteArrayList<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Flowable.just(1L,2L,3L).map(new Function<Long,Long>(){@Override public Long apply(Long x){System.out.println(\"map \" + x)if (x == 2 && isFirst.getAndSet(false)) {throw new RuntimeException(\"retryable error\")}return x}}).retry(new BiPredicate<Integer,Throwable>(){@Override public boolean test(Integer t1,Throwable t2){return true}}).forEach(new Consumer<Long>(){@Override public void accept(Long t){System.out.println(t)list.add(t)}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final List<Long> list = new CopyOnWriteArrayList<Long>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(Arrays.asList(1L,1L,2L,3L),list)@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Observable.just(1L,2L,3L).map(new Function<Long,Long>(){@Override public Long apply(Long x){System.out.println(\"map \" + x)if (x == 2 && isFirst.getAndSet(false)) {throw new RuntimeException(\"retryable error\")}return x}}).retry(new BiPredicate<Integer,Throwable>(){@Override public boolean test(Integer t1,Throwable t2){return true}}).forEach(new Consumer<Long>(){@Override public void accept(Long t){System.out.println(t)list.add(t)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "issue3008RetryWithPredicate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "issue3008RetryWithPredicate['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "issue3008RetryWithPredicate['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8->0 [style = bold, label=""];
3->0 [style = solid, label="list"];
6->1 [style = bold, label=""];
4->3 [style = bold, label=""];
1->2 [style = bold, label=""];
2->0 [style = bold, label=""];
3->6 [style = dashed, label="0"];
1->8 [style = bold, label=""];
5->6 [style = bold, label=""];
3->1 [style = bold, label=""];
2->8 [style = dashed, label="0"];
7->3 [style = bold, label=""];
6->0 [style = solid, label="list"];
}
