digraph {
15 [style = filled, label = "Assert.assertTrue(\"Actual should be a byte((\",actual instanceof byte(()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "throw new IllegalArgumentException(\"Not a supported type: \" + type)@@@21@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Type type@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Object actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Object expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue(\"Expected should be a Map\",expected instanceof Map)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Type type@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(type.asMapType(),(Map<?,?>)expected,(Map<?,?>)actual)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"Primitive value should be equal to expected for type \" + type,expected,actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Expected should be a List\",expected instanceof List)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(\"Primitive value should be equal to expected\",expected,actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Type type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(type.asStructType(),(Record)expected,(Record)actual)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(\"Expected should be a byte((\",expected instanceof byte(()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertArrayEquals(\"Array contents should be equal\",(byte(()expected,(byte(()actual)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(\"Expected should be a Record\",expected instanceof Record)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Object actual@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(\"Actual should be a Map\",actual instanceof Map)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(type.asListType(),(List)expected,(List)actual)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "type.typeId()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "expected == null && actual == null@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Actual should be a List\",actual instanceof List)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(\"Actual should be a Record\",actual instanceof Record)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(\"Primitive value should be equal to expected\",expected,actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Object actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10->19 [style = solid, label="actual"];
27->17 [style = solid, label="expected"];
21->7 [style = solid, label="actual"];
23->22 [style = dotted, label="true"];
12->18 [style = solid, label="expected"];
11->12 [style = dotted, label="true"];
27->2 [style = solid, label="expected"];
6->1 [style = dotted, label="true"];
12->25 [style = solid, label="actual"];
10->5 [style = solid, label="actual"];
12->4 [style = solid, label="actual"];
21->4 [style = solid, label="actual"];
3->4 [style = bold, label=""];
21->19 [style = solid, label="actual"];
12->8 [style = solid, label="expected"];
6->18 [style = dotted, label="true"];
20->25 [style = dashed, label="0"];
12->4 [style = solid, label="expected"];
12->17 [style = solid, label="expected"];
21->2 [style = solid, label="actual"];
6->0 [style = dotted, label="true"];
28->27 [style = dotted, label="true"];
6->3 [style = dotted, label="true"];
12->14 [style = solid, label="expected"];
21->18 [style = solid, label="actual"];
6->15 [style = dotted, label="true"];
12->18 [style = solid, label="actual"];
11->10 [style = dotted, label="true"];
27->19 [style = solid, label="expected"];
23->21 [style = dotted, label="true"];
19->6 [style = bold, label=""];
6->20 [style = dotted, label="true"];
22->24 [style = solid, label="type"];
10->7 [style = solid, label="actual"];
6->14 [style = dotted, label="true"];
19->13 [style = bold, label=""];
12->2 [style = solid, label="expected"];
21->15 [style = solid, label="actual"];
27->8 [style = solid, label="expected"];
7->2 [style = bold, label=""];
12->24 [style = solid, label="expected"];
6->25 [style = dotted, label="true"];
28->19 [style = bold, label=""];
21->3 [style = solid, label="actual"];
6->7 [style = dotted, label="true"];
14->15 [style = bold, label=""];
27->4 [style = solid, label="expected"];
10->15 [style = solid, label="actual"];
9->16 [style = solid, label="type"];
6->17 [style = bold, label=""];
6->24 [style = dotted, label="true"];
10->0 [style = solid, label="actual"];
12->2 [style = solid, label="actual"];
6->25 [style = bold, label=""];
10->3 [style = solid, label="actual"];
8->3 [style = bold, label=""];
10->20 [style = solid, label="actual"];
11->9 [style = dotted, label="true"];
6->24 [style = bold, label=""];
12->3 [style = solid, label="actual"];
21->24 [style = solid, label="actual"];
27->18 [style = solid, label="expected"];
1->7 [style = bold, label=""];
6->20 [style = bold, label=""];
6->1 [style = bold, label=""];
6->2 [style = dotted, label="true"];
17->0 [style = bold, label=""];
22->16 [style = solid, label="type"];
21->5 [style = solid, label="actual"];
6->8 [style = dotted, label="true"];
12->7 [style = solid, label="actual"];
23->19 [style = bold, label=""];
0->18 [style = bold, label=""];
13->6 [style = bold, label=""];
27->1 [style = solid, label="expected"];
26->16 [style = solid, label="type"];
28->12 [style = dotted, label="true"];
12->5 [style = solid, label="expected"];
12->0 [style = solid, label="actual"];
12->20 [style = solid, label="expected"];
19->13 [style = dotted, label="true"];
11->19 [style = bold, label=""];
10->4 [style = solid, label="actual"];
27->25 [style = solid, label="expected"];
6->17 [style = dotted, label="true"];
15->5 [style = bold, label=""];
6->14 [style = bold, label=""];
12->19 [style = solid, label="expected"];
6->4 [style = dotted, label="true"];
12->19 [style = solid, label="actual"];
6->16 [style = bold, label=""];
20->24 [style = dashed, label="0"];
28->26 [style = dotted, label="true"];
10->2 [style = solid, label="actual"];
6->8 [style = bold, label=""];
21->0 [style = solid, label="actual"];
12->1 [style = solid, label="expected"];
23->12 [style = dotted, label="true"];
6->16 [style = dotted, label="true"];
6->5 [style = dotted, label="true"];
10->18 [style = solid, label="actual"];
}
