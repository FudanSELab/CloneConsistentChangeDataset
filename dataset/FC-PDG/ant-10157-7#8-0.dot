digraph {
6 [style = filled, label = "!result.exists()@@@3@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "File expect@@@2@@@['1', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(expectedByte,inResult.read())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"End of file\",-1,inResult.read())@@@13@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(\"Expected file \" + result + \" doesn't exist\",result.exists())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEqualContent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "File result@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int expectedByte = inExpect.read()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "File result@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "expectedByte = inExpect.read()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(expectedByte,inResult.read())@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"End of file\",-1,inResult.read())@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectedByte != -1@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "File expect@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "File result@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEqualContent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "int expectedByte = inExpect.read()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "fail(\"Expected file \" + result + \" doesn't exist\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "expectedByte != -1@@@7@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEqualContent['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(\"Expected file \" + result + \" doesn't exist\",result.exists())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
16->3 [style = bold, label=""];
9->10 [style = solid, label="expectedByte"];
2->5 [style = solid, label="result"];
16->9 [style = dotted, label="true"];
15->13 [style = bold, label=""];
9->16 [style = solid, label="expectedByte"];
17->18 [style = dotted, label="true"];
0->6 [style = bold, label=""];
6->20 [style = dashed, label="0"];
14->15 [style = solid, label="result"];
19->16 [style = solid, label="expectedByte"];
9->4 [style = bold, label=""];
12->15 [style = bold, label=""];
10->3 [style = bold, label=""];
9->10 [style = bold, label=""];
13->1 [style = solid, label="expectedByte"];
8->14 [style = dashed, label="0"];
9->7 [style = bold, label=""];
10->9 [style = dotted, label="true"];
3->9 [style = solid, label="expectedByte"];
18->20 [style = solid, label="result"];
9->16 [style = bold, label=""];
7->3 [style = bold, label=""];
1->9 [style = bold, label=""];
19->16 [style = bold, label=""];
12->11 [style = dotted, label="true"];
0->8 [style = dotted, label="true"];
3->9 [style = bold, label=""];
6->1 [style = bold, label=""];
12->14 [style = dotted, label="true"];
17->8 [style = dotted, label="true"];
6->5 [style = bold, label=""];
5->1 [style = bold, label=""];
3->7 [style = solid, label="expectedByte"];
16->1 [style = dotted, label="true"];
16->1 [style = bold, label=""];
6->15 [style = dashed, label="0"];
9->1 [style = solid, label="expectedByte"];
1->7 [style = solid, label="expectedByte"];
13->10 [style = solid, label="expectedByte"];
10->1 [style = dotted, label="true"];
0->2 [style = dotted, label="true"];
9->7 [style = dotted, label="true"];
20->19 [style = bold, label=""];
10->1 [style = bold, label=""];
19->1 [style = solid, label="expectedByte"];
9->3 [style = dotted, label="true"];
1->9 [style = solid, label="expectedByte"];
6->5 [style = dotted, label="true"];
17->20 [style = bold, label=""];
}
