digraph {
8 [style = filled, label = "Assert.assertEquals(Optional.of(new MultipleIntervalSegmentSpec(MILLENIUM_INTERVALS)),analysis.getBaseQuerySegmentSpec())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testJoinUnderTopLevelSubqueries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final QueryDataSource queryDataSource = subquery(subquery(join(TABLE_FOO,LOOKUP_LOOKYLOO,\"1.\",JoinType.INNER)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(Optional.of(queryDataSource.getQuery()),analysis.getBaseQuery())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testQueryOnTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(TABLE_FOO,analysis.getBaseDataSource())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final QueryDataSource queryDataSource = subquery(TABLE_FOO)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testQueryOnTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(queryDataSource,analysis.getDataSource())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Optional.of(TABLE_FOO),analysis.getBaseTableDataSource())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(queryDataSource)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableList.of(new PreJoinableClause(\"1.\",LOOKUP_LOOKYLOO,JoinType.INNER,joinClause(\"1.\"))),analysis.getPreJoinableClauses())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertFalse(analysis.isGlobal())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(analysis.isQuery())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),analysis.getPreJoinableClauses())@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(analysis.isConcreteTableBased())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(analysis.isConcreteBased())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
9->4 [style = bold, label=""];
10->8 [style = bold, label=""];
12->1 [style = bold, label=""];
5->9 [style = bold, label=""];
3->7 [style = bold, label=""];
1->7 [style = solid, label="queryDataSource"];
4->2 [style = bold, label=""];
2->3 [style = bold, label=""];
0->10 [style = bold, label=""];
8->11 [style = bold, label=""];
11->15 [style = dashed, label="0"];
16->5 [style = solid, label="queryDataSource"];
10->13 [style = bold, label=""];
7->0 [style = bold, label=""];
1->5 [style = solid, label="queryDataSource"];
16->5 [style = bold, label=""];
1->16 [style = dashed, label="0"];
13->8 [style = bold, label=""];
6->1 [style = bold, label=""];
8->15 [style = bold, label=""];
16->7 [style = solid, label="queryDataSource"];
1->5 [style = bold, label=""];
}
