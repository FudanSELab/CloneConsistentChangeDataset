digraph {
21 [style = filled, label = "paths.add(next.getPath())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "client.delete().forPath(\"/foo/a2/a2.2\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "client.create().forPath(\"/foo/a3/a3.1\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testEmptyTree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(treeCache.size(),0)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "client.create().forPath(\"/foo/a3/a3.2\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "treeCache.start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "client.delete().forPath(\"/foo/a3/a3.1\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "client.start()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "client.create().forPath(\"/foo/a1\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(paths,Sets.newHashSet(\"/foo\",\"/foo/a1\",\"/foo/a2\",\"/foo/a2/a2.1\",\"/foo/a3\",\"/foo/a3/a3.2\"))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "client.create().forPath(\"/foo/a2/a2.1\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testEmptyTree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "timing.sleepABit()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(treeCache.size(),6)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertFalse(iterator.hasNext())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "client.create().forPath(\"/foo\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Set<String> paths = new HashSet<>()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "client.create().forPath(\"/foo/a3\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(iterator.hasNext())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testWithDeletedNodes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "client.create().forPath(\"/foo/a2/a2.2\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "iterator.hasNext()@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "ChildData next = iterator.next()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "client.create().forPath(\"/foo/a2\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(treeCache.size(),0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Iterator<ChildData> iterator = treeCache.iterator()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->7 [style = dashed, label="0"];
15->25 [style = bold, label=""];
21->15 [style = bold, label=""];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
15->21 [style = dotted, label="true"];
26->19 [style = bold, label=""];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
11->15 [style = bold, label=""];
1->11 [style = bold, label=""];
15->22 [style = bold, label=""];
19->24 [style = bold, label=""];
20->10 [style = bold, label=""];
9->26 [style = bold, label=""];
12->2 [style = bold, label=""];
3->5 [style = bold, label=""];
5->6 [style = dashed, label="0"];
8->2 [style = bold, label=""];
7->6 [style = bold, label=""];
18->9 [style = bold, label=""];
16->14 [style = bold, label=""];
23->17 [style = bold, label=""];
14->18 [style = bold, label=""];
4->1 [style = bold, label=""];
15->25 [style = dotted, label="true"];
10->1 [style = bold, label=""];
22->13 [style = bold, label=""];
4->16 [style = bold, label=""];
25->21 [style = bold, label=""];
11->22 [style = solid, label="paths"];
17->20 [style = bold, label=""];
24->23 [style = bold, label=""];
}
