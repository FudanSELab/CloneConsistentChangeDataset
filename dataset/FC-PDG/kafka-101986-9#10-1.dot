digraph {
0 [style = filled, label = "assertThrows(,null)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThrows(,null)@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectRestoreToBeCompleted(consumer,changeLogReader)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "shouldPropagateKafkaExceptionsInPunctuateActiveTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()),is(true))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(taskId00Assignment))).andStubReturn(singletonList(task00))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "shouldPassUpIfExceptionDuringSuspend['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "shouldPassUpIfExceptionDuringSuspend['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "replay(activeTaskCreator,consumer,changeLogReader)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public void suspend(){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@baa6b9throw new RuntimeException(\"KABOOM!\")}}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(consumer)@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final StateMachineTask task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public boolean maybePunctuateStreamTime(){throw new KafkaException(\"oops\")}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(),null),is(true))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(taskId00Assignment))).andReturn(singletonList(task00))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(task00.state(),is(Task.State.RUNNING))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "taskManager.handleAssignment(taskId00Assignment,emptyMap())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(task00.state(),is(Task.State.SUSPENDED))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->0 [style = bold, label=""];
2->3 [style = bold, label=""];
11->6 [style = bold, label=""];
4->2 [style = bold, label=""];
15->5 [style = solid, label="task00"];
3->12 [style = bold, label=""];
5->14 [style = bold, label=""];
12->9 [style = bold, label=""];
15->16 [style = bold, label=""];
10->6 [style = bold, label=""];
7->9 [style = bold, label=""];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
3->7 [style = bold, label=""];
6->15 [style = dashed, label="0"];
5->4 [style = bold, label=""];
0->8 [style = bold, label=""];
16->5 [style = bold, label=""];
7->12 [style = dashed, label="0"];
6->4 [style = solid, label="task00"];
4->5 [style = dashed, label="0"];
14->2 [style = bold, label=""];
13->15 [style = bold, label=""];
0->9 [style = dashed, label="0"];
}
