digraph {
2 [style = filled, label = "ByteString listString = ByteString.copyFrom(pieces)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "iter.hasNext()@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testCopyFromList['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "Iterator<ByteString> iter = pieces.iterator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"Concatenated string must have same hashcode as literal string\",literalString.hashCode(),concatenatedString.hashCode())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(\"Concatenated string must be equal to literal string\",concatenatedString.equals(literalString))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testConcat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(\"Composite string must be equal to literal string\",listString.equals(literalString))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "List<ByteString> pieces = makeConcretePieces(referenceBytes)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "concatenatedString = concatenatedString.concat(iter.next())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"Composite string must have same hashcode as literal string\",literalString.hashCode(),listString.hashCode())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"Composite string must have same hashcode as literal string\",literalString.hashCode(),listString.hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "testCopyFromList['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( referenceBytes = getTestBytes(77748,113344L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"Composite string must be equal to literal string\",literalString,listString)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "ByteString literalString = ByteString.copyFrom(referenceBytes)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteString concatenatedString = iter.next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->16 [style = bold, label=""];
0->5 [style = solid, label="referenceBytes"];
16->11 [style = bold, label=""];
16->10 [style = bold, label=""];
2->6 [style = bold, label=""];
6->9 [style = dashed, label="0"];
5->11 [style = solid, label="literalString"];
0->1 [style = solid, label="referenceBytes"];
5->9 [style = solid, label="literalString"];
2->9 [style = bold, label=""];
9->7 [style = bold, label=""];
12->0 [style = bold, label=""];
1->13 [style = bold, label=""];
16->10 [style = dotted, label="true"];
3->0 [style = bold, label=""];
11->15 [style = bold, label=""];
8->0 [style = bold, label=""];
5->1 [style = bold, label=""];
6->4 [style = bold, label=""];
10->16 [style = bold, label=""];
4->7 [style = dashed, label="0"];
5->6 [style = solid, label="literalString"];
1->2 [style = bold, label=""];
2->9 [style = solid, label="listString"];
1->2 [style = solid, label="pieces"];
13->14 [style = bold, label=""];
0->5 [style = bold, label=""];
}
