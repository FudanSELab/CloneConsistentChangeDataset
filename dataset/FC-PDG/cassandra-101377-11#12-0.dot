digraph {
14 [style = filled, label = "builder.addComplexDeletion(m,new DeletionTime(ts(0( - 1,nowInSec))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Iterator<Row> rowIter = mutation.getPartitionUpdate(cfm2).iterator()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertFalse(rowIter.hasNext())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertFalse(data.hasNext())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "builder.addCell(expectedCell)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(readRepair.sent.get(peer2))@@@32@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "InetAddressAndPort peer2 = replicas.get(1).endpoint()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertColumns(row,\"m\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testResolveDeletedCollection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "long(( ts = {100,200}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertTrue(rowIter.hasNext())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "builder.newRow(Clustering.EMPTY)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testResolveComplexDelete['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(expectedCmplxDelete,cd.complexDeletion())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "resolver.preprocess(response(cmd,peer1,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "DataResolver resolver = new DataResolver(cmd,plan(replicas,ConsistencyLevel.ALL),readRepair,System.nanoTime())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Row row = rowIter.next()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestableReadRepair readRepair = new TestableReadRepair(cmd)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Row row = Iterators.getOnlyElement(rows)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Row.Builder builder = BTreeRow.unsortedBuilder()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertNull(row.getCell(m,CellPath.create(bb(0))))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Cell<?> expectedCell = mapCell(1,1,ts(1()@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(Collections.emptySet(),Sets.newHashSet(cd))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "builder.addCell(mapCell(0,0,ts(0())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Mutation mutation = readRepair.getForEndpoint(peer1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertNotNull(row.getCell(m,CellPath.create(bb(1))))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EndpointsForRange replicas = makeReplicas(2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "DeletionTime expectedCmplxDelete = new DeletionTime(ts(1( - 1,nowInSec)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Collections.singleton(expectedCell),Sets.newHashSet(cd))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "builder.addComplexDeletion(m,expectedCmplxDelete)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ComplexColumnData cd = row.getComplexColumnData(m)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testResolveComplexDelete['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Cell expectedCell = mapCell(1,1,ts(1()@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "ReadCommand cmd = Util.cmd(cfs2,dk).withNowInSeconds(nowInSec).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "InetAddressAndPort peer1 = replicas.get(0).endpoint()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "resolver.preprocess(response(cmd,peer2,iter(PartitionUpdate.singleRowUpdate(cfm2,dk,builder.build()))))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
27->19 [style = solid, label="cmd"];
17->7 [style = dashed, label="0"];
18->24 [style = bold, label=""];
4->25 [style = solid, label="replicas"];
8->15 [style = bold, label=""];
33->17 [style = solid, label="expectedCell"];
30->37 [style = solid, label="peer1"];
27->29 [style = solid, label="cmd"];
13->14 [style = solid, label="ts"];
20->29 [style = bold, label=""];
6->22 [style = bold, label=""];
25->13 [style = bold, label=""];
7->10 [style = bold, label=""];
19->25 [style = solid, label="readRepair"];
21->33 [style = bold, label=""];
16->28 [style = solid, label="row"];
23->4 [style = bold, label=""];
12->20 [style = bold, label=""];
26->21 [style = solid, label="expectedCmplxDelete"];
26->10 [style = solid, label="expectedCmplxDelete"];
33->12 [style = bold, label=""];
29->34 [style = bold, label=""];
13->5 [style = solid, label="ts"];
9->12 [style = solid, label="expectedCell"];
27->8 [style = solid, label="cmd"];
13->26 [style = solid, label="ts"];
31->17 [style = solid, label="cd"];
39->4 [style = bold, label=""];
13->9 [style = solid, label="ts"];
11->2 [style = bold, label=""];
19->25 [style = bold, label=""];
15->26 [style = bold, label=""];
26->21 [style = bold, label=""];
3->18 [style = bold, label=""];
9->33 [style = dashed, label="0"];
20->1 [style = solid, label="peer2"];
28->0 [style = bold, label=""];
36->38 [style = bold, label=""];
26->11 [style = solid, label="expectedCmplxDelete"];
9->17 [style = solid, label="expectedCell"];
30->8 [style = solid, label="peer1"];
21->9 [style = bold, label=""];
38->18 [style = bold, label=""];
27->25 [style = solid, label="cmd"];
21->20 [style = bold, label=""];
16->28 [style = bold, label=""];
34->37 [style = bold, label=""];
13->33 [style = solid, label="ts"];
33->12 [style = solid, label="expectedCell"];
20->2 [style = solid, label="peer2"];
20->29 [style = solid, label="peer2"];
4->27 [style = bold, label=""];
24->7 [style = solid, label="cd"];
30->18 [style = solid, label="peer1"];
27->19 [style = bold, label=""];
9->12 [style = bold, label=""];
5->30 [style = bold, label=""];
32->4 [style = bold, label=""];
13->6 [style = bold, label=""];
30->8 [style = bold, label=""];
22->14 [style = bold, label=""];
1->31 [style = bold, label=""];
24->7 [style = bold, label=""];
10->1 [style = bold, label=""];
31->17 [style = bold, label=""];
37->35 [style = bold, label=""];
29->16 [style = bold, label=""];
35->36 [style = bold, label=""];
14->5 [style = bold, label=""];
17->11 [style = bold, label=""];
}
