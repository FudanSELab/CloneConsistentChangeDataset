digraph {
9 [style = filled, label = "inputStatus = processor.processInput()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "KeySelector<Integer,Integer> keySelector = null@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<StreamElement> elements = Arrays.asList(new StreamRecord<>(1,3),new StreamRecord<>(1,1),new StreamRecord<>(2,1),new StreamRecord<>(2,3),new StreamRecord<>(1,2),new StreamRecord<>(2,2),Watermark.MAX_WATERMARK)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "simpleFixedLengthKeySorting['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "inputStatus != DataInputStatus.END_OF_INPUT@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "CollectionDataInput<Integer> dataInput1 = new CollectionDataInput<>(elements1,0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "CollectionDataInput<Integer> dataInput2 = new CollectionDataInput<>(elements,1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inputStatus != DataInputStatus.END_OF_INPUT@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "MultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(selectableSortingInputs.getInputSelectable(),2)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "inputStatus = processor.processInput()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "DataInputStatus inputStatus@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StreamTaskInput<?>(( sortingDataInputs = selectableSortingInputs.getSortedInputs()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "CollectionDataInput<Integer> dataInput2 = new CollectionDataInput<>(elements2,1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "StreamMultipleInputProcessor processor = new StreamMultipleInputProcessor(selectionHandler,new StreamOneInputProcessor((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2a89a)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "CollectionDataInput<Integer> dataInput1 = new CollectionDataInput<>(elements,0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "MultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(selectableSortingInputs.getInputSelectable(),2)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "List<StreamElement> elements2 = Arrays.asList(new StreamRecord<>(0,3),new Watermark(1),new StreamRecord<>(1,3),new Watermark(3))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "DataInputStatus inputStatus@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "StreamTaskInput<?>(( sortingDataInputs = selectableSortingInputs.getSortedInputs()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(collectingDataOutput.events,equalTo(Arrays.asList(new StreamRecord<>(1,1),new StreamRecord<>(1,1),new StreamRecord<>(1,2),new StreamRecord<>(1,2),new StreamRecord<>(1,3),new StreamRecord<>(1,3),new StreamRecord<>(2,1),new StreamRecord<>(2,1),new StreamRecord<>(2,2),new StreamRecord<>(2,2),new StreamRecord<>(2,3),Watermark.MAX_WATERMARK,new StreamRecord<>(2,3),Watermark.MAX_WATERMARK)))@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "SelectableSortingInputs selectableSortingInputs = MultiInputSortingDataInput.wrapInputs(new DummyInvokable(),new StreamTaskInput((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2a861,new KeySelector((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2a866,new TypeSerializer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2a86b,new IntSerializer(),new StreamTaskInput((((,environment.getMemoryManager(),environment.getIOManager(),true,1.0,new Configuration())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "KeySelector<Integer,Integer> keySelector = null@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "CollectingDataOutput<Object> collectingDataOutput = new CollectingDataOutput<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "SelectableSortingInputs selectableSortingInputs = MultiInputSortingDataInput.wrapInputs(new DummyInvokable(),new StreamTaskInput((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2a76d,new KeySelector((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2a772,new TypeSerializer((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b2a777,new IntSerializer(),new StreamTaskInput((((,environment.getMemoryManager(),environment.getIOManager(),true,1.0,new Configuration(),new ExecutionConfig())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "watermarkPropagation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "List<StreamElement> elements1 = Arrays.asList(new StreamRecord<>(2,3),new Watermark(3),new StreamRecord<>(3,3),new Watermark(7))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "simpleFixedLengthKeySorting['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertThat(collectingDataOutput.events,equalTo(Arrays.asList(new StreamRecord<>(0,3),new StreamRecord<>(1,3),new Watermark(3),new StreamRecord<>(2,3),new StreamRecord<>(3,3),new Watermark(7))))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10->15 [style = dashed, label="0"];
22->25 [style = bold, label=""];
19->15 [style = solid, label="elements1"];
12->5 [style = bold, label=""];
18->23 [style = bold, label=""];
23->27 [style = bold, label=""];
0->19 [style = bold, label=""];
21->15 [style = bold, label=""];
16->24 [style = bold, label=""];
25->18 [style = bold, label=""];
1->3 [style = bold, label=""];
18->23 [style = solid, label="inputStatus"];
0->22 [style = solid, label="collectingDataOutput"];
7->0 [style = bold, label=""];
2->11 [style = solid, label="selectionHandler"];
12->5 [style = solid, label="keySelector"];
9->8 [style = bold, label=""];
21->20 [style = solid, label="elements2"];
6->2 [style = bold, label=""];
16->24 [style = solid, label="keySelector"];
15->24 [style = solid, label="dataInput1"];
3->10 [style = bold, label=""];
9->8 [style = solid, label="inputStatus"];
26->0 [style = bold, label=""];
3->5 [style = solid, label="dataInput1"];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
14->0 [style = bold, label=""];
23->18 [style = dotted, label="true"];
20->24 [style = solid, label="dataInput2"];
10->12 [style = bold, label=""];
10->5 [style = solid, label="dataInput2"];
0->1 [style = bold, label=""];
15->20 [style = bold, label=""];
11->13 [style = bold, label=""];
24->17 [style = bold, label=""];
8->9 [style = bold, label=""];
1->10 [style = solid, label="elements"];
11->22 [style = bold, label=""];
11->22 [style = solid, label="selectionHandler"];
13->9 [style = bold, label=""];
1->3 [style = solid, label="elements"];
8->4 [style = bold, label=""];
8->9 [style = dotted, label="true"];
2->11 [style = bold, label=""];
23->18 [style = bold, label=""];
0->11 [style = solid, label="collectingDataOutput"];
17->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
