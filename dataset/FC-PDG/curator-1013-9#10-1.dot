digraph {
14 [style = filled, label = "Assert.fail(\"Should throw\")@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException,\"Should throw AsyncWrappers.TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "CompletionStage<Void> second = manager.migrate(migrationSet)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(Throwables.getRootCause(e) instanceof AsyncWrappers.TimeoutException,\"Should throw AsyncWrappers.TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(client.unwrap().getData().forPath(\"/test/bar\"),\"first\".getBytes())@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Throwable e@@@16@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "second.toCompletableFuture().get(timing.forSleepingABit().milliseconds(),TimeUnit.MILLISECONDS)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "complete(second)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertTrue(Throwables.getRootCause(e) instanceof TimeoutException,\"Should throw TimeoutException, was: \" + Throwables.getStackTraceAsString(Throwables.getRootCause(e)))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testConcurrency1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(manager.debugCount.get(),1)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "complete(first)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertArrayEquals(client.unwrap().getData().forPath(\"/test/bar\"),\"first\".getBytes())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "fail(\"Should throw\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(timing.awaitLatch(filterIsSetLatch))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(filterIsSetLatch))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testConcurrency2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "latch.countDown()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "complete(manager2.migrate(migrationSet))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "MigrationManager manager2 = new MigrationManager(client,LOCK_PATH,META_DATA_PATH,executor,Duration.ofMillis(timing.forSleepingABit().milliseconds()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testConcurrency1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "filterLatch.set(latch)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MigrationSet migrationSet = MigrationSet.build(\"1\",Collections.singletonList(migration))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Migration migration = null@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "CuratorOp op2 = client.transactionOp().create().forPath(\"/test/bar\",\"first\".getBytes())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "CuratorOp op1 = client.transactionOp().create().forPath(\"/test\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "CompletionStage<Void> first = manager.migrate(migrationSet)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->15 [style = solid, label="first"];
22->25 [style = bold, label=""];
1->4 [style = bold, label=""];
20->13 [style = bold, label=""];
12->20 [style = dashed, label="0"];
16->8 [style = bold, label=""];
3->21 [style = dashed, label="0"];
7->12 [style = bold, label=""];
0->6 [style = bold, label=""];
15->21 [style = bold, label=""];
10->27 [style = bold, label=""];
5->11 [style = solid, label="migrationSet"];
16->8 [style = solid, label="latch"];
10->19 [style = dashed, label="0"];
26->14 [style = bold, label=""];
9->17 [style = bold, label=""];
19->2 [style = bold, label=""];
2->9 [style = bold, label=""];
7->20 [style = bold, label=""];
11->19 [style = bold, label=""];
15->3 [style = bold, label=""];
3->22 [style = bold, label=""];
7->24 [style = dotted, label="true"];
5->27 [style = solid, label="migrationSet"];
7->12 [style = dotted, label="true"];
7->20 [style = dotted, label="true"];
5->16 [style = bold, label=""];
6->1 [style = bold, label=""];
12->13 [style = bold, label=""];
7->24 [style = bold, label=""];
5->9 [style = solid, label="migrationSet"];
27->22 [style = solid, label="second"];
18->6 [style = bold, label=""];
11->10 [style = bold, label=""];
23->6 [style = bold, label=""];
12->24 [style = dashed, label="0"];
9->14 [style = bold, label=""];
14->17 [style = dashed, label="0"];
10->2 [style = bold, label=""];
17->13 [style = bold, label=""];
13->15 [style = bold, label=""];
14->13 [style = bold, label=""];
8->11 [style = bold, label=""];
4->5 [style = bold, label=""];
4->5 [style = solid, label="migration"];
24->13 [style = bold, label=""];
27->26 [style = bold, label=""];
}
