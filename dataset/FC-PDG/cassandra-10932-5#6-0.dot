digraph {
0 [style = filled, label = "testSelectStaticColumnWithMetadata['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "\"3.11\".equals(clusterMinVersion)@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertCellFetchedQueried(false,false,filter,s2,path0,path1,path2,path3,path4)@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSelectStaticColumnWithMetadata['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertFetchedQueried(true,false,filter,v1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertCellFetchedQueried(true,true,filter,s2,path0,path1,path2,path3,path4)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertCellFetchedQueried(true,false,filter,s2,path0,path1,path2,path3,path4)@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"*/(v2(1((\",filter.toString())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "check.accept(ColumnFilter.selection(metadata,RegularAndStaticColumns.builder().add(s1).build()))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertFetchedQueried(true,true,filter,s1,s2,v1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertFetchedQueried(true,true,filter,v2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertCellFetchedQueried(true,false,filter,v2,path0,path2,path3,path4)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "\"3.0\".equals(clusterMinVersion)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"*/*\",filter.toString())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "boolean returnStaticContentOnPartitionWithNoRows@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertFetchedQueried(true,false,filter,s1,s2,v1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(s1).build())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Consumer<ColumnFilter> check = null@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testSelectCellWithMetadata['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"*\",filter.toCQLString())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(\"v2(1(\",filter.toCQLString())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2,path1).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "check.accept(ColumnFilter.allRegularColumnsBuilder(metadata,returnStaticContentOnPartitionWithNoRows).add(s1).build())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertFetchedQueried(false,false,filter,s1,s2)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertCellFetchedQueried(true,true,filter,v2,path1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testRoundTrips(filter)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "check.accept(ColumnFilter.selection(metadata,RegularAndStaticColumns.builder().add(s1).build(),returnStaticContentOnPartitionWithNoRows))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertEquals(\"<all regulars>/(v2(1((\",filter.toString())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"v2(1(\",filter.toCQLString())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->5 [style = dashed, label="0"];
13->10 [style = bold, label=""];
10->18 [style = bold, label=""];
8->16 [style = bold, label=""];
7->6 [style = dotted, label="true"];
1->4 [style = bold, label=""];
32->16 [style = dotted, label="false"];
7->1 [style = bold, label=""];
32->23 [style = bold, label=""];
28->30 [style = solid, label="filter"];
31->9 [style = bold, label=""];
2->3 [style = bold, label=""];
24->32 [style = bold, label=""];
24->31 [style = dotted, label="true"];
32->20 [style = dotted, label="true"];
16->26 [style = bold, label=""];
22->31 [style = bold, label=""];
12->20 [style = bold, label=""];
11->29 [style = bold, label=""];
29->25 [style = bold, label=""];
24->9 [style = dotted, label="true"];
32->11 [style = dotted, label="false"];
2->4 [style = dashed, label="0"];
19->17 [style = bold, label=""];
1->28 [style = dashed, label="0"];
28->8 [style = solid, label="filter"];
32->12 [style = dotted, label="true"];
28->26 [style = solid, label="filter"];
28->14 [style = bold, label=""];
21->28 [style = bold, label=""];
28->14 [style = solid, label="filter"];
28->20 [style = solid, label="filter"];
24->10 [style = dotted, label="true"];
30->19 [style = bold, label=""];
18->22 [style = bold, label=""];
32->29 [style = dotted, label="false"];
28->25 [style = solid, label="filter"];
0->1 [style = bold, label=""];
24->22 [style = dotted, label="true"];
32->23 [style = dotted, label="false"];
28->22 [style = solid, label="filter"];
32->30 [style = dotted, label="true"];
32->15 [style = bold, label=""];
32->19 [style = dotted, label="true"];
28->18 [style = solid, label="filter"];
32->17 [style = dotted, label="true"];
27->24 [style = bold, label=""];
1->2 [style = bold, label=""];
15->12 [style = bold, label=""];
14->27 [style = bold, label=""];
25->8 [style = bold, label=""];
6->4 [style = solid, label="returnStaticContentOnPartitionWithNoRows"];
28->31 [style = solid, label="filter"];
23->11 [style = bold, label=""];
28->16 [style = solid, label="filter"];
20->30 [style = bold, label=""];
32->8 [style = dotted, label="false"];
28->27 [style = solid, label="filter"];
32->26 [style = dotted, label="false"];
28->9 [style = solid, label="filter"];
4->5 [style = bold, label=""];
28->29 [style = solid, label="filter"];
24->32 [style = dotted, label="false"];
28->19 [style = solid, label="filter"];
32->25 [style = dotted, label="false"];
24->18 [style = dotted, label="true"];
32->15 [style = dotted, label="true"];
28->17 [style = solid, label="filter"];
24->13 [style = bold, label=""];
24->13 [style = dotted, label="true"];
}
