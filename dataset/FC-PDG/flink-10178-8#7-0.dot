digraph {
9 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "FlinkILoop flinkILoop = new FlinkILoop(configuration,Option.empty())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(configuration,forwardedConfiguration)@@@25@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "StreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Configuration configuration = new Configuration()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(streamEnv instanceof ScalaShellStreamEnvironment)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "FlinkILoop flinkILoop = new FlinkILoop(\"localhost\",6123,configuration,Option.empty())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Configuration forwardedConfiguration = remoteStreamEnv.getClientConfiguration()@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "flinkILoop.settings_$eq(settings)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "flinkILoop.createInterpreter()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testConfigurationForwarding['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "((MutableSettings.BooleanSetting)settings.usejavacp()).value_$eq(true)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "final TestPlanExecutor testPlanExecutor = new TestPlanExecutor()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv()@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testConfigurationForwardingStreamEnvironment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "configuration.setString(\"foobar\",\"foobar\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "BDDMockito.given(PlanExecutor.createRemoteExecutor(Matchers.anyString(),Matchers.anyInt(),Matchers.any())).willAnswer(new Answer<PlanExecutor>(){@Override public PlanExecutor answer(InvocationOnMock invocation){testPlanExecutor.setHost((String)invocation.getArguments()(0()testPlanExecutor.setPort((Integer)invocation.getArguments()(1()testPlanExecutor.setConfiguration((Configuration)invocation.getArguments()(2()return testPlanExecutor}})@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "env.execute(\"Test job\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "configuration.setInteger(JobManagerOptions.PORT,6123)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertTrue(streamEnv instanceof ScalaShellRemoteStreamEnvironment)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Configuration forwardedConfiguration = remoteStreamEnv.getClientConfiguration()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testConfigurationForwardingStreamEnvironment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "env.fromElements(1).output(new DiscardingOutputFormat<Integer>())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "configuration.setString(JobManagerOptions.ADDRESS,\"localhost\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Settings settings = new Settings()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Configuration forwardedConfiguration = testPlanExecutor.getConfiguration()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ScalaShellStreamEnvironment remoteStreamEnv = (ScalaShellStreamEnvironment)streamEnv@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->29 [style = solid, label="configuration"];
20->17 [style = bold, label=""];
1->8 [style = bold, label=""];
4->2 [style = solid, label="streamEnv"];
3->16 [style = solid, label="streamEnv"];
5->23 [style = bold, label=""];
3->13 [style = solid, label="streamEnv"];
19->29 [style = bold, label=""];
2->3 [style = bold, label=""];
27->28 [style = bold, label=""];
3->16 [style = dashed, label="0"];
12->15 [style = bold, label=""];
18->19 [style = bold, label=""];
28->26 [style = bold, label=""];
7->0 [style = solid, label="forwardedConfiguration"];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
4->2 [style = bold, label=""];
15->3 [style = bold, label=""];
23->24 [style = solid, label="testPlanExecutor"];
13->16 [style = bold, label=""];
4->3 [style = solid, label="streamEnv"];
1->5 [style = solid, label="configuration"];
25->27 [style = bold, label=""];
6->1 [style = bold, label=""];
1->0 [style = solid, label="configuration"];
23->22 [style = bold, label=""];
25->28 [style = solid, label="settings"];
14->9 [style = solid, label="forwardedConfiguration"];
8->5 [style = bold, label=""];
3->7 [style = bold, label=""];
19->29 [style = solid, label="forwardedConfiguration"];
2->13 [style = dashed, label="0"];
24->25 [style = bold, label=""];
5->4 [style = bold, label=""];
21->1 [style = bold, label=""];
3->13 [style = bold, label=""];
16->14 [style = bold, label=""];
14->9 [style = bold, label=""];
22->24 [style = bold, label=""];
1->9 [style = solid, label="configuration"];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
1->15 [style = solid, label="configuration"];
17->18 [style = bold, label=""];
26->20 [style = bold, label=""];
}
