digraph {
80 [style = filled, label = "b.setIfNotEmpty(XML_disableAutoDetectNamespaces,bool(a.disableAutoDetectNamespaces()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "AnnotationInfo<BeanConfig> ai@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "bool(a.disableInterfaceProxies()).ifPresent(null)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
74 [style = filled, label = "apply['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "b.setIf(a.propertyNamer() != ,BEAN_propertyNamer,a.propertyNamer())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "bool(a.beansRequireSerializable()).ifPresent(null)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
64 [style = filled, label = "bool(a.useJavaBeanIntrospector()).ifPresent(null)@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "b.setIfNotEmpty(BEAN_beansRequireDefaultConstructor,bool(a.beansRequireDefaultConstructor()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "bool(a.ignoreInvocationExceptionsOnGetters()).ifPresent(null)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
63 [style = filled, label = "bool(a.disableIgnoreMissingSetters()).ifPresent(null)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "apply['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
70 [style = filled, label = "b.setIfNotEmpty(XML_defaultNamespace,string(a.defaultNamespace()))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "b.setIfNotEmpty(XML_preserveRootElement,bool(a.preserveRootElement()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "AnnotationInfo<XmlConfig> ai@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "b.setIfNotEmpty(BEAN_typePropertyName,string(a.typePropertyName()))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
59 [style = filled, label = "bool(a.ignoreUnknownBeanProperties()).ifPresent(null)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "bool(a.useEnumNames()).ifPresent(null)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "bool(a.sortProperties()).ifPresent(null)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "b.setIfNotEmpty(BEAN_ignoreInvocationExceptionsOnGetters,bool(a.ignoreInvocationExceptionsOnGetters()))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "b.setIfNotEmpty(BEAN_notBeanClasses,a.notBeanClasses())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "b.setIfNotEmpty(BEAN_notBeanClasses,a.notBeanClasses_replace())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "ContextPropertiesBuilder b@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "visibility(a.beanConstructorVisibility(),\"beanConstructorVisibility\").ifPresent(null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
77 [style = filled, label = "b.setIfNotEmpty(XML_addNamespaceUrisToRoot,bool(a.addNamespaceUrisToRoot()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "b.setIfNotEmpty(BEAN_beansRequireSettersForGetters,bool(a.beansRequireSettersForGetters()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "b.setIfNotEmpty(BEAN_locale,locale(a.locale()))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "bool(a.disableBeansRequireSomeProperties()).ifPresent(null)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "b.setIfNotEmpty(BEAN_beanDictionary,a.dictionary_replace())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "b.setIfNotEmpty(BEAN_disableIgnoreMissingSetters,bool(a.disableIgnoreMissingSetters()))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "b.setIfNotEmpty(BEAN_ignoreInvocationExceptionsOnSetters,bool(a.ignoreInvocationExceptionsOnSetters()))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "b.setIfNotEmpty(BEAN_disableIgnoreUnknownNullBeanProperties,bool(a.disableIgnoreUnknownNullBeanProperties()))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "bool(a.disableIgnoreTransientFields()).ifPresent(null)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "string(a.locale()).map(null).ifPresent(null)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "visibility(a.beanMethodVisibility(),\"beanMethodVisibility\").ifPresent(null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "b.setIfNotEmpty(BEAN_disableBeansRequireSomeProperties,bool(a.disableBeansRequireSomeProperties()))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "b.setIfNotEmpty(BEAN_useEnumNames,bool(a.useEnumNames()))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "BeanContextBuilder b@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "b.setIfNotEmpty(BEAN_beanMethodVisibility,visibility(a.beanMethodVisibility(),\"beanMethodVisibility\"))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "bool(a.ignoreInvocationExceptionsOnSetters()).ifPresent(null)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "b.setIfNotEmpty(XML_addBeanTypes,bool(a.addBeanTypes()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "b.setIf(a.reporter() != ,XML_reporter,a.reporter())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "apply['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "b.setIfNotEmpty(BEAN_beanFieldVisibility,visibility(a.beanFieldVisibility(),\"beanFieldVisibility\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "b.setIfNotEmpty(BEAN_ignoreUnknownBeanProperties,bool(a.ignoreUnknownBeanProperties()))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "bool(a.beansRequireSettersForGetters()).ifPresent(null)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "b.setIfNotEmpty(BEAN_beanMapPutReturnsOldValue,bool(a.beanMapPutReturnsOldValue()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "string(a.mediaType()).map(null).ifPresent(null)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "b.setIfNotEmpty(BEAN_mediaType,mediaType(a.mediaType()))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "BeanConfig a = ai.getAnnotation()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "bool(a.debug()).ifPresent(null)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "type(a.propertyNamer()).ifPresent(null)@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
73 [style = filled, label = "b.setIfNotEmpty(XML_enableNamespaces,bool(a.enableNamespaces()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "b.setIfNotEmpty(BEAN_beanClassVisibility,visibility(a.beanClassVisibility(),\"beanClassVisibility\"))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "b.setIfNotEmpty(BEAN_useJavaBeanIntrospector,bool(a.useJavaBeanIntrospector()))@@@38@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "visibility(a.beanClassVisibility(),\"beanClassVisibility\").ifPresent(null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "b.setIfNotEmpty(BEAN_swaps,a.swaps_replace())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "bool(a.beanMapPutReturnsOldValue()).ifPresent(null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "AnnotationInfo<BeanConfig> ai@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "b.prependTo(BEAN_swaps,a.swaps())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "b.addTo(BEAN_notBeanPackages,stringList(a.notBeanPackages()))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "b.prependTo(BEAN_beanDictionary,a.dictionary())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "visibility(a.beanFieldVisibility(),\"beanFieldVisibility\").ifPresent(null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "b.setIf(a.resolver() != ,XML_resolver,a.resolver())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "XmlConfig a = ai.getAnnotation()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "b.setIfNotEmpty(BEAN_findFluentSetters,bool(a.findFluentSetters()))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "asList(a.interfaces()).stream().map(null).forEach(null)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "b.setIfNotEmpty(CONTEXT_debug,bool(a.debug()))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "b.setIfNotEmpty(BEAN_disableIgnoreTransientFields,bool(a.disableIgnoreTransientFields()))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
67 [style = filled, label = "b.setIf(a.eventAllocator() != ,XML_eventAllocator,a.eventAllocator())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "b.setIfNotEmpty(BEAN_beanConstructorVisibility,visibility(a.beanConstructorVisibility(),\"beanConstructorVisibility\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "bool(a.beansRequireDefaultConstructor()).ifPresent(null)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
62 [style = filled, label = "string(a.typePropertyName()).ifPresent(null)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "b.setIfNotEmpty(XML_validating,bool(a.validating()))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "bool(a.disableIgnoreUnknownNullBeanProperties()).ifPresent(null)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "b.setIfNotEmpty(BEAN_sortProperties,bool(a.sortProperties()))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "b.setIfNotEmpty(BEAN_beansRequireSerializable,bool(a.beansRequireSerializable()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "string(a.timeZone()).map(null).ifPresent(null)@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "b.setIfNotEmpty(BEAN_disableInterfaceProxies,bool(a.disableInterfaceProxies()))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "b.setIfNotEmpty(BEAN_notBeanPackages,stringList(a.notBeanPackages_replace()))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "b.setIf(a.namespaces().length > 0,XML_namespaces,Namespace.createArray(stringList(a.namespaces())))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "bool(a.findFluentSetters()).ifPresent(null)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "b.setIfNotEmpty(BEAN_timeZone,timeZone(a.timeZone()))@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68->69 [style = bold, label=""];
41->8 [style = bold, label=""];
46->61 [style = bold, label=""];
77->80 [style = bold, label=""];
52->59 [style = bold, label=""];
25->78 [style = dashed, label="0"];
19->66 [style = dashed, label="0"];
28->14 [style = bold, label=""];
56->54 [style = bold, label=""];
23->58 [style = dashed, label="0"];
70->73 [style = bold, label=""];
31->55 [style = dashed, label="0"];
55->57 [style = bold, label=""];
51->48 [style = bold, label=""];
58->62 [style = bold, label=""];
45->66 [style = bold, label=""];
66->64 [style = bold, label=""];
0->24 [style = bold, label=""];
41->43 [style = dotted, label="true"];
74->71 [style = dotted, label="true"];
8->47 [style = bold, label=""];
62->49 [style = bold, label=""];
49->56 [style = bold, label=""];
17->27 [style = bold, label=""];
53->60 [style = bold, label=""];
36->59 [style = dashed, label="0"];
50->63 [style = bold, label=""];
21->3 [style = bold, label=""];
59->42 [style = bold, label=""];
36->6 [style = bold, label=""];
11->7 [style = dotted, label="true"];
9->39 [style = bold, label=""];
10->31 [style = bold, label=""];
80->70 [style = bold, label=""];
26->45 [style = dashed, label="0"];
5->23 [style = bold, label=""];
30->46 [style = dashed, label="0"];
72->77 [style = bold, label=""];
2->34 [style = bold, label=""];
9->32 [style = bold, label=""];
1->56 [style = dashed, label="0"];
14->38 [style = bold, label=""];
39->45 [style = bold, label=""];
6->42 [style = dashed, label="0"];
32->26 [style = bold, label=""];
34->40 [style = dashed, label="0"];
38->18 [style = bold, label=""];
22->20 [style = bold, label=""];
57->21 [style = bold, label=""];
1->16 [style = bold, label=""];
38->51 [style = dashed, label="0"];
13->57 [style = dashed, label="0"];
16->54 [style = dashed, label="0"];
47->44 [style = bold, label=""];
11->8 [style = bold, label=""];
29->35 [style = bold, label=""];
73->81 [style = bold, label=""];
4->44 [style = dashed, label="0"];
19->33 [style = bold, label=""];
74->75 [style = bold, label=""];
65->40 [style = bold, label=""];
5->61 [style = dashed, label="0"];
8->15 [style = bold, label=""];
3->37 [style = bold, label=""];
35->9 [style = bold, label=""];
74->78 [style = dotted, label="true"];
31->13 [style = bold, label=""];
41->25 [style = dotted, label="true"];
12->17 [style = bold, label=""];
18->48 [style = dashed, label="0"];
26->19 [style = bold, label=""];
23->0 [style = bold, label=""];
37->22 [style = bold, label=""];
0->62 [style = dashed, label="0"];
30->5 [style = bold, label=""];
6->10 [style = bold, label=""];
63->52 [style = bold, label=""];
32->39 [style = dashed, label="0"];
20->53 [style = dashed, label="0"];
75->72 [style = bold, label=""];
33->64 [style = dashed, label="0"];
24->1 [style = bold, label=""];
79->68 [style = bold, label=""];
67->76 [style = bold, label=""];
24->49 [style = dashed, label="0"];
27->36 [style = bold, label=""];
20->29 [style = bold, label=""];
15->47 [style = dashed, label="0"];
81->67 [style = bold, label=""];
14->51 [style = bold, label=""];
61->58 [style = bold, label=""];
18->2 [style = bold, label=""];
10->55 [style = bold, label=""];
34->30 [style = bold, label=""];
4->28 [style = bold, label=""];
40->46 [style = bold, label=""];
54->50 [style = bold, label=""];
60->35 [style = bold, label=""];
22->53 [style = bold, label=""];
11->25 [style = dotted, label="true"];
44->28 [style = bold, label=""];
42->10 [style = bold, label=""];
17->63 [style = dashed, label="0"];
15->4 [style = bold, label=""];
2->65 [style = dashed, label="0"];
27->52 [style = dashed, label="0"];
76->79 [style = bold, label=""];
8->75 [style = dashed, label="0"];
48->65 [style = bold, label=""];
14->70 [style = dashed, label="0"];
13->21 [style = bold, label=""];
12->50 [style = dashed, label="0"];
29->60 [style = dashed, label="0"];
16->12 [style = bold, label=""];
}
