digraph {
13 [style = filled, label = "verify(subscriber,Mockito.never()).onError(any())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"two\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Observable<String> w = Observable.just(\"one\",\"fail\",\"two\",\"three\",\"fail\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "w = w.map(new Function<String,String>(){@Override public String apply(String s){if (\"fail\".equals(s)) {throw new RuntimeException(\"Forced Failure\")}System.out.println(\"BadMapper:\" + s)return s}})@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Flowable<String> flowable = w.onErrorResumeNext(new Function<Throwable,Flowable<String>>(){@Override public Flowable<String> apply(Throwable t1){return Flowable.just(\"twoResume\",\"threeResume\").subscribeOn(Schedulers.computation())}})@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<>(subscriber,Long.MAX_VALUE)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Flowable<String> w = Flowable.just(\"one\",\"fail\",\"two\",\"three\",\"fail\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(subscriber,times(1)).onNext(\"threeResume\")@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "mapResumeAsyncNext['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "verify(observer,times(1)).onNext(\"one\")@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestObserver<String> to = new TestObserver<String>(observer)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "TestSubscriber<String> ts = new TestSubscriber<String>(subscriber,Long.MAX_VALUE)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Observable<String> observable = w.onErrorReturn(new Function<Throwable,String>(){@Override public String apply(Throwable t1){return \"resume\"}})@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "flowable.subscribe(ts)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verify(observer,times(1)).onComplete()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "verify(observer,Mockito.never()).onError(any())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"three\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "mapResumeAsyncNext['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(subscriber,times(1)).onComplete()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(subscriber,times(1)).onNext(\"twoResume\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "observable.subscribe(to)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "verify(observer,times(1)).onNext(\"resume\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "verify(subscriber,times(1)).onNext(\"one\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(subscriber,Mockito.never()).onNext(\"two\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "mapResumeAsyncNext['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Observer<String> observer = TestHelper.mockObserver()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "verify(observer,Mockito.never()).onNext(\"three\")@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
28->29 [style = bold, label=""];
3->28 [style = dashed, label="0"];
8->4 [style = solid, label="ts"];
5->26 [style = dashed, label="0"];
17->9 [style = bold, label=""];
8->15 [style = dashed, label="0"];
3->14 [style = bold, label=""];
18->17 [style = bold, label=""];
4->27 [style = dashed, label="0"];
9->20 [style = bold, label=""];
22->28 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
16->2 [style = bold, label=""];
26->24 [style = bold, label=""];
2->17 [style = dashed, label="0"];
20->25 [style = bold, label=""];
1->13 [style = bold, label=""];
0->22 [style = dashed, label="0"];
25->19 [style = solid, label="observer"];
11->15 [style = bold, label=""];
29->26 [style = bold, label=""];
12->2 [style = bold, label=""];
13->21 [style = dashed, label="0"];
5->6 [style = bold, label=""];
23->21 [style = bold, label=""];
21->22 [style = bold, label=""];
6->24 [style = dashed, label="0"];
19->27 [style = bold, label=""];
15->4 [style = bold, label=""];
25->19 [style = bold, label=""];
11->15 [style = solid, label="subscriber"];
11->25 [style = dashed, label="0"];
11->8 [style = bold, label=""];
10->20 [style = dashed, label="0"];
27->23 [style = bold, label=""];
4->1 [style = bold, label=""];
8->4 [style = bold, label=""];
11->8 [style = solid, label="subscriber"];
19->27 [style = solid, label="to"];
6->7 [style = bold, label=""];
14->29 [style = dashed, label="0"];
1->23 [style = dashed, label="0"];
13->0 [style = bold, label=""];
14->5 [style = bold, label=""];
10->11 [style = bold, label=""];
15->4 [style = solid, label="ts"];
}
