digraph {
6 [style = filled, label = "cacheInTtlWithMonoResponse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MonoOperationInvoker target = new MonoOperationInvoker()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Object cachedResponse = ((Flux<?>)invoker.invoke(context)).blockLast()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(FluxOperationInvoker.invocations).isEqualTo(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "cacheInTtlWithMonoResponse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertThat(response).isSameAs(cachedResponse)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "InvocationContext context = new InvocationContext(mock(),Collections.emptyMap())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(MonoOperationInvoker.invocations).hasValue(1)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "cacheInTtlWithFluxResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "FluxOperationInvoker.invocations = 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "MonoOperationInvoker.invocations = new AtomicInteger()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Object response = ((Flux<?>)invoker.invoke(context)).blockLast()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Object response = ((Mono<?>)invoker.invoke(context)).block()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(MonoOperationInvoker.invocations).isEqualTo(1)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "FluxOperationInvoker target = new FluxOperationInvoker()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "CachingOperationInvoker invoker = new CachingOperationInvoker(target,CACHE_TTL)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MonoOperationInvoker.invocations = 0@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Object cachedResponse = ((Mono<?>)invoker.invoke(context)).block()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
4->14 [style = bold, label=""];
17->1 [style = bold, label=""];
2->1 [style = solid, label="cachedResponse"];
7->14 [style = dashed, label="0"];
8->3 [style = bold, label=""];
8->4 [style = solid, label="target"];
8->12 [style = dashed, label="0"];
2->9 [style = bold, label=""];
0->17 [style = dashed, label="0"];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
4->7 [style = bold, label=""];
2->15 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
6->5 [style = bold, label=""];
15->17 [style = bold, label=""];
2->0 [style = bold, label=""];
15->1 [style = solid, label="cachedResponse"];
5->11 [style = dashed, label="0"];
7->2 [style = bold, label=""];
0->1 [style = bold, label=""];
11->8 [style = bold, label=""];
14->15 [style = bold, label=""];
12->3 [style = bold, label=""];
0->9 [style = dashed, label="0"];
9->1 [style = bold, label=""];
16->12 [style = bold, label=""];
12->4 [style = solid, label="target"];
10->11 [style = bold, label=""];
}
