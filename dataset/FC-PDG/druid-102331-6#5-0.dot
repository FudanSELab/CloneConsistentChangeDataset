digraph {
10 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(0,2L,1,4L,2,5L)),END1.plus(END2))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,4L,2,5L)),KM0.plus(KM2))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM2.plus(KM1))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(0,2L,1,3L,2,5L)),START2.plus(START1))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testPlus['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(0,2L,1,4L,2,5L)),START0.plus(START2))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,4L,2,5L)),KM1.plus(KM2))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM2.plus(KM2))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM0.plus(KM2))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"4L\",\"2\",\"5L\")),KM1.plus(KM2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(0,2L,1,4L,2,5L)),START1.plus(START2))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(0,2L,1,4L,2,5L)),START2.plus(START2))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,3L,2,5L)),KM2.plus(KM1))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(startMetadata(ImmutableMap.of(0,2L,1,3L,2,5L)),START1.plus(START3))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,3L,2,5L)),KM1.plus(KM3))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(\"0\",\"2L\",\"1\",\"3L\",\"2\",\"5L\")),KM1.plus(KM3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testPlus['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertEquals(km(\"foo\",ImmutableMap.of(0,2L,1,4L,2,5L)),KM2.plus(KM2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(endMetadata(ImmutableMap.of(0,2L,2,5L)),END0.plus(END1))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testPlus['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
4->17 [style = dashed, label="0"];
7->12 [style = bold, label=""];
11->6 [style = bold, label=""];
14->17 [style = bold, label=""];
9->10 [style = bold, label=""];
2->4 [style = bold, label=""];
15->18 [style = bold, label=""];
3->0 [style = bold, label=""];
1->13 [style = dashed, label="0"];
5->2 [style = bold, label=""];
19->14 [style = bold, label=""];
3->12 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
4->7 [style = dashed, label="0"];
12->8 [style = bold, label=""];
0->1 [style = bold, label=""];
1->16 [style = dashed, label="0"];
17->15 [style = bold, label=""];
2->6 [style = dashed, label="0"];
3->15 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
0->8 [style = dashed, label="0"];
13->9 [style = bold, label=""];
6->7 [style = bold, label=""];
8->13 [style = bold, label=""];
18->16 [style = bold, label=""];
}
