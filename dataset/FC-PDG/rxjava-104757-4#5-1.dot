digraph {
6 [style = filled, label = "Function<String,String> duplicateErr = new Function<String,String>(){@Override public String apply(String t1){if (\"bb\".equals(t1)) {throw new RuntimeException(\"Forced failure\")}return t1 + t1}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "toMapWithErrorInValueSelectorFlowable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Map<Integer,String> expected = new HashMap<Integer,String>()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "toMapWithErrorInValueSelectorFlowable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expected.put(1,\"aa\")@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Map<Integer,String> expected = new HashMap<>()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "verify(objectObserver,never()).onNext(expected)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "mapped.subscribe(objectSubscriber)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expected.put(2,\"bbbb\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Observable<Map<Integer,String>> mapped = source.toMap(lengthFunc,duplicateErr).toObservable()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "toMapWithErrorInValueSelectorObservable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "expected.put(4,\"dddddddd\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "verify(objectSubscriber,times(1)).onError(any())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected.put(3,\"cccccc\")@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "verify(objectObserver,times(1)).onError(any())@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Flowable<String> source = Flowable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(objectObserver,never()).onComplete()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "mapped.subscribe(objectObserver)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(objectSubscriber,never()).onComplete()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Observable<String> source = Observable.just(\"a\",\"bb\",\"ccc\",\"dddd\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Flowable<Map<Integer,String>> mapped = source.toMap(lengthFunc,duplicateErr).toFlowable()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(objectSubscriber,never()).onNext(expected)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->18 [style = dashed, label="0"];
5->8 [style = bold, label=""];
12->5 [style = bold, label=""];
6->18 [style = bold, label=""];
1->15 [style = dashed, label="0"];
4->13 [style = bold, label=""];
8->20 [style = dashed, label="0"];
0->11 [style = bold, label=""];
15->6 [style = bold, label=""];
2->9 [style = bold, label=""];
3->12 [style = bold, label=""];
13->11 [style = bold, label=""];
12->21 [style = dashed, label="0"];
14->1 [style = bold, label=""];
4->0 [style = bold, label=""];
3->19 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
6->4 [style = bold, label=""];
1->6 [style = bold, label=""];
0->12 [style = solid, label="expected"];
7->2 [style = bold, label=""];
0->13 [style = dashed, label="0"];
17->15 [style = bold, label=""];
0->21 [style = solid, label="expected"];
21->16 [style = bold, label=""];
9->19 [style = bold, label=""];
9->3 [style = bold, label=""];
13->12 [style = solid, label="expected"];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
18->0 [style = bold, label=""];
11->7 [style = bold, label=""];
19->21 [style = bold, label=""];
}
