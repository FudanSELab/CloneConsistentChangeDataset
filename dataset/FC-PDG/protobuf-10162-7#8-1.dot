digraph {
3 [style = filled, label = "assertEquals(0,message.getInt32ToMessageFieldMap().size())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Message.Builder mapEntryBuilder = mapEntry.toBuilder()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_int32_field\"),newMapEntry(builder,\"int32_to_int32_field\",55,55))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(0,message.getInt32ToInt32FieldMap().size())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Message mapEntry = (Message)builder.getRepeatedField(f(\"int32_to_int32_field\"),i)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(55,message.getInt32ToInt32FieldMap().get(55).intValue())@@@43@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(11,message.getInt32ToInt32FieldMap().get(22).intValue())@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertHasMapValues(message,\"int32_to_int32_field\",mapForValues(1,2,3,4))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(33,message.getInt32ToInt32FieldMap().get(44).intValue())@@@42@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap().get(33).intValue()).isEqualTo(44)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "assertThat(message.getInt32ToMessageFieldMap()).isEmpty()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(222,message.getInt32ToMessageFieldMap().get(111).getValue())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestMap message = builder.build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "setFieldValue(mapEntryBuilder,\"key\",oldValue)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "message = builder.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < builder.getRepeatedFieldCount(f(\"int32_to_int32_field\"))@@@30@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int i = 0@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "i++@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "setMapValues(builder,\"int32_to_int32_field\",mapForValues(11,22,33,44))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(44,message.getInt32ToInt32FieldMap().get(33).intValue())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(66,message.getInt32ToInt32FieldMap().get(55).intValue())@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "builder.clearField(f(\"int32_to_message_field\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testReflectionApi['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(message.getInt32ToMessageFieldMap().get(555).getValue()).isEqualTo(555)@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_message_field\"),newMapEntry(builder,\"int32_to_message_field\",555,MessageValue.newBuilder().setValue(666).build()))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(55,message.getInt32ToInt32FieldMap().get(55).intValue())@@@27@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "message = builder.build()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int oldKey = ((Integer)getFieldValue(mapEntry,\"key\")).intValue()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "TestMap.Builder builder = TestMap.newBuilder().putInt32ToInt32Field(1,2).putInt32ToInt32Field(3,4).putInt32ToMessageField(11,MessageValue.newBuilder().setValue(22).build()).putInt32ToMessageField(33,MessageValue.newBuilder().setValue(44).build())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap()).isEmpty()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap().get(44).intValue()).isEqualTo(33)@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(66)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "builder.setRepeatedField(f(\"int32_to_int32_field\"),i,mapEntryBuilder.build())@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap().get(11).intValue()).isEqualTo(22)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(555,message.getInt32ToMessageFieldMap().get(555).getValue())@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "setFieldValue(mapEntryBuilder,\"value\",oldKey)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "message = builder.build()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(22,message.getInt32ToInt32FieldMap().get(11).intValue())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertThat(message.getInt32ToMessageFieldMap().get(111).getValue()).isEqualTo(222)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "setMapValues(builder,\"int32_to_message_field\",mapForValues(111,MessageValue.newBuilder().setValue(222).build(),333,MessageValue.newBuilder().setValue(444).build()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "message = builder.build()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "builder.clearField(f(\"int32_to_int32_field\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "int oldValue = ((Integer)getFieldValue(mapEntry,\"value\")).intValue()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap().get(22).intValue()).isEqualTo(11)@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "testReflectionApi['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
48 [style = filled, label = "assertThat(message.getInt32ToMessageFieldMap().get(333).getValue()).isEqualTo(444)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_message_field\"),newMapEntry(builder,\"int32_to_message_field\",555,MessageValue.newBuilder().setValue(555).build()))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "builder.addRepeatedField(f(\"int32_to_int32_field\"),newMapEntry(builder,\"int32_to_int32_field\",55,66))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "message = builder.build()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(55)@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertHasMapValues(message,\"int32_to_message_field\",mapForValues(11,MessageValue.newBuilder().setValue(22).build(),33,MessageValue.newBuilder().setValue(44).build()))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testReflectionApi['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(444,message.getInt32ToMessageFieldMap().get(333).getValue())@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(666,message.getInt32ToMessageFieldMap().get(555).getValue())@@@23@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(message.getInt32ToInt32FieldMap().get(55).intValue()).isEqualTo(55)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "assertThat(message.getInt32ToMessageFieldMap().get(555).getValue()).isEqualTo(666)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14->5 [style = solid, label="i"];
37->28 [style = bold, label=""];
32->37 [style = bold, label=""];
48->29 [style = bold, label=""];
36->29 [style = bold, label=""];
10->24 [style = bold, label=""];
39->16 [style = solid, label="builder"];
44->19 [style = bold, label=""];
49->48 [style = bold, label=""];
28->9 [style = bold, label=""];
25->43 [style = bold, label=""];
38->31 [style = bold, label=""];
53->54 [style = bold, label=""];
18->49 [style = dashed, label="0"];
3->4 [style = bold, label=""];
1->45 [style = dashed, label="0"];
28->41 [style = dashed, label="0"];
13->1 [style = bold, label=""];
10->24 [style = solid, label="mapEntryBuilder"];
31->52 [style = dashed, label="0"];
26->12 [style = bold, label=""];
22->47 [style = bold, label=""];
39->29 [style = solid, label="builder"];
40->24 [style = solid, label="oldValue"];
34->21 [style = solid, label="i"];
22->13 [style = bold, label=""];
4->16 [style = bold, label=""];
11->51 [style = bold, label=""];
54->46 [style = bold, label=""];
7->0 [style = bold, label=""];
34->6 [style = solid, label="i"];
7->54 [style = dashed, label="0"];
35->5 [style = bold, label=""];
25->27 [style = bold, label=""];
14->6 [style = solid, label="i"];
6->14 [style = dotted, label="true"];
29->32 [style = bold, label=""];
17->39 [style = bold, label=""];
38->51 [style = dashed, label="0"];
14->21 [style = solid, label="i"];
39->19 [style = solid, label="builder"];
6->33 [style = dotted, label="true"];
14->6 [style = bold, label=""];
33->35 [style = solid, label="oldKey"];
6->40 [style = dotted, label="true"];
27->43 [style = dashed, label="0"];
6->24 [style = dotted, label="true"];
39->32 [style = solid, label="builder"];
6->21 [style = bold, label=""];
37->41 [style = bold, label=""];
42->39 [style = bold, label=""];
50->4 [style = bold, label=""];
51->52 [style = bold, label=""];
36->48 [style = dashed, label="0"];
55->39 [style = bold, label=""];
31->34 [style = bold, label=""];
6->20 [style = bold, label=""];
6->10 [style = dotted, label="true"];
9->44 [style = dashed, label="0"];
9->19 [style = bold, label=""];
47->45 [style = bold, label=""];
6->21 [style = dotted, label="true"];
23->11 [style = bold, label=""];
0->46 [style = dashed, label="0"];
15->8 [style = bold, label=""];
40->10 [style = bold, label=""];
39->15 [style = bold, label=""];
11->38 [style = bold, label=""];
43->50 [style = bold, label=""];
24->35 [style = bold, label=""];
45->49 [style = bold, label=""];
21->33 [style = bold, label=""];
27->3 [style = bold, label=""];
30->25 [style = bold, label=""];
12->30 [style = bold, label=""];
1->18 [style = bold, label=""];
18->36 [style = bold, label=""];
5->14 [style = bold, label=""];
52->34 [style = bold, label=""];
20->53 [style = bold, label=""];
16->22 [style = bold, label=""];
34->14 [style = solid, label="i"];
20->2 [style = bold, label=""];
2->53 [style = dashed, label="0"];
39->23 [style = solid, label="builder"];
33->40 [style = bold, label=""];
3->50 [style = dashed, label="0"];
15->26 [style = solid, label="message"];
19->23 [style = bold, label=""];
34->6 [style = bold, label=""];
10->35 [style = solid, label="mapEntryBuilder"];
6->35 [style = dotted, label="true"];
15->8 [style = solid, label="message"];
13->47 [style = dashed, label="0"];
2->7 [style = bold, label=""];
39->4 [style = solid, label="builder"];
34->5 [style = solid, label="i"];
41->44 [style = bold, label=""];
6->5 [style = dotted, label="true"];
8->26 [style = bold, label=""];
}
