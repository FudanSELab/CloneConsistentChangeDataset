digraph {
5 [style = filled, label = "assertContentsIgnoreOrder(result.right,transientReplica(aAddress,sixToken,nineToken),fullReplica(aAddress,nineToken,elevenToken))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "calculateStreamAndFetchRangesMoveBackwardBetween['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertContentsIgnoreOrder(result.right,transientReplica(address01,sixToken,nineToken),fullReplica(address01,nineToken,elevenToken))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertContentsIgnoreOrder(result.right,fullReplica(aAddress,threeToken,sixToken),fullReplica(aAddress,sixToken,sevenToken))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Range<Token> aPrimeRange = new Range<>(sixToken,sevenToken)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Pair<RangesAtEndpoint,RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current,updated)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return result@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return result@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertContentsIgnoreOrder(result.left,fullReplica(address01,oneToken,threeToken),fullReplica(address01,fourteenToken,oneToken))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Pair<RangesAtEndpoint,RangesAtEndpoint> result = RangeRelocator.calculateStreamAndFetchRanges(current,updated)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "RangesAtEndpoint updated = RangesAtEndpoint.of(new Replica(address01,aPrimeRange,true),new Replica(address01,range_9_11,true),new Replica(address01,range_6_9,false))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertContentsIgnoreOrder(result.left,fullReplica(aAddress,elevenToken,oneToken),transientReplica(aAddress,nineToken,elevenToken))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "calculateStreamAndFetchRangesMoveBackwardBetween['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Range<Token> bPrimeRange = new Range<>(oneToken,sixToken)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "calculateStreamAndFetchRangesMoveForwardBetween['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RangesAtEndpoint updated = RangesAtEndpoint.of(new Replica(aAddress,aPrimeRange,true),new Replica(aAddress,bPrimeRange,true),new Replica(aAddress,eRange,false))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RangesAtEndpoint updated = RangesAtEndpoint.of(new Replica(aAddress,aPrimeRange,true),new Replica(aAddress,dRange,true),new Replica(aAddress,cRange,false))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "Pair<RangesAtEndpoint,RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current,updated)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Range<Token> aPrimeRange = new Range<>(elevenToken,fourteenToken)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
14->16 [style = bold, label=""];
15->13 [style = bold, label=""];
2->0 [style = solid, label="result"];
4->16 [style = dashed, label="0"];
17->1 [style = bold, label=""];
4->6 [style = solid, label="aPrimeRange"];
17->1 [style = solid, label="updated"];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
2->1 [style = bold, label=""];
6->7 [style = dashed, label="0"];
12->17 [style = solid, label="bPrimeRange"];
4->7 [style = solid, label="aPrimeRange"];
9->4 [style = bold, label=""];
12->17 [style = bold, label=""];
18->15 [style = bold, label=""];
1->18 [style = bold, label=""];
1->18 [style = dashed, label="0"];
6->2 [style = solid, label="updated"];
16->17 [style = solid, label="aPrimeRange"];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
6->2 [style = bold, label=""];
11->0 [style = bold, label=""];
10->8 [style = bold, label=""];
5->0 [style = bold, label=""];
5->11 [style = dashed, label="0"];
1->13 [style = solid, label="result"];
7->10 [style = solid, label="updated"];
1->8 [style = dashed, label="0"];
10->0 [style = solid, label="result"];
5->15 [style = dashed, label="0"];
8->11 [style = bold, label=""];
16->12 [style = bold, label=""];
}
