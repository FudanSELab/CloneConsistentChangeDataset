digraph {
12 [style = filled, label = "Assert.assertEquals(3,remoteTaskRunner.getIdleTaskSlotCount())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(task.getId(),result.get().getId())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final ListenableFuture<TaskStatus> result = remoteTaskRunner.run(task)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "cf.delete().guaranteed().forPath(JOINER.join(STATUS_PATH,task.getId()))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.getUsedTaskSlotCount())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testRun['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testWorkerDisabled['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "mockWorkerCompleteSuccessfulTask(task)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(3,remoteTaskRunner.getTotalTaskSlotCount())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(3,remoteTaskRunner.getTotalTaskSlotCount())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(0,remoteTaskRunner.getUsedTaskSlotCount())@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Assert.assertEquals(\"\",Iterables.getOnlyElement(remoteTaskRunner.getWorkers()).getWorker().getVersion())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertTrue(workerRunningTask(task.getId()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRun['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(taskAnnounced(task.getId()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,result.get().getStatusCode())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "mockWorkerRunningTask(task)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ListenableFuture<TaskStatus> result = remoteTaskRunner.run(task)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "disableWorker()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "doSetup()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(3,remoteTaskRunner.getIdleTaskSlotCount())@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertTrue(workerCompletedTask(result))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->4 [style = bold, label=""];
4->16 [style = bold, label=""];
20->4 [style = bold, label=""];
15->4 [style = bold, label=""];
9->2 [style = bold, label=""];
14->13 [style = bold, label=""];
8->5 [style = solid, label="result"];
4->8 [style = bold, label=""];
19->0 [style = bold, label=""];
5->9 [style = bold, label=""];
2->17 [style = bold, label=""];
3->1 [style = bold, label=""];
8->21 [style = dashed, label="0"];
7->3 [style = bold, label=""];
16->12 [style = bold, label=""];
2->18 [style = bold, label=""];
11->8 [style = bold, label=""];
21->7 [style = bold, label=""];
1->19 [style = bold, label=""];
8->7 [style = bold, label=""];
12->11 [style = bold, label=""];
0->5 [style = bold, label=""];
4->21 [style = bold, label=""];
21->5 [style = solid, label="result"];
10->14 [style = bold, label=""];
17->10 [style = bold, label=""];
1->0 [style = bold, label=""];
}
