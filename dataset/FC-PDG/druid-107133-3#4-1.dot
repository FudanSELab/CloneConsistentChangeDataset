digraph {
13 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8de6ce,4)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Iterable<ImmutableBitmap> points = searchTree.search(new RadiusBound(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8de719,5))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Random rand = new Random()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(finalSet.size() >= 3)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RTree tree = new RTree(2,new LinearGutmanSplitStrategy(0,50,bf),bf)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int i = 5@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "BitmapFactory bf = new RoaringBitmapFactory()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testSearchWithSplit3Roaring['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8de6a6,0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "BitmapFactory bf = new ConciseBitmapFactory()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Random rand = ThreadLocalRandom.current()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "IntIterator iter = finalSet.iterator()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ImmutableBitmap finalSet = bf.union(points)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8de6ec,i)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "iter.hasNext()@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8de6c4,3)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSearchWithSplit3['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8de6b0,1)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Set<Integer> expected = Sets.newHashSet(0,1,2)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i < 5000@@@22@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tree.insert(new float((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@8de6ba,2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSearchWithSplit3['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "Assert.assertTrue(expected.contains(iter.next()))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->2 [style = solid, label="i"];
20->13 [style = bold, label=""];
7->17 [style = bold, label=""];
2->0 [style = dotted, label="true"];
5->23 [style = dashed, label="0"];
6->18 [style = bold, label=""];
0->2 [style = bold, label=""];
5->6 [style = solid, label="bf"];
2->15 [style = dotted, label="true"];
3->15 [style = solid, label="i"];
16->17 [style = bold, label=""];
11->19 [style = bold, label=""];
2->10 [style = bold, label=""];
22->5 [style = bold, label=""];
12->21 [style = dashed, label="0"];
4->7 [style = bold, label=""];
1->11 [style = bold, label=""];
3->0 [style = solid, label="i"];
17->16 [style = dotted, label="true"];
0->15 [style = solid, label="i"];
13->12 [style = bold, label=""];
8->20 [style = bold, label=""];
5->6 [style = bold, label=""];
3->2 [style = bold, label=""];
15->0 [style = bold, label=""];
23->6 [style = bold, label=""];
2->15 [style = bold, label=""];
9->5 [style = bold, label=""];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
19->4 [style = bold, label=""];
6->10 [style = solid, label="tree"];
1->11 [style = solid, label="points"];
10->1 [style = bold, label=""];
13->21 [style = bold, label=""];
18->14 [style = bold, label=""];
17->16 [style = bold, label=""];
23->6 [style = solid, label="bf"];
21->3 [style = bold, label=""];
24->23 [style = bold, label=""];
0->2 [style = solid, label="i"];
}
