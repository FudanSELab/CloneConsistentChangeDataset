digraph {
21 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "e.getCause().printStackTrace()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"manyParamDemo\",array)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Class fooClass = loadClass(classNode)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,statement))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Parameter(( parameters = {new Parameter(ClassHelper.OBJECT_TYPE,\"coll1\"),new Parameter(ClassHelper.OBJECT_TYPE,\"coll2\"),new Parameter(ClassHelper.OBJECT_TYPE,\"coll3\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testManyParam['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with many parameters\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "BlockStatement statement = new BlockStatement()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll1\")))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "classNode.addMethod(new MethodNode(\"manyParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,statement))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Object(( array = {new Integer(1000 * 1000),\"foo-\",\"bar~\"}@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "InvokerInvocationException e@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Object bean = fooClass.newInstance()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Class fooClass = loadClass(classNode)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,ClassHelper.OBJECT_TYPE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll3\")))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll2\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "e.getCause().printStackTrace()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Object bean = fooClass.newInstance()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "InvokerInvocationException e@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testNonLoop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testNonLoop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"oneParamDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1614880)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->0 [style = bold, label=""];
14->16 [style = bold, label=""];
4->9 [style = bold, label=""];
6->3 [style = bold, label=""];
2->13 [style = solid, label="value"];
2->21 [style = solid, label="bean"];
23->20 [style = bold, label=""];
0->12 [style = solid, label="fooClass"];
12->33 [style = dashed, label="0"];
17->1 [style = bold, label=""];
15->14 [style = bold, label=""];
5->23 [style = bold, label=""];
23->25 [style = solid, label="statement"];
7->10 [style = bold, label=""];
5->3 [style = solid, label="parameters"];
22->32 [style = solid, label="array"];
6->3 [style = solid, label="statement"];
9->31 [style = bold, label=""];
17->1 [style = dotted, label="true"];
17->4 [style = dotted, label="true"];
0->12 [style = bold, label=""];
26->25 [style = bold, label=""];
11->4 [style = bold, label=""];
20->28 [style = bold, label=""];
21->33 [style = bold, label=""];
30->27 [style = bold, label=""];
27->9 [style = bold, label=""];
6->19 [style = solid, label="statement"];
14->0 [style = solid, label="classNode"];
31->29 [style = bold, label=""];
28->26 [style = bold, label=""];
22->32 [style = bold, label=""];
8->7 [style = solid, label="fooClass"];
6->19 [style = bold, label=""];
19->8 [style = bold, label=""];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
24->14 [style = bold, label=""];
2->13 [style = bold, label=""];
14->8 [style = solid, label="classNode"];
32->29 [style = bold, label=""];
5->25 [style = solid, label="parameters"];
3->19 [style = dashed, label="0"];
13->32 [style = dashed, label="0"];
12->2 [style = bold, label=""];
30->31 [style = dotted, label="true"];
5->6 [style = bold, label=""];
10->0 [style = solid, label="bean"];
10->13 [style = solid, label="bean"];
2->32 [style = solid, label="bean"];
2->21 [style = bold, label=""];
3->8 [style = bold, label=""];
10->0 [style = bold, label=""];
6->23 [style = dashed, label="0"];
30->27 [style = dotted, label="true"];
16->5 [style = bold, label=""];
30->9 [style = dotted, label="true"];
13->9 [style = bold, label=""];
2->22 [style = dashed, label="0"];
18->14 [style = bold, label=""];
33->22 [style = bold, label=""];
5->19 [style = solid, label="parameters"];
17->11 [style = dotted, label="true"];
}
