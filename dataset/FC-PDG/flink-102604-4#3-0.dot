digraph {
77 [style = filled, label = "windowBufferFactory instanceof PreAggregatingHeapWindowBuffer.Factory@@@52@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowBufferFactory,new ReduceWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>(new SumReducer()),ContinuousEventTimeTrigger.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "expectedOutput.add(new Watermark(6999))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",2,closeCalled.get())@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "final int WINDOW_SLIDE = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "expectedOutput.add(new Watermark(1000))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testHarness.open()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "testContinuousWatermarkTrigger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness = new OneInputStreamOperatorTestHarness<>(operator)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testHarness.close()@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 5000))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "operator.setInputType(TypeInfoParser.parse(\"Tuple2<String, Integer>\"),new ExecutionConfig())@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@56@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),initialTime + 1999))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "testSlidingEventTimeWindows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testHarness.open()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),Long.MAX_VALUE))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "operator.setInputType(TypeInfoParser.parse(\"Tuple2<String, Integer>\"),new ExecutionConfig())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),Long.MAX_VALUE))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectedOutput.add(new Watermark(7000))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1998))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),initialTime + 2999))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(\"Close was not called.\",1,closeCalled.get())@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "long initialTime = 0L@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 5999))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 4000))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 7000))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator = new WindowOperator<>(SlidingTimeWindows.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS),Time.of(WINDOW_SLIDE,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowBufferFactory,new ReduceWindowFunction<String,TimeWindow,Tuple2<String,Integer>>(new SumReducer()),EventTimeTrigger.create())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "expectedOutput.add(new Watermark(8000))@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 1999))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "testHarness.close()@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "expectedOutput.add(new Watermark(1999))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 20))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 6999))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 3000))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expectedOutput.add(new Watermark(5000))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expectedOutput.add(new Watermark(6000))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 2000))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),initialTime + 4999))@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 2999))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final int WINDOW_SIZE = 3@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 999))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1000))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),initialTime + 2999))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3000))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "closeCalled.set(0)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 7999))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 4999))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "expectedOutput.add(new Watermark(5999))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedOutput.add(new Watermark(4000))@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\",3),initialTime + 999))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "expectedOutput.add(new Watermark(2999))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 3999))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testContinuousWatermarkTrigger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 1000))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "expectedOutput.add(new Watermark(2000))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "expectedOutput.add(new Watermark(4999))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testHarness.configureForKeyedStream(new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "expectedOutput.add(new Watermark(3000))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 1999))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "expectedOutput.add(new Watermark(3999))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",3),initialTime + 1999))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testHarness.processWatermark(new Watermark(initialTime + 8000))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\",1),initialTime + 999))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),initialTime + 3999))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "expectedOutput.add(new Watermark(7999))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",5),initialTime + 3999))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "expectedOutput.add(new Watermark(999))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "TypeInformation<Tuple2<String,Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),inputType.createSerializer(new ExecutionConfig()))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
82 [style = filled, label = "expectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\",2),initialTime + 5999))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expectedOutput,testHarness.getOutput(),new ResultSortComparator())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator = new WindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new ReduceWindowFunction<String,GlobalWindow,Tuple2<String,Integer>>(),ContinuousEventTimeTrigger.of(Time.of(WINDOW_SIZE,TimeUnit.SECONDS)))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
78->27 [style = bold, label=""];
83->84 [style = bold, label=""];
73->82 [style = bold, label=""];
45->84 [style = solid, label="expectedOutput"];
77->66 [style = dotted, label="true"];
14->25 [style = bold, label=""];
43->35 [style = solid, label="initialTime"];
40->6 [style = bold, label=""];
33->72 [style = solid, label="initialTime"];
33->53 [style = solid, label="initialTime"];
7->30 [style = bold, label=""];
81->83 [style = bold, label=""];
38->47 [style = solid, label="WINDOW_SIZE"];
53->63 [style = bold, label=""];
22->60 [style = dashed, label="0"];
49->47 [style = solid, label="stateDesc"];
1->20 [style = bold, label=""];
75->80 [style = solid, label="WINDOW_SLIDE"];
45->24 [style = solid, label="initialTime"];
33->41 [style = solid, label="initialTime"];
1->20 [style = dotted, label="false"];
33->27 [style = solid, label="expectedOutput"];
43->37 [style = solid, label="initialTime"];
33->17 [style = solid, label="initialTime"];
36->11 [style = bold, label=""];
45->29 [style = solid, label="initialTime"];
33->52 [style = solid, label="initialTime"];
56->54 [style = bold, label=""];
47->33 [style = solid, label="operator"];
1->46 [style = bold, label=""];
22->60 [style = bold, label=""];
33->70 [style = solid, label="initialTime"];
23->73 [style = bold, label=""];
62->6 [style = bold, label=""];
23->52 [style = dashed, label="0"];
57->67 [style = bold, label=""];
82->68 [style = bold, label=""];
33->31 [style = solid, label="initialTime"];
38->7 [style = bold, label=""];
33->73 [style = solid, label="initialTime"];
25->19 [style = bold, label=""];
45->17 [style = solid, label="initialTime"];
43->25 [style = solid, label="initialTime"];
79->61 [style = bold, label=""];
33->45 [style = bold, label=""];
34->32 [style = bold, label=""];
43->16 [style = solid, label="initialTime"];
33->1 [style = solid, label="initialTime"];
13->22 [style = bold, label=""];
27->76 [style = bold, label=""];
43->13 [style = solid, label="initialTime"];
45->4 [style = solid, label="initialTime"];
64->1 [style = bold, label=""];
33->76 [style = solid, label="initialTime"];
55->12 [style = bold, label=""];
45->31 [style = solid, label="initialTime"];
26->36 [style = solid, label="expectedOutput"];
45->23 [style = solid, label="expectedOutput"];
3->54 [style = dashed, label="0"];
15->38 [style = bold, label=""];
48->49 [style = bold, label=""];
6->68 [style = dashed, label="0"];
10->31 [style = bold, label=""];
33->79 [style = solid, label="initialTime"];
33->69 [style = solid, label="initialTime"];
18->15 [style = bold, label=""];
33->0 [style = solid, label="expectedOutput"];
31->70 [style = bold, label=""];
77->74 [style = bold, label=""];
33->59 [style = solid, label="initialTime"];
47->43 [style = bold, label=""];
41->59 [style = bold, label=""];
22->5 [style = bold, label=""];
43->17 [style = solid, label="initialTime"];
45->41 [style = solid, label="initialTime"];
3->53 [style = bold, label=""];
26->19 [style = solid, label="expectedOutput"];
45->10 [style = solid, label="initialTime"];
54->85 [style = bold, label=""];
26->12 [style = solid, label="expectedOutput"];
38->80 [style = solid, label="WINDOW_SIZE"];
26->16 [style = bold, label=""];
29->27 [style = bold, label=""];
45->13 [style = solid, label="initialTime"];
33->57 [style = solid, label="initialTime"];
63->62 [style = bold, label=""];
37->1 [style = dashed, label="0"];
2->69 [style = dashed, label="0"];
33->9 [style = solid, label="expectedOutput"];
17->39 [style = bold, label=""];
52->81 [style = bold, label=""];
12->14 [style = bold, label=""];
80->43 [style = solid, label="operator"];
31->41 [style = bold, label=""];
43->28 [style = solid, label="initialTime"];
5->72 [style = dashed, label="0"];
43->33 [style = bold, label=""];
11->8 [style = bold, label=""];
58->15 [style = bold, label=""];
45->6 [style = solid, label="initialTime"];
30->44 [style = bold, label=""];
21->4 [style = bold, label=""];
72->55 [style = bold, label=""];
45->14 [style = solid, label="initialTime"];
1->52 [style = bold, label=""];
45->12 [style = solid, label="expectedOutput"];
61->65 [style = bold, label=""];
39->13 [style = bold, label=""];
43->10 [style = solid, label="initialTime"];
19->29 [style = bold, label=""];
45->21 [style = solid, label="initialTime"];
36->63 [style = dashed, label="0"];
8->3 [style = bold, label=""];
6->42 [style = bold, label=""];
40->82 [style = dashed, label="0"];
45->6 [style = solid, label="expectedOutput"];
67->78 [style = bold, label=""];
33->34 [style = solid, label="expectedOutput"];
38->48 [style = bold, label=""];
43->41 [style = solid, label="initialTime"];
26->40 [style = solid, label="expectedOutput"];
33->14 [style = solid, label="expectedOutput"];
38->7 [style = solid, label="WINDOW_SIZE"];
33->61 [style = solid, label="initialTime"];
27->35 [style = bold, label=""];
42->0 [style = bold, label=""];
29->61 [style = dashed, label="0"];
80->44 [style = bold, label=""];
1->46 [style = dotted, label="true"];
9->28 [style = bold, label=""];
3->9 [style = bold, label=""];
77->66 [style = bold, label=""];
12->69 [style = bold, label=""];
26->1 [style = solid, label="expectedOutput"];
26->31 [style = bold, label=""];
45->27 [style = solid, label="expectedOutput"];
7->44 [style = solid, label="operator"];
6->56 [style = bold, label=""];
25->76 [style = dashed, label="0"];
51->45 [style = bold, label=""];
60->72 [style = bold, label=""];
43->26 [style = solid, label="initialTime"];
4->83 [style = dashed, label="0"];
5->24 [style = bold, label=""];
32->1 [style = bold, label=""];
84->71 [style = bold, label=""];
45->11 [style = solid, label="initialTime"];
33->63 [style = solid, label="initialTime"];
43->2 [style = solid, label="initialTime"];
50->15 [style = bold, label=""];
85->23 [style = bold, label=""];
45->5 [style = solid, label="initialTime"];
4->34 [style = bold, label=""];
33->54 [style = solid, label="initialTime"];
38->75 [style = bold, label=""];
59->17 [style = bold, label=""];
68->64 [style = bold, label=""];
28->73 [style = dashed, label="0"];
75->80 [style = bold, label=""];
45->64 [style = solid, label="expectedOutput"];
65->3 [style = bold, label=""];
33->24 [style = solid, label="expectedOutput"];
28->40 [style = bold, label=""];
0->37 [style = bold, label=""];
24->2 [style = bold, label=""];
16->10 [style = bold, label=""];
33->11 [style = solid, label="expectedOutput"];
12->57 [style = dashed, label="0"];
43->8 [style = solid, label="initialTime"];
69->57 [style = bold, label=""];
26->23 [style = solid, label="expectedOutput"];
43->39 [style = solid, label="initialTime"];
43->31 [style = solid, label="initialTime"];
19->79 [style = dashed, label="0"];
37->23 [style = bold, label=""];
43->22 [style = solid, label="initialTime"];
44->43 [style = bold, label=""];
2->12 [style = bold, label=""];
33->60 [style = solid, label="initialTime"];
33->56 [style = solid, label="initialTime"];
49->47 [style = bold, label=""];
26->3 [style = solid, label="expectedOutput"];
43->23 [style = solid, label="initialTime"];
33->39 [style = solid, label="initialTime"];
8->56 [style = dashed, label="0"];
41->17 [style = bold, label=""];
70->41 [style = bold, label=""];
33->51 [style = bold, label=""];
71->77 [style = bold, label=""];
23->21 [style = bold, label=""];
77->74 [style = dotted, label="false"];
33->67 [style = solid, label="initialTime"];
33->13 [style = solid, label="initialTime"];
45->26 [style = bold, label=""];
76->79 [style = bold, label=""];
33->82 [style = solid, label="initialTime"];
35->36 [style = bold, label=""];
45->39 [style = solid, label="initialTime"];
45->22 [style = solid, label="initialTime"];
45->9 [style = solid, label="initialTime"];
33->22 [style = solid, label="initialTime"];
45->3 [style = solid, label="expectedOutput"];
21->81 [style = dashed, label="0"];
35->53 [style = dashed, label="0"];
}
