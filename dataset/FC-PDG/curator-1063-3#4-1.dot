digraph {
33 [style = filled, label = "Assert.assertNotNull(results)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(client.checkExists().forPath(\"/foo\") != null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "CuratorOp deleteOp = client.transactionOp().delete().forPath(\"/foo/bar\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNotNull(ephemeralResult)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testWithNamespace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testBackgroundWithNamespace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "Assert.assertNotNull(ephemeralResult)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "CuratorOp createOp1 = client.transactionOp().create().forPath(\"/foo\",\"one\".getBytes())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertNotEquals(ephemeralResult.getResultPath(),\"/test-\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(\"galt\").build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(client.usingNamespace(null).checkExists().forPath(\"/galt/foo\") != null)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Collection<CuratorTransactionResult> results = queue.poll(5,TimeUnit.SECONDS)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "CuratorOp createOp3 = client.transactionOp().create().forPath(\"/foo/bar\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(client.getData().forPath(\"/foo\"),\"two\".getBytes())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertArrayEquals(client.getData().forPath(\"/foo\"),\"two\".getBytes())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "CuratorOp createOp2 = client.transactionOp().create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\",\"one\".getBytes())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CuratorTransactionResult ephemeralResult = Iterables.find(results,CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE,\"/test-\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "CuratorTransactionResult ephemeralResult = Iterables.find(results,CuratorTransactionResult.ofTypeAndPath(OperationType.CREATE,\"/test-\"))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertNotNull(ephemeralResult)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "CuratorOp setDataOp = client.transactionOp().setData().forPath(\"/foo\",\"two\".getBytes())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){queue.add(event.getOpResults())}}@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(client.checkExists().forPath(\"/foo/bar\") == null)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "Assert.assertEquals(client.getData().forPath(\"/foo\"),\"two\".getBytes())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertNotEquals(ephemeralResult.getResultPath(),\"/test-\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "client.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertNotEquals(ephemeralResult.getResultPath(),\"/test-\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertTrue(client.checkExists().forPath(\"/foo\") != null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "final BlockingQueue<List<CuratorTransactionResult>> queue = Queues.newLinkedBlockingQueue()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testWithNamespace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(client.checkExists().forPath(\"/foo/bar\") == null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "client.transaction().inBackground(callback).forOperations(createOp1,createOp2,setDataOp,createOp3,deleteOp)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Collection<CuratorTransactionResult> results = client.inTransaction().create().forPath(\"/foo\",\"one\".getBytes()).and().create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(\"/test-\",\"one\".getBytes()).and().setData().forPath(\"/foo\",\"two\".getBytes()).and().create().forPath(\"/foo/bar\").and().delete().forPath(\"/foo/bar\").and().commit()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(ephemeralResult.getResultPath().startsWith(\"/test-\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2->17 [style = bold, label=""];
28->30 [style = solid, label="createOp2"];
22->30 [style = solid, label="createOp3"];
32->23 [style = bold, label=""];
31->22 [style = bold, label=""];
9->0 [style = bold, label=""];
34->40 [style = bold, label=""];
37->38 [style = solid, label="ephemeralResult"];
1->14 [style = dashed, label="0"];
28->31 [style = bold, label=""];
31->30 [style = solid, label="setDataOp"];
30->27 [style = bold, label=""];
0->16 [style = dashed, label="0"];
1->3 [style = bold, label=""];
22->29 [style = bold, label=""];
14->19 [style = bold, label=""];
5->14 [style = solid, label="ephemeralResult"];
8->6 [style = bold, label=""];
11->17 [style = dashed, label="0"];
3->12 [style = bold, label=""];
5->14 [style = bold, label=""];
11->9 [style = bold, label=""];
6->36 [style = solid, label="client"];
13->16 [style = bold, label=""];
21->28 [style = bold, label=""];
20->5 [style = bold, label=""];
26->30 [style = bold, label=""];
5->1 [style = solid, label="ephemeralResult"];
3->19 [style = dashed, label="0"];
29->30 [style = solid, label="deleteOp"];
5->1 [style = bold, label=""];
0->10 [style = bold, label=""];
10->5 [style = bold, label=""];
12->4 [style = bold, label=""];
6->4 [style = solid, label="client"];
18->6 [style = bold, label=""];
25->37 [style = bold, label=""];
40->36 [style = bold, label=""];
7->2 [style = bold, label=""];
37->38 [style = bold, label=""];
27->33 [style = solid, label="results"];
15->4 [style = bold, label=""];
38->34 [style = bold, label=""];
21->30 [style = solid, label="createOp1"];
23->39 [style = bold, label=""];
9->13 [style = dashed, label="0"];
7->21 [style = bold, label=""];
12->15 [style = dashed, label="0"];
33->32 [style = bold, label=""];
10->20 [style = dashed, label="0"];
17->13 [style = bold, label=""];
27->33 [style = bold, label=""];
29->35 [style = bold, label=""];
39->25 [style = bold, label=""];
19->15 [style = bold, label=""];
6->7 [style = bold, label=""];
24->6 [style = bold, label=""];
16->20 [style = bold, label=""];
35->26 [style = bold, label=""];
2->5 [style = solid, label="results"];
2->11 [style = bold, label=""];
27->37 [style = solid, label="results"];
}
