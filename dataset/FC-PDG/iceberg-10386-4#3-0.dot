digraph {
0 [style = filled, label = "TestHelpers.assertEquals(DATA_FILE,(DataFile)obj)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assertions.assertThat(obj).as(\"Should be a DataFile\").isInstanceOf()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "ManifestFile manifest = writeManifest(FILE_A,FILE_B)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "out.writeObject(EQ_DELETE_FILE)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assertions.assertThat(obj).as(\"Should be a equality DeleteFile\").isInstanceOf()@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "Assert.assertTrue(\"Should be a ManifestFile\",obj instanceof ManifestFile)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Object obj = in.readObject()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Object obj = in.readObject()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i += 1@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i += 1@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = 0@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "out.writeObject(DATA_FILE)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "out.writeObject(DATA_FILE.copy())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "out.writeObject(GenericManifestFile.copyOf(manifest).build())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "out.writeObject(manifest.copy())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i < 2@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "out.writeObject(EQ_DELETE_FILE.copy())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestHelpers.assertEquals(POS_DELETE_FILE,(DeleteFile)obj)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(\"Should be a equality DeleteFile\",obj instanceof DeleteFile)@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
35 [style = filled, label = "testManifestFileJavaSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Object obj = in.readObject()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "i += 1@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "i < 3@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "int i = 0@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "i < 2@@@28@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteArrayOutputStream bytes = new ByteArrayOutputStream()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "TestHelpers.assertEquals(EQ_DELETE_FILE,(DeleteFile)obj)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(\"Should be a DataFile\",obj instanceof DataFile)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Object obj = in.readObject()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "i < 2@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testJavaSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Assertions.assertThat(obj).as(\"Should be a position DeleteFile\").isInstanceOf()@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "checkManifestFile(manifest,(ManifestFile)obj)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "out.writeObject(POS_DELETE_FILE.copy())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "out.writeObject(POS_DELETE_FILE)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "out.writeObject(manifest)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testJavaSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(\"Should be a position DeleteFile\",obj instanceof DeleteFile)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9->36 [style = dashed, label="0"];
33->36 [style = solid, label="manifest"];
8->16 [style = bold, label=""];
38->34 [style = solid, label="i"];
13->28 [style = dotted, label="true"];
11->1 [style = dotted, label="true"];
23->22 [style = solid, label="i"];
13->5 [style = dotted, label="true"];
32->34 [style = bold, label=""];
22->34 [style = dashed, label="0"];
24->22 [style = solid, label="i"];
21->28 [style = bold, label=""];
34->23 [style = dotted, label="true"];
17->28 [style = dashed, label="0"];
23->22 [style = bold, label=""];
34->24 [style = bold, label=""];
19->30 [style = dashed, label="0"];
13->21 [style = dotted, label="true"];
6->26 [style = dashed, label="0"];
14->9 [style = bold, label=""];
4->1 [style = solid, label="obj"];
12->0 [style = solid, label="obj"];
19->3 [style = bold, label=""];
10->11 [style = bold, label=""];
11->7 [style = dotted, label="true"];
22->25 [style = bold, label=""];
13->17 [style = dotted, label="true"];
17->5 [style = bold, label=""];
28->5 [style = bold, label=""];
22->23 [style = dotted, label="true"];
24->31 [style = solid, label="obj"];
11->10 [style = dotted, label="true"];
22->0 [style = dotted, label="true"];
0->23 [style = dashed, label="0"];
6->31 [style = dashed, label="0"];
24->23 [style = solid, label="obj"];
10->11 [style = solid, label="i"];
26->0 [style = bold, label=""];
25->11 [style = solid, label="i"];
34->31 [style = dotted, label="true"];
0->23 [style = bold, label=""];
33->36 [style = bold, label=""];
36->37 [style = bold, label=""];
4->7 [style = solid, label="obj"];
21->5 [style = solid, label="obj"];
20->13 [style = bold, label=""];
34->24 [style = dotted, label="true"];
27->14 [style = bold, label=""];
37->30 [style = bold, label=""];
16->24 [style = bold, label=""];
11->29 [style = dotted, label="true"];
11->4 [style = bold, label=""];
23->32 [style = bold, label=""];
2->13 [style = solid, label="i"];
4->29 [style = bold, label=""];
11->4 [style = dotted, label="true"];
15->19 [style = bold, label=""];
1->7 [style = bold, label=""];
35->14 [style = bold, label=""];
33->23 [style = solid, label="manifest"];
20->13 [style = solid, label="i"];
21->17 [style = solid, label="obj"];
13->2 [style = dotted, label="true"];
24->31 [style = bold, label=""];
22->26 [style = dotted, label="true"];
3->8 [style = bold, label=""];
38->34 [style = bold, label=""];
4->1 [style = bold, label=""];
32->34 [style = solid, label="i"];
34->32 [style = dotted, label="true"];
11->20 [style = bold, label=""];
30->38 [style = bold, label=""];
31->23 [style = bold, label=""];
7->10 [style = bold, label=""];
15->37 [style = dashed, label="0"];
1->29 [style = dashed, label="0"];
6->0 [style = bold, label=""];
12->26 [style = bold, label=""];
22->6 [style = dotted, label="true"];
24->22 [style = bold, label=""];
12->6 [style = bold, label=""];
14->33 [style = bold, label=""];
22->12 [style = dotted, label="true"];
2->13 [style = bold, label=""];
5->2 [style = bold, label=""];
25->11 [style = bold, label=""];
9->15 [style = bold, label=""];
22->12 [style = bold, label=""];
29->7 [style = bold, label=""];
13->21 [style = bold, label=""];
21->17 [style = bold, label=""];
18->14 [style = bold, label=""];
12->6 [style = solid, label="obj"];
}
