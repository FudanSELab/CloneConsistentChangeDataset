digraph {
8 [style = filled, label = "Assert.assertTrue(factory.start())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "EasyMock.expect(cacheManager.createCache()).andReturn(cacheHandler).once()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "expectedException.expectMessage(\"Cannot set kafka property (group.id(. Property is randomly generated for you. Found\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final KafkaLookupExtractorFactory factory = new KafkaLookupExtractorFactory(cacheManager,TOPIC,ImmutableMap.of())@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "cacheHandler.close()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "PowerMock.verify(cacheManager)@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "PowerMock.verify(cacheManager)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertTrue(factory.close())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "final KafkaLookupExtractorFactory factory = new KafkaLookupExtractorFactory(cacheManager,TOPIC,ImmutableMap.of(\"group.id\",\"make me fail\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertTrue(factory.close())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testStartFailsOnMissingConnect['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedException.expectMessage(\"bootstrap.servers required property\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "EasyMock.expect(cacheHandler.getCache()).andReturn(new ConcurrentHashMap<>()).once()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expectedException.expectMessage(\"zookeeper.connect required property\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testStartFailsOnMissingConnect['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertTrue(factory.start())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PowerMock.replay(cacheManager)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testStartFailsOnGroupID['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
16->0 [style = bold, label=""];
4->6 [style = bold, label=""];
2->1 [style = bold, label=""];
1->15 [style = dashed, label="0"];
6->0 [style = bold, label=""];
10->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
6->16 [style = dashed, label="0"];
3->8 [style = bold, label=""];
11->13 [style = bold, label=""];
12->14 [style = bold, label=""];
15->4 [style = bold, label=""];
17->15 [style = bold, label=""];
13->9 [style = bold, label=""];
9->12 [style = bold, label=""];
4->16 [style = bold, label=""];
0->5 [style = bold, label=""];
14->5 [style = bold, label=""];
}
