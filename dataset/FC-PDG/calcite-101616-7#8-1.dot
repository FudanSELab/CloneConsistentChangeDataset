digraph {
11 [style = filled, label = "g.addEdge(\"A\",\"B\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "g.addEdge(\"B\",\"D\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "g.addEdge(\"C\",\"D\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertThat(g.addEdge(\"A\",\"B\",2),notNullValue())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(\"((A, B, D(, (A, B, C, D((\",paths(g,\"A\",\"D\").toString())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"(A, B, C, D(\",shortestPath(g,\"A\",\"D\").toString())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "g.addVertex(\"E\")@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "g.addEdge(\"D\",\"C\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"((\",shortestPath(g,\"D\",\"D\").toString())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testOne['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "g.addEdge(\"E\",\"F\",1)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "g.addVertex(\"C\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(g.addVertex(\"B\"),is(false))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertThat(g.addEdge(\"A\",\"B\",1),nullValue())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "g.addEdge(\"C\",\"D\",1)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "g.addEdge(\"C\",\"C\",1)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "g.addEdge(\"C\",\"C\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertNull(shortestPath(g,\"A\",\"E\"),\"There is no path from A to E\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"(A, B, D(\",shortestPath(g,\"A\",\"D\").toString())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "g.addEdge(\"D\",\"C\",1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(\"((A, B, C, D(, (A, B, D((\",paths(g,\"A\",\"D\").toString())@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNull(shortestPath(g,\"X\",\"A\"),\"Node X is not in the graph\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testOne['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "DirectedGraph<String,DefaultEdge> g = DefaultDirectedGraph.create()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "g.addEdge(\"E\",\"F\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "g.addEdge(\"B\",\"C\",1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "g.addVertex(\"F\")@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "g.addVertex(\"A\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "g.addEdge(\"B\",\"C\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "AttributedDirectedGraph<String,DefaultEdge> g = AttributedDirectedGraph.create(new DefaultAttributedEdgeFactory())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testAttributed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "g.addEdge(\"A\",\"B\",1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "g.addVertex(\"B\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"(D(\",shortestPath(g,\"D\",\"D\").toString())@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "g.addEdge(\"B\",\"D\",1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "g.addVertex(\"D\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(Iterables.size(g.getEdges(\"A\",\"B\")),is(1))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(Iterables.size(g.getEdges(\"A\",\"B\")),is(1))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(Iterables.size(g.getEdges(\"A\",\"B\")),is(2))@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
2->20 [style = bold, label=""];
37->28 [style = bold, label=""];
15->7 [style = bold, label=""];
3->1 [style = bold, label=""];
8->23 [style = bold, label=""];
17->6 [style = bold, label=""];
16->27 [style = dashed, label="0"];
17->24 [style = dashed, label="0"];
35->32 [style = bold, label=""];
32->14 [style = bold, label=""];
31->38 [style = bold, label=""];
32->8 [style = solid, label="g"];
4->22 [style = dashed, label="0"];
16->17 [style = bold, label=""];
25->29 [style = bold, label=""];
29->34 [style = bold, label=""];
11->19 [style = bold, label=""];
1->32 [style = dashed, label="0"];
6->36 [style = bold, label=""];
36->20 [style = bold, label=""];
34->30 [style = bold, label=""];
33->26 [style = bold, label=""];
6->2 [style = bold, label=""];
26->27 [style = bold, label=""];
20->8 [style = bold, label=""];
19->38 [style = dashed, label="0"];
9->18 [style = bold, label=""];
2->36 [style = dashed, label="0"];
5->31 [style = bold, label=""];
12->4 [style = bold, label=""];
4->37 [style = bold, label=""];
11->31 [style = dashed, label="0"];
10->12 [style = bold, label=""];
21->1 [style = bold, label=""];
7->16 [style = bold, label=""];
32->12 [style = solid, label="g"];
15->33 [style = dashed, label="0"];
18->13 [style = bold, label=""];
1->12 [style = solid, label="g"];
28->25 [style = bold, label=""];
13->0 [style = bold, label=""];
14->9 [style = bold, label=""];
1->14 [style = bold, label=""];
5->11 [style = bold, label=""];
23->12 [style = bold, label=""];
27->24 [style = bold, label=""];
19->15 [style = bold, label=""];
7->26 [style = dashed, label="0"];
38->33 [style = bold, label=""];
24->6 [style = bold, label=""];
10->23 [style = dashed, label="0"];
12->22 [style = bold, label=""];
0->5 [style = bold, label=""];
1->8 [style = solid, label="g"];
}
