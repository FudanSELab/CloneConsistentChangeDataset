digraph {
17 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,4))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,4))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,4))@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "fail(\"expected error, got \" + x)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final ImmutableBitSet groupSet = ImmutableBitSet.of(1,2,4,5)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "groupSets = ImmutableBitSet.ORDERING.sortedCopy(groupSet.powerSet())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "{}@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "groupSets = new ArrayList<>()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "groupSets = Lists.newArrayList()@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "groupSets = Lists.newArrayList()@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "groupSets = new ArrayList<>()@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertEquals(Aggregate.Group.SIMPLE,Aggregate.Group.induce(groupSet,groupSets))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Aggregate.Group.ROLLUP,Aggregate.Group.induce(groupSet,groupSets))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "testInduceGroupingType0['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,4,5))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "groupSets = new ArrayList<>()@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "List<ImmutableBitSet> groupSets = new ArrayList<>()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "groupSets = Lists.newArrayList()@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final Aggregate.Group x = Aggregate.Group.induce(groupSet,groupSets)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(Aggregate.Group.CUBE,Aggregate.Group.induce(groupSet,groupSets))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "groupSets = Lists.newArrayList()@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "groupSets = ImmutableBitSet.ORDERING.sortedCopy(groupSets)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "{}@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@46@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "groupSets = new ArrayList<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "IllegalArgumentException ignore@@@38@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,4,5))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testInduceGroupingType['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertEquals(Aggregate.Group.OTHER,Aggregate.Group.induce(groupSet,groupSets))@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "groupSets = Lists.newArrayList()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "groupSets.add(groupSet)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,4,5))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "groupSets.add(ImmutableBitSet.of())@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,5))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "groupSets = new ArrayList<>()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "groupSets = new ArrayList<>()@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testInduceGroupingType['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "groupSets = Lists.newArrayList()@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "groupSets.add(ImmutableBitSet.of(1,2,4))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final ImmutableBitSet groupSet = ImmutableBitSet.of()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<ImmutableBitSet> groupSets = Lists.newArrayList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->10 [style = solid, label="groupSets"];
27->13 [style = bold, label=""];
27->7 [style = solid, label="groupSets"];
42->41 [style = bold, label=""];
6->35 [style = bold, label=""];
32->23 [style = bold, label=""];
48->29 [style = bold, label=""];
43->41 [style = solid, label="groupSets"];
29->52 [style = dashed, label="0"];
20->27 [style = bold, label=""];
8->0 [style = bold, label=""];
12->14 [style = solid, label="groupSets"];
1->28 [style = bold, label=""];
29->41 [style = solid, label="groupSet"];
10->12 [style = bold, label=""];
29->46 [style = bold, label=""];
47->26 [style = bold, label=""];
28->25 [style = bold, label=""];
30->14 [style = bold, label=""];
43->0 [style = bold, label=""];
25->10 [style = bold, label=""];
29->20 [style = solid, label="groupSet"];
43->23 [style = solid, label="groupSets"];
2->24 [style = bold, label=""];
9->38 [style = bold, label=""];
16->28 [style = solid, label="groupSets"];
50->15 [style = solid, label="groupSets"];
45->20 [style = solid, label="groupSets"];
49->14 [style = solid, label="groupSets"];
5->29 [style = bold, label=""];
22->33 [style = bold, label=""];
35->49 [style = dashed, label="0"];
33->15 [style = bold, label=""];
53->52 [style = bold, label=""];
6->49 [style = bold, label=""];
52->1 [style = solid, label="groupSet"];
8->43 [style = dashed, label="0"];
24->20 [style = bold, label=""];
29->28 [style = solid, label="groupSet"];
24->45 [style = dashed, label="0"];
12->47 [style = dashed, label="0"];
44->32 [style = bold, label=""];
12->14 [style = bold, label=""];
8->23 [style = solid, label="groupSets"];
14->18 [style = bold, label=""];
46->28 [style = solid, label="groupSets"];
51->7 [style = solid, label="groupSets"];
52->28 [style = solid, label="groupSet"];
52->14 [style = solid, label="groupSet"];
19->22 [style = bold, label=""];
29->16 [style = bold, label=""];
32->31 [style = bold, label=""];
21->4 [style = bold, label=""];
29->7 [style = solid, label="groupSet"];
4->17 [style = bold, label=""];
17->6 [style = bold, label=""];
35->9 [style = bold, label=""];
26->3 [style = bold, label=""];
12->6 [style = solid, label="groupSets"];
45->20 [style = bold, label=""];
28->12 [style = bold, label=""];
51->13 [style = bold, label=""];
47->6 [style = solid, label="groupSets"];
52->16 [style = bold, label=""];
35->14 [style = solid, label="groupSets"];
16->1 [style = bold, label=""];
15->43 [style = bold, label=""];
20->51 [style = bold, label=""];
27->51 [style = dashed, label="0"];
14->50 [style = bold, label=""];
2->45 [style = bold, label=""];
3->21 [style = bold, label=""];
40->30 [style = bold, label=""];
34->23 [style = bold, label=""];
8->41 [style = solid, label="groupSets"];
23->2 [style = bold, label=""];
38->40 [style = bold, label=""];
41->34 [style = bold, label=""];
15->8 [style = bold, label=""];
37->39 [style = bold, label=""];
24->20 [style = solid, label="groupSets"];
29->10 [style = solid, label="groupSet"];
36->19 [style = bold, label=""];
29->14 [style = solid, label="groupSet"];
31->23 [style = bold, label=""];
0->37 [style = bold, label=""];
41->34 [style = solid, label="x"];
29->6 [style = solid, label="groupSet"];
18->36 [style = bold, label=""];
12->26 [style = bold, label=""];
11->42 [style = bold, label=""];
39->11 [style = bold, label=""];
29->15 [style = solid, label="groupSet"];
29->1 [style = solid, label="groupSet"];
16->46 [style = dashed, label="0"];
29->2 [style = solid, label="groupSet"];
18->50 [style = dashed, label="0"];
46->1 [style = bold, label=""];
23->2 [style = solid, label="groupSets"];
13->7 [style = bold, label=""];
50->36 [style = bold, label=""];
10->47 [style = bold, label=""];
18->15 [style = solid, label="groupSets"];
49->9 [style = bold, label=""];
}
