digraph {
33 [style = filled, label = "KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER),ImmutableSet.of()))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "supervisor.resetInternal(resetMetadata)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.replay(indexerMetadataStorageCoordinator)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "supervisor.runInternal()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.replay(indexerMetadataStorageCoordinator)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER),ImmutableSet.of()))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(captureDataSourceMetadata.getValue(),expectedMetadata)@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testResetDataSourceMetadata['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "verifyAll()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.reset(indexerMetadataStorageCoordinator)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "verifyAll()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "supervisor = getTestableSupervisor(1,1,true,\"PT1H\",null,null)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testResetNoDataSourceMetadata['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "NullPointerException npe@@@26@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "replayAll()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertNull(npe.getCause())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(EasyMock.capture(captureDataSource),EasyMock.capture(captureDataSourceMetadata))).andReturn(true)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(kinesisDataSourceMetadata)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER),ImmutableSet.of()))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verifyAll()@@@19@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "supervisor.resetInternal(resetMetadata)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(STREAM,ImmutableMap.of(SHARD_ID1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,SHARD_ID0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER),ImmutableSet.of()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject())).andReturn(Collections.emptySet()).anyTimes()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Capture<String> captureDataSource = EasyMock.newCapture()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testResetDataSourceMetadata['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "supervisor.start()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(captureDataSource.getValue(),DATASOURCE)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->18 [style = bold, label=""];
8->33 [style = bold, label=""];
19->34 [style = bold, label=""];
6->26 [style = bold, label=""];
4->24 [style = bold, label=""];
22->11 [style = solid, label="kinesisDataSourceMetadata"];
23->5 [style = bold, label=""];
17->1 [style = bold, label=""];
13->16 [style = solid, label="expectedMetadata"];
23->27 [style = dashed, label="0"];
29->30 [style = bold, label=""];
23->34 [style = dashed, label="0"];
0->19 [style = bold, label=""];
3->25 [style = bold, label=""];
34->5 [style = bold, label=""];
17->1 [style = dotted, label="true"];
11->29 [style = dashed, label="0"];
31->29 [style = bold, label=""];
9->20 [style = bold, label=""];
24->22 [style = bold, label=""];
35->14 [style = bold, label=""];
21->2 [style = bold, label=""];
26->21 [style = bold, label=""];
20->10 [style = bold, label=""];
7->9 [style = bold, label=""];
12->13 [style = bold, label=""];
30->35 [style = bold, label=""];
5->6 [style = bold, label=""];
22->12 [style = bold, label=""];
19->23 [style = bold, label=""];
15->0 [style = bold, label=""];
19->27 [style = bold, label=""];
32->25 [style = bold, label=""];
12->20 [style = solid, label="resetMetadata"];
25->15 [style = bold, label=""];
28->25 [style = bold, label=""];
33->31 [style = bold, label=""];
8->4 [style = bold, label=""];
27->5 [style = bold, label=""];
33->35 [style = solid, label="resetMetadata"];
1->10 [style = bold, label=""];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
11->7 [style = bold, label=""];
2->8 [style = bold, label=""];
18->16 [style = bold, label=""];
}
