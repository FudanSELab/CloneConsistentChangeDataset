digraph {
8 [style = filled, label = "f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "buildRule.executeTarget(\"testSimpleScale\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "AntAssert.assertContains(\"Processing File\",buildRule.getLog())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testOverwriteFalse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "long lastModified = f.lastModified()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Thread.sleep(FILE_UTILS.getFileTimestampGranularity())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "File f = new File(getOutputDir(),LARGEIMAGE)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "AntAssert.assertContains(\"Processing File\",buildRule.getLog())@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "InterruptedException e@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "expectLogContaining(\"testOverwriteTrue\",\"Processing File\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "{}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "f = new File(getOutputDir(),LARGEIMAGE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "f = new File(getOutputDir(),LARGEIMAGE)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(\"File was overwritten.\",lastModified == overwrittenLastModified)@@@9@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(\"File was overwritten.\",lastModified == overwrittenLastModified)@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "expectLogContaining(\"testSimpleScale\",\"Processing File\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testOverwriteTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(\"File was not overwritten.\",lastModified < overwrittenLastModified)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "long lastModified = f.lastModified()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "File f = new File(buildRule.getOutputDir(),LARGEIMAGE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testOverwriteFalse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "buildRule.executeTarget(\"testOverwriteFalse\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "long overwrittenLastModified = f.lastModified()@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6->0 [style = solid, label="lastModified"];
13->10 [style = bold, label=""];
8->16 [style = bold, label=""];
10->15 [style = bold, label=""];
9->4 [style = bold, label=""];
16->14 [style = solid, label="overwrittenLastModified"];
6->24 [style = bold, label=""];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
4->2 [style = bold, label=""];
19->21 [style = solid, label="overwrittenLastModified"];
17->23 [style = bold, label=""];
20->22 [style = bold, label=""];
6->4 [style = bold, label=""];
5->1 [style = bold, label=""];
4->14 [style = solid, label="lastModified"];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
5->10 [style = dashed, label="0"];
6->19 [style = solid, label="lastModified"];
15->9 [style = bold, label=""];
12->8 [style = bold, label=""];
0->21 [style = dashed, label="0"];
18->5 [style = bold, label=""];
23->19 [style = bold, label=""];
6->7 [style = solid, label="lastModified"];
24->17 [style = bold, label=""];
22->17 [style = bold, label=""];
16->14 [style = bold, label=""];
7->0 [style = solid, label="overwrittenLastModified"];
2->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
4->11 [style = bold, label=""];
4->16 [style = solid, label="lastModified"];
6->21 [style = solid, label="lastModified"];
19->21 [style = bold, label=""];
}
