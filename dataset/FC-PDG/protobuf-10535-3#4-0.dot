digraph {
6 [style = filled, label = "LazyFieldLite field1 = createLazyFieldLiteFromMessage(message1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testMergeBeforeParsing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testMergeBeforeParsing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "LazyFieldLite field2 = createLazyFieldLiteFromMessage(message2)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(expected,field1.getValue(TestAllTypes.getDefaultInstance()))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "TestAllTypes expected = TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalInt64(2).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(expected,field1.getValue(TestAllTypes.getDefaultInstance()))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestAllTypes expected = TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalInt64(2).build()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestAllTypes message1 = TestAllTypes.newBuilder().setOptionalInt32(1).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "field1.merge(field2)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "field2.getValue(TestAllTypes.getDefaultInstance())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "field2 = createLazyFieldLiteFromMessage(message2)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TestAllTypes message2 = TestAllTypes.newBuilder().setOptionalInt64(2).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "field1 = LazyFieldLite.fromValue(message1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testMergeOneNotParsed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "LazyFieldLite field1 = LazyFieldLite.fromValue(message1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "field1.merge(field2)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "field1.getValue(TestAllTypes.getDefaultInstance())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(field1.getValue(TestAllTypes.getDefaultInstance())).isEqualTo(expected)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
14->17 [style = bold, label=""];
3->6 [style = solid, label="message1"];
2->7 [style = bold, label=""];
6->0 [style = bold, label=""];
1->8 [style = bold, label=""];
9->3 [style = bold, label=""];
0->13 [style = bold, label=""];
0->14 [style = solid, label="message2"];
1->5 [style = solid, label="expected"];
3->6 [style = bold, label=""];
12->16 [style = bold, label=""];
16->2 [style = bold, label=""];
1->8 [style = solid, label="expected"];
13->10 [style = solid, label="expected"];
5->8 [style = dashed, label="0"];
13->12 [style = bold, label=""];
11->10 [style = bold, label=""];
3->0 [style = bold, label=""];
13->5 [style = solid, label="expected"];
5->18 [style = bold, label=""];
17->11 [style = bold, label=""];
15->3 [style = bold, label=""];
7->5 [style = bold, label=""];
7->1 [style = bold, label=""];
0->2 [style = bold, label=""];
14->11 [style = solid, label="field2"];
18->14 [style = bold, label=""];
3->12 [style = solid, label="message1"];
4->3 [style = bold, label=""];
3->18 [style = solid, label="message1"];
2->7 [style = solid, label="field2"];
0->2 [style = solid, label="message2"];
1->5 [style = bold, label=""];
}
