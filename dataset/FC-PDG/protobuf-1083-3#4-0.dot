digraph {
5 [style = filled, label = "assertTrue(builder.isInitialized())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertFalse(builder.buildPartial().isInitialized())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertFalse(builder.isInitialized())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(builder.isInitialized()).isTrue()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(builder.isInitialized()).isFalse()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isTrue()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "UnittestProto.TestRequired.Builder proto2Builder = builder.getOptionalProto2MessageBuilder()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(builder.buildPartial().isInitialized())@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "TestAllTypes.Builder builder = TestAllTypes.newBuilder()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(builder.buildPartial().isInitialized())@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "builder.setExtension(TestOptimizedForSize.testExtension2,TestRequiredOptimizedForSize.newBuilder().buildPartial())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "builder = TestOptimizedForSize.newBuilder()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isTrue()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertThat(builder.isInitialized()).isTrue()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(builder.isInitialized()).isFalse()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertTrue(builder.buildPartial().isInitialized())@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(builder.isInitialized())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isFalse()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isFalse()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "proto2Builder = builder.addRepeatedProto2MessageBuilder()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "proto2Builder.setA(1).setB(2).setC(3)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(builder.isInitialized())@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isTrue()@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "proto2Builder.setA(1).setB(2).setC(3)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testIsInitialized['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "builder.setExtension(TestOptimizedForSize.testExtension2,TestRequiredOptimizedForSize.newBuilder().setX(10).buildPartial())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(builder.buildPartial().isInitialized()).isFalse()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testUninitializedExtensionInOptimizedForSize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertFalse(builder.isInitialized())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(builder.isInitialized()).isFalse()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertFalse(builder.isInitialized())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "TestOptimizedForSize.Builder builder = TestOptimizedForSize.newBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertFalse(builder.buildPartial().isInitialized())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertThat(builder.isInitialized()).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "proto2Builder.setA(1).setB(2).setC(3)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(builder.isInitialized())@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testIsInitialized['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(builder.buildPartial().isInitialized())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->10 [style = bold, label=""];
23->25 [style = bold, label=""];
16->0 [style = bold, label=""];
30->13 [style = bold, label=""];
12->20 [style = dashed, label="0"];
16->27 [style = bold, label=""];
26->17 [style = bold, label=""];
28->30 [style = bold, label=""];
22->16 [style = bold, label=""];
1->30 [style = dashed, label="0"];
3->37 [style = dashed, label="0"];
0->2 [style = bold, label=""];
11->4 [style = bold, label=""];
35->33 [style = bold, label=""];
8->14 [style = bold, label=""];
20->32 [style = bold, label=""];
3->6 [style = bold, label=""];
11->23 [style = dashed, label="0"];
33->10 [style = bold, label=""];
32->7 [style = bold, label=""];
0->27 [style = dashed, label="0"];
10->22 [style = dashed, label="0"];
34->12 [style = bold, label=""];
13->11 [style = bold, label=""];
1->13 [style = bold, label=""];
17->19 [style = bold, label=""];
29->26 [style = bold, label=""];
6->20 [style = bold, label=""];
4->25 [style = dashed, label="0"];
19->1 [style = bold, label=""];
15->17 [style = bold, label=""];
7->5 [style = bold, label=""];
17->28 [style = bold, label=""];
10->16 [style = bold, label=""];
21->22 [style = bold, label=""];
37->34 [style = bold, label=""];
12->18 [style = bold, label=""];
13->23 [style = bold, label=""];
15->26 [style = dashed, label="0"];
18->35 [style = bold, label=""];
7->21 [style = bold, label=""];
9->3 [style = bold, label=""];
5->21 [style = dashed, label="0"];
14->15 [style = bold, label=""];
27->24 [style = bold, label=""];
36->37 [style = bold, label=""];
24->8 [style = bold, label=""];
31->3 [style = bold, label=""];
18->7 [style = bold, label=""];
2->24 [style = dashed, label="0"];
14->29 [style = dashed, label="0"];
8->29 [style = bold, label=""];
19->28 [style = dashed, label="0"];
2->8 [style = bold, label=""];
18->32 [style = dashed, label="0"];
6->12 [style = bold, label=""];
}
