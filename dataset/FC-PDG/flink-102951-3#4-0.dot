digraph {
20 [style = filled, label = "final BufferOrEvent(( sequence2 = addSequence(inputGate,createBarrier(5,0),createBuffer(0),createCancellationBarrier(6,0),createBuffer(0),createEndOfPartition(0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertInflightData()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final BufferOrEvent(( sequence1 = addSequence(inputGate,createBuffer(0),createBuffer(1),createBuffer(2),createBarrier(1,1),createBarrier(1,2),createBarrier(1,0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testSingleChannelAbortCheckpoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(6L,handler.getLastCanceledCheckpointId())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(2L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertInflightData()@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testEarlyCleanup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "inputGate = createInputGate(3,handler)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(5L,channelStateWriter.getLastStartedCheckpointId())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "inputGate = createInputGate(3,handler,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "inputGate = createInputGate(1,handler)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final BufferOrEvent(( sequence1 = addSequence(inputGate,createBuffer(0),createBarrier(1,0),createBuffer(0),createBarrier(2,0),createCancellationBarrier(4,0))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertInflightData()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(4L,handler.getLastCanceledCheckpointId())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertOutput(sequence2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertInflightData()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertOutput(sequence1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertOutput(sequence2)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testEarlyCleanup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14->16 [style = bold, label=""];
2->20 [style = bold, label=""];
15->0 [style = solid, label="sequence1"];
9->5 [style = solid, label="handler"];
2->20 [style = dashed, label="0"];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
21->15 [style = solid, label="inputGate"];
0->19 [style = bold, label=""];
5->2 [style = solid, label="inputGate"];
21->15 [style = bold, label=""];
11->4 [style = bold, label=""];
8->3 [style = bold, label=""];
3->14 [style = bold, label=""];
9->11 [style = solid, label="handler"];
20->3 [style = bold, label=""];
16->17 [style = bold, label=""];
2->8 [style = solid, label="sequence2"];
12->9 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
20->3 [style = solid, label="sequence2"];
4->0 [style = solid, label="sequence1"];
11->2 [style = solid, label="inputGate"];
19->13 [style = bold, label=""];
5->4 [style = solid, label="inputGate"];
5->11 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
4->15 [style = dashed, label="0"];
15->0 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
9->21 [style = bold, label=""];
18->9 [style = bold, label=""];
9->5 [style = bold, label=""];
5->21 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->21 [style = solid, label="handler"];
11->4 [style = solid, label="inputGate"];
3->14 [style = dashed, label="0"];
21->20 [style = solid, label="inputGate"];
2->8 [style = bold, label=""];
13->2 [style = bold, label=""];
}
