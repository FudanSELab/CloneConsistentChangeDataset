digraph {
6 [style = filled, label = "assertThat(builder.getMaxThreads()).isEqualTo(900)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(builder.getPid().intValue()).isEqualTo(1234)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(builder.getMaxConnections()).isEqualTo(300)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(builder.getRedirectOutput()).isTrue()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(builder.getBindAddress()).isEqualTo(InetAddress.getLocalHost())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Builder builder = new Builder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(builder.getPort().intValue()).isEqualTo(11235)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(builder.getWorkingDirectory()).isEqualTo(getWorkingDirectoryPath())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(builder.getHostNameForClients()).isEqualTo(\"Tucows\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(builder.getServerPort().intValue()).isEqualTo(11235)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertThat(builder.getSocketBufferSize()).isEqualTo(1024)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(builder.getHostnameForClients()).isEqualTo(\"Tucows\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(builder.getServerBindAddress()).isEqualTo(InetAddress.getLocalHost())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertThat(builder.getMessageTimeToLive()).isEqualTo(10000)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "builder.parseArguments(\"start\",\"memberOne\",\"--server-bind-address\",getLocalHost().getHostAddress(),\"--dir\",getWorkingDirectoryPath(),\"--hostname-for-clients\",\"Tucows\",\"--pid\",\"1234\",\"--server-port\",\"11235\",\"--redirect-output\",\"--force\",\"--debug\",\"--max-connections\",\"300\",\"--max-message-count\",\"1000\",\"--message-time-to-live\",\"10000\",\"--socket-buffer-size\",\"1024\",\"--max-threads\",\"900\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "parseArgumentsParsesValuesSeparatedByCommas['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertThat(builder.getCommand()).isEqualTo(Command.START)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "parseArgumentsParsesValuesSeparatedByCommas['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(builder.getPid().intValue()).isEqualTo(1234)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "builder.parseArguments(\"start\",\"memberOne\",\"--server-bind-address\",InetAddress.getLocalHost().getHostAddress(),\"--dir\",getWorkingDirectoryPath(),\"--hostname-for-clients\",\"Tucows\",\"--pid\",\"1234\",\"--server-port\",\"11235\",\"--redirect-output\",\"--force\",\"--debug\",\"--max-connections\",\"300\",\"--max-message-count\",\"1000\",\"--message-time-to-live\",\"10000\",\"--socket-buffer-size\",\"1024\",\"--max-threads\",\"900\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertThat(builder.getWorkingDirectory()).isEqualTo(getWorkingDirectoryPath())@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(builder.getServerBindAddress()).isEqualTo(getLocalHost())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "parseArgumentsParsesValuesSeparatedByCommas['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(builder.getForce()).isTrue()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(builder.getDebug()).isTrue()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "builder.parseArguments(\"start\",\"memberOne\",\"--bind-address\",InetAddress.getLocalHost().getHostAddress(),\"--dir\",getWorkingDirectoryPath(),\"--hostname-for-clients\",\"Tucows\",\"--pid\",\"1234\",\"--port\",\"11235\",\"--redirect-output\",\"--force\",\"--debug\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(builder.getMaxThreads()).isEqualTo(900)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(builder.getMaxMessageCount()).isEqualTo(1000)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(builder.getServerPort().intValue()).isEqualTo(11235)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertThat(builder.getWorkingDirectory()).isEqualTo(getWorkingDirectoryPath())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "assertThat(builder.getRedirectOutput()).isTrue()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
10->20 [style = bold, label=""];
7->11 [style = bold, label=""];
0->13 [style = bold, label=""];
6->20 [style = dashed, label="0"];
1->26 [style = dashed, label="0"];
9->4 [style = bold, label=""];
28->11 [style = bold, label=""];
4->15 [style = bold, label=""];
14->10 [style = bold, label=""];
14->19 [style = bold, label=""];
16->2 [style = bold, label=""];
10->6 [style = bold, label=""];
13->1 [style = bold, label=""];
1->9 [style = bold, label=""];
3->0 [style = bold, label=""];
29->13 [style = bold, label=""];
26->30 [style = bold, label=""];
11->5 [style = bold, label=""];
23->22 [style = bold, label=""];
17->2 [style = bold, label=""];
7->24 [style = dashed, label="0"];
13->26 [style = bold, label=""];
7->28 [style = dashed, label="0"];
24->11 [style = bold, label=""];
30->4 [style = bold, label=""];
0->29 [style = dashed, label="0"];
12->18 [style = bold, label=""];
12->14 [style = bold, label=""];
0->8 [style = bold, label=""];
22->10 [style = bold, label=""];
25->5 [style = bold, label=""];
2->7 [style = bold, label=""];
2->24 [style = bold, label=""];
2->28 [style = bold, label=""];
18->14 [style = bold, label=""];
15->8 [style = bold, label=""];
8->12 [style = bold, label=""];
3->29 [style = bold, label=""];
27->2 [style = bold, label=""];
11->25 [style = bold, label=""];
21->23 [style = bold, label=""];
19->21 [style = bold, label=""];
}
