digraph {
22 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertNotContains(\"This is a line with digits\",contents)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertContains(\"moon Sun Sun\",contents)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertThat(contents,containsString(\"found WhiteSpace\"))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertNotContains(\"this is the moon\",contents)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "buildRule.executeTarget(\"containsregex\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "buildRule.executeTarget(\"replaceregex\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "buildRule.executeTarget(\"hasregex\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testReplaceRegex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertThat(contents,containsString(\"Found digits (1234(\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertContains(\"Found digits (1234(\",contents)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertContains(\"World here\",contents)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertContains(\"hello world\",contents)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(contents,containsString(\"dog Cat dog\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(contents,not(containsString(\"This is a line with digits\")))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testReplaceRegex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testContainsRegex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(contents,containsString(\"moon Sun Sun\"))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertContains(\"dog Cat dog\",contents)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(contents,containsString(\"world world world world\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertContains(\"world world world world\",contents)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertContains(\"found WhiteSpace\",contents)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assumeTrue(\"Regex not present\",getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
5->10 [style = bold, label=""];
1->10 [style = solid, label="contents"];
1->3 [style = solid, label="contents"];
22->19 [style = solid, label="contents"];
10->15 [style = dashed, label="0"];
8->16 [style = dashed, label="0"];
4->18 [style = dashed, label="0"];
22->19 [style = bold, label=""];
1->0 [style = solid, label="contents"];
6->18 [style = bold, label=""];
19->20 [style = bold, label=""];
2->23 [style = dashed, label="0"];
1->11 [style = solid, label="contents"];
12->9 [style = bold, label=""];
3->13 [style = dashed, label="0"];
1->16 [style = solid, label="contents"];
1->17 [style = bold, label=""];
9->6 [style = bold, label=""];
1->22 [style = dashed, label="0"];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
0->14 [style = dashed, label="0"];
6->4 [style = bold, label=""];
1->13 [style = solid, label="contents"];
21->9 [style = bold, label=""];
18->22 [style = bold, label=""];
5->17 [style = dashed, label="0"];
15->11 [style = bold, label=""];
20->23 [style = bold, label=""];
1->2 [style = solid, label="contents"];
22->23 [style = solid, label="contents"];
17->15 [style = bold, label=""];
1->8 [style = solid, label="contents"];
1->17 [style = solid, label="contents"];
16->14 [style = bold, label=""];
2->11 [style = dashed, label="0"];
10->20 [style = dashed, label="0"];
10->2 [style = bold, label=""];
4->1 [style = bold, label=""];
22->20 [style = solid, label="contents"];
14->13 [style = bold, label=""];
1->15 [style = solid, label="contents"];
1->5 [style = solid, label="contents"];
5->19 [style = dashed, label="0"];
2->8 [style = bold, label=""];
1->14 [style = solid, label="contents"];
}
