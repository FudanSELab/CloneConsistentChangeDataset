digraph {
3 [style = filled, label = "right = listExpression@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.bitExpr(0))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return result@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "boolean not = null != ctx.NOT()? true: false@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return new InExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,not)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "null != ctx.subquery()@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "createInSegment['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "right = new SubqueryExpressionSegment(new SubquerySegment(ctx.subquery().start.getStartIndex(),ctx.subquery().stop.getStopIndex(),(SQLServerSelectStatement)visit(ctx.subquery())))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final PredicateContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ExprContext each@@@10@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "ExpressionSegment right@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "boolean not = null != ctx.NOT()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "ctx.expr()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ctx.expr()@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "createInSegment['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "right = new SubqueryExpressionSegment(new SubquerySegment(ctx.subquery().start.getStartIndex(),ctx.subquery().stop.getStopIndex(),(OracleSelectStatement)visit(ctx.subquery())))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "InExpression result = new InExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,not)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ListExpression listExpression = new ListExpression(ctx.LP_().getSymbol().getStartIndex(),ctx.RP_().getSymbol().getStopIndex())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "listExpression.getItems().add((ExpressionSegment)visit(each))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "createInSegment['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "ExprContext each@@@10@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2->19 [style = bold, label=""];
5->14 [style = dashed, label="0"];
7->15 [style = solid, label="left"];
2->1 [style = dotted, label="false"];
2->6 [style = bold, label=""];
3->14 [style = bold, label=""];
14->15 [style = solid, label="not"];
12->0 [style = solid, label="result"];
2->3 [style = dotted, label="false"];
19->12 [style = solid, label="right"];
4->2 [style = bold, label=""];
2->9 [style = bold, label=""];
7->4 [style = bold, label=""];
8->10 [style = dotted, label="true"];
3->12 [style = solid, label="right"];
2->18 [style = dotted, label="false"];
12->0 [style = bold, label=""];
5->12 [style = solid, label="not"];
2->16 [style = dotted, label="false"];
8->7 [style = bold, label=""];
6->3 [style = solid, label="listExpression"];
2->11 [style = dotted, label="true"];
17->7 [style = bold, label=""];
9->19 [style = dashed, label="0"];
19->5 [style = bold, label=""];
3->15 [style = solid, label="right"];
17->10 [style = dotted, label="true"];
9->15 [style = solid, label="right"];
3->5 [style = bold, label=""];
9->12 [style = solid, label="right"];
2->9 [style = dotted, label="true"];
5->12 [style = bold, label=""];
11->3 [style = bold, label=""];
6->11 [style = bold, label=""];
20->10 [style = dotted, label="true"];
9->14 [style = bold, label=""];
12->15 [style = dashed, label="0"];
9->5 [style = bold, label=""];
2->6 [style = dotted, label="false"];
14->15 [style = bold, label=""];
20->7 [style = bold, label=""];
2->19 [style = dotted, label="true"];
7->12 [style = solid, label="left"];
2->13 [style = dotted, label="false"];
}
