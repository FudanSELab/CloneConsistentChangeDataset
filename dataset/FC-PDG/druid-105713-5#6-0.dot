digraph {
5 [style = filled, label = "Assert.assertTrue(caps.areDictionaryValuesUnique().isTrue())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertFalse(caps.hasSpatialIndexes())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(caps.hasBitmapIndexes())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(caps.isDictionaryEncoded().isMaybeTrue())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertEquals(ValueType.STRING,caps.getType())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertTrue(caps.areDictionaryValuesUnique().isTrue())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ColumnCapabilities caps = INC_INDEX.getCapabilities(\"d2\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertFalse(caps.hasSpatialIndexes())@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertTrue(caps.areDictionaryValuesUnique().isTrue())@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "caps = MMAP_INDEX.getColumnHolder(\"d2\").getCapabilities()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertFalse(caps.hasMultipleValues().isMaybeTrue())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(caps.isDictionaryEncoded().isTrue())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "testMultiStringColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(caps.areDictionaryValuesUnique().isTrue())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(caps.isDictionaryEncoded())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertTrue(caps.hasMultipleValues().isUnknown())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(caps.areDictionaryValuesSorted().isTrue())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testStringColumn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Assert.assertFalse(ColumnCapabilitiesImpl.snapshot(caps,IndexMergerV9.DIMENSION_CAPABILITY_MERGE_LOGIC).hasMultipleValues().isMaybeTrue())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testStringColumn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertTrue(caps.hasMultipleValues().isTrue())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ColumnCapabilities caps = INC_INDEX.getCapabilities(\"d1\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(caps.hasBitmapIndexes())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertFalse(caps.hasSpatialIndexes())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertFalse(caps.areDictionaryValuesSorted().isTrue())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertFalse(caps.hasSpatialIndexes())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(caps.hasMultipleValues().isTrue())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(caps.isDictionaryEncoded().isTrue())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertTrue(caps.isDictionaryEncoded())@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ValueType.STRING,caps.getType())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
13->10 [style = bold, label=""];
28->29 [style = bold, label=""];
23->20 [style = bold, label=""];
9->10 [style = dashed, label="0"];
7->17 [style = bold, label=""];
4->25 [style = bold, label=""];
21->6 [style = bold, label=""];
24->15 [style = bold, label=""];
7->16 [style = dashed, label="0"];
10->24 [style = bold, label=""];
0->23 [style = dashed, label="0"];
3->14 [style = bold, label=""];
0->2 [style = bold, label=""];
16->7 [style = bold, label=""];
1->3 [style = bold, label=""];
16->26 [style = bold, label=""];
11->12 [style = bold, label=""];
8->6 [style = bold, label=""];
5->25 [style = dashed, label="0"];
17->22 [style = bold, label=""];
12->0 [style = bold, label=""];
2->4 [style = bold, label=""];
20->4 [style = bold, label=""];
19->16 [style = bold, label=""];
3->19 [style = dashed, label="0"];
25->27 [style = bold, label=""];
6->29 [style = dashed, label="0"];
3->19 [style = bold, label=""];
9->15 [style = bold, label=""];
6->11 [style = bold, label=""];
5->13 [style = bold, label=""];
27->10 [style = bold, label=""];
18->9 [style = bold, label=""];
10->9 [style = bold, label=""];
12->23 [style = bold, label=""];
13->18 [style = dashed, label="0"];
4->5 [style = bold, label=""];
29->11 [style = bold, label=""];
13->18 [style = bold, label=""];
15->1 [style = bold, label=""];
}
