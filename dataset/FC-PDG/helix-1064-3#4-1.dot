digraph {
17 [style = filled, label = "_assignableInstanceManager.buildAssignableInstances(_clusterConfig,mock._taskDataCache,_liveInstances,_instanceConfigs)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testOneRunningOneNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(mock._cache.getExistsLiveInstanceOrCurrentStateChange()).thenReturn(true)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(mock._cache.getTaskDataCache().getPreviousAssignment(JOB_NAME)).thenReturn(mock._resourceAssignment)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "workflowDispatcher.updateWorkflowStatus(WORKFLOW_NAME,mock._workflowConfig,mock._workflowContext,mock._currentStateOutput2,bestPossibleStateOutput)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "when(mock._cache.getJobContext(JOB_NAME)).thenReturn(mock._jobContext)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(mock._taskDataCache.getRuntimeJobDag(WORKFLOW_NAME)).thenReturn(mock._runtimeJobDag)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(mock._cache.getWorkflowConfig(WORKFLOW_NAME)).thenReturn(mock._workflowConfig)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testTwoRunningCurrentStates['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "inflightJobDag.add(JOB_NAME)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(mock._taskDataCache.getRuntimeJobDag(WORKFLOW_NAME).getInflightJobList()).thenReturn(inflightJobDag)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(TaskPartitionState.RUNNING.name(),bestPossibleStateOutput.getPartitionStateMap(JOB_NAME).getPartitionMap(taskPartition).get(INSTANCE_PREFIX + \"1\"))@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "when(mock._cache.getInstanceConfigMap()).thenReturn(_instanceConfigs)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "WorkflowDispatcher workflowDispatcher = new WorkflowDispatcher()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testTwoRunningCurrentStates['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "workflowDispatcher.updateCache(mock._cache)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Set<String> inflightJobDag = new HashSet<>()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "workflowDispatcher.updateWorkflowStatus(WORKFLOW_NAME,mock._workflowConfig,mock._workflowContext,mock._currentStateOutput,bestPossibleStateOutput)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(mock._cache.getAssignableInstanceManager()).thenReturn(_assignableInstanceManager)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Partition taskPartition = new Partition(JOB_NAME + \"_\" + PARTITION_NAME)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "MockTestInformation mock = new MockTestInformation()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(mock._cache.getTaskDataCache()).thenReturn(mock._taskDataCache)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(mock._cache.getJobConfig(JOB_NAME)).thenReturn(mock._jobConfig)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "when(mock._cache.getTaskDataCache().getPreviousAssignment(JOB_NAME)).thenReturn(mock._resourceAssignment2)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "when(mock._cache.getEnabledLiveInstances()).thenReturn(_liveInstances.keySet())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "when(mock._cache.getExistsLiveInstanceOrCurrentStateChange()).thenReturn(false)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(TaskPartitionState.DROPPED.name(),bestPossibleStateOutput.getPartitionStateMap(JOB_NAME).getPartitionMap(taskPartition).get(INSTANCE_PREFIX + \"0\"))@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(mock._cache.getClusterConfig()).thenReturn(_clusterConfig)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(mock._cache.getIdealStates()).thenReturn(mock._idealStates)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->16 [style = solid, label="inflightJobDag"];
27->1 [style = bold, label=""];
29->5 [style = bold, label=""];
9->11 [style = bold, label=""];
22->16 [style = bold, label=""];
2->6 [style = bold, label=""];
25->23 [style = bold, label=""];
7->1 [style = dashed, label="0"];
26->3 [style = bold, label=""];
28->11 [style = bold, label=""];
8->3 [style = bold, label=""];
30->27 [style = bold, label=""];
16->25 [style = bold, label=""];
10->17 [style = bold, label=""];
4->29 [style = bold, label=""];
0->21 [style = bold, label=""];
6->19 [style = bold, label=""];
16->23 [style = bold, label=""];
3->12 [style = bold, label=""];
15->18 [style = bold, label=""];
13->11 [style = bold, label=""];
1->7 [style = bold, label=""];
20->29 [style = dashed, label="0"];
20->5 [style = bold, label=""];
9->28 [style = bold, label=""];
13->28 [style = dashed, label="0"];
19->1 [style = bold, label=""];
21->9 [style = bold, label=""];
11->10 [style = bold, label=""];
4->20 [style = bold, label=""];
12->14 [style = bold, label=""];
6->19 [style = solid, label="bestPossibleStateOutput"];
14->15 [style = bold, label=""];
6->30 [style = dashed, label="0"];
23->2 [style = bold, label=""];
2->30 [style = bold, label=""];
5->22 [style = bold, label=""];
24->3 [style = bold, label=""];
18->0 [style = bold, label=""];
17->4 [style = bold, label=""];
25->30 [style = solid, label="bestPossibleStateOutput"];
9->13 [style = bold, label=""];
}
