digraph {
13 [style = filled, label = "frontend.buildProgram(programOptions)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "String(( arguments = {\"/some/none/existing/path\"}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "ProgramOptions programOptions = new ProgramOptions(commandLine)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "String(( reducedArguments = {\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(arguments(4(,executionOptions.getJarFilePath())@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testNonExistingFileWithoutArguments['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "frontend.buildProgram(programOptions,executionOptions)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testNonExistingFileWithArguments['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertArrayEquals(new String((((,programOptions.getProgramArgs())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(arguments(0(,executionOptions.getJarFilePath())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "URL(( classpath = new URL((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b9f5a9@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "frontend.buildProgram(programOptions,executionOptions)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(arguments(4(,programOptions.getJarFilePath())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS,arguments,true)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "fail(\"Should fail with an exception\")@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertArrayEquals(classpath,executionOptions.getClasspaths().toArray())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertArrayEquals(classpath,programOptions.getClasspaths().toArray())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "fail(\"Should fail with an exception\")@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testNonExistingFileWithArguments['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6->21 [style = dashed, label="0"];
0->9 [style = bold, label=""];
3->4 [style = solid, label="programOptions"];
0->12 [style = solid, label="classpath"];
12->17 [style = bold, label=""];
8->3 [style = bold, label=""];
4->19 [style = bold, label=""];
10->8 [style = solid, label="arguments"];
14->10 [style = bold, label=""];
3->7 [style = solid, label="programOptions"];
3->15 [style = bold, label=""];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
13->16 [style = bold, label=""];
21->18 [style = bold, label=""];
9->11 [style = solid, label="reducedArguments"];
20->10 [style = bold, label=""];
10->19 [style = solid, label="arguments"];
9->17 [style = solid, label="reducedArguments"];
10->5 [style = solid, label="arguments"];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
0->6 [style = solid, label="classpath"];
3->13 [style = solid, label="programOptions"];
7->2 [style = bold, label=""];
4->7 [style = solid, label="executionOptions"];
6->11 [style = bold, label=""];
10->0 [style = bold, label=""];
10->15 [style = solid, label="arguments"];
7->13 [style = dashed, label="0"];
15->12 [style = bold, label=""];
17->13 [style = bold, label=""];
1->10 [style = bold, label=""];
5->19 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->18 [style = solid, label="programOptions"];
11->7 [style = bold, label=""];
8->3 [style = solid, label="commandLine"];
4->18 [style = solid, label="executionOptions"];
19->21 [style = bold, label=""];
}
