digraph {
14 [style = filled, label = "validateManifest(lastSnapshot.allManifests().get(0),seqs(2),ids(lastSnapshot.snapshotId()),files(newFileC),statuses(Status.ADDED))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "validateManifest(pending.allManifests().get(0),ids(pending.snapshotId()),files(newFile))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "validateSnapshot(null,snap,1,FILE_A,FILE_B)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "entry = ManifestFiles.read(pending.allManifests().get(1),FILE_IO).entries().iterator().next()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"id\",8).bucket(\"data\",8).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ManifestFile initialManifest = base.currentSnapshot().allManifests().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Snapshot snap2 = table.currentSnapshot()@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "V2Assert.assertEquals(\"Snapshot sequence number should be 2\",2,lastSnapshot.sequenceNumber())@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Types.NestedField field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Assert.assertEquals(\"Second manifest should be the initial manifest with the old spec\",initialManifest,lastSnapshot.allManifests().get(1))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Should use 2 manifest files\",2,pending.allManifests().size())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testChangedPartitionSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "validateManifest(pending.allManifests().get(0),ids(pending.snapshotId()),files(newFileC))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "V1Assert.assertEquals(\"Table should end with last-sequence-number 0\",0,readMetadata().lastSequenceNumber())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(\"Should create 1 manifest for initial write\",1,base.currentSnapshot().allManifests().size())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "table.newAppend().appendFile(FILE_A).commit()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "table.newAppend().appendFile(newFileC).commit()@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "table.ops().commit(base,base.updatePartitionSpec(newSpec))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"Second manifest should be the initial manifest with the old spec\",initialManifest,pending.allManifests().get(1))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "V1Assert.assertEquals(\"Table should end with last-sequence-number 0\",0,readMetadata().lastSequenceNumber())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "TableMetadata base = readMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "long commitId = snap.snapshotId()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFile).apply()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testChangedPartitionSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "V2Assert.assertEquals(\"Snapshot sequence number should be 1\",1,snap2.sequenceNumber())@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "Assert.assertEquals(\"Should use 2 manifest files\",2,lastSnapshot.allManifests().size())@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertEquals(\"id_bucket\",field.name())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "field = ((PartitionData)entry.file().partition()).getPartitionType().fields().get(0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Snapshot pending = table.newAppend().appendFile(newFileC).apply()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "V2Assert.assertEquals(\"Last sequence number should be 2\",2,readMetadata().lastSequenceNumber())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "V2Assert.assertEquals(\"Last sequence number should be 1\",1,readMetadata().lastSequenceNumber())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertEquals(\"data_bucket\",field.name())@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(1001,field.fieldId())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Snapshot lastSnapshot = table.currentSnapshot()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "testManifestEntryFieldIdsForChangedPartitionSpecForV1Table['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "validateManifest(initialManifest,seqs(1,1),ids(commitId,commitId),files(FILE_A,FILE_B),statuses(Status.ADDED,Status.ADDED))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Snapshot snap = table.currentSnapshot()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "DataFile newFile = DataFiles.builder(table.spec()).copy(FILE_B).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "ManifestEntry<DataFile> entry = ManifestFiles.read(pending.allManifests().get(0),FILE_IO).entries().iterator().next()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DataFile newFileC = DataFiles.builder(newSpec).copy(FILE_C).withPartitionPath(\"data_bucket=2/id_bucket=3\").build()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "PartitionSpec newSpec = PartitionSpec.builderFor(base.schema()).bucket(\"data\",16).bucket(\"id\",4).build()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(1000,field.fieldId())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "table.newAppend().appendFile(FILE_A).appendFile(FILE_B).commit()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
16->13 [style = bold, label=""];
17->26 [style = bold, label=""];
15->21 [style = solid, label="snap"];
5->28 [style = solid, label="initialManifest"];
27->25 [style = solid, label="commitId"];
22->16 [style = bold, label=""];
5->1 [style = solid, label="initialManifest"];
19->20 [style = bold, label=""];
29->9 [style = bold, label=""];
25->3 [style = bold, label=""];
34->11 [style = solid, label="newSpec"];
8->35 [style = dashed, label="0"];
3->11 [style = bold, label=""];
18->17 [style = bold, label=""];
2->18 [style = bold, label=""];
38->36 [style = bold, label=""];
14->28 [style = bold, label=""];
42->33 [style = bold, label=""];
2->0 [style = solid, label="newFileC"];
3->11 [style = solid, label="newSpec"];
1->38 [style = bold, label=""];
30->37 [style = bold, label=""];
26->19 [style = bold, label=""];
11->24 [style = bold, label=""];
24->22 [style = bold, label=""];
10->7 [style = bold, label=""];
35->4 [style = bold, label=""];
11->2 [style = bold, label=""];
12->7 [style = bold, label=""];
5->25 [style = bold, label=""];
34->11 [style = bold, label=""];
4->0 [style = bold, label=""];
9->6 [style = bold, label=""];
5->34 [style = bold, label=""];
23->14 [style = bold, label=""];
45->1 [style = bold, label=""];
7->9 [style = bold, label=""];
4->45 [style = bold, label=""];
11->31 [style = bold, label=""];
5->25 [style = solid, label="initialManifest"];
6->5 [style = bold, label=""];
36->30 [style = bold, label=""];
21->9 [style = bold, label=""];
3->34 [style = dashed, label="0"];
20->23 [style = bold, label=""];
31->35 [style = bold, label=""];
41->40 [style = bold, label=""];
0->1 [style = bold, label=""];
44->41 [style = bold, label=""];
40->32 [style = bold, label=""];
7->15 [style = bold, label=""];
43->29 [style = bold, label=""];
2->14 [style = solid, label="newFileC"];
32->39 [style = bold, label=""];
8->18 [style = dashed, label="0"];
7->29 [style = dashed, label="0"];
8->4 [style = bold, label=""];
31->45 [style = solid, label="newFile"];
15->27 [style = bold, label=""];
27->21 [style = bold, label=""];
33->44 [style = bold, label=""];
9->11 [style = solid, label="base"];
37->42 [style = bold, label=""];
2->8 [style = bold, label=""];
0->45 [style = dashed, label="0"];
13->2 [style = bold, label=""];
}
