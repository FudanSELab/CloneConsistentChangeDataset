digraph {
5 [style = filled, label = "assertThat(network.edgesConnecting(N3,N2)).isEmpty()@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(network.edges()).containsExactly(E15,E41,E23)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertTrue(networkAsMutableNetwork.addEdge(N1,N5,E15))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(network.edgesConnecting(N2,N3)).containsExactly(E23)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(network.nodes()).containsExactly(N1,N5,N4,N2,N3)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertThat(network.nodes()).containsExactly(N1,N5,N4,N2,N3).inOrder()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(network.edgesConnecting(N1,N5)).containsExactly(E15)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(networkAsMutableNetwork.addEdge(N2,N3,E23))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "networkAsMutableNetwork.addNode(N1)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(networkAsMutableNetwork.addEdge(N4,N1,E41))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(network.edges()).containsExactly(E15,E41,E23).inOrder()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assume().that(graphIsMutable()).isTrue()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(network.edgesConnecting(N3,N2)).containsExactly(E23)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "addEdge_nodesNotInGraph['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "addEdge_nodesNotInGraph['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "addEdge_nodesNotInGraph['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(network.edgesConnecting(N4,N1)).containsExactly(E41)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->8 [style = bold, label=""];
13->0 [style = bold, label=""];
10->3 [style = bold, label=""];
0->9 [style = bold, label=""];
11->0 [style = bold, label=""];
1->6 [style = bold, label=""];
16->0 [style = bold, label=""];
8->15 [style = bold, label=""];
3->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
7->10 [style = bold, label=""];
10->12 [style = bold, label=""];
2->1 [style = bold, label=""];
4->7 [style = bold, label=""];
14->1 [style = bold, label=""];
9->4 [style = bold, label=""];
12->14 [style = bold, label=""];
}
