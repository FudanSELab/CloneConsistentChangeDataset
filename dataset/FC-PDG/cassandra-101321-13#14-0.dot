digraph {
46 [style = filled, label = "assertTrue(primaryRanges.isEmpty())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "TokenMetadata metadata = StorageService.instance.getTokenMetadata()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\")))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\")))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(primaryRanges.size() == 2)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.5\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Keyspace.clear(\"Keyspace1\")@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\"))))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategyOneDCOnly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"C\"),InetAddressAndPort.getByName(\"127.0.0.2\"))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.4\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "configOptions.put(\"DC2\",\"1\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "configOptions.put(\"DC2\",\"2\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(primaryRanges.size() == 2)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.2\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\"))))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.1\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\")))@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\"))))@@@26@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name,InetAddressAndPort.getByName(\"127.0.0.5\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\"))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "metadata.clearUnsafe()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "configOptions.put(\"DC1\",\"1\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\"))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "KeyspaceMetadata meta = KeyspaceMetadata.create(\"Keyspace1\",KeyspaceParams.create(false,configOptions))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"A\"),new StringToken(\"B\")))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\")))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Schema.instance.load(meta)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testPrimaryRangeForEndpointWithinDCWithNetworkTopologyStrategy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"D\"),InetAddressAndPort.getByName(\"127.0.0.5\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"D\"),new StringToken(\"A\"))))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(primaryRanges.contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\"))))@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertTrue(primaryRanges.isEmpty())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"A\"),InetAddressAndPort.getByName(\"127.0.0.1\"))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "metadata.updateNormalToken(new StringToken(\"B\"),InetAddressAndPort.getByName(\"127.0.0.4\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assertions.assertThat(primaryRanges.size()).as(primaryRanges.toString()).isEqualTo(2)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\")))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"C\"),new StringToken(\"D\")))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Map<String,String> configOptions = new HashMap<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assertions.assertThat(primaryRanges).contains(new Range<Token>(new StringToken(\"B\"),new StringToken(\"C\")))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "configOptions.put(ReplicationParams.CLASS,\"NetworkTopologyStrategy\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(2,primaryRanges.size())@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46->44 [style = bold, label=""];
11->32 [style = dashed, label="0"];
18->40 [style = dashed, label="0"];
29->15 [style = bold, label=""];
42->26 [style = bold, label=""];
15->10 [style = bold, label=""];
28->6 [style = bold, label=""];
20->17 [style = bold, label=""];
36->40 [style = bold, label=""];
35->27 [style = bold, label=""];
51->5 [style = bold, label=""];
27->12 [style = bold, label=""];
4->25 [style = bold, label=""];
25->22 [style = bold, label=""];
25->45 [style = bold, label=""];
52->27 [style = bold, label=""];
22->31 [style = dashed, label="0"];
6->0 [style = solid, label="meta"];
3->36 [style = dashed, label="0"];
2->3 [style = bold, label=""];
37->25 [style = bold, label=""];
41->37 [style = bold, label=""];
22->46 [style = dashed, label="0"];
9->20 [style = bold, label=""];
0->29 [style = bold, label=""];
6->0 [style = bold, label=""];
38->41 [style = bold, label=""];
32->34 [style = bold, label=""];
34->42 [style = bold, label=""];
30->36 [style = bold, label=""];
15->29 [style = dashed, label="0"];
45->48 [style = bold, label=""];
2->30 [style = dashed, label="0"];
22->7 [style = bold, label=""];
5->34 [style = dashed, label="0"];
43->46 [style = bold, label=""];
49->50 [style = bold, label=""];
21->28 [style = bold, label=""];
1->11 [style = bold, label=""];
25->31 [style = bold, label=""];
3->18 [style = bold, label=""];
26->30 [style = bold, label=""];
9->28 [style = solid, label="configOptions"];
15->38 [style = dashed, label="0"];
5->19 [style = bold, label=""];
11->5 [style = bold, label=""];
26->2 [style = bold, label=""];
23->24 [style = bold, label=""];
10->41 [style = dashed, label="0"];
20->49 [style = dashed, label="0"];
33->39 [style = bold, label=""];
16->1 [style = bold, label=""];
9->6 [style = solid, label="configOptions"];
12->8 [style = bold, label=""];
19->26 [style = bold, label=""];
31->33 [style = bold, label=""];
48->47 [style = bold, label=""];
1->51 [style = bold, label=""];
7->16 [style = bold, label=""];
11->25 [style = dashed, label="0"];
13->23 [style = bold, label=""];
10->4 [style = bold, label=""];
29->43 [style = bold, label=""];
1->32 [style = bold, label=""];
39->1 [style = bold, label=""];
44->25 [style = bold, label=""];
29->38 [style = bold, label=""];
14->27 [style = bold, label=""];
7->33 [style = dashed, label="0"];
2->1 [style = dashed, label="0"];
4->37 [style = dashed, label="0"];
9->49 [style = bold, label=""];
50->21 [style = bold, label=""];
17->21 [style = bold, label=""];
28->6 [style = solid, label="meta"];
19->42 [style = dashed, label="0"];
24->9 [style = bold, label=""];
8->13 [style = bold, label=""];
16->39 [style = dashed, label="0"];
47->1 [style = bold, label=""];
}
