digraph {
21 [style = filled, label = "KeySpace keySpace@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "int keyDataOffset = SkipListUtils.getKeyDataOffset(keySpace.level)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(keySpace.nextIndexNodes(i - 1(,SkipListUtils.getNextIndexNode(memorySegment,offset,i))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i <= keySpace.nextIndexNodes.length@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(keySpace.valuePointer,SkipListUtils.getValuePointer(memorySegment,offset))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "verifyGetKeySpace['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "MemorySegment keyDataSegment = MemorySegmentFactory.wrap(keySpace.keyData)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "MemorySegment memorySegment@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "int offset@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "verifyGetKeySpace['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verifyGetValueSpace['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(keySpace.status,SkipListUtils.getNodeStatus(memorySegment,offset))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "MemorySegment memorySegment@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(0,memorySegment.compare(keyDataSegment,offset + keyDataOffset,0,keySpace.keyData.length))@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "int offset@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(keySpace.keyData.length,SkipListUtils.getKeyLen(memorySegment,offset))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(valueSpace.keyPointer,SkipListUtils.getKeyPointer(memorySegment,offset))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "MemorySegment memorySegment@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(keySpace.level,SkipListUtils.getLevel(memorySegment,offset))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ValueSpace valueSpace@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "int i = 1@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(valueSpace.nextValuePointer,SkipListUtils.getNextValuePointer(memorySegment,offset))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "int i = 1@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int valueDataOffset = SkipListUtils.getValueMetaLen()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int offset@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i++@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "MemorySegment valueDataSegment = MemorySegmentFactory.wrapHeapSegment(valueSpace.valueData)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(0,memorySegment.compare(valueDataSegment,offset + valueDataOffset,0,valueSpace.valueData.length))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(valueSpace.valueData.length,SkipListUtils.getValueLen(memorySegment,offset))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(keySpace.nextKeyPointer,SkipListUtils.getNextKeyPointer(memorySegment,offset))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(keySpace.prevIndexNodes(i - 1(,SkipListUtils.getPrevIndexNode(memorySegment,offset,keySpace.level,i))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "MemorySegment keyDataSegment = MemorySegmentFactory.wrapHeapSegment(keySpace.keyData)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "i <= keySpace.prevIndexNodes.length@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(valueSpace.version,SkipListUtils.getValueVersion(memorySegment,offset))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15->2 [style = solid, label="offset"];
15->17 [style = solid, label="offset"];
32->28 [style = dotted, label="true"];
0->13 [style = bold, label=""];
5->18 [style = dotted, label="true"];
1->17 [style = solid, label="memorySegment"];
1->12 [style = solid, label="memorySegment"];
1->3 [style = solid, label="memorySegment"];
9->16 [style = bold, label=""];
12->2 [style = bold, label=""];
1->11 [style = solid, label="memorySegment"];
19->23 [style = dashed, label="0"];
33->25 [style = bold, label=""];
23->7 [style = solid, label="keyDataSegment"];
9->15 [style = dotted, label="true"];
34->24 [style = solid, label="offset"];
31->30 [style = solid, label="memorySegment"];
10->16 [style = solid, label="offset"];
1->4 [style = solid, label="memorySegment"];
1->16 [style = solid, label="memorySegment"];
15->34 [style = dashed, label="0"];
13->3 [style = dotted, label="true"];
6->5 [style = solid, label="i"];
30->26 [style = bold, label=""];
18->17 [style = solid, label="i"];
26->24 [style = bold, label=""];
5->17 [style = bold, label=""];
10->3 [style = solid, label="offset"];
25->27 [style = bold, label=""];
22->20 [style = dotted, label="true"];
0->8 [style = solid, label="i"];
10->4 [style = solid, label="offset"];
10->7 [style = solid, label="offset"];
23->7 [style = bold, label=""];
27->29 [style = bold, label=""];
4->24 [style = dashed, label="0"];
9->10 [style = dotted, label="true"];
20->4 [style = solid, label="memorySegment"];
10->11 [style = solid, label="offset"];
32->31 [style = dotted, label="true"];
15->11 [style = solid, label="offset"];
22->21 [style = dotted, label="true"];
34->30 [style = solid, label="offset"];
12->33 [style = dashed, label="0"];
32->34 [style = dotted, label="true"];
20->12 [style = solid, label="memorySegment"];
22->16 [style = bold, label=""];
11->4 [style = bold, label=""];
11->26 [style = dashed, label="0"];
14->19 [style = bold, label=""];
34->26 [style = solid, label="offset"];
34->33 [style = solid, label="offset"];
31->24 [style = solid, label="memorySegment"];
32->30 [style = bold, label=""];
18->5 [style = solid, label="i"];
6->18 [style = solid, label="i"];
24->33 [style = bold, label=""];
6->5 [style = bold, label=""];
2->0 [style = bold, label=""];
14->23 [style = bold, label=""];
16->30 [style = dashed, label="0"];
13->8 [style = dotted, label="true"];
3->8 [style = bold, label=""];
0->3 [style = solid, label="i"];
9->1 [style = dotted, label="true"];
4->12 [style = bold, label=""];
20->3 [style = solid, label="memorySegment"];
13->6 [style = bold, label=""];
22->15 [style = dotted, label="true"];
20->17 [style = solid, label="memorySegment"];
8->13 [style = bold, label=""];
5->17 [style = dotted, label="true"];
15->4 [style = solid, label="offset"];
16->11 [style = bold, label=""];
8->3 [style = solid, label="i"];
10->2 [style = solid, label="offset"];
20->2 [style = solid, label="memorySegment"];
0->13 [style = solid, label="i"];
15->7 [style = solid, label="offset"];
15->16 [style = solid, label="offset"];
25->29 [style = solid, label="valueDataOffset"];
5->14 [style = bold, label=""];
20->16 [style = solid, label="memorySegment"];
15->3 [style = solid, label="offset"];
8->13 [style = solid, label="i"];
1->2 [style = solid, label="memorySegment"];
20->11 [style = solid, label="memorySegment"];
10->12 [style = solid, label="offset"];
10->17 [style = solid, label="offset"];
31->26 [style = solid, label="memorySegment"];
13->3 [style = bold, label=""];
6->17 [style = solid, label="i"];
15->12 [style = solid, label="offset"];
18->5 [style = bold, label=""];
19->7 [style = solid, label="keyDataSegment"];
34->29 [style = solid, label="offset"];
31->33 [style = solid, label="memorySegment"];
14->7 [style = solid, label="keyDataOffset"];
19->7 [style = bold, label=""];
17->18 [style = bold, label=""];
27->29 [style = solid, label="valueDataSegment"];
}
