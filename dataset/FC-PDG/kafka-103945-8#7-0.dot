digraph {
14 [style = filled, label = "v < 3@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "MemoryRecords records = builder.build()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testFetchResponseMetricsWithOnePartitionError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "MemoryRecords records = builder.build()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "v++@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "subscriptions.assignFromUser(Utils.mkSet(tp0,tp1))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "fetcher.fetchedRecords()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "subscriptions.seek(tp1,0)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int expectedBytes = 0@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "subscriptions.seek(tp1,1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testFetchResponseMetricsWithOnePartitionError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "consumerClient.poll(0)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(2,recordsCountAverage.value(),EPSILON)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testFetchResponseMetricsPartialResponse['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Map<TopicPartition,FetchResponse.PartitionData> partitions = new HashMap<>()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "partitions.put(tp2,new FetchResponse.PartitionData(Errors.OFFSET_OUT_OF_RANGE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,MemoryRecords.EMPTY))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertEquals(3,recordsCountAverage.value(),EPSILON)@@@24@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "partitions.put(tp0,new FetchResponse.PartitionData(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,records))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "partitions.put(tp1,new FetchResponse.PartitionData(Errors.OFFSET_OUT_OF_RANGE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,MemoryRecords.EMPTY))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "fetchRecords(tp1,records,Errors.NONE,100L,0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "record.offset() >= 1@@@15@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "subscriptions.seek(tp0,0)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "subscriptions.assignFromUser(Utils.mkSet(tp1,tp2))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "int expectedBytes = 0@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "v++@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "KafkaMetric fetchSizeAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "int v = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "client.prepareResponse(new FetchResponse(new LinkedHashMap<>(partitions),0))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "subscriptions.assignFromUser(singleton(tp1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "KafkaMetric recordsCountAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "subscriptions.seek(tp1,0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37->11 [style = bold, label=""];
29->30 [style = bold, label=""];
6->22 [style = bold, label=""];
0->5 [style = solid, label="v"];
34->36 [style = solid, label="expectedBytes"];
4->15 [style = bold, label=""];
21->8 [style = bold, label=""];
7->35 [style = bold, label=""];
12->9 [style = bold, label=""];
3->18 [style = bold, label=""];
19->1 [style = bold, label=""];
20->38 [style = dashed, label="0"];
5->27 [style = solid, label="v"];
27->7 [style = bold, label=""];
33->14 [style = solid, label="v"];
28->25 [style = bold, label=""];
16->14 [style = bold, label=""];
8->30 [style = dashed, label="0"];
26->28 [style = bold, label=""];
2->24 [style = bold, label=""];
21->29 [style = dashed, label="0"];
14->0 [style = solid, label="v"];
18->32 [style = dashed, label="0"];
5->10 [style = bold, label=""];
15->13 [style = bold, label=""];
5->33 [style = bold, label=""];
7->21 [style = solid, label="records"];
14->10 [style = bold, label=""];
23->29 [style = solid, label="records"];
7->27 [style = solid, label="v"];
10->7 [style = bold, label=""];
13->16 [style = bold, label=""];
14->10 [style = solid, label="v"];
8->17 [style = bold, label=""];
35->40 [style = bold, label=""];
18->20 [style = bold, label=""];
21->29 [style = bold, label=""];
38->37 [style = bold, label=""];
7->23 [style = bold, label=""];
10->0 [style = bold, label=""];
2->39 [style = dashed, label="0"];
5->7 [style = bold, label=""];
0->10 [style = solid, label="v"];
34->35 [style = bold, label=""];
35->34 [style = bold, label=""];
6->22 [style = solid, label="expectedBytes"];
22->2 [style = bold, label=""];
34->40 [style = bold, label=""];
5->10 [style = dotted, label="true"];
31->32 [style = bold, label=""];
5->0 [style = dotted, label="true"];
16->14 [style = solid, label="v"];
33->5 [style = solid, label="v"];
36->39 [style = bold, label=""];
17->12 [style = bold, label=""];
1->6 [style = bold, label=""];
30->12 [style = bold, label=""];
16->33 [style = solid, label="v"];
14->5 [style = dotted, label="true"];
23->12 [style = solid, label="partitions"];
40->36 [style = bold, label=""];
21->9 [style = solid, label="partitions"];
10->23 [style = bold, label=""];
18->28 [style = dashed, label="0"];
9->19 [style = bold, label=""];
16->5 [style = solid, label="v"];
0->5 [style = bold, label=""];
14->5 [style = bold, label=""];
14->5 [style = solid, label="v"];
33->14 [style = bold, label=""];
7->36 [style = solid, label="expectedBytes"];
14->33 [style = dotted, label="true"];
7->10 [style = bold, label=""];
10->27 [style = bold, label=""];
25->4 [style = bold, label=""];
22->2 [style = solid, label="expectedBytes"];
11->15 [style = bold, label=""];
20->4 [style = bold, label=""];
32->38 [style = bold, label=""];
23->21 [style = bold, label=""];
5->10 [style = solid, label="v"];
7->10 [style = solid, label="v"];
10->40 [style = solid, label="records"];
35->34 [style = dotted, label="true"];
10->27 [style = dotted, label="true"];
5->7 [style = solid, label="v"];
4->11 [style = bold, label=""];
10->7 [style = dotted, label="true"];
}
