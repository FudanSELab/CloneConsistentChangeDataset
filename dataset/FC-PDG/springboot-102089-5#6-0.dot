digraph {
11 [style = filled, label = "InvocationResult<Integer> result = LambdaSafe.callback(,callbackInstance,argument).invokeAnd(null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verifyZeroInteractions(callbackInstance)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(result.hasResult()).isFalse()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String argument = \"foo\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "callbackInvokeAndWhenLambdaMismatchShouldSwallowException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "GenericFactory<StringBuilder> callbackInstance = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "callbackInvokeAndWhenHasResolvableGenericNonMatchShouldReturnNoResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "String argument = \"foo\"@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verifyNoInteractions(callbackInstance)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "GenericFactory<?> callbackInstance = mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "InvocationResult<Integer> result = LambdaSafe.callback(,callbackInstance,argument).invokeAnd(null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(result.hasResult()).isFalse()@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11->8 [style = bold, label=""];
6->4 [style = bold, label=""];
1->2 [style = bold, label=""];
3->5 [style = bold, label=""];
4->1 [style = bold, label=""];
12->10 [style = bold, label=""];
9->12 [style = bold, label=""];
4->7 [style = solid, label="callbackInstance"];
5->7 [style = dashed, label="0"];
3->7 [style = bold, label=""];
4->5 [style = solid, label="callbackInstance"];
0->4 [style = bold, label=""];
2->3 [style = bold, label=""];
4->12 [style = dashed, label="0"];
10->11 [style = bold, label=""];
}
