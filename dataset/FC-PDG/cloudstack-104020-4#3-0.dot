digraph {
1 [style = filled, label = "when(netmodel.findPhysicalNetworkId(anyLong(),(String)any(),(TrafficType)any())).thenReturn(NETWORK_ID)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(implementednetwork.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaa\"))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "guru.shutdown(implementednetwork,offering)@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(physnetdao.findById((Long)any())).thenReturn(physnet)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "verify(agentmgr,times(1)).easySend(eq(NETWORK_ID),(Command)any())@@@50@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final NetworkProfile implementednetwork = mock()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(hostdao.findById(anyLong())).thenReturn(niciraHost)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertTrue(implementednetwork.getCidr().equals(\"10.1.1.0/24\"))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertTrue(implementednetwork.getGateway().equals(\"10.1.1.1\"))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "when(agentmgr.easySend(eq(NETWORK_ID),(Command)any())).thenReturn(answer)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testShutdown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final DeployDestination dest = mock()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "when(network.getBroadcastUri()).thenReturn(new URI(\"lswitch:aaaaa\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(niciraHost.getId()).thenReturn(NETWORK_ID)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(netdao.findById(NETWORK_ID)).thenReturn(network)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "when(nosd.areServicesSupportedByNetworkOffering(NETWORK_ID,Service.Connectivity)).thenReturn(false)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Account acc = mock()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneuuid\")).thenReturn(\"aaaa\")@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "when(network.getGateway()).thenReturn(\"10.1.1.1\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final ReservationContext res = mock()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final NetworkOffering offering = mock()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final NetworkVO network = mock()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(network.getName()).thenReturn(\"testnetwork\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "testShutdown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final HostVO niciraHost = mock()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "when(device.getId()).thenReturn(1L)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final CreateLogicalSwitchAnswer answer = mock()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "when(dest.getDataCenter()).thenReturn(dc)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final Network implementednetwork = guru.implement(network,offering,dest,res)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "when(answer.getResult()).thenReturn(true)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final PhysicalNetworkVO physnet = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "when(nvpdao.listByPhysicalNetwork(NETWORK_ID)).thenReturn(Arrays.asList(new NiciraNvpDeviceVO((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@77551c))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(physnet.getId()).thenReturn(NETWORK_ID)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(dom.getName()).thenReturn(\"domain\")@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "when(offering.getTrafficType()).thenReturn(TrafficType.Guest)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "when(network.getCidr()).thenReturn(\"10.1.1.0/24\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "when(res.getAccount()).thenReturn(acc)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "when(res.getDomain()).thenReturn(dom)@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "when(offering.isSpecifyVlan()).thenReturn(false)@@@49@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "verify(implementednetwork,times(1)).setBroadcastUri(null)@@@52@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "verify(agentmgr,times(1)).easySend(eq(NETWORK_ID),(Command)any())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "when(network.getPhysicalNetworkId()).thenReturn(NETWORK_ID)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(offering.getGuestType()).thenReturn(GuestType.Isolated)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final DeleteLogicalSwitchAnswer answer = mock()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final Domain dom = mock()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "when(niciraHost.getDetail(\"transportzoneisotype\")).thenReturn(\"stt\")@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "when(offering.getId()).thenReturn(NETWORK_ID)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(acc.getAccountName()).thenReturn(\"accountname\")@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(implementednetwork.getId()).thenReturn(NETWORK_ID)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final NiciraNvpDeviceVO device = mock()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(offering.getSpecifyVlan()).thenReturn(false)@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "mock()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "when(answer.getLogicalSwitchUuid()).thenReturn(\"aaaaa\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "testImplementWithCidr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertTrue(implementednetwork != null)@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(physnet.getIsolationMethods()).thenReturn(Arrays.asList(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@7754fc))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final DataCenter dc = mock()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "when(network.getState()).thenReturn(State.Implementing)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58->50 [style = bold, label=""];
13->47 [style = bold, label=""];
13->56 [style = dashed, label="0"];
10->39 [style = solid, label="offering"];
31->43 [style = solid, label="dom"];
29->30 [style = bold, label=""];
2->6 [style = bold, label=""];
37->51 [style = dashed, label="0"];
16->53 [style = solid, label="res"];
10->53 [style = solid, label="offering"];
14->11 [style = solid, label="acc"];
51->30 [style = solid, label="answer"];
12->9 [style = bold, label=""];
22->8 [style = bold, label=""];
21->36 [style = bold, label=""];
16->43 [style = bold, label=""];
49->56 [style = bold, label=""];
33->45 [style = bold, label=""];
18->24 [style = solid, label="niciraHost"];
1->31 [style = bold, label=""];
45->10 [style = bold, label=""];
57->54 [style = bold, label=""];
8->34 [style = bold, label=""];
11->51 [style = bold, label=""];
30->41 [style = bold, label=""];
36->44 [style = bold, label=""];
38->28 [style = bold, label=""];
37->29 [style = bold, label=""];
11->37 [style = bold, label=""];
47->39 [style = bold, label=""];
56->57 [style = bold, label=""];
32->26 [style = bold, label=""];
35->21 [style = bold, label=""];
29->52 [style = bold, label=""];
24->5 [style = bold, label=""];
36->58 [style = bold, label=""];
43->11 [style = bold, label=""];
12->53 [style = solid, label="dest"];
41->53 [style = dashed, label="0"];
44->58 [style = dashed, label="0"];
44->4 [style = bold, label=""];
40->3 [style = bold, label=""];
4->50 [style = dashed, label="0"];
14->15 [style = bold, label=""];
34->35 [style = bold, label=""];
6->7 [style = bold, label=""];
48->28 [style = bold, label=""];
28->2 [style = solid, label="physnet"];
27->47 [style = dashed, label="0"];
18->24 [style = bold, label=""];
3->1 [style = bold, label=""];
0->12 [style = bold, label=""];
25->18 [style = bold, label=""];
30->53 [style = bold, label=""];
7->20 [style = bold, label=""];
42->0 [style = bold, label=""];
51->29 [style = bold, label=""];
27->39 [style = bold, label=""];
13->27 [style = bold, label=""];
19->14 [style = bold, label=""];
50->42 [style = bold, label=""];
10->23 [style = bold, label=""];
39->32 [style = bold, label=""];
35->53 [style = solid, label="network"];
9->25 [style = solid, label="dc"];
17->13 [style = bold, label=""];
5->40 [style = bold, label=""];
31->19 [style = bold, label=""];
46->22 [style = bold, label=""];
4->42 [style = bold, label=""];
23->46 [style = bold, label=""];
37->30 [style = solid, label="answer"];
42->12 [style = bold, label=""];
17->49 [style = dashed, label="0"];
15->16 [style = bold, label=""];
20->33 [style = bold, label=""];
41->39 [style = solid, label="implementednetwork"];
53->49 [style = bold, label=""];
28->2 [style = bold, label=""];
41->17 [style = bold, label=""];
20->33 [style = solid, label="device"];
9->25 [style = bold, label=""];
35->0 [style = solid, label="network"];
53->49 [style = solid, label="implementednetwork"];
52->30 [style = bold, label=""];
55->28 [style = bold, label=""];
}
