digraph {
1 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@22@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "RuleSet ruleSet2 = RuleSets.ofList(rule2)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "testPlanTransformWithRuleNameConflicts['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@25@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\" \" + \"order by \"emps\".\"deptno\"\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "RelOptRule rule2 = new RelOptRule(operand(,operand(,RelOptRule.any())),\"MYRULE\"){@Override public boolean matches(RelOptRuleCall call){return false}public void onMatch(RelOptRuleCall call){}}@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "SqlNode parse = planner.parse(\"select * from \"emps\"\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "RelTraitSet traitSet = convert.getTraitSet().replace(EnumerableConvention.INSTANCE)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "RelOptRule rule1 = new RelOptRule(operand(,operand(,RelOptRule.any())),\"MYRULE\"){@Override public boolean matches(RelOptRuleCall call){return false}public void onMatch(RelOptRuleCall call){}}@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SqlNode validate = planner.validate(parse)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "RuleSet ruleSet1 = RuleSets.ofList(rule1,EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "RuleSet ruleSet1 = RuleSets.ofList(rule1,EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,EnumerableRules.ENUMERABLE_FILTER_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "RelNode convert = planner.rel(validate).project()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RelNode convert = planner.rel(validate).rel@@@24@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "RelOptRule rule2 = MyFilterProjectRule.config(\"MYRULE\").toRule()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "RelNode transform = planner.transform(0,traitSet,convert)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet1),Programs.of(ruleSet2))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "RelNode convert = planner.rel(validate).rel@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "testSortPlan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testPlanTransformWithRuleNameConflicts['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "RuleSet ruleSet = RuleSets.ofList(CoreRules.SORT_REMOVE,EnumerableRules.ENUMERABLE_TABLE_SCAN_RULE,EnumerableRules.ENUMERABLE_PROJECT_RULE,EnumerableRules.ENUMERABLE_SORT_RULE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "RelNode transform2 = planner.transform(1,traitSet,transform)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertThat(toString(transform2),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet1),Programs.of(ruleSet2))@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RelNode transform2 = planner.transform(1,traitSet,transform)@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "RuleSet ruleSet2 = RuleSets.ofList(rule2)@@@20@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Planner planner = getPlanner(null,Programs.of(ruleSet))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "RelOptRule rule1 = MyProjectFilterRule.config(\"MYRULE\").toRule()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(toString(transform2),equalTo(\"EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@28@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(toString(transform),equalTo(\"EnumerableSort(sort0=($1(, dir0=(ASC()\" + \" EnumerableProject(empid=($0(, deptno=($1(, name=($2(, salary=($3(, commission=($4()\" + \" EnumerableTableScan(table=((hr, emps(()\"))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24->20 [style = solid, label="ruleSet2"];
5->8 [style = bold, label=""];
25->16 [style = solid, label="rule1"];
0->9 [style = bold, label=""];
27->32 [style = bold, label=""];
14->17 [style = solid, label="transform"];
20->13 [style = bold, label=""];
13->23 [style = solid, label="parse"];
10->4 [style = solid, label="parse"];
29->30 [style = bold, label=""];
7->10 [style = bold, label=""];
15->24 [style = solid, label="rule2"];
16->24 [style = bold, label=""];
2->3 [style = bold, label=""];
33->29 [style = solid, label="traitSet"];
28->29 [style = solid, label="convert"];
18->19 [style = bold, label=""];
2->6 [style = solid, label="rule2"];
19->17 [style = solid, label="traitSet"];
3->6 [style = bold, label=""];
14->17 [style = bold, label=""];
11->12 [style = bold, label=""];
1->11 [style = solid, label="transform"];
21->25 [style = bold, label=""];
17->22 [style = bold, label=""];
15->16 [style = bold, label=""];
19->14 [style = solid, label="traitSet"];
3->7 [style = solid, label="ruleSet1"];
0->28 [style = dashed, label="0"];
1->11 [style = bold, label=""];
4->0 [style = bold, label=""];
11->12 [style = solid, label="transform2"];
33->29 [style = bold, label=""];
24->20 [style = bold, label=""];
29->30 [style = solid, label="transform"];
4->0 [style = solid, label="validate"];
31->26 [style = bold, label=""];
16->20 [style = solid, label="ruleSet1"];
19->14 [style = bold, label=""];
28->33 [style = bold, label=""];
8->2 [style = bold, label=""];
6->7 [style = solid, label="ruleSet2"];
18->14 [style = solid, label="convert"];
9->1 [style = solid, label="traitSet"];
13->23 [style = bold, label=""];
10->4 [style = bold, label=""];
25->15 [style = bold, label=""];
23->18 [style = solid, label="validate"];
9->11 [style = solid, label="traitSet"];
26->28 [style = bold, label=""];
27->32 [style = solid, label="ruleSet"];
31->26 [style = solid, label="parse"];
6->7 [style = bold, label=""];
9->1 [style = bold, label=""];
8->3 [style = solid, label="rule1"];
0->1 [style = solid, label="convert"];
23->18 [style = bold, label=""];
32->31 [style = bold, label=""];
17->22 [style = solid, label="transform2"];
34->27 [style = bold, label=""];
}
