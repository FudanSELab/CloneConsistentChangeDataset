digraph {
9 [style = filled, label = "Setting.AffixSetting<Integer> intSetting = Setting.affixKeySetting(\"foo.\",\"bar\",null,null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testDependentSettings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testDependentSettings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(intSetting,stringSetting)))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "testDependentSettingsWithFallback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Setting.AffixSetting<Integer> barSetting = Setting.affixKeySetting(\"foo.\",\"bar\",null,nameSetting)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Setting.AffixSetting<String> nameSetting = Setting.affixKeySetting(\"foo.\",\"name\",null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final IllegalArgumentException e = expectThrows(,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "service.validate(Settings.builder().put(\"fallback.test.name\",\"test\").put(\"foo.test.bar\",7).build(),true)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Setting.AffixSetting<Integer> intSetting = Setting.affixKeySetting(\"foo.\",\"bar\",null,stringSetting)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "IllegalArgumentException iae = expectThrows(,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(intSetting,stringSetting)))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(nameFallbackSetting,nameSetting,barSetting)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(e,hasToString(containsString(\"missing required setting (foo.test.name( for setting (foo.test.bar(\")))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "service.validate(Settings.builder().put(\"foo.test.bar\",7).build(),false)@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"missing required setting (foo.test.name( for setting (foo.test.bar(\",iae.getMessage())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "service.validate(Settings.builder().put(\"foo.test.name\",\"test\").put(\"foo.test.bar\",7).build(),true)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Setting.AffixSetting<String> nameFallbackSetting = Setting.affixKeySetting(\"fallback.\",\"name\",null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "service.validate(Settings.builder().put(\"foo.test.name\",\"test\").put(\"foo.test.bar\",7).build(),true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Setting.AffixSetting<String> stringSetting = Setting.affixKeySetting(\"foo.\",\"name\",null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
5->9 [style = bold, label=""];
18->17 [style = solid, label="nameSetting"];
19->12 [style = bold, label=""];
4->6 [style = bold, label=""];
5->3 [style = solid, label="stringSetting"];
3->2 [style = solid, label="intSetting"];
3->18 [style = dashed, label="0"];
14->17 [style = bold, label=""];
12->16 [style = bold, label=""];
9->10 [style = bold, label=""];
15->19 [style = bold, label=""];
13->11 [style = bold, label=""];
5->2 [style = solid, label="stringSetting"];
11->18 [style = bold, label=""];
2->10 [style = dashed, label="0"];
15->19 [style = solid, label="e"];
18->14 [style = solid, label="nameSetting"];
14->17 [style = solid, label="barSetting"];
5->10 [style = solid, label="stringSetting"];
9->10 [style = solid, label="intSetting"];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
3->9 [style = dashed, label="0"];
5->11 [style = dashed, label="0"];
0->4 [style = bold, label=""];
10->0 [style = bold, label=""];
17->15 [style = bold, label=""];
7->12 [style = dashed, label="0"];
6->7 [style = bold, label=""];
18->14 [style = bold, label=""];
11->17 [style = solid, label="nameFallbackSetting"];
}
