digraph {
16 [style = filled, label = "this.closeClient(vm0)@@@153@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final String host0 = NetworkUtils.getServerHostName(vm0.getHost())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\"){public void run2(){assertEquals(0,TestObject.numInstance)}})@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Host host = Host.getHost(0)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testCq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\"){public void run2(){configAndStartBridgeServer()Region region = getRootRegion().getSubregion(regionName)for (int i = 0 i < numberOfEntries i++){region.put(\"key-\" + i,new TestObject(i,\"vmware\"))}}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "this.closeClient(vm1)@@@144@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "VM vm2 = host.getVM(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final String cqName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "final int createEvents@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "vm2.invoke(executeCq)@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "vm3.invoke(executeCq)@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final int updateEvents@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "vm2.invoke(validateCq)@@@140@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "vm2.invoke(validateCq)@@@148@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final String poolName = \"testCqPool\"@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SerializableRunnable executeCq = new CacheSerializableRunnable(\"Execute queries\"){public void run2(){LogWriterUtils.getLogWriter().info(\"### Create CQ. ###\" + cqName)QueryService qService = nulltry {qService = (PoolManager.find(poolName)).getQueryService()}catch (Exception cqe) CqAttributesFactory cqf = new CqAttributesFactory()CqListener(( cqListeners = {new CqQueryTestListener(LogWriterUtils.getLogWriter())}((CqQueryTestListener)cqListeners(0().cqName = cqNamecqf.initCqListeners(cqListeners)CqAttributes cqa = cqf.create()try {CqQuery cq = qService.newCq(cqName,queryString(3(,cqa)SelectResults sr = cq.executeWithInitialResults()for (Object o : sr.asSet()){Struct s = (Struct)oObject value = s.get(\"value\")if (!(value instanceof TestObject)) {fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass())}}}catch (Exception ex) }}@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "this.closeClient(vm3)@@@151@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "vm3.invoke(validateCq)@@@149@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\"){public void run2(){configAndStartBridgeServer()Region region = getRootRegion().getSubregion(regionName)}})@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "this.closeClient(vm1)@@@152@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final int port0 = vm0.invoke(null)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "VM vm1 = host.getVM(1)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "createPool(vm3,poolName,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1736b9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1736bd,true)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "vm1.invoke(new CacheSerializableRunnable(\"Create Bridge Server\"){public void run2(){assertEquals(0,TestObject.numInstance)}})@@@101@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final int numberOfEntries = 10@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SerializableRunnable validateCq = new CacheSerializableRunnable(\"Validate CQs\"){public void run2(){LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqQuery cQuery = cqService.getCq(cqName)if (cQuery == null) {fail(\"Failed to get CqQuery for CQ : \" + cqName)}CqAttributes cqAttr = cQuery.getCqAttributes()CqListener cqListeners = cqAttr.getCqListeners()final CqQueryTestListener listener = (CqQueryTestListener)cqListeners(0(await().until(null)listener.printInfo(false)Object(( cqEvents = listener.getEvents()for (Object o : cqEvents){CqEvent cqEvent = (CqEvent)oObject value = cqEvent.getNewValue()if (!(value instanceof TestObject)) {fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass())}}assertEquals(\"Total Event Count mismatch\",(numberOfEntries * 2 - queryLimit),listener.getTotalEventCount())assertEquals(\"Create Event mismatch\",numberOfEntries,listener.getCreateEventCount())assertEquals(\"Update Event mismatch\",numberOfEntries - queryLimit,listener.getUpdateEventCount())}}@@@107@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "this.closeClient(vm2)@@@150@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testCq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
40 [style = filled, label = "VM vm@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "vm0.invoke(new CacheSerializableRunnable(\"Create Bridge Server\"){public void run2(){Region region = getRootRegion().getSubregion(regionName)for (int i = 0 i < numberOfEntries * 2 i++){region.put(\"key-\" + i,new TestObject(i,\"vmware\"))}assertEquals(numberOfEntries * 3,TestObject.numInstance)}})@@@89@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final int expectedEvents@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "this.closeClient(vm2)@@@142@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "this.closeClient(vm0)@@@145@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final String cqName = \"testCq\"@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "validateCq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final int queryLimit = 6@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "vm.invoke(new CacheSerializableRunnable(\"Validate CQs\"){public void run2(){LogWriterUtils.getLogWriter().info(\"### Validating CQ. ### \" + cqName)QueryService cqService = nulltry {cqService = getCache().getQueryService()}catch (Exception cqe) CqQuery cQuery = cqService.getCq(cqName)if (cQuery == null) {fail(\"Failed to get CqQuery for CQ : \" + cqName)}CqAttributes cqAttr = cQuery.getCqAttributes()CqListener cqListeners = cqAttr.getCqListeners()CqQueryTestListener listener = (CqQueryTestListener)cqListeners(0(listener.printInfo(false)Object(( cqEvents = listener.getEvents()for (Object o : cqEvents){CqEvent cqEvent = (CqEvent)oObject value = cqEvent.getNewValue()if (!(value instanceof TestObject)) {fail(\"Expected type TestObject, not found in result set. Found type :\" + o.getClass())}}if (listener.getTotalEventCount() != expectedEvents) {listener.waitForTotalEvents(expectedEvents)}assertEquals(\"Total Event Count mismatch\",(expectedEvents),listener.getTotalEventCount())assertEquals(\"Create Event mismatch\",createEvents,listener.getCreateEventCount())assertEquals(\"Update Event mismatch\",updateEvents,listener.getUpdateEventCount())}})@@@3@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "VM vm0 = host.getVM(0)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "this.closeClient(vm3)@@@143@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "final int port1 = vm1.invoke(null)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "vm3.invoke(validateCq)@@@141@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "createPool(vm2,poolName,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1736ab,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1736af,true)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "VM vm3 = host.getVM(3)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->3 [style = bold, label=""];
12->0 [style = bold, label=""];
5->14 [style = bold, label=""];
3->10 [style = bold, label=""];
8->30 [style = solid, label="vm1"];
6->22 [style = solid, label="vm2"];
24->22 [style = solid, label="host0"];
31->11 [style = bold, label=""];
18->20 [style = bold, label=""];
23->3 [style = solid, label="cqName"];
3->10 [style = solid, label="executeCq"];
37->40 [style = dotted, label="true"];
26->36 [style = bold, label=""];
38->39 [style = solid, label="cqName"];
35->30 [style = bold, label=""];
0->7 [style = bold, label=""];
20->15 [style = bold, label=""];
21->17 [style = bold, label=""];
6->18 [style = solid, label="vm2"];
42->39 [style = solid, label="createEvents"];
26->32 [style = solid, label="validateCq"];
6->13 [style = bold, label=""];
13->9 [style = solid, label="vm3"];
29->5 [style = bold, label=""];
21->7 [style = solid, label="numberOfEntries"];
8->6 [style = bold, label=""];
29->7 [style = solid, label="i"];
41->39 [style = solid, label="expectedEvents"];
22->9 [style = bold, label=""];
11->2 [style = bold, label=""];
17->26 [style = solid, label="queryLimit"];
4->9 [style = solid, label="port1"];
2->8 [style = bold, label=""];
10->12 [style = bold, label=""];
2->16 [style = solid, label="vm0"];
28->27 [style = bold, label=""];
23->26 [style = solid, label="cqName"];
4->24 [style = bold, label=""];
37->38 [style = dotted, label="true"];
30->33 [style = bold, label=""];
37->39 [style = bold, label=""];
25->22 [style = solid, label="poolName"];
37->41 [style = dotted, label="true"];
19->11 [style = bold, label=""];
25->9 [style = solid, label="poolName"];
2->33 [style = solid, label="vm0"];
3->12 [style = solid, label="executeCq"];
37->42 [style = dotted, label="true"];
26->28 [style = solid, label="validateCq"];
15->16 [style = bold, label=""];
6->34 [style = solid, label="vm2"];
26->28 [style = bold, label=""];
27->18 [style = bold, label=""];
21->26 [style = solid, label="numberOfEntries"];
36->32 [style = bold, label=""];
24->9 [style = solid, label="host0"];
1->26 [style = bold, label=""];
13->20 [style = solid, label="vm3"];
9->23 [style = bold, label=""];
32->34 [style = bold, label=""];
24->25 [style = bold, label=""];
34->35 [style = bold, label=""];
7->1 [style = bold, label=""];
8->15 [style = solid, label="vm1"];
14->4 [style = bold, label=""];
14->22 [style = solid, label="port0"];
13->35 [style = solid, label="vm3"];
25->22 [style = bold, label=""];
37->43 [style = dotted, label="true"];
26->27 [style = solid, label="validateCq"];
17->29 [style = bold, label=""];
43->39 [style = solid, label="updateEvents"];
21->29 [style = solid, label="numberOfEntries"];
13->21 [style = bold, label=""];
26->36 [style = solid, label="validateCq"];
}
