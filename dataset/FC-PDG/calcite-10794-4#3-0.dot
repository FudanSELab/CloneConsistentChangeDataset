digraph {
27 [style = filled, label = "tester.checkNull(\"sign(cast(null as double))\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "tester.checkScalar(\"truncate(cast(-42.345 as decimal(2, 3)), 2)\",BigDecimal.valueOf(-4234,2),\"DECIMAL(2, 3) NOT NULL\")@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "tester.checkNull(\"truncate(cast(null as double), 1)\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "tester.checkScalar(\"truncate(42.324)\",BigDecimal.valueOf(42,0),\"DECIMAL(5, 3) NOT NULL\")@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "tester.checkNull(\"truncate(cast(null as integer))\")@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "tester.checkNull(\"truncate(43.21, cast(null as integer))\")@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "tester.checkFails(\"^truncate('abc', 'def')^\",\"Cannot apply 'TRUNCATE' to arguments of type 'TRUNCATE\(<CHAR\(3\)>, <CHAR\(3\)>\)'\. Supported form\(s\): 'TRUNCATE\(<NUMERIC>, <INTEGER>\)'\",false)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tester.checkType(\"truncate(case when false then 42 else null end, -1)\",\"INTEGER\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tester.checkScalar(\"truncate(cast(42.345 as decimal(2, 3)), 2)\",BigDecimal.valueOf(4234,2),\"DECIMAL(2, 3) NOT NULL\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "tester.checkNull(\"sign(cast(null as integer))\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "tester.setFor(SqlStdOperatorTable.TRUNCATE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tester.checkScalar(\"truncate(cast(42.324 as float))\",42F,\"FLOAT NOT NULL\")@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "tester.checkScalar(\"sign(cast(-1 as decimal(1, 0)))\",BigDecimal.valueOf(-1),\"DECIMAL(1, 0) NOT NULL\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "tester.checkType(\"sign(cast(1 as float))\",\"FLOAT NOT NULL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "tester.checkNull(\"truncate(cast(null as integer), 1)\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testTruncateFunc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tester.checkScalar(\"truncate(42)\",42,\"INTEGER NOT NULL\")@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "tester.checkNull(\"truncate(cast(null as double))\")@@@19@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testTruncateFunc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "tester.checkFails(\"^sign('abc')^\",\"Cannot apply 'SIGN' to arguments of type 'SIGN\(<CHAR\(3\)>\)'\. Supported form\(s\): 'SIGN\(<NUMERIC>\)'\",false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "tester.checkType(\"sign(case when false then 1 else null end)\",\"INTEGER\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "tester.checkType(\"truncate(cast(42 as float), 1)\",\"FLOAT NOT NULL\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "tester.checkScalar(\"sign(cast(0 as float))\",0d,\"FLOAT NOT NULL\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "tester.checkScalar(\"truncate(42, -1)\",40,\"INTEGER NOT NULL\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "tester.checkScalar(\"sign(1)\",1,\"INTEGER NOT NULL\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "tester.checkType(\"truncate(42, -1)\",\"INTEGER NOT NULL\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "tester.checkType(\"sign(1)\",\"INTEGER NOT NULL\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "tester.setFor(SqlStdOperatorTable.SIGN)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testSignFunc['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "tester.checkScalar(\"truncate(cast(42.345 as decimal(2, 3)))\",BigDecimal.valueOf(42,0),\"DECIMAL(2, 3) NOT NULL\")@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3->19 [style = dashed, label="0"];
4->26 [style = dashed, label="0"];
1->25 [style = dashed, label="0"];
26->21 [style = bold, label=""];
1->9 [style = bold, label=""];
13->4 [style = bold, label=""];
23->19 [style = bold, label=""];
14->18 [style = bold, label=""];
8->4 [style = bold, label=""];
7->28 [style = dashed, label="0"];
2->7 [style = bold, label=""];
4->5 [style = bold, label=""];
28->23 [style = bold, label=""];
0->3 [style = bold, label=""];
22->20 [style = bold, label=""];
11->17 [style = bold, label=""];
15->7 [style = bold, label=""];
16->10 [style = bold, label=""];
29->25 [style = bold, label=""];
3->6 [style = bold, label=""];
0->23 [style = dashed, label="0"];
19->29 [style = bold, label=""];
6->29 [style = dashed, label="0"];
7->0 [style = bold, label=""];
8->13 [style = bold, label=""];
5->21 [style = dashed, label="0"];
21->27 [style = bold, label=""];
12->11 [style = bold, label=""];
18->12 [style = bold, label=""];
9->8 [style = bold, label=""];
24->28 [style = bold, label=""];
25->22 [style = bold, label=""];
20->26 [style = bold, label=""];
6->1 [style = bold, label=""];
5->16 [style = bold, label=""];
10->14 [style = bold, label=""];
9->22 [style = dashed, label="0"];
}
