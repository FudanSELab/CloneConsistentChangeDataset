digraph {
15 [style = filled, label = "verify(this.authzRequest).getAuthorize(eq(REGION_NAME),eq(key.toString()),eq(null))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(this.securityService.isIntegratedSecurity()).thenReturn(true)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "verify(this.chunkedResponseMessage).sendChunk(this.serverConnection)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(this.securityService.isClientSecurityRequired()).thenReturn(true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "integratedSecurityShouldSucceedIfAuthorized['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "verify(this.securityService).authorize(Resource.DATA,Operation.READ,REGION_NAME,key.toString())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ArgumentCaptor<ObjectPartList> argument = ArgumentCaptor.forClass()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(this.securityService.isIntegratedSecurity()).thenReturn(false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(this.securityService).authorizeRegionRead(eq(REGION_NAME),eq(key.toString()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertThat(key).isIn(KEYS)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verify(this.chunkedResponseMessage).sendChunk(eq(this.serverConnection))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "integratedSecurityShouldSucceedIfAuthorized['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "oldSecurityShouldSucceedIfAuthorized['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "this.getAll70.cmdExecute(this.message,this.serverConnection,this.securityService,0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(argument.getValue().getObjects()).hasSize(KEYS.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(this.chunkedResponseMessage).addObjPartNoCopying(argument.capture())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->13 [style = bold, label=""];
9->11 [style = bold, label=""];
4->6 [style = bold, label=""];
9->4 [style = bold, label=""];
11->6 [style = bold, label=""];
3->14 [style = bold, label=""];
8->3 [style = bold, label=""];
10->3 [style = bold, label=""];
3->0 [style = bold, label=""];
7->9 [style = bold, label=""];
0->14 [style = dashed, label="0"];
5->1 [style = bold, label=""];
6->13 [style = dashed, label="0"];
9->15 [style = bold, label=""];
4->15 [style = dashed, label="0"];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
2->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
0->5 [style = bold, label=""];
14->5 [style = bold, label=""];
}
