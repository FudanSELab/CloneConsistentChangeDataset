digraph {
29 [style = filled, label = "ProduceResponse response = produceResponse(tp0,i,Errors.NONE,throttleTimeMs)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeMax))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MockSelector selector = new MockSelector(time)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "ProduceRequest.Builder builder = ProduceRequest.Builder.forCurrentMagic((short)1,1000,Collections.emptyMap())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "int i = 1@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "buffer = response.serialize(ApiKeys.FETCH.latestVersion(),new ResponseHeader(request.correlationId()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "FetchRequest.Builder builder = FetchRequest.Builder.forConsumer(100,100,new LinkedHashMap<TopicPartition,PartitionData>())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "buffer = response.serialize(ApiKeys.PRODUCE.latestVersion(),new ResponseHeader(request.correlationId()))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ProduceRequest.Builder builder = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,(short)1,1000,Collections.emptyMap())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "client.send(request,time.milliseconds())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "selector.clear()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Cluster cluster = TestUtils.singletonCluster(\"test\",1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "short apiVersionsResponseVersion = ApiKeys.API_VERSIONS.latestVersion()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Sensor throttleTimeSensor = Fetcher.throttleTimeSensor(metrics,metricsRegistry)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(250,avgMetric.value(),EPS)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "selector.clear()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchThrottleTimeAvg))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "ByteBuffer buffer = ApiVersionsResponse.createApiVersionsResponse(400,RecordBatch.CURRENT_MAGIC_VALUE).serialize(apiVersionsResponseVersion,new ResponseHeader(0))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "client.poll(1,time.milliseconds())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricInstance(this.senderMetricsRegistry.produceThrottleTimeMax))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Sensor throttleTimeSensor = Sender.throttleTimeSensor(metrics,this.senderMetricsRegistry)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricInstance(this.senderMetricsRegistry.produceThrottleTimeAvg))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "FetchResponse response = fetchResponse(tp0,nextRecords,Errors.NONE,i,throttleTimeMs)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "assertEquals(400,maxMetric.value(),EPSILON)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int throttleTimeMs = 100 * i@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "i++@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ClientRequest request = client.newClientRequest(node.idString(),builder,time.milliseconds(),true,null)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "client.close()@@@32@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "client.poll(1,time.milliseconds())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor,new LogContext())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "client.poll(1,time.milliseconds())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i <= 3@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(250,avgMetric.value(),EPSILON)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(400,maxMetric.value(),EPS)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "!client.ready(node,time.milliseconds())@@@11@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Node node = cluster.nodes().get(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "selector.completeReceive(new NetworkReceive(node.idString(),buffer))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "selector.delayedReceive(new DelayedReceive(node.idString(),new NetworkReceive(node.idString(),buffer)))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "NetworkClient client = new NetworkClient(selector,metadata,\"mock\",Integer.MAX_VALUE,1000,1000,64 * 1024,64 * 1024,1000,time,true,new ApiVersions(),throttleTimeSensor,logContext)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
34->9 [style = bold, label=""];
44->8 [style = bold, label=""];
27->28 [style = bold, label=""];
25->4 [style = dotted, label="true"];
20->0 [style = bold, label=""];
18->30 [style = bold, label=""];
2->27 [style = solid, label="i"];
26->40 [style = bold, label=""];
24->10 [style = solid, label="throttleTimeSensor"];
25->28 [style = dotted, label="true"];
41->1 [style = solid, label="buffer"];
25->29 [style = dotted, label="true"];
30->18 [style = bold, label=""];
25->11 [style = dotted, label="true"];
21->18 [style = bold, label=""];
13->44 [style = solid, label="selector"];
9->6 [style = bold, label=""];
19->1 [style = bold, label=""];
28->4 [style = bold, label=""];
10->8 [style = bold, label=""];
24->43 [style = dashed, label="0"];
2->40 [style = solid, label="i"];
8->14 [style = solid, label="apiVersionsResponseVersion"];
39->38 [style = bold, label=""];
25->15 [style = bold, label=""];
23->17 [style = bold, label=""];
2->25 [style = bold, label=""];
25->19 [style = dotted, label="true"];
6->40 [style = solid, label="i"];
17->5 [style = bold, label=""];
3->38 [style = dashed, label="0"];
27->31 [style = bold, label=""];
31->4 [style = bold, label=""];
25->12 [style = dotted, label="true"];
5->39 [style = dashed, label="0"];
30->34 [style = bold, label=""];
4->12 [style = solid, label="request"];
24->20 [style = bold, label=""];
25->27 [style = bold, label=""];
6->2 [style = solid, label="i"];
28->31 [style = dashed, label="0"];
1->16 [style = bold, label=""];
13->43 [style = bold, label=""];
37->4 [style = solid, label="builder"];
18->9 [style = bold, label=""];
33->30 [style = bold, label=""];
0->44 [style = bold, label=""];
25->26 [style = dotted, label="true"];
14->21 [style = bold, label=""];
36->42 [style = bold, label=""];
15->36 [style = bold, label=""];
13->24 [style = bold, label=""];
13->10 [style = solid, label="selector"];
30->33 [style = bold, label=""];
25->31 [style = dotted, label="true"];
6->25 [style = bold, label=""];
43->20 [style = bold, label=""];
21->34 [style = bold, label=""];
42->39 [style = bold, label=""];
8->14 [style = bold, label=""];
17->42 [style = dashed, label="0"];
19->41 [style = dashed, label="0"];
31->4 [style = solid, label="builder"];
27->29 [style = solid, label="throttleTimeMs"];
27->37 [style = bold, label=""];
29->19 [style = bold, label=""];
14->21 [style = solid, label="buffer"];
4->12 [style = bold, label=""];
29->40 [style = dashed, label="0"];
43->44 [style = solid, label="throttleTimeSensor"];
25->2 [style = dotted, label="true"];
2->25 [style = solid, label="i"];
34->30 [style = dotted, label="true"];
2->29 [style = solid, label="i"];
25->16 [style = dotted, label="true"];
25->1 [style = dotted, label="true"];
7->13 [style = bold, label=""];
25->37 [style = dotted, label="true"];
15->23 [style = bold, label=""];
16->11 [style = bold, label=""];
6->29 [style = solid, label="i"];
26->29 [style = bold, label=""];
21->33 [style = bold, label=""];
10->44 [style = dashed, label="0"];
28->4 [style = solid, label="builder"];
12->26 [style = bold, label=""];
27->40 [style = solid, label="throttleTimeMs"];
41->1 [style = bold, label=""];
25->41 [style = dotted, label="true"];
33->9 [style = bold, label=""];
3->22 [style = bold, label=""];
33->30 [style = dotted, label="true"];
34->30 [style = bold, label=""];
11->2 [style = bold, label=""];
37->4 [style = bold, label=""];
23->36 [style = dashed, label="0"];
0->10 [style = bold, label=""];
6->27 [style = solid, label="i"];
25->40 [style = dotted, label="true"];
6->25 [style = solid, label="i"];
40->41 [style = bold, label=""];
32->13 [style = bold, label=""];
38->22 [style = bold, label=""];
35->13 [style = bold, label=""];
25->27 [style = dotted, label="true"];
19->1 [style = solid, label="buffer"];
18->30 [style = dotted, label="true"];
}
