digraph {
45 [style = filled, label = "testSimplifyAndPush['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,nullBool),ge(bRef,literal1)),\"false\")@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "checkSimplifyFilter(or(or(eq(aRef,literal1),eq(aRef,literal1)),eq(aRef,literal1)),\"=(?0.a, 1)\")@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal1),ge(aRef,literal1)),\"=(?0.a, 1)\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "checkSimplifyFilter(and(args2),\"false\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkSimplifyFilter(and(le(aRef,literal1),gt(aRef,literal1)),\"false\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal1),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),gt(aRef,literal5))),\"true\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal10),gt(bRef,literal1),gt(aRef,literal10)),\"OR(>(?0.a, 10), >(?0.b, 1))\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "checkSimplifyFilter(and(gt(literal1,aRef),gt(aRef,literal5)),RelOptPredicateList.EMPTY,\"false\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final RexNode cRef = rexBuilder.makeFieldAccess(range,2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testSimplifyFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final ImmutableList<RexNode> args2 = ImmutableList.of(eq(aRef,literal1),eq(aRef,literal10))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).add(\"c\",booleanType).add(\"d\",booleanType).add(\"e\",booleanType).add(\"f\",booleanType).add(\"g\",booleanType).add(\"h\",intType).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final RexNode fRef = rexBuilder.makeFieldAccess(range,5)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5),le(bRef,literal5))),\"false\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args).toStringRaw(),equalTo(\"AND(=(?0.a, 1), =(?0.b, 1))\"))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final ImmutableList<RexNode> args = ImmutableList.of(eq(eq(aRef,literal1),trueLiteral),eq(bRef,literal1))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "checkSimplifyFilter(or(gt(aRef,literal5),gt(bRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5),le(bRef,literal5))),\"false\")@@@44@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "checkSimplifyFilter(and(or(eq(aRef,literal1),eq(aRef,literal10)),eq(aRef,literal1)),\"=(?0.a, 1)\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),ge(aRef,literal1))),\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "checkSimplifyFilter(and(gt(literal1,aRef),gt(literal5,aRef)),RelOptPredicateList.EMPTY,\">(1, ?0.a)\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(gt(aRef,literal5))),\"false\")@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RexLiteral literal5 = rexBuilder.makeExactLiteral(new BigDecimal(5))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "checkSimplifyFilter(and(lt(literal1,aRef),lt(aRef,literal5)),RelOptPredicateList.EMPTY,\"AND(<(1, ?0.a), <(?0.a, 5))\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final RelDataType booleanType = typeFactory.createSqlType(SqlTypeName.BOOLEAN)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "checkSimplifyFilter(or(and(eq(aRef,literal1),eq(aRef,literal1)),and(eq(aRef,literal10),eq(aRef,literal1))),\"=(?0.a, 1)\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final RexNode dRef = rexBuilder.makeFieldAccess(range,3)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "checkSimplifyFilter(and(args),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal10),gt(aRef,literal1)),\">(?0.a, 10)\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final RexLiteral literal5 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(5))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertThat(simplify.simplifyFilterPredicates(args2),nullValue())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),lt(aRef,literal5)),RelOptPredicateList.EMPTY,\"AND(>(?0.a, 1), <(?0.a, 5))\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RexNode eRef = rexBuilder.makeFieldAccess(range,4)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "checkSimplifyFilter(case_(cRef,trueLiteral,dRef,trueLiteral,eRef,falseLiteral,fRef,falseLiteral,nullBool),\"OR(?0.c, ?0.d)\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "checkSimplifyFilter(lt(aRef,literal1),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),gt(aRef,literal5))),\"false\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),gt(aRef,literal10)),\">(?0.a, 10)\")@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "checkSimplify3(and(nullBool,not(or(nullBool,vBool()))),\"AND(null, NOT(?0.bool0))\",\"false\",\"NOT(?0.bool0)\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "checkSimplify2(and(vBool(1),vBool(2),vBool(3),not(vBool(1)),not(vBool(2)),not(vBool())),\"AND(?0.bool3, null, IS NULL(?0.bool1),\" + \" IS NULL(?0.bool2), NOT(?0.bool0))\",\"false\")@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),or(eq(aRef,literal1),eq(aRef,literal10))),\"=(?0.a, 1)\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"a\",intType).add(\"b\",intType).build()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),eq(bRef,literal10),eq(aRef,bRef)),\"false\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkSimplifyFilter(and(lt(aRef,literal1),eq(aRef,literal1),ge(aRef,literal1)),\"false\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal10),ge(bRef,literal1),lt(aRef,literal10)),\"false\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "checkSimplifyFilter(and(eq(aRef,literal1),eq(bRef,literal1),eq(aRef,bRef)),\"AND(=(?0.a, 1), =(?0.b, 1))\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "checkSimplifyFilter(and(lt(literal1,aRef),lt(literal5,aRef)),RelOptPredicateList.EMPTY,\"<(5, ?0.a)\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final RexLiteral literal10 = rexBuilder.makeExactLiteral(BigDecimal.TEN)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "checkSimplifyFilter(and(gt(aRef,literal1),lt(aRef,literal10),le(aRef,literal5)),RelOptPredicateList.of(rexBuilder,ImmutableList.of(ge(aRef,literal5))),\"=(?0.a, 5)\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testSimplifyFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(le(aRef,literal5))),\"false\")@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.ONE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "checkSimplifyFilter(gt(aRef,literal5),RelOptPredicateList.of(rexBuilder,ImmutableList.of(lt(bRef,literal10),ge(aRef,literal5))),\">(?0.a, 5)\")@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->0 [style = bold, label=""];
37->46 [style = dashed, label="0"];
4->53 [style = bold, label=""];
24->28 [style = solid, label="bRef"];
27->28 [style = bold, label=""];
35->1 [style = solid, label="aRef"];
0->16 [style = dashed, label="0"];
35->12 [style = solid, label="aRef"];
38->12 [style = bold, label=""];
16->41 [style = solid, label="literal1"];
48->46 [style = solid, label="literal10"];
35->22 [style = solid, label="aRef"];
24->6 [style = solid, label="bRef"];
16->39 [style = solid, label="literal1"];
31->51 [style = solid, label="aRef"];
36->11 [style = bold, label=""];
32->6 [style = bold, label=""];
24->25 [style = solid, label="literal1"];
16->21 [style = solid, label="literal1"];
43->19 [style = bold, label=""];
7->26 [style = bold, label=""];
47->49 [style = bold, label=""];
0->32 [style = solid, label="literal5"];
24->54 [style = solid, label="literal1"];
8->54 [style = dashed, label="0"];
12->10 [style = bold, label=""];
31->35 [style = bold, label=""];
0->29 [style = solid, label="literal5"];
4->53 [style = solid, label="rowType"];
46->54 [style = bold, label=""];
0->25 [style = bold, label=""];
35->40 [style = solid, label="aRef"];
35->29 [style = solid, label="aRef"];
16->1 [style = solid, label="literal1"];
16->20 [style = solid, label="literal1"];
0->17 [style = solid, label="literal5"];
31->25 [style = solid, label="aRef"];
0->28 [style = solid, label="literal5"];
7->11 [style = solid, label="eRef"];
44->47 [style = bold, label=""];
13->14 [style = bold, label=""];
31->26 [style = solid, label="range"];
22->13 [style = bold, label=""];
35->27 [style = solid, label="aRef"];
16->2 [style = solid, label="literal1"];
35->9 [style = solid, label="aRef"];
16->37 [style = solid, label="literal1"];
24->21 [style = solid, label="bRef"];
18->31 [style = bold, label=""];
35->6 [style = solid, label="aRef"];
28->30 [style = bold, label=""];
25->32 [style = solid, label="literal10"];
0->41 [style = solid, label="literal5"];
16->17 [style = solid, label="literal1"];
18->4 [style = dashed, label="0"];
17->41 [style = bold, label=""];
24->22 [style = solid, label="bRef"];
0->30 [style = solid, label="literal5"];
24->51 [style = solid, label="literal1"];
51->44 [style = bold, label=""];
35->17 [style = solid, label="aRef"];
0->9 [style = solid, label="literal5"];
0->27 [style = solid, label="literal5"];
4->18 [style = bold, label=""];
3->33 [style = bold, label=""];
24->12 [style = solid, label="bRef"];
5->11 [style = solid, label="dRef"];
25->2 [style = bold, label=""];
8->22 [style = bold, label=""];
31->5 [style = solid, label="range"];
25->21 [style = solid, label="literal10"];
13->44 [style = dashed, label="0"];
26->16 [style = bold, label=""];
29->20 [style = bold, label=""];
25->17 [style = solid, label="literal10"];
24->39 [style = solid, label="bRef"];
16->8 [style = solid, label="literal1"];
35->10 [style = solid, label="aRef"];
25->12 [style = solid, label="literal10"];
31->24 [style = solid, label="range"];
48->44 [style = solid, label="literal10"];
22->13 [style = solid, label="args"];
25->41 [style = solid, label="literal10"];
35->41 [style = solid, label="aRef"];
25->36 [style = solid, label="literal10"];
31->7 [style = solid, label="range"];
16->32 [style = solid, label="literal1"];
16->22 [style = solid, label="literal1"];
5->7 [style = bold, label=""];
18->31 [style = solid, label="rowType"];
35->38 [style = solid, label="aRef"];
16->10 [style = solid, label="literal1"];
45->52 [style = bold, label=""];
0->39 [style = solid, label="literal5"];
35->8 [style = solid, label="aRef"];
35->37 [style = solid, label="aRef"];
35->28 [style = solid, label="aRef"];
34->29 [style = bold, label=""];
24->10 [style = solid, label="bRef"];
42->11 [style = solid, label="cRef"];
0->6 [style = solid, label="literal5"];
52->4 [style = bold, label=""];
1->3 [style = bold, label=""];
31->35 [style = solid, label="range"];
24->47 [style = solid, label="literal1"];
16->9 [style = solid, label="literal1"];
40->9 [style = bold, label=""];
16->38 [style = solid, label="literal1"];
0->40 [style = solid, label="literal5"];
35->21 [style = solid, label="aRef"];
49->50 [style = bold, label=""];
0->20 [style = solid, label="literal5"];
35->24 [style = bold, label=""];
24->44 [style = solid, label="literal1"];
39->21 [style = bold, label=""];
6->27 [style = bold, label=""];
16->34 [style = solid, label="literal1"];
35->34 [style = solid, label="aRef"];
24->38 [style = solid, label="bRef"];
35->39 [style = solid, label="aRef"];
23->19 [style = bold, label=""];
24->46 [style = solid, label="literal1"];
16->48 [style = bold, label=""];
2->25 [style = dashed, label="0"];
53->31 [style = solid, label="range"];
53->35 [style = solid, label="range"];
15->40 [style = bold, label=""];
24->15 [style = solid, label="bRef"];
31->44 [style = solid, label="aRef"];
37->8 [style = bold, label=""];
48->47 [style = solid, label="literal10"];
16->12 [style = solid, label="literal1"];
35->30 [style = solid, label="aRef"];
24->42 [style = bold, label=""];
54->51 [style = bold, label=""];
16->40 [style = solid, label="literal1"];
26->11 [style = solid, label="fRef"];
20->17 [style = bold, label=""];
25->1 [style = solid, label="literal10"];
48->51 [style = solid, label="literal10"];
16->15 [style = solid, label="literal1"];
48->54 [style = solid, label="literal10"];
16->29 [style = solid, label="literal1"];
1->3 [style = solid, label="args2"];
31->54 [style = solid, label="aRef"];
25->46 [style = bold, label=""];
35->36 [style = solid, label="aRef"];
53->31 [style = bold, label=""];
0->21 [style = solid, label="literal5"];
24->30 [style = solid, label="bRef"];
24->36 [style = solid, label="bRef"];
14->1 [style = bold, label=""];
10->36 [style = bold, label=""];
11->15 [style = bold, label=""];
35->2 [style = solid, label="aRef"];
35->32 [style = solid, label="aRef"];
24->16 [style = bold, label=""];
31->46 [style = solid, label="aRef"];
24->32 [style = solid, label="bRef"];
3->50 [style = dashed, label="0"];
1->33 [style = solid, label="args2"];
25->10 [style = solid, label="literal10"];
25->6 [style = solid, label="literal10"];
21->32 [style = bold, label=""];
48->25 [style = bold, label=""];
35->20 [style = solid, label="aRef"];
25->20 [style = solid, label="literal10"];
33->38 [style = bold, label=""];
19->4 [style = bold, label=""];
42->5 [style = bold, label=""];
2->37 [style = bold, label=""];
41->39 [style = bold, label=""];
16->36 [style = solid, label="literal1"];
31->42 [style = solid, label="range"];
35->15 [style = solid, label="aRef"];
25->39 [style = solid, label="literal10"];
31->47 [style = solid, label="aRef"];
0->34 [style = solid, label="literal5"];
9->34 [style = bold, label=""];
}
