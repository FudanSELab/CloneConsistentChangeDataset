digraph {
10 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(reconnectedLatch))@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "server.close()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(client,PersistentEphemeralNode.Mode.EPHEMERAL,\"/abc/node\",\"hello\".getBytes())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(),TimeUnit.MILLISECONDS))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final AtomicReference<ConnectionState> lastState = new AtomicReference<ConnectionState>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().milliseconds(),TimeUnit.MILLISECONDS))@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final CountDownLatch connectedLatch = new CountDownLatch(1)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(lastState.get(),ConnectionState.RECONNECTED)@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "server.restart()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "server = new TestingServer(server.getPort())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "timing.sleepABit()@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "timing.sleepABit()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ConnectionStateListener listener = new ConnectionStateListener(){@Override public void stateChanged(CuratorFramework client,ConnectionState newState){lastState.set(newState)if (newState == ConnectionState.CONNECTED) {connectedLatch.countDown()}if (newState == ConnectionState.RECONNECTED) {reconnectedLatch.countDown()}}}@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "node.start()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "timing.sleepABit()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "client.getConnectionStateListenable().addListener(listener)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@37@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testListenersReconnectedIsOK['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testListenersReconnectedIsOK['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(timing.awaitLatch(connectedLatch))@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(timing.awaitLatch(reconnectedLatch))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Timing timing = new Timing()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testListenersReconnectedIsOK['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "client.start()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "timing.sleepABit()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final CountDownLatch reconnectedLatch = new CountDownLatch(1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(timing.awaitLatch(connectedLatch))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "node = new PersistentEphemeralNode(client,PersistentEphemeralNode.Mode.EPHEMERAL,\"/abc/node\",\"hello\".getBytes())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "server.stop()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PersistentEphemeralNode node = null@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "server.restart()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(lastState.get(),ConnectionState.RECONNECTED)@@@35@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->27 [style = dashed, label="0"];
8->10 [style = bold, label=""];
9->20 [style = solid, label="client"];
23->16 [style = bold, label=""];
4->14 [style = bold, label=""];
9->21 [style = solid, label="client"];
30->17 [style = bold, label=""];
0->18 [style = solid, label="connectedLatch"];
16->6 [style = bold, label=""];
17->9 [style = bold, label=""];
31->5 [style = bold, label=""];
12->17 [style = bold, label=""];
20->31 [style = dashed, label="0"];
3->15 [style = bold, label=""];
23->16 [style = solid, label="listener"];
12->30 [style = dashed, label="0"];
28->12 [style = bold, label=""];
11->19 [style = bold, label=""];
32->30 [style = bold, label=""];
1->7 [style = bold, label=""];
1->10 [style = solid, label="reconnectedLatch"];
2->12 [style = bold, label=""];
26->22 [style = bold, label=""];
6->29 [style = bold, label=""];
20->5 [style = bold, label=""];
22->4 [style = bold, label=""];
24->14 [style = bold, label=""];
29->18 [style = bold, label=""];
9->31 [style = solid, label="client"];
0->26 [style = solid, label="connectedLatch"];
18->22 [style = bold, label=""];
5->0 [style = bold, label=""];
15->31 [style = bold, label=""];
13->26 [style = bold, label=""];
25->11 [style = bold, label=""];
9->15 [style = bold, label=""];
15->20 [style = bold, label=""];
0->1 [style = bold, label=""];
6->13 [style = bold, label=""];
7->23 [style = bold, label=""];
1->25 [style = solid, label="reconnectedLatch"];
20->21 [style = solid, label="node"];
9->3 [style = bold, label=""];
14->8 [style = bold, label=""];
22->24 [style = bold, label=""];
4->24 [style = dashed, label="0"];
27->21 [style = bold, label=""];
8->25 [style = bold, label=""];
10->25 [style = dashed, label="0"];
18->26 [style = dashed, label="0"];
13->18 [style = bold, label=""];
11->27 [style = bold, label=""];
10->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
