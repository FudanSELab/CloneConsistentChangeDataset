digraph {
11 [style = filled, label = "entry.setField(\"journal\",\"test\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "worker.cleanup(preset,entry)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(Optional.empty(),entry.getField(\"journal\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(Optional.empty(),entry.getField(\"address\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Optional.of(\"test\"),entry.getField(\"journaltitle\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "CleanupPreset preset = new CleanupPreset(CleanupPreset.CleanupStep.CONVERT_TO_BIBLATEX)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "convertToBiblatexMovesAddressToLocation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "entry.setField(\"address\",\"test\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "BibEntry entry = new BibEntry()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "convertToBiblatexMovesAddressToLocation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(Optional.of(\"test\"),entry.getField(\"location\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "convertToBiblatexMovesJournalToJournalTitle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(Optional.of(\"test\"),entry.getField(\"location\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(Optional.empty(),entry.getField(\"address\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
6->11 [style = dashed, label="0"];
3->12 [style = bold, label=""];
2->8 [style = dashed, label="0"];
0->10 [style = dashed, label="0"];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
5->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
12->10 [style = bold, label=""];
3->2 [style = bold, label=""];
11->3 [style = bold, label=""];
3->8 [style = bold, label=""];
5->3 [style = solid, label="preset"];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
1->3 [style = solid, label="entry"];
0->7 [style = dashed, label="0"];
4->5 [style = bold, label=""];
}
