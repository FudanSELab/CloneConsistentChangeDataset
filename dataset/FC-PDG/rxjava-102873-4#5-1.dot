digraph {
16 [style = filled, label = "error['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Flowable<GroupedFlowable<Integer,String>> grouped = source.groupBy(length)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Flowable<String> source = Flowable.concat(sourceStrings,errorSource)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final AtomicReference<Throwable> error = new AtomicReference<>()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final AtomicInteger groupCounter = new AtomicInteger()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "error['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final AtomicReference<Throwable> error = new AtomicReference<Throwable>()@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Flowable<String> sourceStrings = Flowable.just(\"one\",\"two\",\"three\",\"four\",\"five\",\"six\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "error['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "grouped.flatMap(new Function<GroupedObservable<Integer,String>,Observable<String>>(){@Override public Observable<String> apply(final GroupedObservable<Integer,String> o){groupCounter.incrementAndGet()return o.map(new Function<String,String>(){@Override public String apply(String v){return \"Event => key: \" + o.getKey() + \" value: \" + v}})}}).subscribe(new DefaultObserver<String>(){@Override public void onComplete(){}@Override public void onError(Throwable e){e.printStackTrace()error.set(e)}@Override public void onNext(String v){eventCounter.incrementAndGet()System.out.println(v)}})@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Flowable<String> errorSource = Flowable.error(new TestException(\"forced failure\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Observable<GroupedObservable<Integer,String>> grouped = source.groupBy(length)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(\"\" + error.get(),error.get() instanceof TestException)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(3,groupCounter.get())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertNotNull(error.get())@@@36@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Observable<String> source = Observable.concat(sourceStrings,errorSource)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "grouped.flatMap(new Function<GroupedFlowable<Integer,String>,Flowable<String>>(){@Override public Flowable<String> apply(final GroupedFlowable<Integer,String> f){groupCounter.incrementAndGet()return f.map(new Function<String,String>(){@Override public String apply(String v){return \"Event => key: \" + f.getKey() + \" value: \" + v}})}}).subscribe(new DefaultSubscriber<String>(){@Override public void onComplete(){}@Override public void onError(Throwable e){error.set(e)}@Override public void onNext(String v){eventCounter.incrementAndGet()System.out.println(v)}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(6,eventCounter.get())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Observable<String> sourceStrings = Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\",\"six\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AtomicInteger eventCounter = new AtomicInteger()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Observable<String> errorSource = Observable.error(new RuntimeException(\"forced failure\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(error.get().getMessage(),\"forced failure\")@@@37@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6->3 [style = bold, label=""];
4->14 [style = bold, label=""];
19->18 [style = bold, label=""];
20->17 [style = bold, label=""];
3->17 [style = dashed, label="0"];
1->14 [style = dashed, label="0"];
6->20 [style = dashed, label="0"];
12->6 [style = solid, label="errorSource"];
19->20 [style = solid, label="sourceStrings"];
7->4 [style = bold, label=""];
2->9 [style = bold, label=""];
9->10 [style = bold, label=""];
16->19 [style = bold, label=""];
12->6 [style = bold, label=""];
5->6 [style = solid, label="sourceStrings"];
15->5 [style = bold, label=""];
8->0 [style = bold, label=""];
17->7 [style = bold, label=""];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
21->9 [style = bold, label=""];
10->13 [style = bold, label=""];
5->12 [style = bold, label=""];
3->7 [style = bold, label=""];
2->21 [style = dashed, label="0"];
1->21 [style = bold, label=""];
12->18 [style = dashed, label="0"];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
14->2 [style = bold, label=""];
13->8 [style = bold, label=""];
5->19 [style = dashed, label="0"];
18->20 [style = solid, label="errorSource"];
}
