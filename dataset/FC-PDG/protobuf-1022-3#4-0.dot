digraph {
21 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Conformance.ConformanceRequest request@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "{try {testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload())}catch (InvalidProtocolBufferException e) break}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "doTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "doTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "request.getPayloadCase()@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{try {Conformance.TestAllTypes.Builder builder = Conformance.TestAllTypes.newBuilder()JsonFormat.parser().usingTypeRegistry(typeRegistry).merge(request.getJsonPayload(),builder)testMessage = builder.build()}catch (InvalidProtocolBufferException e) break}@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setJsonPayload(JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "request.getRequestedOutputFormat()@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Conformance.TestAllTypes testMessage@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "request.getRequestedOutputFormat()@@@32@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@38@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "doTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
9->18 [style = bold, label=""];
7->2 [style = dotted, label="true"];
9->19 [style = bold, label=""];
11->3 [style = bold, label=""];
11->9 [style = dotted, label="true"];
11->3 [style = dotted, label="true"];
3->14 [style = bold, label=""];
11->12 [style = bold, label=""];
8->5 [style = bold, label=""];
8->4 [style = bold, label=""];
8->0 [style = bold, label=""];
4->5 [style = bold, label=""];
13->6 [style = bold, label=""];
7->6 [style = bold, label=""];
11->9 [style = bold, label=""];
14->12 [style = bold, label=""];
11->1 [style = bold, label=""];
9->21 [style = bold, label=""];
17->20 [style = bold, label=""];
5->10 [style = bold, label=""];
6->8 [style = bold, label=""];
0->11 [style = bold, label=""];
11->14 [style = bold, label=""];
15->6 [style = bold, label=""];
9->18 [style = dotted, label="true"];
19->21 [style = bold, label=""];
20->21 [style = bold, label=""];
5->0 [style = bold, label=""];
1->3 [style = bold, label=""];
13->2 [style = dotted, label="true"];
9->14 [style = dashed, label="0"];
11->14 [style = dotted, label="true"];
18->19 [style = bold, label=""];
11->1 [style = dotted, label="true"];
17->20 [style = dotted, label="true"];
15->2 [style = dotted, label="true"];
3->9 [style = bold, label=""];
12->18 [style = bold, label=""];
9->12 [style = dotted, label="true"];
9->19 [style = dotted, label="true"];
8->10 [style = bold, label=""];
10->0 [style = bold, label=""];
9->12 [style = bold, label=""];
16->9 [style = bold, label=""];
0->16 [style = bold, label=""];
}
