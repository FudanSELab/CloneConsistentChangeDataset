digraph {
5 [style = filled, label = "Collections.sort(results,new Comparator<KeyValue<String,String>>(){@Override public int compare(final KeyValue<String,String> o1,final KeyValue<String,String> o2){return KStreamAggregationIntegrationTest.compare(o1,o2)}})@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "groupedStream.reduce(reducer,Materialized.as(\"reduce-by-key\")).toStream().to(outputTopic,Produced.with(Serdes.String(),Serdes.String()))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(results,is(Arrays.asList(KeyValue.pair(\"A\",\"A\"),KeyValue.pair(\"A\",\"A:A\"),KeyValue.pair(\"B\",\"B\"),KeyValue.pair(\"B\",\"B:B\"),KeyValue.pair(\"C\",\"C\"),KeyValue.pair(\"C\",\"C:C\"),KeyValue.pair(\"D\",\"D\"),KeyValue.pair(\"D\",\"D:D\"),KeyValue.pair(\"E\",\"E\"),KeyValue.pair(\"E\",\"E:E\"))))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final List<KeyValue<String,Long>> results = receiveMessages(new StringDeserializer(),new LongDeserializer(),10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "shouldReduce['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "produceMessages(mockTime.milliseconds())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<KeyValue<String,String>> results = receiveMessages(new StringDeserializer(),new StringDeserializer(),10)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "groupedStream.count(\"count-by-key\").to(Serdes.String(),Serdes.Long(),outputTopic)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldCount['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "groupedStream.reduce(reducer,\"reduce-by-key\").toStream().to(Serdes.String(),Serdes.String(),outputTopic)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "produceMessages(mockTime.milliseconds())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldReduce['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(results,is(Arrays.asList(KeyValue.pair(\"A\",1L),KeyValue.pair(\"A\",2L),KeyValue.pair(\"B\",1L),KeyValue.pair(\"B\",2L),KeyValue.pair(\"C\",1L),KeyValue.pair(\"C\",2L),KeyValue.pair(\"D\",1L),KeyValue.pair(\"D\",2L),KeyValue.pair(\"E\",1L),KeyValue.pair(\"E\",2L))))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "startStreams()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Collections.sort(results,new Comparator<KeyValue<String,Long>>(){@Override public int compare(final KeyValue<String,Long> o1,final KeyValue<String,Long> o2){return KStreamAggregationIntegrationTest.compare(o1,o2)}})@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->8 [style = dashed, label="0"];
5->14 [style = dashed, label="0"];
4->5 [style = solid, label="results"];
0->13 [style = bold, label=""];
2->3 [style = bold, label=""];
3->6 [style = bold, label=""];
7->0 [style = bold, label=""];
4->1 [style = solid, label="results"];
10->7 [style = bold, label=""];
8->7 [style = bold, label=""];
6->10 [style = dashed, label="0"];
13->12 [style = solid, label="results"];
3->10 [style = bold, label=""];
5->1 [style = bold, label=""];
11->3 [style = bold, label=""];
0->4 [style = bold, label=""];
3->8 [style = bold, label=""];
13->14 [style = solid, label="results"];
14->12 [style = bold, label=""];
9->3 [style = bold, label=""];
6->7 [style = bold, label=""];
4->13 [style = dashed, label="0"];
4->5 [style = bold, label=""];
13->14 [style = bold, label=""];
}
