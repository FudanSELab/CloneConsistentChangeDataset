digraph {
111 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.85,10,null,analyzer,MultiFields.getTerms(ir,\"body\"))@@@105@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "assertThat(corrections(1(.join(space).utf8ToString(),equalTo(\"xor the god jewel\"))@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Quazar II\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertThat(result.cutoffScore,greaterThan(0d))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Correction(( corrections = result.corrections@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "spellchecker.setMinQueryLength(1)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,1,ir,\"body\",wordScorer,1.5f,2).corrections@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "result = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,0,1)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertThat(corrections(2(.join(space).utf8ToString(),equalTo(\"xorn the god jewel\"))@@@75@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "assertThat(corrections(2(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"four the god jewel\"))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@70@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorr</em> the <em>god</em> jewel\"))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "suggester = new NoisyChannelSpellChecker(0.85)@@@100@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "DirectSpellChecker spellchecker = new DirectSpellChecker()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captian usw\"),generator,2,4,ir,\"body\",wordScorer,1,2).corrections@@@106@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "WordScorer wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5f)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "Analyzer analyzer = new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()TokenFilter filter = new LowerCaseFilter(t)try {SolrSynonymParser parser = new SolrSynonymParser(true,false,new WhitespaceAnalyzer())parser.parse(new StringReader(\"usa => usa, america, american\"))filter = new SynonymFilter(filter,parser.build(),true)}catch (Exception e) return new TokenStreamComponents(t,filter)}}@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "writer.addDocument(doc)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "assertThat(corrections(3(.join(space,preTag,postTag).utf8ToString(),equalTo(\"xor teh <em>god</em> jewel\"))@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Document doc = new Document()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "spellchecker.setAccuracy(0.0f)@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorr the god</em> jewel\"))@@@77@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertThat(corrections(3(.join(space).utf8ToString(),equalTo(\"xorr the got jewel\"))@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "mapping.put(\"body_reverse\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()return new TokenStreamComponents(t,new ReverseStringFilter(new LowerCaseFilter(t)))}})@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_ALWAYS,ir,0.95,10)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,0,2).corrections@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertThat(corrections(3(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorr</em> the got jewel\"))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "mapping.put(\"body\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()return new TokenStreamComponents(t,new LowerCaseFilter(t))}})@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "LaplaceScorer wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5f)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(corrections(1(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"zorr the god jewel\"))@@@64@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
109 [style = filled, label = "CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10,forward,reverse)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "DirectoryReader ir = DirectoryReader.open(writer)@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertThat(corrections(1(.join(space).utf8ToString(),equalTo(\"xor the god jewel\"))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(corrections(2(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorn</em> the <em>god</em> jewel\"))@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "testNgram['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "suggester = new NoisyChannelSpellChecker(0.85)@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>captain america</em>\"))@@@108@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(corrections(2(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>xorn the god</em> jewel\"))@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,1,2).corrections@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.85,10,null,analyzer,MultiFields.getTerms(ir,\"body\"))@@@109@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
57 [style = filled, label = "suggester = new NoisyChannelSpellChecker(0.85)@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "doc.add(new Field(\"body\",line,TextField.TYPE_NOT_STORED))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"american <em>ace</em>\"))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
91 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Result result = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,1,2)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "spellchecker.setMinQueryLength(1)@@@99@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String(( strings = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@149b95e@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiFields.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@101@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "assertThat(corrections.length,equalTo(4))@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"american ace\"))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"captain america\"))@@@111@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"america cae\"),generator,2,1,ir,\"body\",wordScorer,1,2).corrections@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertThat(corrections(2(.join(space).utf8ToString(),equalTo(\"xorn the god jewel\"))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.85,10,null,analyzer,MultiTerms.getTerms(ir,\"body\"))@@@109@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"american ame\"))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"<em>captain america</em>\"))@@@104@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertThat(corrections(2(.join(space).utf8ToString(),equalTo(\"xorn the god jewel\"))@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "WordScorer wordScorer = new LaplaceScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.95d,new BytesRef(\" \"),0.5f)@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
83 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@70@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "assertThat(result.cutoffScore,equalTo(Double.MIN_VALUE))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "assertThat(corrections.length,equalTo(0))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
112 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"american cae\"),forward,1,1,ir,\"body\",wordScorer,1,2).corrections@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(corrections(3(.join(space).utf8ToString(),equalTo(\"xorr the got jewel\"))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"captain america\"))@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captain usw\"),generator,2,4,ir,\"body\",wordScorer,1,2).corrections@@@110@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "corrections = suggester.getCorrections(analyzer,new BytesRef(\"captian usa\"),generator,2,4,ir,\"body\",wordScorer,1,2).corrections@@@102@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "testMultiGenerator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(),mapping)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Xor teh Got-Jewel\"),generator,4f,4,ir,\"body\",wordScorer,1,2).corrections@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "wordScorer = new LaplaceScorer(ir,MultiTerms.getTerms(ir,\"body_ngram\"),\"body_ngram\",0.85d,new BytesRef(\" \"),0.5f)@@@101@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "doc.add(new Field(\"body_reverse\",line,TextField.TYPE_NOT_STORED))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.95,5)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker,\"body_reverse\",SuggestMode.SUGGEST_ALWAYS,ir,0.95,10,wrapper,wrapper,MultiFields.getTerms(ir,\"body_reverse\"))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Map<String,Analyzer> mapping = new HashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "RAMDirectory dir = new RAMDirectory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testNgram['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Zorr the Got-Jewel\"),generator,0.5f,4,ir,\"body\",wordScorer,0,2).corrections@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertThat(corrections(0(.join(space,preTag,postTag).utf8ToString(),equalTo(\"captain <em>america</em>\"))@@@112@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "corrections = result.corrections@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "generator = new DirectCandidateGenerator(spellchecker,\"body\",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.85,10,null,analyzer,MultiTerms.getTerms(ir,\"body\"))@@@105@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
94 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"Zorr the Got-Jewel\"),generator,0.5f,1,ir,\"body\",wordScorer,1.5f,2).corrections@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"quasar ii\"))@@@74@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "assertThat(corrections(0(.join(new BytesRef(\" \")).utf8ToString(),equalTo(\"captain america\"))@@@107@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "IndexWriter writer = new IndexWriter(dir,conf)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "spellchecker.setMinPrefix(1)@@@98@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
95 [style = filled, label = "generator = new MultiCandidateGeneratorWrapper(5,forward,reverse)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "Correction(( corrections = suggester.getCorrections(wrapper,new BytesRef(\"american cae\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertThat(corrections(1(.join(space,preTag,postTag).utf8ToString(),equalTo(\"xor the <em>god</em> jewel\"))@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "doc.add(new Field(\"body_ngram\",line,TextField.TYPE_NOT_STORED))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "IndexWriterConfig conf = new IndexWriterConfig(wrapper)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(corrections(3(.join(space).utf8ToString(),equalTo(\"xor teh god jewel\"))@@@76@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "corrections = suggester.getCorrections(wrapper,new BytesRef(\"american ame\"),generator,1,1,ir,\"body\",wordScorer,1,2).corrections@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "mapping.put(\"body_ngram\",new Analyzer(){@Override protected TokenStreamComponents createComponents(String fieldName){Tokenizer t = new StandardTokenizer()ShingleFilter tf = new ShingleFilter(t,2,3)tf.setOutputUnigrams(false)return new TokenStreamComponents(t,new LowerCaseFilter(tf))}})@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(corrections(1(.join(space,preTag,postTag).utf8ToString(),equalTo(\"xor <em>the god</em> jewel\"))@@@78@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "assertThat(corrections.length,equalTo(1))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(corrections(0(.join(space).utf8ToString(),equalTo(\"xorr the god jewel\"))@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97->2 [style = bold, label=""];
113->56 [style = solid, label="corrections"];
14->101 [style = bold, label=""];
40->36 [style = solid, label="analyzer"];
24->76 [style = bold, label=""];
39->83 [style = dashed, label="0"];
12->44 [style = bold, label=""];
95->87 [style = solid, label="generator"];
20->37 [style = solid, label="ir"];
84->13 [style = bold, label=""];
80->21 [style = bold, label=""];
20->67 [style = solid, label="ir"];
20->36 [style = solid, label="ir"];
11->69 [style = bold, label=""];
107->91 [style = bold, label=""];
25->53 [style = bold, label=""];
28->9 [style = bold, label=""];
104->99 [style = bold, label=""];
2->90 [style = bold, label=""];
40->13 [style = solid, label="analyzer"];
98->32 [style = bold, label=""];
19->36 [style = bold, label=""];
40->21 [style = solid, label="analyzer"];
43->18 [style = bold, label=""];
7->8 [style = bold, label=""];
18->21 [style = solid, label="wordScorer"];
26->79 [style = dashed, label="0"];
72->82 [style = bold, label=""];
74->51 [style = bold, label=""];
0->15 [style = bold, label=""];
1->23 [style = bold, label=""];
102->56 [style = bold, label=""];
96->87 [style = bold, label=""];
14->101 [style = solid, label="t"];
20->83 [style = solid, label="ir"];
47->49 [style = bold, label=""];
61->25 [style = bold, label=""];
9->26 [style = bold, label=""];
55->89 [style = bold, label=""];
16->61 [style = solid, label="conf"];
84->37 [style = solid, label="wordScorer"];
13->17 [style = bold, label=""];
76->73 [style = bold, label=""];
103->104 [style = bold, label=""];
89->106 [style = bold, label=""];
54->113 [style = solid, label="wrapper"];
23->22 [style = bold, label=""];
95->107 [style = solid, label="generator"];
54->16 [style = bold, label=""];
57->39 [style = bold, label=""];
110->107 [style = bold, label=""];
20->68 [style = solid, label="ir"];
27->35 [style = solid, label="generator"];
54->106 [style = solid, label="wrapper"];
28->100 [style = dashed, label="0"];
20->81 [style = bold, label=""];
4->107 [style = dashed, label="0"];
79->24 [style = solid, label="wordScorer"];
61->20 [style = solid, label="writer"];
91->114 [style = bold, label=""];
67->82 [style = dashed, label="0"];
20->98 [style = solid, label="ir"];
40->82 [style = solid, label="analyzer"];
10->57 [style = bold, label=""];
56->102 [style = dashed, label="0"];
66->28 [style = bold, label=""];
50->63 [style = bold, label=""];
51->114 [style = dashed, label="0"];
18->37 [style = solid, label="wordScorer"];
74->91 [style = dashed, label="0"];
20->98 [style = bold, label=""];
20->84 [style = solid, label="ir"];
20->56 [style = solid, label="ir"];
109->88 [style = bold, label=""];
27->24 [style = solid, label="generator"];
26->24 [style = solid, label="wordScorer"];
59->27 [style = solid, label="spellchecker"];
98->107 [style = solid, label="wordScorer"];
65->33 [style = bold, label=""];
54->56 [style = solid, label="wrapper"];
73->2 [style = bold, label=""];
56->100 [style = bold, label=""];
42->35 [style = solid, label="wordScorer"];
54->24 [style = solid, label="wrapper"];
94->103 [style = bold, label=""];
57->83 [style = bold, label=""];
48->75 [style = bold, label=""];
27->89 [style = dashed, label="0"];
81->32 [style = bold, label=""];
9->108 [style = dashed, label="0"];
40->34 [style = bold, label=""];
20->113 [style = solid, label="ir"];
83->68 [style = bold, label=""];
14->40 [style = solid, label="t"];
26->24 [style = bold, label=""];
23->24 [style = solid, label="corrections"];
77->68 [style = solid, label="corrections"];
54->94 [style = solid, label="wrapper"];
32->59 [style = bold, label=""];
34->0 [style = bold, label=""];
20->94 [style = solid, label="ir"];
20->77 [style = solid, label="ir"];
54->107 [style = solid, label="wrapper"];
20->81 [style = solid, label="ir"];
64->61 [style = solid, label="dir"];
88->113 [style = solid, label="corrections"];
85->95 [style = bold, label=""];
109->88 [style = solid, label="generator"];
26->77 [style = solid, label="wordScorer"];
20->79 [style = solid, label="ir"];
80->21 [style = solid, label="generator"];
71->14 [style = bold, label=""];
108->92 [style = bold, label=""];
20->18 [style = solid, label="ir"];
36->21 [style = solid, label="generator"];
55->27 [style = bold, label=""];
42->32 [style = bold, label=""];
45->104 [style = dashed, label="0"];
59->55 [style = bold, label=""];
20->42 [style = solid, label="ir"];
29->23 [style = solid, label="corrections"];
20->82 [style = solid, label="ir"];
106->109 [style = bold, label=""];
59->36 [style = solid, label="spellchecker"];
86->65 [style = bold, label=""];
20->1 [style = solid, label="ir"];
59->89 [style = solid, label="spellchecker"];
18->84 [style = dashed, label="0"];
98->113 [style = solid, label="wordScorer"];
56->108 [style = solid, label="corrections"];
95->94 [style = solid, label="generator"];
84->21 [style = solid, label="wordScorer"];
54->87 [style = solid, label="wrapper"];
98->87 [style = solid, label="wordScorer"];
42->98 [style = dashed, label="0"];
49->45 [style = bold, label=""];
27->77 [style = solid, label="generator"];
21->37 [style = solid, label="corrections"];
35->29 [style = bold, label=""];
92->96 [style = bold, label=""];
89->109 [style = solid, label="forward"];
113->112 [style = bold, label=""];
46->77 [style = bold, label=""];
40->67 [style = solid, label="analyzer"];
111->110 [style = bold, label=""];
67->37 [style = solid, label="generator"];
54->68 [style = solid, label="wrapper"];
73->97 [style = dashed, label="0"];
78->64 [style = bold, label=""];
16->61 [style = bold, label=""];
95->113 [style = bold, label=""];
20->24 [style = solid, label="ir"];
20->13 [style = solid, label="ir"];
93->97 [style = bold, label=""];
54->99 [style = solid, label="wrapper"];
20->106 [style = solid, label="ir"];
54->35 [style = solid, label="wrapper"];
40->80 [style = solid, label="analyzer"];
4->74 [style = bold, label=""];
56->66 [style = bold, label=""];
79->24 [style = bold, label=""];
27->68 [style = solid, label="generator"];
42->1 [style = solid, label="wordScorer"];
27->35 [style = bold, label=""];
37->12 [style = bold, label=""];
6->65 [style = bold, label=""];
88->8 [style = bold, label=""];
54->1 [style = solid, label="wrapper"];
77->4 [style = bold, label=""];
79->77 [style = solid, label="wordScorer"];
64->62 [style = bold, label=""];
20->39 [style = solid, label="ir"];
68->13 [style = solid, label="corrections"];
13->21 [style = solid, label="corrections"];
30->3 [style = bold, label=""];
41->40 [style = bold, label=""];
95->99 [style = solid, label="generator"];
3->41 [style = bold, label=""];
24->77 [style = solid, label="corrections"];
15->43 [style = bold, label=""];
82->37 [style = bold, label=""];
36->80 [style = dashed, label="0"];
98->108 [style = solid, label="wordScorer"];
98->94 [style = solid, label="wordScorer"];
20->42 [style = bold, label=""];
106->109 [style = solid, label="reverse"];
42->81 [style = dashed, label="0"];
52->50 [style = bold, label=""];
70->72 [style = bold, label=""];
39->68 [style = bold, label=""];
20->88 [style = solid, label="ir"];
6->86 [style = bold, label=""];
87->93 [style = bold, label=""];
71->14 [style = solid, label="t"];
105->64 [style = bold, label=""];
20->80 [style = solid, label="ir"];
18->13 [style = solid, label="wordScorer"];
39->68 [style = solid, label="wordScorer"];
84->13 [style = solid, label="wordScorer"];
98->56 [style = solid, label="wordScorer"];
68->60 [style = bold, label=""];
54->77 [style = solid, label="wrapper"];
95->113 [style = solid, label="generator"];
83->68 [style = solid, label="wordScorer"];
19->80 [style = bold, label=""];
106->95 [style = solid, label="reverse"];
82->37 [style = solid, label="generator"];
33->20 [style = bold, label=""];
22->56 [style = bold, label=""];
53->33 [style = solid, label="doc"];
40->37 [style = solid, label="analyzer"];
98->99 [style = solid, label="wordScorer"];
38->10 [style = bold, label=""];
27->13 [style = solid, label="generator"];
99->107 [style = solid, label="corrections"];
59->80 [style = solid, label="spellchecker"];
87->94 [style = solid, label="corrections"];
81->1 [style = solid, label="wordScorer"];
54->88 [style = solid, label="wrapper"];
8->85 [style = bold, label=""];
2->58 [style = bold, label=""];
90->94 [style = bold, label=""];
54->16 [style = solid, label="wrapper"];
20->87 [style = solid, label="ir"];
112->102 [style = bold, label=""];
33->53 [style = bold, label=""];
17->19 [style = bold, label=""];
95->108 [style = solid, label="generator"];
63->30 [style = bold, label=""];
21->70 [style = bold, label=""];
27->1 [style = solid, label="generator"];
58->90 [style = dashed, label="0"];
43->84 [style = bold, label=""];
101->54 [style = bold, label=""];
14->54 [style = bold, label=""];
8->48 [style = bold, label=""];
36->21 [style = bold, label=""];
59->106 [style = solid, label="spellchecker"];
58->47 [style = bold, label=""];
108->87 [style = solid, label="corrections"];
62->71 [style = bold, label=""];
20->89 [style = solid, label="ir"];
51->38 [style = bold, label=""];
75->1 [style = bold, label=""];
20->35 [style = solid, label="ir"];
20->26 [style = solid, label="ir"];
89->95 [style = solid, label="forward"];
89->56 [style = solid, label="forward"];
100->108 [style = bold, label=""];
99->111 [style = bold, label=""];
20->99 [style = solid, label="ir"];
53->6 [style = bold, label=""];
62->54 [style = solid, label="mapping"];
18->13 [style = bold, label=""];
72->67 [style = bold, label=""];
60->11 [style = bold, label=""];
29->7 [style = bold, label=""];
31->64 [style = bold, label=""];
9->79 [style = bold, label=""];
67->37 [style = bold, label=""];
20->21 [style = solid, label="ir"];
8->85 [style = dashed, label="0"];
69->52 [style = bold, label=""];
81->35 [style = solid, label="wordScorer"];
94->99 [style = solid, label="corrections"];
59->82 [style = solid, label="spellchecker"];
20->108 [style = solid, label="ir"];
20->107 [style = solid, label="ir"];
5->46 [style = bold, label=""];
54->108 [style = solid, label="wrapper"];
20->27 [style = solid, label="ir"];
59->67 [style = solid, label="spellchecker"];
98->88 [style = solid, label="wordScorer"];
45->5 [style = bold, label=""];
}
