digraph {
2 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY,flowTemplateCatalogUri.toString())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testIfEdgeSuccessfullyAdded['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "List<SpecExecutor> specExecutorList = new ArrayList<>()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(flowEdge.getSrc(),node1)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(flowEdge.getSrc(),\"node1\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY,\"FS:///flowEdgeTemplate\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testCreateFlowEdge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Config edgeProps = ConfigUtils.propertiesToConfig(properties)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testCreateFlowEdge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "FSFlowCatalog catalog = new FSFlowCatalog(templateCatalogCfg)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "specExecutorList.add(new InMemorySpecExecutor(config1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\",ConfigValueFactory.fromAnyRef(\"/tmp1\")).withValue(\"specExecInstance.capabilities\",ConfigValueFactory.fromAnyRef(\"s1:d1\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "String node1@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"),value)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Config config = ConfigFactory.parseProperties(props)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(edgeSet.size(),1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Config templateCatalogCfg = config.withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY,\"edge1\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps,catalog,specExecutorList)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY,\"node1:node2:edge1\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "FSFlowTemplateCatalog catalog = new FSFlowTemplateCatalog(templateCatalogCfg)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "specExecutorList.add(new InMemorySpecExecutor(config2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "String edgeName@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\",ConfigValueFactory.fromAnyRef(\"/tmp2\")).withValue(\"specExecInstance.capabilities\",ConfigValueFactory.fromAnyRef(\"s2:d2\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(flowEdge.getId(),Joiner.on(\":\").join(node1,node2,edgeName))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertEquals(flowEdge.getDest(),node2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\")@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\")@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(flowEdge.getDest(),\"node2\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY,\"node2\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Properties props = new Properties()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "FlowEdge flowEdge = edgeSet.iterator().next()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "String node2@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "String value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Properties properties = new Properties()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45->41 [style = bold, label=""];
24->7 [style = solid, label="props"];
8->3 [style = solid, label="edgeProps"];
23->16 [style = bold, label=""];
25->1 [style = bold, label=""];
22->15 [style = bold, label=""];
1->8 [style = bold, label=""];
13->24 [style = bold, label=""];
10->28 [style = bold, label=""];
0->13 [style = bold, label=""];
30->3 [style = solid, label="catalog"];
33->32 [style = dotted, label="true"];
1->30 [style = dashed, label="0"];
25->30 [style = bold, label=""];
16->6 [style = bold, label=""];
23->3 [style = solid, label="specExecutorList"];
32->43 [style = solid, label="edgeName"];
20->0 [style = bold, label=""];
8->3 [style = bold, label=""];
18->19 [style = bold, label=""];
37->36 [style = solid, label="value"];
22->8 [style = solid, label="properties"];
6->34 [style = dashed, label="0"];
39->42 [style = solid, label="node2"];
11->9 [style = bold, label=""];
46->47 [style = bold, label=""];
35->43 [style = solid, label="node1"];
28->14 [style = bold, label=""];
6->20 [style = bold, label=""];
43->40 [style = bold, label=""];
3->10 [style = bold, label=""];
24->26 [style = bold, label=""];
26->27 [style = bold, label=""];
5->2 [style = bold, label=""];
35->40 [style = solid, label="node1"];
17->12 [style = bold, label=""];
42->44 [style = bold, label=""];
9->18 [style = bold, label=""];
33->35 [style = dotted, label="true"];
15->11 [style = bold, label=""];
2->21 [style = bold, label=""];
44->48 [style = bold, label=""];
25->30 [style = solid, label="templateCatalogCfg"];
19->23 [style = bold, label=""];
27->7 [style = bold, label=""];
39->43 [style = solid, label="node2"];
31->43 [style = bold, label=""];
38->46 [style = bold, label=""];
33->45 [style = bold, label=""];
41->31 [style = bold, label=""];
7->25 [style = bold, label=""];
25->1 [style = solid, label="templateCatalogCfg"];
29->22 [style = bold, label=""];
30->8 [style = bold, label=""];
34->38 [style = bold, label=""];
16->6 [style = solid, label="config1"];
33->37 [style = dotted, label="true"];
48->34 [style = bold, label=""];
21->17 [style = bold, label=""];
4->22 [style = bold, label=""];
40->42 [style = bold, label=""];
47->36 [style = bold, label=""];
20->0 [style = solid, label="config2"];
35->45 [style = solid, label="node1"];
1->3 [style = solid, label="catalog"];
14->5 [style = bold, label=""];
33->39 [style = dotted, label="true"];
}
