digraph {
5 [style = filled, label = "assertNull(state.get())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "state.add(\"Bello\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testListStateDefaultValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "testReducingStateDefaultValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "backend.dispose()@@@13@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ReducingStateDescriptor<String> kvId = new ReducingStateDescriptor<>(\"id\",new AppendingReduce(),)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "state.update(Arrays.asList(\"Ciao\",\"Bello\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "state.clear()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ListStateDescriptor<String> kvId = new ListStateDescriptor<>(\"id\",)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNull(state.get())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ReducingState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "AbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "state.add(\"Ciao\")@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "backend.setCurrentKey(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ListState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testListStateDefaultValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "state.clear()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(state.get(),containsInAnyOrder(\"Ciao\",\"Bello\"))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "backend.dispose()@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"Ciao\",state.get())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8->19 [style = dashed, label="0"];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
17->16 [style = solid, label="kvId"];
15->7 [style = bold, label=""];
5->9 [style = bold, label=""];
4->17 [style = dashed, label="0"];
4->6 [style = bold, label=""];
3->11 [style = bold, label=""];
5->14 [style = bold, label=""];
16->2 [style = bold, label=""];
9->8 [style = bold, label=""];
10->7 [style = bold, label=""];
7->3 [style = bold, label=""];
13->1 [style = bold, label=""];
1->17 [style = bold, label=""];
6->2 [style = bold, label=""];
12->10 [style = bold, label=""];
6->16 [style = dashed, label="0"];
9->14 [style = dashed, label="0"];
18->1 [style = bold, label=""];
0->1 [style = bold, label=""];
14->12 [style = bold, label=""];
9->19 [style = bold, label=""];
4->6 [style = solid, label="kvId"];
19->15 [style = bold, label=""];
17->16 [style = bold, label=""];
2->5 [style = bold, label=""];
}
