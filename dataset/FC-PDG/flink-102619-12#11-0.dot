digraph {
1 [style = filled, label = "expected.add(new Watermark(100000))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expected,actual,new Tuple3ResultSortComparator())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "testDropDueToLatenessSessionWithLatenessPurgingTrigger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "expected.add(new Watermark(20000))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "expected.add(new Watermark(1999))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testHarness.processWatermark(new Watermark(11501))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness = createTestHarness(operator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expected.add(new Watermark(4998))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testHarness.processWatermark(new Watermark(7400))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),8500))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),2000))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "sideActual = testHarness.getSideOutput(lateOutputTag)@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "actual = testHarness.getOutput()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testHarness.processWatermark(new Watermark(1999))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),11600))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testHarness.close()@@@38@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testNotSideOutputDueToLatenessSessionWithHugeLatenessPurgingTrigger['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\",10000L,14600L),14599))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final long lateness = 10@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testHarness.processWatermark(new Watermark(14600))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(null,sideActual)@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple3<String,Long,Long>,TimeWindow> operator = new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(gapSize)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),PurgingTrigger.of(EventTimeTrigger.create()),lateness,lateOutputTag)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "ConcurrentLinkedQueue<Object> actual = testHarness.getOutput()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.close()@@@44@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple3<String,Long,Long>,TimeWindow> operator = new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(gapSize)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),PurgingTrigger.of(EventTimeTrigger.create()),lateness,null)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "expected.add(new Watermark(7400))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple3<String,Long,Long>,TimeWindow> operator = new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(gapSize)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),PurgingTrigger.of(EventTimeTrigger.create()),lateness,lateOutputTag)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "testHarness.processWatermark(new Watermark(20000))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final long lateness = 10000@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(null,sideActual)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testNotSideOutputDueToLatenessSessionWithHugeLatenessPurgingTrigger['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\",11600L,14600L),14599))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),1000))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ConcurrentLinkedQueue<Object> actual = testHarness.getOutput()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),7000))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),14500))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testHarness.processWatermark(new Watermark(4998))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),10000))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "expected.add(new Watermark(100000))@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\",10000L,17500L),17499))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\",1000L,14600L),14599))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",new SumReducer(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testHarness.processWatermark(new Watermark(100000))@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expected,actual,new Tuple3ResultSortComparator())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final int gapSize = 3@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\",1),4500))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple3<>(\"key2-5\",1000L,11500L),11499))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expected.add(new Watermark(14600))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ConcurrentLinkedQueue<StreamRecord<Tuple2<String,Integer>>> sideActual = testHarness.getSideOutput(lateOutputTag)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\",1000L,17500L),17499))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "expected.add(new Watermark(11501))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "TestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\",expected,actual,new Tuple3ResultSortComparator())@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
44->30 [style = bold, label=""];
4->9 [style = bold, label=""];
18->31 [style = bold, label=""];
17->25 [style = bold, label=""];
20->50 [style = bold, label=""];
28->37 [style = bold, label=""];
25->1 [style = bold, label=""];
11->48 [style = bold, label=""];
10->50 [style = dashed, label="0"];
11->44 [style = solid, label="gapSize"];
11->50 [style = solid, label="gapSize"];
50->30 [style = bold, label=""];
44->30 [style = solid, label="operator"];
6->36 [style = solid, label="sideActual"];
1->3 [style = bold, label=""];
14->17 [style = solid, label="expected"];
20->10 [style = solid, label="stateDesc"];
10->44 [style = dashed, label="0"];
15->48 [style = dashed, label="0"];
20->44 [style = solid, label="stateDesc"];
0->21 [style = bold, label=""];
42->12 [style = bold, label=""];
2->52 [style = dashed, label="0"];
48->50 [style = solid, label="lateness"];
24->18 [style = bold, label=""];
22->5 [style = bold, label=""];
51->13 [style = bold, label=""];
14->33 [style = bold, label=""];
11->15 [style = bold, label=""];
20->44 [style = bold, label=""];
46->11 [style = bold, label=""];
45->17 [style = solid, label="actual"];
20->10 [style = bold, label=""];
43->11 [style = bold, label=""];
3->35 [style = bold, label=""];
8->0 [style = bold, label=""];
53->49 [style = bold, label=""];
49->47 [style = bold, label=""];
15->10 [style = solid, label="lateness"];
29->6 [style = bold, label=""];
26->2 [style = bold, label=""];
36->13 [style = bold, label=""];
20->50 [style = solid, label="stateDesc"];
11->10 [style = solid, label="gapSize"];
19->53 [style = bold, label=""];
35->0 [style = solid, label="sideActual"];
13->26 [style = bold, label=""];
50->30 [style = solid, label="operator"];
15->20 [style = bold, label=""];
37->38 [style = bold, label=""];
23->19 [style = bold, label=""];
48->20 [style = bold, label=""];
5->4 [style = bold, label=""];
7->29 [style = bold, label=""];
40->41 [style = bold, label=""];
3->8 [style = solid, label="actual"];
35->8 [style = bold, label=""];
10->30 [style = solid, label="operator"];
7->53 [style = dashed, label="0"];
3->45 [style = dashed, label="0"];
16->14 [style = bold, label=""];
27->24 [style = bold, label=""];
12->23 [style = bold, label=""];
26->45 [style = bold, label=""];
14->39 [style = solid, label="expected"];
31->28 [style = bold, label=""];
45->17 [style = bold, label=""];
14->8 [style = solid, label="expected"];
52->51 [style = bold, label=""];
29->39 [style = solid, label="actual"];
47->52 [style = bold, label=""];
30->16 [style = bold, label=""];
38->40 [style = bold, label=""];
32->11 [style = bold, label=""];
6->39 [style = bold, label=""];
19->7 [style = bold, label=""];
10->30 [style = bold, label=""];
39->36 [style = bold, label=""];
33->22 [style = bold, label=""];
15->44 [style = solid, label="lateness"];
34->27 [style = bold, label=""];
41->42 [style = bold, label=""];
9->34 [style = bold, label=""];
}
