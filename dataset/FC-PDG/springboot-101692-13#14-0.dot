digraph {
31 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> secondImported = new LinkedHashMap<>()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.ROOT)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> imported = new LinkedHashMap<>()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(iterator.hasNext()).isFalse()@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "initialPropertySource.setProperty(\"spring.config.import\",\"location2\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(initialLocations))).willReturn(initialImported)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(locations))).willReturn(imported)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "this.importer = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MockPropertySource propertySource = new MockPropertySource()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "imported.put(new ConfigDataResolutionResult(LOCATION_1,new TestConfigDataResource(\"a\"),false),new ConfigData(Arrays.asList(propertySource)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<ConfigDataLocation> locations = Arrays.asList(LOCATION_1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(initialPropertySource)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "MockPropertySource secondPropertySource = new MockPropertySource()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Iterator<ConfigDataEnvironmentContributor> iterator = withProcessedImports.iterator()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "List<ConfigDataLocation> initialLocations = Arrays.asList(LOCATION_1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "ConfigDataEnvironmentContributors contributors = new ConfigDataEnvironmentContributors(this.logFactory,this.bootstrapContext,Arrays.asList(contributor))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(secondLocations))).willReturn(secondImported)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "MockPropertySource initialPropertySource = new MockPropertySource()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "List<ConfigDataLocation> secondLocations = Arrays.asList(LOCATION_2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "withProcessedImportsResolvesAndLoads['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "ConfigDataEnvironmentContributor contributor = ConfigDataEnvironmentContributor.ofInitialImport(LOCATION_1)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(secondPropertySource)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "secondImported.put(new ConfigDataResolutionResult(LOCATION_2,new TestConfigDataResource(\"b\"),false),new ConfigData(Arrays.asList(secondPropertySource)))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "withProcessedImportsResolvesAndLoads['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(iterator.next().getKind()).isEqualTo(Kind.INITIAL_IMPORT)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ConfigDataEnvironmentContributors withProcessedImports = contributors.withProcessedImports(this.importer,this.activationContext)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "initialImported.put(new ConfigDataResolutionResult(LOCATION_1,new TestConfigDataResource(\"a\"),false),new ConfigData(Arrays.asList(initialPropertySource)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "given(this.importer.resolveAndLoad(eq(this.activationContext),any(),any(),eq(locations),anyBoolean())).willReturn(imported)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(iterator.next().getPropertySource()).isSameAs(propertySource)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Map<ConfigDataResolutionResult,ConfigData> initialImported = new LinkedHashMap<>()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "withProcessedImportsResolvesAndLoadsChainedImports['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19->33 [style = bold, label=""];
10->15 [style = dashed, label="0"];
18->24 [style = bold, label=""];
2->10 [style = solid, label="imported"];
7->1 [style = bold, label=""];
31->25 [style = bold, label=""];
12->5 [style = bold, label=""];
6->34 [style = bold, label=""];
5->9 [style = bold, label=""];
25->22 [style = bold, label=""];
23->27 [style = bold, label=""];
8->3 [style = solid, label="propertySource"];
1->0 [style = solid, label="contributor"];
16->6 [style = bold, label=""];
2->3 [style = bold, label=""];
11->4 [style = bold, label=""];
24->29 [style = solid, label="secondPropertySource"];
17->30 [style = bold, label=""];
3->15 [style = bold, label=""];
35->30 [style = solid, label="initialImported"];
1->0 [style = bold, label=""];
20->6 [style = bold, label=""];
32->19 [style = bold, label=""];
8->21 [style = dashed, label="0"];
9->7 [style = bold, label=""];
30->18 [style = bold, label=""];
2->15 [style = solid, label="imported"];
21->28 [style = bold, label=""];
33->26 [style = bold, label=""];
21->17 [style = solid, label="initialPropertySource"];
3->10 [style = bold, label=""];
28->35 [style = bold, label=""];
0->23 [style = bold, label=""];
15->11 [style = bold, label=""];
9->29 [style = dashed, label="0"];
8->2 [style = bold, label=""];
24->31 [style = bold, label=""];
29->32 [style = bold, label=""];
6->13 [style = bold, label=""];
21->32 [style = solid, label="initialPropertySource"];
35->17 [style = bold, label=""];
6->12 [style = solid, label="importer"];
4->12 [style = bold, label=""];
11->4 [style = solid, label="contributor"];
24->25 [style = solid, label="secondPropertySource"];
22->1 [style = bold, label=""];
6->23 [style = solid, label="importer"];
27->29 [style = bold, label=""];
13->8 [style = bold, label=""];
31->22 [style = solid, label="secondImported"];
13->34 [style = dashed, label="0"];
14->6 [style = bold, label=""];
34->21 [style = bold, label=""];
8->9 [style = solid, label="propertySource"];
10->11 [style = bold, label=""];
}
