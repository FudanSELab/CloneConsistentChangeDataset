digraph {
7 [style = filled, label = "CapturingTransport.CapturedRequest capturedRequest = transport.capturedRequests()(0(@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Request request = new Request()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertTrue(listener.isDone())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(capturedRequest.request,equalTo(request))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "CapturingTransport.CapturedRequest capturedRequest = transport.capturedRequests()(0(@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testMasterFailoverAfterStepDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "transport.handleResponse(capturedRequest.requestId,response)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "PlainActionFuture<Response> listener = new PlainActionFuture<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(capturedRequest.node.isMasterNode())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(listener.get(),equalTo(response))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Response response = new Response()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "transport.handleResponse(capturedRequest.requestId,response)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Response response = new Response()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testMasterFailoverAfterStepDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Request request = new Request().masterNodeTimeout(TimeValue.timeValueHours(1))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "setState(clusterService,ClusterStateCreationUtils.state(localNode,remoteNode,allNodes))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "new Action(\"internal:testAction\",transportService,clusterService,threadPool).execute(request,listener)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(listener.get(),equalTo(response))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(listener.isDone())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(transport.capturedRequests().length,equalTo(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "new Action(\"internal:testAction\",transportService,clusterService,threadPool){@Override protected void masterOperation(Task task,Request request,ClusterState state,ActionListener<Response> listener){setState(clusterService,ClusterStateCreationUtils.state(localNode,remoteNode,allNodes))Exception failure = randomBoolean()? new FailedToCommitClusterStateException(\"Fake error\"): new NotMasterException(\"Fake error\")listener.onFailure(failure)}}.execute(request,listener)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(capturedRequest.request,equalTo(request))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(capturedRequest.action,equalTo(\"internal:testAction\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "setState(clusterService,ClusterStateCreationUtils.state(localNode,localNode,allNodes))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testDelegateToMaster['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertTrue(capturedRequest.node.isMasterNode())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(capturedRequest.action,equalTo(\"internal:testAction\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "PlainActionFuture<Response> listener = new PlainActionFuture<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
4->1 [style = solid, label="request"];
0->3 [style = solid, label="listener"];
23->22 [style = bold, label=""];
12->7 [style = bold, label=""];
20->23 [style = bold, label=""];
26->17 [style = bold, label=""];
2->4 [style = bold, label=""];
8->5 [style = bold, label=""];
19->20 [style = bold, label=""];
16->19 [style = bold, label=""];
4->3 [style = solid, label="request"];
9->3 [style = bold, label=""];
1->8 [style = bold, label=""];
18->22 [style = solid, label="request"];
11->1 [style = bold, label=""];
15->21 [style = bold, label=""];
22->15 [style = bold, label=""];
21->24 [style = bold, label=""];
7->11 [style = bold, label=""];
18->26 [style = bold, label=""];
25->12 [style = bold, label=""];
6->10 [style = solid, label="response"];
5->13 [style = bold, label=""];
6->9 [style = bold, label=""];
17->16 [style = solid, label="listener"];
6->5 [style = solid, label="response"];
3->12 [style = bold, label=""];
21->24 [style = solid, label="response"];
27->18 [style = bold, label=""];
4->18 [style = dashed, label="0"];
24->25 [style = bold, label=""];
14->4 [style = bold, label=""];
13->10 [style = bold, label=""];
17->16 [style = bold, label=""];
18->16 [style = solid, label="request"];
21->12 [style = solid, label="response"];
4->0 [style = bold, label=""];
}
