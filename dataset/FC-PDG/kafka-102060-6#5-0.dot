digraph {
7 [style = filled, label = "stateManager.registerStore(stateStore,stateStore.stateRestoreCallback)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "task = createStatefulTask(createConfig(\"100\"),true)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(changelogPartition,0L)).andReturn(singletonMap(changelogPartition,10L)).andReturn(singletonMap(changelogPartition,12000L))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "task.initializeIfNeeded()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expectLastCall().times(2)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition,offset)).anyTimes()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "EasyMock.verify(stateManager,recordCollector)@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "task.completeRestoration()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "task.prepareCommit()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "task.postCommit(false)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(stateManager.changelogOffsets()).andReturn(Collections.singletonMap(changelogPartition,10L)).andReturn(Collections.singletonMap(changelogPartition,20L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final Long offset = 543L@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition,offset)).anyTimes()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "EasyMock.expect(stateManager.changelogOffsets()).andReturn(Collections.singletonMap(changelogPartition,0L)).andReturn(Collections.singletonMap(changelogPartition,10L)).andReturn(Collections.singletonMap(changelogPartition,12000L))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "task.postCommit(true)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "EasyMock.expectLastCall().once()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "EasyMock.replay(stateManager,recordCollector)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EasyMock.verify(recordCollector)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "task.prepareCommit()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "stateManager.checkpoint()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "task.postCommit(false)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->20 [style = dashed, label="0"];
16->0 [style = bold, label=""];
7->11 [style = bold, label=""];
21->19 [style = bold, label=""];
4->25 [style = bold, label=""];
25->22 [style = bold, label=""];
11->14 [style = bold, label=""];
9->4 [style = bold, label=""];
18->15 [style = bold, label=""];
8->6 [style = bold, label=""];
5->25 [style = dashed, label="0"];
2->10 [style = bold, label=""];
13->16 [style = bold, label=""];
12->21 [style = dashed, label="0"];
20->4 [style = bold, label=""];
3->19 [style = dashed, label="0"];
5->21 [style = bold, label=""];
6->1 [style = bold, label=""];
10->13 [style = bold, label=""];
5->12 [style = bold, label=""];
3->7 [style = bold, label=""];
15->9 [style = bold, label=""];
15->20 [style = bold, label=""];
0->13 [style = dashed, label="0"];
26->15 [style = bold, label=""];
12->22 [style = dashed, label="0"];
17->15 [style = bold, label=""];
14->8 [style = bold, label=""];
12->3 [style = bold, label=""];
1->2 [style = bold, label=""];
22->24 [style = bold, label=""];
23->11 [style = bold, label=""];
4->5 [style = bold, label=""];
19->7 [style = bold, label=""];
24->23 [style = bold, label=""];
}
