digraph {
7 [style = filled, label = "final RelNode input@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "return new EnumerableLimit(cluster,traitSet,input,offset,fetch)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "RexNode condition@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RexNode fetch@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "create['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final RelTraitSet traitSet = cluster.traitSetOf(BindableConvention.INSTANCE).replaceIfs(RelCollationTraitDef.INSTANCE,new Supplier<List<RelCollation>>(){public List<RelCollation> get(){return RelMdCollation.filter(mq,input)}})@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "create['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "RexNode offset@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final RelNode input@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "return new BindableFilter(cluster,traitSet,input,condition)@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final RelTraitSet traitSet = cluster.traitSetOf(BindableConvention.INSTANCE).replaceIfs(RelCollationTraitDef.INSTANCE,null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "final RelTraitSet traitSet = cluster.traitSetOf(EnumerableConvention.INSTANCE).replaceIfs(RelCollationTraitDef.INSTANCE,new Supplier<List<RelCollation>>(){public List<RelCollation> get(){return RelMdCollation.limit(mq,input)}}).replaceIf(RelDistributionTraitDef.INSTANCE,new Supplier<RelDistribution>(){public RelDistribution get(){return RelMdDistribution.limit(mq,input)}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final RelNode input@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final RelOptCluster cluster = input.getCluster()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "create['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "final RelMetadataQuery mq = cluster.getMetadataQuery()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "return new BindableFilter(cluster,traitSet,input,condition)@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5->13 [style = dashed, label="0"];
4->2 [style = solid, label="condition"];
4->8 [style = solid, label="condition"];
7->8 [style = solid, label="input"];
13->12 [style = solid, label="traitSet"];
1->3 [style = bold, label=""];
5->9 [style = dashed, label="0"];
5->2 [style = solid, label="traitSet"];
11->12 [style = solid, label="fetch"];
9->8 [style = bold, label=""];
0->2 [style = solid, label="input"];
15->12 [style = solid, label="input"];
3->5 [style = solid, label="mq"];
1->8 [style = solid, label="cluster"];
1->12 [style = solid, label="cluster"];
3->9 [style = bold, label=""];
0->5 [style = solid, label="input"];
6->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
13->12 [style = bold, label=""];
6->4 [style = dotted, label="true"];
16->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
16->14 [style = dotted, label="true"];
14->12 [style = solid, label="offset"];
3->13 [style = bold, label=""];
15->13 [style = solid, label="input"];
3->13 [style = solid, label="mq"];
6->0 [style = dotted, label="true"];
10->4 [style = dotted, label="true"];
10->1 [style = bold, label=""];
16->11 [style = dotted, label="true"];
10->7 [style = dotted, label="true"];
9->8 [style = solid, label="traitSet"];
1->2 [style = solid, label="cluster"];
16->15 [style = dotted, label="true"];
}
