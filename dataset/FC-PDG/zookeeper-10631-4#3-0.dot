digraph {
5 [style = filled, label = "Assert.assertNull(zk.exists(\"/multi\",null))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "testDeleteUpdateConflict['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertArrayEquals(zk.getData(\"/multi\",false,null),\"Y\".getBytes())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "KeeperException e@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "KeeperException e@@@7@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "multi(zk,Arrays.asList(Op.create(\"/multi\",new byte((((,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.delete(\"/multi\",0),Op.setData(\"/multi\",\"Y\".getBytes(),0)))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "LOG.error(\"STACKTRACE: \",e)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "multi(zk,Arrays.asList(Op.create(\"/multi\",new byte((((,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.delete(\"/multi\",0),Op.setData(\"/multi\",\"Y\".getBytes(),0)))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "testDeleteUpdateConflict['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{}@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNull(zk.exists(\"/multi\",null))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertNull(zk.exists(\"/multi\",null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testUpdateConflict['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.fail(\"/multi should have been deleted so setData should have failed\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertNull(zk.exists(\"/multi\",null))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.fail(\"Should have thrown a KeeperException for invalid version\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "multi(zk,Arrays.asList(Op.create(\"/multi\",new byte((((,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.setData(\"/multi\",\"X\".getBytes(),0),Op.setData(\"/multi\",\"Y\".getBytes(),1)))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "multi(zk,Arrays.asList(Op.create(\"/multi\",new byte((((,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.setData(\"/multi\",\"X\".getBytes(),0),Op.setData(\"/multi\",\"Y\".getBytes(),0)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "KeeperException e@@@7@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "fail(\"/multi should have been deleted so setData should have failed\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
14->16 [style = bold, label=""];
16->18 [style = bold, label=""];
1->19 [style = dashed, label="0"];
18->12 [style = bold, label=""];
17->14 [style = dotted, label="true"];
3->6 [style = bold, label=""];
1->9 [style = dashed, label="0"];
19->11 [style = bold, label=""];
9->10 [style = bold, label=""];
15->19 [style = bold, label=""];
10->6 [style = bold, label=""];
7->3 [style = bold, label=""];
2->10 [style = dashed, label="0"];
5->16 [style = dashed, label="0"];
3->5 [style = bold, label=""];
5->6 [style = dashed, label="0"];
17->14 [style = bold, label=""];
8->9 [style = bold, label=""];
4->1 [style = bold, label=""];
1->2 [style = bold, label=""];
13->15 [style = bold, label=""];
2->5 [style = bold, label=""];
}
