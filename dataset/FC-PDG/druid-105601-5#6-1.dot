digraph {
25 [style = filled, label = "Assert.assertEquals(1L,row.getMetric(\"count_multivaldim_filtered\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"4\"),row.getDimension(\"dim2\"))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "index.add(new MapBasedInputRow(timestamp,Arrays.asList(\"dim1\",\"dim2\",\"dim3\"),ImmutableMap.of(\"dim1\",\"3\",\"dim2\",\"4\",\"dim3\",Lists.newArrayList(\"c\",\"d\"),\"met1\",11)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"c\",\"d\"),row.getDimension(\"dim3\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "IncrementalIndex<?> index = indexCreator.createIndex((Object)DEFAULT_AGGREGATOR_FACTORIES)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"2\"),row.getDimension(\"dim2\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(1L,row.getMetric(\"count\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"3\"),row.getDimension(\"dim1\"))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(2,index.size())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(0L,row.getMetric(\"count_selector_filtered\"))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(1L,row.getMetric(\"count\"))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(1L,row.getMetric(\"count_selector_filtered\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(timestamp,row.getTimestampFromEpoch())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "row = rows.next()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "index.add(new MapBasedInputRow(timestamp,Arrays.asList(\"dim1\",\"dim2\",\"dim3\"),ImmutableMap.of(\"dim1\",\"1\",\"dim2\",\"2\",\"dim3\",Lists.newArrayList(\"b\",\"a\"),\"met1\",10)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(0L,row.getMetric(\"count_multivaldim_filtered\"))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(0L,row.getMetric(\"count_numeric_filtered\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(Collections.singletonList(\"1\"),row.getDimension(\"dim1\"))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"dim1\",\"dim2\",\"dim3\"),index.getDimensionNames())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "long timestamp = System.currentTimeMillis()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "populateIndex(timestamp,index)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(new AggregatorFactory((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@925e10))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"dim1\",\"dim2\"),index.getDimensionNames())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(timestamp,row.getTimestampFromEpoch())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Row row = rows.next()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(1L,row.getMetric(\"count_numeric_filtered\"))@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(2,index.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testFilteredAggregators['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testCaseSensitivity['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "Assert.assertEquals(0L,row.getMetric(\"count_bound_filtered\"))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(timestamp,row.getTimestampFromEpoch())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Row row = rows.next()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"count\",\"count_selector_filtered\",\"count_bound_filtered\",\"count_multivaldim_filtered\",\"count_numeric_filtered\"),index.getMetricNames())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(1L,row.getMetric(\"count_bound_filtered\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testCaseSensitivity['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(DEFAULT_AGGREGATOR_FACTORIES))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final Iterator<Row> rows = index.iterator()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final Iterator<Row> rows = index.iterator()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(Arrays.asList(\"a\",\"b\"),row.getDimension(\"dim3\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
9->12 [style = solid, label="timestamp"];
8->16 [style = dashed, label="0"];
12->5 [style = bold, label=""];
22->19 [style = bold, label=""];
9->33 [style = bold, label=""];
38->24 [style = bold, label=""];
34->5 [style = bold, label=""];
35->20 [style = bold, label=""];
8->33 [style = dashed, label="0"];
31->32 [style = bold, label=""];
26->34 [style = bold, label=""];
37->17 [style = bold, label=""];
0->11 [style = bold, label=""];
28->9 [style = bold, label=""];
3->12 [style = bold, label=""];
21->30 [style = bold, label=""];
9->8 [style = bold, label=""];
1->13 [style = bold, label=""];
9->16 [style = bold, label=""];
29->26 [style = bold, label=""];
33->23 [style = bold, label=""];
7->14 [style = bold, label=""];
23->29 [style = bold, label=""];
17->38 [style = bold, label=""];
8->1 [style = bold, label=""];
25->27 [style = bold, label=""];
9->30 [style = solid, label="timestamp"];
9->23 [style = solid, label="timestamp"];
16->1 [style = bold, label=""];
11->3 [style = bold, label=""];
15->9 [style = bold, label=""];
30->31 [style = bold, label=""];
24->25 [style = bold, label=""];
5->4 [style = bold, label=""];
9->29 [style = solid, label="timestamp"];
18->35 [style = bold, label=""];
10->2 [style = bold, label=""];
16->1 [style = solid, label="index"];
9->2 [style = solid, label="timestamp"];
2->7 [style = bold, label=""];
32->18 [style = bold, label=""];
6->9 [style = bold, label=""];
9->1 [style = solid, label="timestamp"];
8->1 [style = solid, label="index"];
27->21 [style = bold, label=""];
20->36 [style = bold, label=""];
13->0 [style = bold, label=""];
14->37 [style = bold, label=""];
36->22 [style = bold, label=""];
}
