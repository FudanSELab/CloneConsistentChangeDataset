digraph {
33 [style = filled, label = "accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs,false)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs,false)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "testLinger['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "i++@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "RecordAccumulator accum = createTestRecordAccumulator(1024 + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * 1024,CompressionType.NONE,lingerMs)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"No partitions should be ready.\",0,accum.ready(cluster,now).readyNodes.size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(1,batches.size())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int i = 0@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "int batchSize = 1025@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),record.key())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "List<ProducerBatch> batches = accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "int i = 0@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "i < appends@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertTrue(batch.isWritable())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Iterator<Record> iter = batch.records().records().iterator()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(partitionBatchesIterator.next().isWritable())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < appends@@@28@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "long now = time.milliseconds()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertFalse(\"No more records\",iter.hasNext())@@@34@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1,partitionBatches.size())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "Record record = iter.next()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),record.value())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "time.sleep(10)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RecordAccumulator accum = createTestRecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10L * batchSize,CompressionType.NONE,10)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertEquals(\"Values should match\",ByteBuffer.wrap(value),record.value())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i++@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "ProducerBatch batch = batches.get(0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"No partitions should be ready\",0,accum.ready(cluster,time.milliseconds()).readyNodes.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Iterator<Record> iter = batch.records().records().iterator()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertEquals(\"Our partition's leader should be ready\",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "int appends = expectedNumAppends(batchSize)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"Keys should match\",ByteBuffer.wrap(key),record.key())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Record record = iter.next()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "int lingerMs = 10@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(2,partitionBatches.size())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ProducerBatch batch = partitionBatches.peekFirst()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Iterator<ProducerBatch> partitionBatchesIterator = partitionBatches.iterator()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(1,batches.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Deque<ProducerBatch> partitionBatches = accum.batches().get(tp1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46->44 [style = bold, label=""];
14->3 [style = bold, label=""];
13->25 [style = bold, label=""];
17->10 [style = bold, label=""];
16->15 [style = bold, label=""];
13->18 [style = dotted, label="true"];
15->2 [style = bold, label=""];
19->18 [style = bold, label=""];
4->5 [style = dotted, label="true"];
39->46 [style = bold, label=""];
7->31 [style = dashed, label="0"];
27->0 [style = bold, label=""];
26->17 [style = bold, label=""];
4->6 [style = bold, label=""];
29->9 [style = bold, label=""];
4->20 [style = dotted, label="true"];
44->7 [style = bold, label=""];
13->19 [style = dotted, label="true"];
31->29 [style = bold, label=""];
13->7 [style = dotted, label="true"];
11->19 [style = bold, label=""];
2->4 [style = bold, label=""];
3->13 [style = solid, label="i"];
22->5 [style = bold, label=""];
36->39 [style = bold, label=""];
1->11 [style = bold, label=""];
24->30 [style = bold, label=""];
20->22 [style = bold, label=""];
14->4 [style = solid, label="appends"];
3->18 [style = solid, label="i"];
23->28 [style = bold, label=""];
18->13 [style = solid, label="i"];
40->41 [style = solid, label="lingerMs"];
21->26 [style = bold, label=""];
13->1 [style = dotted, label="true"];
0->14 [style = bold, label=""];
13->31 [style = dotted, label="true"];
10->8 [style = bold, label=""];
12->4 [style = bold, label=""];
5->12 [style = bold, label=""];
43->35 [style = bold, label=""];
27->0 [style = solid, label="batchSize"];
13->9 [style = dotted, label="true"];
13->7 [style = bold, label=""];
13->29 [style = dotted, label="true"];
4->22 [style = dotted, label="true"];
12->4 [style = solid, label="i"];
34->36 [style = bold, label=""];
14->13 [style = solid, label="appends"];
27->14 [style = solid, label="batchSize"];
40->41 [style = bold, label=""];
4->20 [style = bold, label=""];
2->4 [style = solid, label="i"];
18->13 [style = bold, label=""];
45->42 [style = bold, label=""];
3->13 [style = bold, label=""];
7->43 [style = bold, label=""];
38->47 [style = bold, label=""];
13->11 [style = dotted, label="true"];
25->33 [style = dashed, label="0"];
47->45 [style = bold, label=""];
2->12 [style = solid, label="i"];
35->38 [style = bold, label=""];
28->27 [style = bold, label=""];
13->31 [style = bold, label=""];
9->1 [style = bold, label=""];
13->33 [style = bold, label=""];
30->16 [style = bold, label=""];
33->21 [style = bold, label=""];
4->12 [style = dotted, label="true"];
32->28 [style = bold, label=""];
41->34 [style = bold, label=""];
37->40 [style = bold, label=""];
25->21 [style = bold, label=""];
7->29 [style = bold, label=""];
8->24 [style = bold, label=""];
}
