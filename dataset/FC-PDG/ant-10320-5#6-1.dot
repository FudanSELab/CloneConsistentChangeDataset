digraph {
17 [style = filled, label = "result = m.mapFileName(\"foobar\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"plonkpling\",result(0()@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNoPatternAtAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertNull(\"Shouldn't match foobar\",m.mapFileName(\"plonk\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "m.setFrom(\"foo*bar\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"only one result for foobar\",1,result.length)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(\"only one result for foo.baz.bar\",1,result.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "result = m.mapFileName(\"foo.baz.bar\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"only one result for foobar\",1,result.length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "m.setTo(\"plonk*pling\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "testPreAndPostfix['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testNoPatternAtAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNull(\"Shouldn't match foobar\",m.mapFileName(\"plonk\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "m.setFrom(\"foobar\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"plonk.baz.pling\",result(0()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"only one result for foo.bar\",1,result.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String(( result = m.mapFileName(\"foo.bar\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"plonk.pling\",result(0()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNotNull(\"Should match foobar\",result)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"baz\",result(0()@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "m.setTo(\"baz\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertNull(\"Shouldn't match foo*bar\",m.mapFileName(\"bar.baz\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertNotNull(\"Should match foo*bar\",result)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "String(( result = m.mapFileName(\"foobar\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(\"Should match foo*bar\",result)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertNotNull(\"Should match foo*bar\",result)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->10 [style = bold, label=""];
1->4 [style = bold, label=""];
23->16 [style = bold, label=""];
18->24 [style = bold, label=""];
16->18 [style = bold, label=""];
24->19 [style = bold, label=""];
9->0 [style = bold, label=""];
19->12 [style = bold, label=""];
19->12 [style = solid, label="result"];
0->19 [style = dashed, label="0"];
17->22 [style = solid, label="result"];
2->3 [style = bold, label=""];
11->21 [style = bold, label=""];
25->15 [style = solid, label="result"];
1->18 [style = dashed, label="0"];
17->22 [style = bold, label=""];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
5->16 [style = dashed, label="0"];
12->13 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
25->21 [style = solid, label="result"];
4->9 [style = dashed, label="0"];
15->11 [style = bold, label=""];
8->5 [style = bold, label=""];
19->10 [style = solid, label="result"];
17->20 [style = solid, label="result"];
10->25 [style = bold, label=""];
7->2 [style = bold, label=""];
0->7 [style = solid, label="result"];
3->20 [style = dashed, label="0"];
0->3 [style = solid, label="result"];
25->15 [style = bold, label=""];
7->12 [style = dashed, label="0"];
4->24 [style = dashed, label="0"];
22->14 [style = bold, label=""];
21->17 [style = bold, label=""];
14->20 [style = bold, label=""];
}
