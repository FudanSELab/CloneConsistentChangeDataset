digraph {
28 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Thread.sleep(10)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@73@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "int i = numToAdd@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L,1,0L))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "testIncrementalHandOff['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L,1,0L))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "insertData()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
47 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "maxRowsPerSegment = 2@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Thread.sleep(10)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@59@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@58@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "testIncrementalHandOff['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
80 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@57@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@28@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "i < numToAdd@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "i < records.size()@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Thread.sleep(10)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,4L,1,2L))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@60@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "int i = 0@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,currentOffsets)))))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,4L,1,2L))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "i++@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
48 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "i++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83->84 [style = bold, label=""];
58->85 [style = bold, label=""];
6->35 [style = bold, label=""];
68->31 [style = bold, label=""];
27->28 [style = solid, label="endPartitions"];
23->48 [style = dashed, label="0"];
20->28 [style = solid, label="startPartitions"];
27->28 [style = bold, label=""];
12->65 [style = dashed, label="0"];
41->42 [style = solid, label="startPartitions"];
10->53 [style = bold, label=""];
18->78 [style = solid, label="desc1"];
84->50 [style = bold, label=""];
5->40 [style = dashed, label="0"];
10->52 [style = solid, label="desc4"];
51->86 [style = bold, label=""];
1->23 [style = bold, label=""];
53->81 [style = bold, label=""];
56->47 [style = bold, label=""];
24->30 [style = bold, label=""];
69->82 [style = bold, label=""];
10->69 [style = solid, label="desc4"];
39->2 [style = solid, label="desc7"];
16->33 [style = solid, label="task"];
18->22 [style = bold, label=""];
10->78 [style = solid, label="desc4"];
50->83 [style = bold, label=""];
53->78 [style = solid, label="desc5"];
19->9 [style = bold, label=""];
57->78 [style = bold, label=""];
66->62 [style = solid, label="i"];
65->68 [style = bold, label=""];
72->73 [style = bold, label=""];
28->3 [style = solid, label="task"];
16->22 [style = solid, label="task"];
77->52 [style = solid, label="desc7"];
9->79 [style = dashed, label="0"];
78->71 [style = bold, label=""];
41->28 [style = solid, label="startPartitions"];
12->46 [style = dashed, label="0"];
20->31 [style = solid, label="startPartitions"];
32->4 [style = solid, label="currentOffsets"];
21->67 [style = bold, label=""];
55->64 [style = bold, label=""];
8->39 [style = bold, label=""];
28->14 [style = solid, label="task"];
9->29 [style = bold, label=""];
32->11 [style = bold, label=""];
67->3 [style = bold, label=""];
27->45 [style = dashed, label="0"];
59->54 [style = bold, label=""];
73->60 [style = bold, label=""];
5->37 [style = bold, label=""];
40->37 [style = bold, label=""];
62->56 [style = bold, label=""];
4->2 [style = solid, label="startPartitions"];
48->2 [style = bold, label=""];
56->62 [style = dotted, label="true"];
32->11 [style = solid, label="currentOffsets"];
38->64 [style = solid, label="desc3"];
76->80 [style = bold, label=""];
21->3 [style = solid, label="currentOffsets"];
81->77 [style = bold, label=""];
45->28 [style = solid, label="endPartitions"];
22->52 [style = solid, label="desc2"];
87->76 [style = bold, label=""];
4->65 [style = bold, label=""];
56->47 [style = dotted, label="true"];
77->78 [style = solid, label="desc7"];
21->70 [style = solid, label="currentOffsets"];
32->42 [style = solid, label="currentOffsets"];
71->61 [style = bold, label=""];
22->38 [style = bold, label=""];
61->55 [style = bold, label=""];
75->66 [style = bold, label=""];
70->5 [style = bold, label=""];
16->33 [style = bold, label=""];
28->8 [style = solid, label="task"];
20->41 [style = dashed, label="0"];
33->36 [style = bold, label=""];
34->36 [style = bold, label=""];
84->58 [style = bold, label=""];
21->2 [style = solid, label="desc3"];
3->22 [style = solid, label="desc5"];
54->59 [style = bold, label=""];
21->7 [style = bold, label=""];
41->46 [style = bold, label=""];
34->14 [style = bold, label=""];
34->2 [style = solid, label="desc1"];
16->53 [style = solid, label="task"];
18->52 [style = solid, label="desc1"];
44->45 [style = bold, label=""];
14->21 [style = bold, label=""];
26->20 [style = bold, label=""];
81->82 [style = solid, label="desc6"];
3->2 [style = solid, label="desc5"];
46->44 [style = bold, label=""];
23->31 [style = bold, label=""];
30->24 [style = bold, label=""];
60->83 [style = solid, label="i"];
84->83 [style = dotted, label="true"];
8->2 [style = solid, label="desc6"];
29->17 [style = bold, label=""];
32->16 [style = solid, label="consumerProps"];
37->25 [style = bold, label=""];
11->4 [style = bold, label=""];
25->18 [style = bold, label=""];
59->72 [style = bold, label=""];
42->16 [style = bold, label=""];
16->10 [style = solid, label="task"];
30->32 [style = bold, label=""];
60->84 [style = bold, label=""];
4->16 [style = solid, label="startPartitions"];
60->84 [style = solid, label="i"];
31->42 [style = dashed, label="0"];
38->52 [style = solid, label="desc3"];
79->87 [style = bold, label=""];
74->6 [style = bold, label=""];
76->56 [style = solid, label="numToAdd"];
47->62 [style = bold, label=""];
23->42 [style = bold, label=""];
19->16 [style = solid, label="baseSequenceName"];
26->41 [style = bold, label=""];
28->7 [style = solid, label="task"];
28->13 [style = solid, label="task"];
81->52 [style = solid, label="desc6"];
85->51 [style = bold, label=""];
63->32 [style = bold, label=""];
7->22 [style = solid, label="desc4"];
34->37 [style = solid, label="desc1"];
3->8 [style = bold, label=""];
39->2 [style = bold, label=""];
21->2 [style = solid, label="currentOffsets"];
53->69 [style = solid, label="desc5"];
83->84 [style = solid, label="i"];
4->1 [style = bold, label=""];
56->63 [style = bold, label=""];
14->2 [style = solid, label="desc2"];
18->61 [style = solid, label="desc1"];
31->16 [style = solid, label="endPartitions"];
38->78 [style = solid, label="desc3"];
36->34 [style = bold, label=""];
53->52 [style = solid, label="desc5"];
7->2 [style = solid, label="desc4"];
28->39 [style = solid, label="task"];
84->50 [style = dotted, label="true"];
2->5 [style = bold, label=""];
19->28 [style = solid, label="baseSequenceName"];
39->10 [style = solid, label="desc7"];
80->75 [style = bold, label=""];
32->31 [style = solid, label="currentOffsets"];
82->49 [style = bold, label=""];
17->26 [style = bold, label=""];
30->24 [style = dotted, label="true"];
31->16 [style = bold, label=""];
38->10 [style = bold, label=""];
0->6 [style = bold, label=""];
64->69 [style = bold, label=""];
21->18 [style = solid, label="desc3"];
16->18 [style = solid, label="task"];
22->78 [style = solid, label="desc2"];
2->70 [style = bold, label=""];
12->15 [style = bold, label=""];
35->19 [style = bold, label=""];
28->13 [style = bold, label=""];
15->44 [style = dashed, label="0"];
17->28 [style = solid, label="consumerProps"];
6->19 [style = bold, label=""];
13->30 [style = bold, label=""];
45->28 [style = bold, label=""];
2->40 [style = bold, label=""];
86->8 [style = bold, label=""];
28->34 [style = solid, label="task"];
66->56 [style = solid, label="i"];
7->3 [style = bold, label=""];
43->6 [style = bold, label=""];
59->54 [style = dotted, label="true"];
76->60 [style = solid, label="numToAdd"];
19->79 [style = bold, label=""];
36->21 [style = bold, label=""];
8->48 [style = bold, label=""];
85->86 [style = solid, label="nextOffsets"];
85->70 [style = solid, label="nextOffsets"];
11->67 [style = dashed, label="0"];
14->25 [style = solid, label="desc2"];
15->68 [style = dashed, label="0"];
3->59 [style = bold, label=""];
8->38 [style = solid, label="desc6"];
77->52 [style = bold, label=""];
20->12 [style = bold, label=""];
22->55 [style = solid, label="desc2"];
6->35 [style = dotted, label="true"];
62->56 [style = solid, label="i"];
28->21 [style = solid, label="task"];
16->38 [style = solid, label="task"];
85->51 [style = solid, label="nextOffsets"];
77->49 [style = solid, label="desc7"];
52->57 [style = bold, label=""];
15->27 [style = bold, label=""];
36->34 [style = dotted, label="true"];
16->81 [style = solid, label="task"];
66->56 [style = bold, label=""];
16->77 [style = solid, label="task"];
81->78 [style = solid, label="desc6"];
21->67 [style = solid, label="currentOffsets"];
}
