digraph {
23 [style = filled, label = "Assert.assertTrue(task.supportsQueries())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Thread.sleep(50)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final TestFirehose firehose = (TestFirehose)task.getFirehose()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertNull(sumMetric(task,new SelectorDimFilter(\"dim1t\",\"barbar\",null),\"metric1\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "NullHandling.replaceWithDefault()@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(2,sumMetric(task,new SelectorDimFilter(\"dim1t\",\"foofoo\",null),\"rows\").longValue())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(1,task.getRowIngestionMeters().getThrownAway())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(0,task.getRowIngestionMeters().getUnparseable())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,taskStatus.getStatusCode())@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final AppenderatorDriverRealtimeIndexTask task = makeRealtimeTask(null,transformSpec,true,0,true,0,1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "awaitHandoffs()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final TestFirehose firehose = (TestFirehose)task.getFirehose()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "handOffCallbacks.clear()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "executorRunnablePair.lhs.execute(executorRunnablePair.rhs)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final AppenderatorDriverRealtimeIndexTask task = makeRealtimeTask(null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(0,sumMetric(task,new SelectorDimFilter(\"dim1t\",\"barbar\",null),\"metric1\").longValue())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testTransformSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final TransformSpec transformSpec = new TransformSpec(new SelectorDimFilter(\"dim1\",\"foo\",null),ImmutableList.of(new ExpressionTransform(\"dim1t\",\"concat(dim1,dim1)\",ExprMacroTable.nil())))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(2,task.getRowIngestionMeters().getProcessed())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "task.getFirehose() == null@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "firehose.addRows(ImmutableList.of(ImmutableMap.of(\"t\",now.getMillis(),\"dim1\",\"foo\",\"met1\",\"1\"),ImmutableMap.of(\"t\",now.minus(new Period(\"P1D\")).getMillis(),\"dim1\",\"foo\",\"met1\",2.0),ImmutableMap.of(\"t\",now.getMillis(),\"dim2\",\"bar\",\"met1\",2.0)))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(3,sumMetric(task,null,\"met1\").longValue())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final ListenableFuture<TaskStatus> statusFuture = runTask(task)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ListenableFuture<TaskStatus> statusFuture = runTask(task)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,task.getRowIngestionMeters().getUnparseable())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "expectPublishedSegments(1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(2,sumMetric(task,null,\"rows\").longValue())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testBasics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "firehose.close()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "handOffCallbacks.clear()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "firehose.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertNotNull(publishedSegment + \" missing from handoff callbacks: \" + handOffCallbacks,executorRunnablePair)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Collection<DataSegment> publishedSegments = awaitSegments()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Pair<Executor,Runnable> executorRunnablePair = handOffCallbacks.get(new SegmentDescriptor(publishedSegment.getInterval(),publishedSegment.getVersion(),publishedSegment.getShardSpec().getPartitionNum()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Pair<Executor,Runnable> executorRunnablePair = handOffCallbacks.get(new SegmentDescriptor(publishedSegment.getInterval(),publishedSegment.getVersion(),publishedSegment.getShardSpec().getPartitionNum()))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testBasics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "expectPublishedSegments(2)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final TaskStatus taskStatus = statusFuture.get()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
14->5 [style = bold, label=""];
12->0 [style = bold, label=""];
17->31 [style = bold, label=""];
24->37 [style = bold, label=""];
11->4 [style = bold, label=""];
21->14 [style = bold, label=""];
10->35 [style = dashed, label="0"];
24->33 [style = bold, label=""];
0->29 [style = dashed, label="0"];
7->10 [style = bold, label=""];
10->35 [style = bold, label=""];
22->0 [style = bold, label=""];
6->26 [style = bold, label=""];
28->25 [style = solid, label="transformSpec"];
25->20 [style = bold, label=""];
8->30 [style = dotted, label="true"];
24->37 [style = dotted, label="true"];
29->28 [style = bold, label=""];
9->2 [style = bold, label=""];
32->14 [style = bold, label=""];
20->8 [style = bold, label=""];
5->34 [style = bold, label=""];
16->36 [style = bold, label=""];
11->4 [style = solid, label="task"];
5->9 [style = bold, label=""];
3->18 [style = bold, label=""];
0->11 [style = bold, label=""];
4->20 [style = bold, label=""];
20->19 [style = bold, label=""];
37->13 [style = bold, label=""];
33->13 [style = bold, label=""];
19->16 [style = bold, label=""];
36->18 [style = bold, label=""];
10->1 [style = bold, label=""];
27->29 [style = bold, label=""];
21->14 [style = solid, label="executorRunnablePair"];
25->20 [style = solid, label="task"];
14->5 [style = solid, label="executorRunnablePair"];
5->21 [style = bold, label=""];
16->3 [style = bold, label=""];
17->13 [style = bold, label=""];
25->33 [style = solid, label="task"];
11->23 [style = bold, label=""];
1->15 [style = bold, label=""];
35->15 [style = bold, label=""];
2->6 [style = bold, label=""];
24->33 [style = dotted, label="false"];
16->36 [style = dashed, label="0"];
34->2 [style = bold, label=""];
31->24 [style = bold, label=""];
30->8 [style = bold, label=""];
8->30 [style = bold, label=""];
20->8 [style = dotted, label="true"];
13->32 [style = bold, label=""];
23->4 [style = bold, label=""];
34->14 [style = bold, label=""];
8->20 [style = bold, label=""];
28->25 [style = bold, label=""];
18->7 [style = bold, label=""];
13->21 [style = bold, label=""];
15->17 [style = bold, label=""];
}
