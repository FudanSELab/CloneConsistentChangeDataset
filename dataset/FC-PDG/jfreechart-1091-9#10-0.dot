digraph {
0 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "DialBackground b1 = new DialBackground()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(b1.equals(b2))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "b1.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.GREEN))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(b1.hasListener(l1))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "b1 = new DialBackground()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(b1,b2)@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertTrue(b1.getClass() == b2.getClass())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testSerialization['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(b1,b2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertTrue(b1 != b2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "b1.addChangeListener(l1)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "b2 = (DialBackground)b1.clone()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(b1 != b2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(b2.hasListener(l1))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "b2 = (DialBackground)TestUtils.serialised(b1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MyDialLayerChangeListener l1 = new MyDialLayerChangeListener()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DialBackground b2 = (DialBackground)TestUtils.serialised(b1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "DialBackground b2 = CloneUtils.clone(b1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "b1.setPaint(new GradientPaint(1.0f,2.0f,Color.RED,3.0f,4.0f,Color.green))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "DialBackground b2 = (DialBackground)b1.clone()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertTrue(b1.getClass() == b2.getClass())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(b1.equals(b2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->17 [style = bold, label=""];
4->9 [style = bold, label=""];
16->15 [style = bold, label=""];
5->8 [style = bold, label=""];
1->4 [style = bold, label=""];
2->17 [style = solid, label="b1"];
2->19 [style = bold, label=""];
11->20 [style = dashed, label="0"];
22->2 [style = bold, label=""];
3->1 [style = bold, label=""];
6->4 [style = solid, label="b1"];
21->23 [style = solid, label="b1"];
6->23 [style = bold, label=""];
2->19 [style = solid, label="b1"];
0->2 [style = bold, label=""];
17->8 [style = solid, label="b2"];
2->24 [style = solid, label="b1"];
2->7 [style = solid, label="b1"];
8->6 [style = bold, label=""];
23->3 [style = bold, label=""];
12->16 [style = bold, label=""];
14->7 [style = solid, label="b2"];
20->6 [style = bold, label=""];
9->10 [style = bold, label=""];
14->8 [style = solid, label="b2"];
18->2 [style = bold, label=""];
17->7 [style = solid, label="b2"];
13->12 [style = solid, label="l1"];
14->7 [style = bold, label=""];
19->24 [style = bold, label=""];
17->7 [style = bold, label=""];
7->5 [style = bold, label=""];
13->12 [style = bold, label=""];
21->20 [style = bold, label=""];
21->3 [style = solid, label="b1"];
10->13 [style = bold, label=""];
24->21 [style = bold, label=""];
11->3 [style = bold, label=""];
13->16 [style = solid, label="l1"];
7->24 [style = dashed, label="0"];
6->11 [style = bold, label=""];
13->15 [style = solid, label="l1"];
2->14 [style = bold, label=""];
23->3 [style = solid, label="b2"];
4->3 [style = dashed, label="0"];
19->24 [style = solid, label="b2"];
1->4 [style = solid, label="b2"];
14->17 [style = dashed, label="0"];
14->19 [style = dashed, label="0"];
1->10 [style = solid, label="b2"];
1->23 [style = dashed, label="0"];
}
