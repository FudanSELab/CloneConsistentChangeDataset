digraph {
29 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Class fooClass = loadClass(classNode)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Object value = new Integer(10000)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "classNode.addMethod(new MethodNode(\"iterateDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "e.getCause().printStackTrace()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"oneParamDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1613ccc)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Object(( array = {new Integer(1234),\"abc\",\"def\"}@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "e.getCause().printStackTrace()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Object bean = fooClass.getDeclaredConstructor().newInstance()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Object bean = fooClass.newInstance()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "InvokerInvocationException e@@@24@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with looping\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,ClassNode.EMPTY_ARRAY,statement))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testNonLoop['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "ForStatement statement = new ForStatement(new Parameter(ClassHelper.OBJECT_TYPE,\"i\"),new VariableExpression(\"coll\"),loopStatement)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Statement loopStatement = createPrintlnStatement(new VariableExpression(\"i\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,ClassHelper.OBJECT_TYPE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"iterateDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1613d76)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "InvokerInvocationException e@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testLoop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Class fooClass = loadClass(classNode)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testNonLoop['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Parameter(( parameters = {new Parameter(ClassHelper.OBJECT_TYPE.makeArray(),\"coll\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->25 [style = bold, label=""];
10->11 [style = solid, label="statement"];
17->5 [style = bold, label=""];
29->4 [style = bold, label=""];
26->7 [style = bold, label=""];
16->27 [style = bold, label=""];
23->5 [style = bold, label=""];
7->14 [style = solid, label="fooClass"];
3->29 [style = dotted, label="true"];
28->20 [style = bold, label=""];
16->27 [style = dashed, label="0"];
5->7 [style = solid, label="classNode"];
20->26 [style = bold, label=""];
14->0 [style = solid, label="bean"];
1->3 [style = bold, label=""];
4->21 [style = bold, label=""];
3->4 [style = dotted, label="true"];
10->28 [style = dashed, label="0"];
15->25 [style = solid, label="bean"];
21->24 [style = bold, label=""];
8->7 [style = solid, label="fooClass"];
28->20 [style = solid, label="loopStatement"];
16->2 [style = bold, label=""];
15->16 [style = bold, label=""];
12->6 [style = bold, label=""];
27->22 [style = bold, label=""];
3->4 [style = bold, label=""];
22->25 [style = solid, label="array"];
19->0 [style = solid, label="bean"];
6->26 [style = solid, label="parameters"];
13->1 [style = bold, label=""];
8->7 [style = bold, label=""];
7->14 [style = bold, label=""];
25->24 [style = bold, label=""];
2->0 [style = bold, label=""];
0->25 [style = dashed, label="0"];
5->12 [style = bold, label=""];
2->0 [style = solid, label="value"];
0->4 [style = bold, label=""];
3->21 [style = dotted, label="true"];
18->5 [style = bold, label=""];
6->10 [style = bold, label=""];
9->13 [style = dotted, label="true"];
20->26 [style = solid, label="statement"];
9->1 [style = dotted, label="true"];
5->8 [style = solid, label="classNode"];
11->8 [style = bold, label=""];
14->15 [style = bold, label=""];
15->16 [style = solid, label="bean"];
14->19 [style = dashed, label="0"];
19->15 [style = bold, label=""];
14->15 [style = solid, label="bean"];
2->22 [style = dashed, label="0"];
7->19 [style = bold, label=""];
19->15 [style = solid, label="bean"];
6->11 [style = solid, label="parameters"];
3->29 [style = bold, label=""];
9->3 [style = dotted, label="true"];
6->28 [style = bold, label=""];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
