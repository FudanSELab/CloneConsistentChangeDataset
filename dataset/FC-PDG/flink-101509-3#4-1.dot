digraph {
20 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"IterForwardMap\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SplitStream<Integer> source3 = env.fromElements(1,2,3,4,5).map(NoOpIntMap).name(\"split\").split(new EvenOddOutputSelector())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "DataStream<Integer> head2 = iter1.map(NoOpIntMap).setParallelism(DEFAULT_PARALLELISM / 2).name(\"shuffle\").rebalance()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "graph.getStreamNode(edge.getSourceId()).getOperatorName().equals(\"ParallelizeMapShuffle\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "DataStream<Integer> head1 = iter1.map(NoOpIntMap).name(\"IterRebalanceMap\").setParallelism(DEFAULT_PARALLELISM / 2)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertEquals(1,graph.getIterationSourceSinkPairs().size())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"IterRebalanceMap\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "JobVertex itSource1 = null@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "itSink1 = vertex@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "DataStream<Integer> source2 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"ParallelizeMapRebalance\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ShufflePartitioner)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "DataStream<Integer> source2 = env.fromElements(1,2,3,4,5).map(NoOpIntMap).name(\"ParallelizeMapRebalance\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "DataStreamSink<Integer> head4 = iter1.map(noOpIntMap).addSink(new ReceiveCheckNoOpSink<Integer>())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"shuffle\")@@@27@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "graph.getStreamNode(edge.getSourceId()).getOperatorName().equals(\"ParallelizeMapForward\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertTrue(itSource1.getCoLocationGroup() != null)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(3,itSink.getInEdges().size())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "JobVertex itSink1 = null@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "DataStream<Integer> head2 = iter1.map(noOpIntMap).name(\"IterForwardMap\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertTrue(edge.getSelectedNames().contains(\"even\"))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "JobVertex itSink1 = null@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ShufflePartitioner)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "tailName.equals(\"shuffle\")@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DataStreamSink<Integer> head4 = iter1.map(NoOpIntMap).addSink(new ReceiveCheckNoOpSink<Integer>())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "SplitStream<Integer> source3 = env.fromElements(1,2,3,4,5).map(NoOpIntMap).name(\"EvenOddSourceMap\").split(new EvenOddOutputSelector())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
65 [style = filled, label = "tailName.equals(\"split\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "itSink1 = vertex@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertTrue(edge.getSelectedNames().contains(\"even\"))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "DataStreamSink<Integer> head3 = iter1.map(NoOpIntMap).setParallelism(DEFAULT_PARALLELISM / 2).addSink(new ReceiveCheckNoOpSink<Integer>())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "SplitStream<Integer> source3 = env.fromElements(1,2,3,4,5).map(noOpIntMap).name(\"EvenOddSourceMap\").split(new EvenOddOutputSelector())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
72 [style = filled, label = "vertex.getName().contains(\"IterationSink\")@@@51@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "DataStreamSink<Integer> head3 = iter1.map(noOpIntMap).setParallelism(DEFAULT_PARALLELISM / 2).addSink(new ReceiveCheckNoOpSink<Integer>())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
54 [style = filled, label = "String tailName = edge.getSourceVertex().getOperatorName()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "DataStream<Integer> head1 = iter1.map(NoOpIntMap).name(\"map1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "iter1.closeWith(source3.select(\"even\").union(head1.rebalance().map(noOpIntMap).broadcast(),head2.shuffle()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
55 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StreamNode itSink = sourceSinkPair.f1@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(itSource1.getCoLocationGroup(),itSink1.getCoLocationGroup())@@@57@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(4,itSource.getOutEdges().size())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "JobGraph jg = graph.getJobGraph()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "DataStream<Integer> head1 = iter1.map(noOpIntMap).name(\"IterRebalanceMap\").setParallelism(DEFAULT_PARALLELISM / 2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testmultipleHeadsTailsSimple['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "StreamGraph graph = env.getStreamGraph()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "itSource1 = vertex@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "iter1.closeWith(source3.select(\"even\").union(head1.rebalance().map(NoOpIntMap).broadcast(),head2.shuffle()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "assertEquals(2,edge.getTargetVertex().getParallelism())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "itSource1 = vertex@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "testmultipleHeadsTailsSimple['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "StreamNode itSource = sourceSinkPair.f0@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "edge.getTargetVertex().getOperatorName().equals(\"map1\")@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "DataStream<Integer> source2 = env.fromElements(1,2,3,4,5).map(NoOpIntMap)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "JobVertex itSource1 = null@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "DataStreamSink<Integer> head3 = iter1.map(NoOpIntMap).setParallelism(DEFAULT_PARALLELISM / 2).addSink(new ReceiveCheckNoOpSink<Integer>())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "DataStream<Integer> head2 = iter1.map(NoOpIntMap).name(\"IterForwardMap\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
63 [style = filled, label = "testmultipleHeadsTailsWithTailPartitioning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DataStream<Integer> source1 = env.fromElements(1,2,3,4,5).shuffle().map(NoOpIntMap).name(\"ParallelizeMapShuffle\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "IterativeStream<Integer> iter1 = source1.union(source2).iterate()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertTrue(itSink1.getCoLocationGroup() != null)@@@56@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "assertEquals(4,edge.getTargetVertex().getParallelism())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Tuple2<StreamNode,StreamNode> sourceSinkPair = graph.getIterationSourceSinkPairs().iterator().next()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(itSource.getParallelism(),itSink.getParallelism())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "tailName.equals(\"bc\")@@@38@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "DataStream<Integer> source1 = env.fromElements(1,2,3,4,5).shuffle().map(noOpIntMap).name(\"ParallelizeMapShuffle\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "DataStream<Integer> source1 = env.fromElements(1,2,3,4,5).shuffle().map(NoOpIntMap)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "vertex.getName().contains(\"IterationSource\")@@@48@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "iter1.closeWith(source3.select(\"even\").union(head1.map(NoOpIntMap).name(\"bc\").broadcast(),head2.map(NoOpIntMap).shuffle()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->66 [style = dashed, label="0"];
6->3 [style = bold, label=""];
52->64 [style = bold, label=""];
70->64 [style = bold, label=""];
36->67 [style = dotted, label="true"];
10->19 [style = bold, label=""];
21->8 [style = dotted, label="true"];
36->53 [style = bold, label=""];
33->48 [style = dotted, label="true"];
21->8 [style = bold, label=""];
39->14 [style = bold, label=""];
24->34 [style = bold, label=""];
33->50 [style = dotted, label="true"];
66->62 [style = bold, label=""];
57->58 [style = bold, label=""];
53->54 [style = bold, label=""];
13->41 [style = dashed, label="0"];
54->65 [style = bold, label=""];
34->26 [style = dotted, label="true"];
3->27 [style = bold, label=""];
59->12 [style = bold, label=""];
48->54 [style = bold, label=""];
44->46 [style = bold, label=""];
69->33 [style = dotted, label="false"];
20->16 [style = bold, label=""];
34->26 [style = bold, label=""];
65->52 [style = dotted, label="true"];
13->51 [style = dashed, label="0"];
25->15 [style = bold, label=""];
71->49 [style = bold, label=""];
23->17 [style = bold, label=""];
11->43 [style = dashed, label="0"];
36->67 [style = bold, label=""];
35->38 [style = bold, label=""];
36->17 [style = bold, label=""];
32->18 [style = bold, label=""];
53->70 [style = dotted, label="true"];
43->44 [style = bold, label=""];
64->60 [style = bold, label=""];
21->61 [style = bold, label=""];
51->71 [style = bold, label=""];
33->16 [style = bold, label=""];
69->58 [style = dotted, label="true"];
12->31 [style = dotted, label="true"];
67->64 [style = bold, label=""];
12->21 [style = dotted, label="false"];
12->21 [style = bold, label=""];
31->29 [style = bold, label=""];
21->59 [style = bold, label=""];
33->50 [style = bold, label=""];
58->54 [style = bold, label=""];
11->49 [style = dashed, label="0"];
17->34 [style = bold, label=""];
21->29 [style = bold, label=""];
70->54 [style = bold, label=""];
18->1 [style = bold, label=""];
36->53 [style = dotted, label="false"];
72->61 [style = bold, label=""];
34->36 [style = bold, label=""];
38->69 [style = bold, label=""];
28->71 [style = dashed, label="0"];
5->7 [style = bold, label=""];
72->21 [style = bold, label=""];
65->55 [style = bold, label=""];
56->14 [style = bold, label=""];
49->5 [style = bold, label=""];
61->29 [style = bold, label=""];
53->64 [style = bold, label=""];
59->72 [style = dotted, label="false"];
16->20 [style = bold, label=""];
12->31 [style = bold, label=""];
52->54 [style = bold, label=""];
27->14 [style = bold, label=""];
67->54 [style = bold, label=""];
28->40 [style = dashed, label="0"];
38->16 [style = bold, label=""];
59->72 [style = bold, label=""];
36->32 [style = dotted, label="true"];
25->47 [style = dashed, label="0"];
27->56 [style = dashed, label="0"];
63->6 [style = bold, label=""];
16->23 [style = bold, label=""];
50->48 [style = bold, label=""];
72->59 [style = bold, label=""];
31->12 [style = bold, label=""];
48->69 [style = bold, label=""];
21->12 [style = bold, label=""];
25->62 [style = dashed, label="0"];
11->5 [style = bold, label=""];
37->22 [style = bold, label=""];
69->57 [style = dotted, label="true"];
30->35 [style = bold, label=""];
20->33 [style = dotted, label="true"];
7->46 [style = dashed, label="0"];
41->40 [style = bold, label=""];
27->39 [style = dashed, label="0"];
3->45 [style = dashed, label="0"];
22->10 [style = bold, label=""];
33->69 [style = bold, label=""];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
40->43 [style = bold, label=""];
62->15 [style = bold, label=""];
55->52 [style = bold, label=""];
36->18 [style = dotted, label="true"];
15->37 [style = bold, label=""];
14->41 [style = bold, label=""];
8->12 [style = bold, label=""];
17->24 [style = dotted, label="true"];
45->39 [style = bold, label=""];
33->17 [style = bold, label=""];
5->44 [style = dashed, label="0"];
23->16 [style = bold, label=""];
20->17 [style = bold, label=""];
47->15 [style = bold, label=""];
0->6 [style = bold, label=""];
26->36 [style = bold, label=""];
28->11 [style = bold, label=""];
29->9 [style = bold, label=""];
69->57 [style = bold, label=""];
18->17 [style = bold, label=""];
14->51 [style = bold, label=""];
36->32 [style = bold, label=""];
5->66 [style = bold, label=""];
65->55 [style = dotted, label="true"];
60->59 [style = bold, label=""];
59->12 [style = dotted, label="true"];
46->47 [style = bold, label=""];
16->23 [style = dotted, label="true"];
68->56 [style = bold, label=""];
36->1 [style = bold, label=""];
2->12 [style = bold, label=""];
20->33 [style = bold, label=""];
58->69 [style = bold, label=""];
12->61 [style = bold, label=""];
65->36 [style = bold, label=""];
72->21 [style = dotted, label="true"];
3->68 [style = dashed, label="0"];
17->24 [style = bold, label=""];
16->20 [style = dotted, label="false"];
4->30 [style = bold, label=""];
42->6 [style = bold, label=""];
69->33 [style = bold, label=""];
65->36 [style = dotted, label="false"];
53->70 [style = bold, label=""];
12->59 [style = bold, label=""];
6->68 [style = bold, label=""];
7->25 [style = bold, label=""];
19->4 [style = bold, label=""];
6->45 [style = bold, label=""];
33->54 [style = bold, label=""];
8->29 [style = bold, label=""];
16->69 [style = dashed, label="0"];
13->28 [style = bold, label=""];
}
