digraph {
0 [style = filled, label = "assertWithBackoff.assertEquals(getCtrlMessageNum,0,\"all controller messages processed\")@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "this.gobblinYarnAppLauncher.sendShutdownRequest()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "YarnSecurityManagerTest.GetHelixMessageNumFunc getCtrlMessageNum = new YarnSecurityManagerTest.GetHelixMessageNumFunc(.getSimpleName(),InstanceType.CONTROLLER,\"\",this.curatorFramework)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "testSendShutdownRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "YarnSecurityManagerTest.GetControllerMessageNumFunc getCtrlMessageNum = new YarnSecurityManagerTest.GetControllerMessageNumFunc(.getSimpleName(),this.curatorFramework)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(this.curatorFramework.checkExists().forPath(String.format(\"/%s/CONTROLLER/MESSAGES\",.getSimpleName())).getVersion(),0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "GetControllerMessageNumFunc getCtrlMessageNum = new GetControllerMessageNumFunc(this.helixClusterName,this.curatorFramework)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertWithBackoff.assertEquals(getInstanceMessageNum,1,\"1 controller message queued\")@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(this.curatorFramework.checkExists().forPath(String.format(\"/%s/CONTROLLER/MESSAGES\",this.helixClusterName)).getVersion(),0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "this.helixManagerManagedHelix.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,new TestShutdownMessageHandlerFactory(this))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testSendShutdownRequest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,new TestShutdownMessageHandlerFactory(this))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(this.curatorFramework.checkExists().forPath(String.format(\"/%s/INSTANCES/%s/MESSAGES\",this.configManagedHelix.getString(GobblinClusterConfigurationKeys.HELIX_CLUSTER_NAME_KEY),TEST_HELIX_INSTANCE_NAME_MANAGED)).getVersion(),0)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "this.gobblinYarnAppLauncherManagedHelix.sendShutdownRequest()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testSendShutdownRequest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertWithBackoff.assertEquals(getCtrlMessageNum,1,\"1 controller message queued\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertWithBackoff.assertEquals(getInstanceMessageNum,0,\"all controller messages processed\")@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "this.helixManager.connect()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "this.gobblinAwsClusterLauncher.sendShutdownRequest()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "this.gobblinYarnAppLauncher.connectHelixManager()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "this.gobblinAwsClusterLauncher.connectHelixManager()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "this.gobblinYarnAppLauncherManagedHelix.connectHelixManager()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "AssertWithBackoff assertWithBackoff = AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertWithBackoff = AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "this.helixManagerManagedHelix.connect()@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "YarnSecurityManagerTest.GetHelixMessageNumFunc getInstanceMessageNum = new YarnSecurityManagerTest.GetHelixMessageNumFunc(this.configManagedHelix.getString(GobblinClusterConfigurationKeys.HELIX_CLUSTER_NAME_KEY),InstanceType.PARTICIPANT,TEST_HELIX_INSTANCE_NAME_MANAGED,this.curatorFramework)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
10->13 [style = solid, label="getInstanceMessageNum"];
9->0 [style = bold, label=""];
2->9 [style = solid, label="getCtrlMessageNum"];
3->21 [style = dashed, label="0"];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
22->21 [style = bold, label=""];
25->4 [style = bold, label=""];
6->24 [style = bold, label=""];
16->9 [style = solid, label="getCtrlMessageNum"];
21->25 [style = bold, label=""];
3->16 [style = bold, label=""];
25->9 [style = solid, label="getCtrlMessageNum"];
8->24 [style = dashed, label="0"];
24->22 [style = bold, label=""];
2->4 [style = bold, label=""];
16->0 [style = solid, label="getCtrlMessageNum"];
1->22 [style = dashed, label="0"];
2->0 [style = solid, label="getCtrlMessageNum"];
8->1 [style = bold, label=""];
10->17 [style = solid, label="getInstanceMessageNum"];
12->10 [style = bold, label=""];
19->14 [style = bold, label=""];
3->2 [style = bold, label=""];
2->16 [style = dashed, label="0"];
7->6 [style = bold, label=""];
6->8 [style = bold, label=""];
2->25 [style = dashed, label="0"];
5->7 [style = bold, label=""];
0->18 [style = bold, label=""];
11->17 [style = bold, label=""];
14->15 [style = bold, label=""];
15->12 [style = bold, label=""];
17->13 [style = bold, label=""];
23->7 [style = bold, label=""];
16->4 [style = bold, label=""];
20->7 [style = bold, label=""];
25->0 [style = solid, label="getCtrlMessageNum"];
10->11 [style = bold, label=""];
}
