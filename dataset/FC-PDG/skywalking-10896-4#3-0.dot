digraph {
19 [style = filled, label = "Assert.assertEquals(\"mock-instance\",serviceInstance.getName())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final Service service = (Service)receivedSources.get(1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final long startTime = System.currentTimeMillis()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Endpoint endpoint = (Endpoint)receivedSources.get(3)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(service.getName(),serviceRelation.getDestServiceName())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(\"downstream-service\",endpointRelation.getServiceName())@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Assert.assertEquals(\"127.0.0.1\",serviceRelation.getSourceServiceName())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final MockReceiver mockReceiver = new MockReceiver()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ServiceInstance serviceInstance = (ServiceInstance)receivedSources.get(2)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(endpoint.getName(),endpointRelation.getChildEndpoint())@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Entry).setSpanLayer(SpanLayer.MQ).addRefs(SegmentReference.newBuilder().setRefType(RefType.CrossProcess).setParentService(\"downstream-service\").setParentServiceInstance(\"downstream-instance\").setParentEndpoint(\"downstream-endpoint\").setNetworkAddressUsedAtPeer(\"127.0.0.1\").build()).build()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(\"mock-service\",service.getName())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(\"downstream-instance\",serviceInstanceRelation.getSourceServiceInstanceName())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final ServiceRelation serviceRelation = (ServiceRelation)receivedSources.get(4)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(\"/springMVC\",endpoint.getName())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final All all = (All)receivedSources.get(0)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(mockReceiver,CONFIG,CACHE,NAMING_CONTROL)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation)receivedSources.get(5)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(\"downstream-service\",serviceRelation.getSourceServiceName())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(\"127.0.0.1\",serviceInstanceRelation.getSourceServiceInstanceName())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(serviceInstance.getName(),serviceInstanceRelation.getDestServiceInstanceName())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "listener.build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testEntrySpanMQRef['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Entry).setSpanLayer(SpanLayer.RPCFramework).addRefs(SegmentReference.newBuilder().setRefType(RefType.CrossProcess).setParentService(\"downstream-service\").setParentServiceInstance(\"downstream-instance\").setParentEndpoint(\"downstream-endpoint\").setNetworkAddressUsedAtPeer(\"127.0.0.1\").build()).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final List<Source> receivedSources = mockReceiver.getReceivedSources()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testEntrySpanMQRef['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "listener.parseEntry(spanObject,segment)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final EndpointRelation endpointRelation = (EndpointRelation)receivedSources.get(6)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(\"downstream-endpoint\",endpointRelation.getEndpoint())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testEntrySpanRef['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(7,receivedSources.size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->16 [style = bold, label=""];
4->6 [style = bold, label=""];
7->29 [style = dashed, label="0"];
31->11 [style = bold, label=""];
8->9 [style = bold, label=""];
30->21 [style = bold, label=""];
6->15 [style = bold, label=""];
7->10 [style = bold, label=""];
12->28 [style = dashed, label="0"];
0->22 [style = bold, label=""];
24->20 [style = bold, label=""];
2->5 [style = bold, label=""];
12->14 [style = bold, label=""];
17->19 [style = bold, label=""];
21->8 [style = solid, label="mockReceiver"];
26->20 [style = bold, label=""];
14->13 [style = bold, label=""];
16->0 [style = bold, label=""];
21->8 [style = bold, label=""];
13->31 [style = dashed, label="0"];
19->23 [style = bold, label=""];
11->24 [style = bold, label=""];
10->16 [style = solid, label="segment"];
15->2 [style = bold, label=""];
29->16 [style = solid, label="spanObject"];
5->17 [style = bold, label=""];
25->21 [style = bold, label=""];
14->31 [style = bold, label=""];
7->16 [style = solid, label="spanObject"];
13->11 [style = bold, label=""];
1->3 [style = bold, label=""];
23->12 [style = bold, label=""];
22->18 [style = bold, label=""];
29->10 [style = bold, label=""];
18->1 [style = bold, label=""];
9->29 [style = bold, label=""];
23->28 [style = bold, label=""];
28->14 [style = bold, label=""];
24->26 [style = bold, label=""];
3->4 [style = bold, label=""];
27->21 [style = bold, label=""];
9->7 [style = bold, label=""];
}
