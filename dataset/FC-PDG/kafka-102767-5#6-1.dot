digraph {
0 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "produceData(Arrays.asList(\"hello\",\"world\",\"world\",\"hello world\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "shouldCompactTopicsForKeyValueStoreChangelogs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(retention,Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final int durationMs = 2000@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(2,policies.size())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "textLines.flatMapValues(new ValueMapper<String,Iterable<String>>(){@Override public Iterable<String> apply(final String value){return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\W+\"))}}).groupBy(MockMapper.selectValueMapper()).windowedBy(TimeWindows.of(1000).until(2000)).count(Materialized.as(\"CountWindows\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "textLines.flatMapValues(new ValueMapper<String,Iterable<String>>(){@Override public Iterable<String> apply(final String value){return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\W+\"))}}).groupBy(MockMapper.selectValueMapper()).count(Materialized.as(\"Counts\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final long retention = TimeUnit.MILLISECONDS.convert(1,TimeUnit.DAYS) + durationMs@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(LogConfig.Delete(),repartitionProps.getProperty(LogConfig.CleanupPolicyProp()))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID,\"CountWindows\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final KStream<String,String> textLines = builder.stream(DEFAULT_INPUT_TOPIC)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\")@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(LogConfig.Compact(),changelogProps.getProperty(LogConfig.CleanupPolicyProp()))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "waitForCompletion(streams,2,5000)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "streams.close()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(policies.contains(LogConfig.Delete()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "shouldCompactTopicsForKeyValueStoreChangelogs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "StreamsBuilder builder = new StreamsBuilder()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(5,repartitionProps.size())@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(LogConfig.Delete(),repartitionProps.getProperty(LogConfig.CleanupPolicyProp()))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final KafkaStreams streams = new KafkaStreams(builder.build(),streamsProp)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "KStream<String,String> textLines = builder.stream(DEFAULT_INPUT_TOPIC)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "KafkaStreams streams = new KafkaStreams(builder.build(),streamsProp)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "streams.start()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(policies.contains(LogConfig.Compact()))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final String appID = APP_ID + \"-compact\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldCompactAndDeleteTopicsForWindowStoreChangelogs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "streams.start()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final String appID = APP_ID + \"-compact-delete\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(5,repartitionProps.size())@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG,appID)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
8->16 [style = bold, label=""];
27->18 [style = bold, label=""];
0->9 [style = bold, label=""];
4->14 [style = bold, label=""];
15->10 [style = bold, label=""];
16->11 [style = bold, label=""];
10->13 [style = solid, label="appID"];
3->1 [style = bold, label=""];
9->2 [style = bold, label=""];
7->10 [style = bold, label=""];
6->20 [style = dashed, label="0"];
23->31 [style = solid, label="appID"];
20->32 [style = bold, label=""];
30->25 [style = bold, label=""];
12->30 [style = bold, label=""];
25->29 [style = bold, label=""];
12->0 [style = bold, label=""];
2->4 [style = bold, label=""];
32->26 [style = bold, label=""];
17->19 [style = bold, label=""];
29->18 [style = solid, label="durationMs"];
6->5 [style = bold, label=""];
26->27 [style = bold, label=""];
29->33 [style = bold, label=""];
18->22 [style = bold, label=""];
4->16 [style = solid, label="streams"];
13->31 [style = dashed, label="0"];
18->22 [style = solid, label="retention"];
10->12 [style = solid, label="appID"];
10->12 [style = bold, label=""];
33->24 [style = bold, label=""];
11->13 [style = bold, label=""];
0->30 [style = dashed, label="0"];
9->25 [style = dashed, label="0"];
22->17 [style = bold, label=""];
23->12 [style = bold, label=""];
23->17 [style = solid, label="appID"];
14->8 [style = bold, label=""];
10->5 [style = solid, label="appID"];
19->28 [style = bold, label=""];
13->31 [style = bold, label=""];
13->6 [style = bold, label=""];
24->8 [style = bold, label=""];
31->20 [style = bold, label=""];
4->24 [style = dashed, label="0"];
8->11 [style = bold, label=""];
23->12 [style = solid, label="appID"];
10->23 [style = dashed, label="0"];
21->23 [style = bold, label=""];
}
