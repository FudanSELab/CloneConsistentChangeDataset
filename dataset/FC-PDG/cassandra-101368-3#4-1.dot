digraph {
8 [style = filled, label = "repair.maybeSendAdditionalReads()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "repair.startRepair(null,consumer)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "repair.getReadCallback().response(msg(target2,cell1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "readSpeculationCycle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(epSet(target1,target2),repair.getReadRecipients())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertPartitionsEqual(partition(cell1),consumer.result)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(epSet(target1,target2,target3),repair.getReadRecipients())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InstrumentedReadRepair repair = createInstrumentedReadRepair(ReplicaPlan.shared(replicaPlan(replicas,EndpointsForRange.of(replica1,replica2))))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "InstrumentedReadRepair repair = createInstrumentedReadRepair(replicaLayout(replicas,EndpointsForRange.of(replica1,replica2)))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(epSet(),repair.getReadRecipients())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "readSpeculationCycle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "repair.getReadCallback().response(msg(target1,cell1))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertNull(consumer.result)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(epSet(target1,target2),repair.getReadRecipients())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ResultConsumer consumer = new ResultConsumer()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "repair.awaitReads()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "noSpeculationRequired['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3->15 [style = dashed, label="0"];
5->8 [style = bold, label=""];
6->5 [style = bold, label=""];
4->9 [style = dashed, label="0"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
10->9 [style = bold, label=""];
5->11 [style = bold, label=""];
11->12 [style = bold, label=""];
7->4 [style = bold, label=""];
8->15 [style = bold, label=""];
9->1 [style = bold, label=""];
15->13 [style = bold, label=""];
16->4 [style = bold, label=""];
12->8 [style = bold, label=""];
2->6 [style = bold, label=""];
13->14 [style = bold, label=""];
3->0 [style = bold, label=""];
1->6 [style = solid, label="consumer"];
8->3 [style = bold, label=""];
}
