digraph {
13 [style = filled, label = "List<String> differentYearsInResult = result.stream().map(null).filter(null).map(null).distinct().collect(Collectors.toList())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<BibEntry> result = getFetcher().performSearch(builder.build())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ComplexSearchQuery.ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "List<String> differentYearsInResult = result.stream().map(null).filter(null).map(null).distinct().collect(Collectors.toList())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<String> yearsInYearRange = List.of(\"2018\",\"2019\",\"2020\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(Collections.singletonList(getTestYear().toString()),differentYearsInResult)@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "new ImportCleanup(BibDatabaseMode.BIBTEX).doPostCleanup(result)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(yearsInYearRange.containsAll(differentYearsInResult))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "builder.fromYearAndToYear(2018,2020)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<BibEntry> result = getFetcher().performSearch(complexSearchQuery)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "supportsYearSearch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "List<BibEntry> result = getFetcher().performSearch(\"year:\" + getTestYear())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "supportsYearSearch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertFalse(result.isEmpty())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "supportsYearRangeSearch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ComplexSearchQuery complexSearchQuery = ComplexSearchQuery.builder().singleYear(getTestYear()).build()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
15->2 [style = bold, label=""];
3->1 [style = bold, label=""];
12->11 [style = bold, label=""];
14->10 [style = bold, label=""];
13->11 [style = solid, label="differentYearsInResult"];
8->6 [style = bold, label=""];
5->0 [style = solid, label="complexSearchQuery"];
3->1 [style = solid, label="differentYearsInResult"];
9->16 [style = bold, label=""];
7->3 [style = bold, label=""];
15->2 [style = solid, label="result"];
2->13 [style = bold, label=""];
13->12 [style = bold, label=""];
5->0 [style = bold, label=""];
6->7 [style = solid, label="result"];
0->3 [style = solid, label="result"];
1->2 [style = solid, label="differentYearsInResult"];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
6->7 [style = bold, label=""];
4->5 [style = bold, label=""];
}
