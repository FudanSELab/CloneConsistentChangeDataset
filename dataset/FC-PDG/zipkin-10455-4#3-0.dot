digraph {
5 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.bytes()).isEqualTo(message.length)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(rabbitmqMetrics.spansDropped()).isZero()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "produceSpans(message,builder.topic)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "messageWithMultipleSpans['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "collector.start()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Thread.sleep(200L)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.messages()).isEqualTo(1)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "rabbit.publish(message)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(rabbit.storage.acceptedSpanCount()).isEqualTo(spans.size())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertThat(kafkaMetrics.messages()).isEqualTo(1)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(receivedSpans.take()).containsAll(spans)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.spans()).isEqualTo(spans.size())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "messageWithMultipleSpans['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(rabbitmqMetrics.messagesDropped()).isZero()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(rabbitmqMetrics.bytes()).isEqualTo(message.length)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "KafkaCollector.Builder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "messageWithMultipleSpans['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertThat(kafkaMetrics.spans()).isEqualTo(spans.size())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "SpanBytesEncoder encoder@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.spansDropped()).isZero()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertThat(kafkaMetrics.messagesDropped()).isZero()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "byte(( message = encoder.encodeList(spans)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(rabbitmqMetrics.messages()).isEqualTo(1)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(storage.acceptedSpanCount()).isEqualTo(spans.size())@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Thread.sleep(1000)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertThat(kafkaMetrics.bytes()).isEqualTo(message.length)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "SpanBytesEncoder encoder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "publish(message)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(rabbit.rabbitmqMetrics.messagesDropped()).isZero()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertThat(kafkaMetrics.spansDropped()).isZero()@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
3->29 [style = dashed, label="0"];
12->3 [style = dotted, label="true"];
23->25 [style = bold, label=""];
8->16 [style = dashed, label="0"];
15->13 [style = bold, label=""];
25->28 [style = bold, label=""];
0->26 [style = bold, label=""];
28->30 [style = bold, label=""];
27->0 [style = bold, label=""];
1->26 [style = dashed, label="0"];
2->6 [style = bold, label=""];
30->20 [style = bold, label=""];
7->14 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
18->19 [style = bold, label=""];
10->3 [style = dotted, label="true"];
1->18 [style = dashed, label="0"];
7->4 [style = bold, label=""];
27->21 [style = dotted, label="true"];
9->8 [style = bold, label=""];
24->23 [style = bold, label=""];
12->0 [style = bold, label=""];
2->17 [style = dashed, label="0"];
1->9 [style = bold, label=""];
8->7 [style = bold, label=""];
26->22 [style = bold, label=""];
19->16 [style = bold, label=""];
9->19 [style = dashed, label="0"];
0->1 [style = solid, label="message"];
13->17 [style = bold, label=""];
5->2 [style = bold, label=""];
27->29 [style = dotted, label="true"];
7->24 [style = dashed, label="0"];
0->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
10->0 [style = bold, label=""];
0->18 [style = solid, label="message"];
16->14 [style = bold, label=""];
0->18 [style = bold, label=""];
14->15 [style = bold, label=""];
22->24 [style = bold, label=""];
0->26 [style = solid, label="message"];
4->5 [style = bold, label=""];
17->11 [style = bold, label=""];
}
