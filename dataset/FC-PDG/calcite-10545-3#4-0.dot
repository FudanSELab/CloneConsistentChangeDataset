digraph {
4 [style = filled, label = "return translateBinary(\"<=\",\">=\",(RexCall)node)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "RexNode node@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "child = ((RexCall)child).getOperands().get(0)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "return translateBinary2(\"=\",node,rexBuilder.makeLiteral(true))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "child.getKind() == SqlKind.INPUT_REF@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "throw new AssertionError(\"cannot translate \" + node)@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "translateMatch2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "return translateMatch2(((RexCall)node).getOperands().get(0))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "node.getKind()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "child = ((RexCall)node).getOperands().get(0)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "return translateBinary2(\"=\",child,rexBuilder.makeLiteral(false))@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "throw new AssertionError(\"Cannot translate \" + node + \", kind=\" + node.getKind())@@@22@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "return translateBinary(\"=\",\"=\",(RexCall)node)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "child.getKind() == SqlKind.CAST@@@12@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "translateMatch2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "translateMatch2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "return translateBinary(\">=\",\"<=\",(RexCall)node)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return translateBinary(\"<\",\">\",(RexCall)node)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RexNode child@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "return translateBinary(\">\",\"<\",(RexCall)node)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->10 [style = dotted, label="true"];
0->6 [style = bold, label=""];
9->18 [style = bold, label=""];
4->6 [style = bold, label=""];
0->16 [style = dotted, label="true"];
0->6 [style = dotted, label="true"];
0->1 [style = dotted, label="true"];
0->4 [style = bold, label=""];
0->8 [style = dotted, label="true"];
0->7 [style = bold, label=""];
10->9 [style = bold, label=""];
1->12 [style = bold, label=""];
0->7 [style = dotted, label="true"];
2->12 [style = solid, label="node"];
10->17 [style = solid, label="child"];
11->0 [style = bold, label=""];
9->16 [style = bold, label=""];
1->8 [style = bold, label=""];
2->6 [style = solid, label="node"];
0->3 [style = dotted, label="true"];
0->12 [style = dotted, label="true"];
0->13 [style = dotted, label="true"];
17->14 [style = bold, label=""];
19->0 [style = bold, label=""];
0->3 [style = bold, label=""];
0->8 [style = bold, label=""];
18->17 [style = solid, label="child"];
2->4 [style = solid, label="node"];
0->13 [style = bold, label=""];
0->1 [style = bold, label=""];
9->18 [style = dotted, label="true"];
7->3 [style = bold, label=""];
0->10 [style = bold, label=""];
12->10 [style = bold, label=""];
5->0 [style = bold, label=""];
19->2 [style = dotted, label="true"];
0->9 [style = dotted, label="true"];
0->12 [style = bold, label=""];
15->11 [style = bold, label=""];
15->2 [style = dotted, label="true"];
16->14 [style = bold, label=""];
18->16 [style = bold, label=""];
2->3 [style = solid, label="node"];
2->7 [style = solid, label="node"];
16->17 [style = bold, label=""];
2->1 [style = solid, label="node"];
0->4 [style = dotted, label="true"];
0->14 [style = bold, label=""];
2->8 [style = solid, label="node"];
13->14 [style = bold, label=""];
16->17 [style = dotted, label="true"];
6->1 [style = bold, label=""];
5->2 [style = dotted, label="true"];
3->4 [style = bold, label=""];
2->14 [style = solid, label="node"];
}
