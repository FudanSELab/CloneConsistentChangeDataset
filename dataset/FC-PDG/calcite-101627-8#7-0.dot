digraph {
11 [style = filled, label = "assertThrows(,null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Integer> targets = Arrays.asList(3,1,4,5,8)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThrows(,null)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testTarget['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertThat(exception.getMessage(),equalTo(\"Element 0 is not found in mapping (size=5, sourceCount=10, targetCount=5\" + \", elements=(1:1, 3:0, 4:2, 5:3, 8:4((\"))@@@18@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(mapping.getTarget(1),equalTo(1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<Integer> integers = Mappings.asList(mapping)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "testSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "IllegalArgumentException exception = assertThrows(,null)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "final Mapping mapping = Mappings.source(targets,10)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "final Mapping inverse = mapping.inverse()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(integers,equalTo(targets))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThrows(,null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(mapping.getTarget(0),equalTo(3))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(integers,equalTo(Arrays.asList(null,1,null,0,2,3,null,null,4,null)))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertThat(mapping.getSourceCount(),equalTo(5))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final List<Integer> integers = Mappings.asList(mapping)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<Integer> sources = Arrays.asList(3,1,4,5,8)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThrows(,null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertThat(mapping.getTarget(2),equalTo(4))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(mapping.getTarget(3),equalTo(0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThrows(,null)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThrows(,null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(mapping.getTargetCount(),equalTo(10))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(inverse.toString(),equalTo(\"(size=5, sourceCount=10, targetCount=5, elements=(1:1, 3:0, 4:2, 5:3, 8:4((\"))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThrows(,null)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Mapping mapping = Mappings.target(sources,10)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThrows(,null)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testTarget['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(mapping.getTarget(4),equalTo(2))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
14->5 [style = bold, label=""];
28->21 [style = bold, label=""];
12->25 [style = bold, label=""];
11->3 [style = bold, label=""];
3->24 [style = bold, label=""];
24->28 [style = solid, label="integers"];
25->19 [style = bold, label=""];
5->2 [style = solid, label="sources"];
2->4 [style = solid, label="mapping"];
18->28 [style = solid, label="targets"];
10->8 [style = bold, label=""];
2->27 [style = dashed, label="0"];
19->23 [style = bold, label=""];
27->24 [style = solid, label="mapping"];
0->13 [style = bold, label=""];
5->18 [style = dashed, label="0"];
6->22 [style = dashed, label="0"];
4->1 [style = bold, label=""];
27->22 [style = bold, label=""];
23->26 [style = bold, label=""];
12->9 [style = bold, label=""];
13->11 [style = bold, label=""];
21->20 [style = bold, label=""];
9->25 [style = dashed, label="0"];
1->28 [style = dashed, label="0"];
7->0 [style = bold, label=""];
15->5 [style = bold, label=""];
18->27 [style = solid, label="targets"];
6->12 [style = bold, label=""];
2->6 [style = bold, label=""];
8->7 [style = bold, label=""];
10->19 [style = dashed, label="0"];
4->1 [style = solid, label="integers"];
16->17 [style = bold, label=""];
22->12 [style = bold, label=""];
1->16 [style = bold, label=""];
24->28 [style = bold, label=""];
29->18 [style = bold, label=""];
18->27 [style = bold, label=""];
3->4 [style = bold, label=""];
26->0 [style = bold, label=""];
9->10 [style = bold, label=""];
}
