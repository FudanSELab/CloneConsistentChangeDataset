digraph {
21 [style = filled, label = "t.addProduces(null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "t.consumes((Collection<MediaType>)null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "t.addConsumes(null)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "t.consumes(ASet.of())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Operation t = new Operation()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertOptional(t.consumes()).isNull()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "t.addProduces(ASet.of())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"((\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "a06_consumes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "t.produces(ASet.of(MediaType.of(\"text/foo\")))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Swagger t = new Swagger()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"((\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"((\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "t.produces(ASet.of())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertObject(t.produces()).isNull()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "t.addConsumes(ASet.of(MediaType.of(\"text/foo\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "t.produces((Collection<MediaType>)null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "a07_produces['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "a06_consumes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertObject(t.consumes()).isNull()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "t.consumes(ASet.of(MediaType.of(\"text/foo\")))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertObject(t.produces()).isType().asJson().is(\"('text/foo'(\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "t.addConsumes(ASet.of())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertOptional(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "t.addProduces(ASet.of(MediaType.of(\"text/foo\")))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertObject(t.consumes()).isType().asJson().is(\"('text/foo'(\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10->15 [style = dashed, label="0"];
22->26 [style = bold, label=""];
11->20 [style = bold, label=""];
34->29 [style = bold, label=""];
18->3 [style = bold, label=""];
30->24 [style = bold, label=""];
0->9 [style = bold, label=""];
25->28 [style = bold, label=""];
2->19 [style = dashed, label="0"];
31->23 [style = bold, label=""];
7->21 [style = dashed, label="0"];
4->17 [style = dashed, label="0"];
21->27 [style = bold, label=""];
7->10 [style = bold, label=""];
9->18 [style = dashed, label="0"];
4->13 [style = bold, label=""];
26->34 [style = bold, label=""];
12->11 [style = bold, label=""];
23->32 [style = bold, label=""];
12->31 [style = dashed, label="0"];
29->25 [style = bold, label=""];
11->23 [style = dashed, label="0"];
6->19 [style = bold, label=""];
20->6 [style = bold, label=""];
8->14 [style = dashed, label="0"];
13->25 [style = dashed, label="0"];
8->28 [style = dashed, label="0"];
10->27 [style = dashed, label="0"];
32->30 [style = bold, label=""];
24->22 [style = bold, label=""];
3->4 [style = bold, label=""];
0->22 [style = dashed, label="0"];
19->0 [style = bold, label=""];
8->7 [style = bold, label=""];
14->7 [style = bold, label=""];
5->20 [style = dashed, label="0"];
6->2 [style = bold, label=""];
5->32 [style = dashed, label="0"];
11->5 [style = bold, label=""];
2->0 [style = bold, label=""];
28->21 [style = bold, label=""];
3->34 [style = dashed, label="0"];
5->6 [style = bold, label=""];
9->26 [style = dashed, label="0"];
1->12 [style = bold, label=""];
33->31 [style = bold, label=""];
9->3 [style = bold, label=""];
3->17 [style = bold, label=""];
0->18 [style = bold, label=""];
7->15 [style = bold, label=""];
6->30 [style = dashed, label="0"];
17->13 [style = bold, label=""];
2->24 [style = dashed, label="0"];
13->8 [style = bold, label=""];
4->29 [style = dashed, label="0"];
13->14 [style = bold, label=""];
16->12 [style = bold, label=""];
}
