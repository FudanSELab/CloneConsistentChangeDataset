digraph {
15 [style = filled, label = "assertEquals(1,results.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(\"a string\",results(0()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testThatWindowsLineTerminatedStringReturnsNonEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "results = decoder.decode(ByteBuffer.wrap(\" string\".getBytes()),context)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testThatWindowsLineTerminatedStringReturnsNonEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(results)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"a string\",results)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(1,context.getBuffer().position())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.WINDOWS)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->2 [style = solid, label="results"];
0->3 [style = bold, label=""];
5->8 [style = bold, label=""];
8->10 [style = bold, label=""];
18->3 [style = bold, label=""];
6->5 [style = solid, label="results"];
3->17 [style = solid, label="context"];
2->19 [style = bold, label=""];
17->12 [style = solid, label="results"];
9->8 [style = solid, label="results"];
13->5 [style = solid, label="results"];
12->15 [style = bold, label=""];
16->7 [style = bold, label=""];
6->9 [style = dashed, label="0"];
3->6 [style = bold, label=""];
19->17 [style = bold, label=""];
15->16 [style = bold, label=""];
3->13 [style = solid, label="context"];
4->0 [style = bold, label=""];
3->9 [style = bold, label=""];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
11->0 [style = bold, label=""];
17->12 [style = bold, label=""];
6->13 [style = dashed, label="0"];
3->9 [style = solid, label="context"];
3->6 [style = solid, label="context"];
17->16 [style = solid, label="results"];
13->5 [style = bold, label=""];
9->5 [style = bold, label=""];
3->13 [style = bold, label=""];
9->5 [style = solid, label="results"];
0->18 [style = dashed, label="0"];
1->8 [style = dashed, label="0"];
14->18 [style = bold, label=""];
1->2 [style = bold, label=""];
2->7 [style = bold, label=""];
6->2 [style = solid, label="results"];
}
