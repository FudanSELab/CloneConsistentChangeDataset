digraph {
4 [style = filled, label = "final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testThresholdCnf['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"x\",intType).add(\"y\",intType).add(\"z\",intType).add(\"a\",intType).add(\"b\",intType).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final RexLiteral literal2 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(2))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkThresholdCnf(or(eq(xRef,literal1),and(eq(xRef,literal2),eq(yRef,literal3))),8,\"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final RexNode bRef = rexBuilder.makeFieldAccess(range,4)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final RexNode xRef = rexBuilder.makeFieldAccess(range,0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final RexLiteral literal4 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(4))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "checkThresholdCnf(or(eq(xRef,literal1),eq(xRef,literal2),and(eq(xRef,literal3),eq(yRef,literal4))),8,\"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final RexLiteral literal1 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(1))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "checkThresholdCnf(or(eq(xRef,literal(1)),and(eq(xRef,literal(2)),eq(yRef,literal(3)))),8,\"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final RexNode aRef = rexBuilder.makeFieldAccess(range,3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testCnf2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final RexNode zRef = rexBuilder.makeFieldAccess(range,2)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType,0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final RexLiteral literal3 = rexBuilder.makeExactLiteral(BigDecimal.valueOf(3))@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "checkCnf(or(and(eq(xRef,literal1),eq(yRef,literal1),eq(zRef,literal1)),and(eq(xRef,literal2),eq(yRef,literal2),eq(aRef,literal2)),and(eq(xRef,literal3),eq(aRef,literal3),eq(bRef,literal3))),\"AND(\" + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \" + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \" + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \" + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \" + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \" + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \" + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \" + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \" + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \" + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \" + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \" + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \" + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \" + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \" + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \" + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \" + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \" + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \" + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \" + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \" + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \" + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \" + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \" + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \" + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \" + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \" + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\")@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "checkThresholdCnf(or(eq(xRef,literal(1)),eq(xRef,literal(2)),and(eq(xRef,literal(3)),eq(yRef,literal(4)))),8,\"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\")@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testThresholdCnf['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final RexNode yRef = rexBuilder.makeFieldAccess(range,1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final RelDataType rowType = typeFactory.builder().add(\"x\",intType).add(\"y\",intType).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
7->13 [style = bold, label=""];
5->18 [style = solid, label="range"];
5->17 [style = solid, label="range"];
2->8 [style = solid, label="literal1"];
5->15 [style = solid, label="range"];
1->5 [style = solid, label="rowType"];
2->9 [style = solid, label="literal1"];
6->13 [style = solid, label="xRef"];
7->9 [style = solid, label="yRef"];
18->15 [style = bold, label=""];
17->19 [style = solid, label="bRef"];
18->19 [style = solid, label="zRef"];
6->19 [style = solid, label="xRef"];
7->13 [style = solid, label="yRef"];
11->19 [style = bold, label=""];
2->10 [style = bold, label=""];
3->4 [style = bold, label=""];
10->8 [style = solid, label="literal2"];
5->6 [style = solid, label="range"];
20->5 [style = solid, label="rowType"];
0->9 [style = solid, label="literal4"];
20->5 [style = bold, label=""];
7->19 [style = solid, label="yRef"];
1->20 [style = dashed, label="0"];
15->17 [style = bold, label=""];
11->0 [style = bold, label=""];
5->6 [style = bold, label=""];
17->2 [style = bold, label=""];
12->4 [style = bold, label=""];
5->7 [style = solid, label="range"];
7->2 [style = bold, label=""];
11->8 [style = solid, label="literal3"];
7->14 [style = solid, label="yRef"];
4->20 [style = bold, label=""];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
6->8 [style = solid, label="xRef"];
7->18 [style = bold, label=""];
10->9 [style = solid, label="literal2"];
15->19 [style = solid, label="aRef"];
4->1 [style = bold, label=""];
11->9 [style = solid, label="literal3"];
16->4 [style = bold, label=""];
6->7 [style = bold, label=""];
11->19 [style = solid, label="literal3"];
13->14 [style = bold, label=""];
7->8 [style = solid, label="yRef"];
6->14 [style = solid, label="xRef"];
2->19 [style = solid, label="literal1"];
10->19 [style = solid, label="literal2"];
6->9 [style = solid, label="xRef"];
10->11 [style = bold, label=""];
}
