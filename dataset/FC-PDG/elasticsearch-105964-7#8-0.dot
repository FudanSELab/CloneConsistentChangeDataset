digraph {
9 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "request.addTokenFilter(\"mock\")@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "request.analyzer(null)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testWithIndexAnalyzers['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertEquals(1,tokens.size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "assertEquals(\"foxbaz\",tokens.get(2).getTerm())@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(4,tokens.size())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "request.tokenizer(\"standard\")@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "request.text(\"the quick brown fox\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "request.analyzer(\"custom_analyzer\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "request.addTokenFilter(Map.of(\"type\",\"mock\",\"stopword\",\"brown\"))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(\"fox\",tokens.get(3).getTerm())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "tokens = analyze.getTokens()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "request.analyzer(\"standard\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "request.normalizer(\"my_normalizer\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "testNormalizerWithIndex['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<AnalyzeAction.AnalyzeToken> tokens = analyze.getTokens()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "tokens = analyze.getTokens()@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(4,tokens.size())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertEquals(\"quick\",tokens.get(0).getTerm())@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(3,tokens.size())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "request.text(\"ABc\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(\"abc\",tokens.get(0).getTerm())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"foxbaz\",tokens.get(1).getTerm())@@@48@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "tokens = analyze.getTokens()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,registry,environment,mockIndexService(),maxTokenCount)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(3,tokens.size())@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertEquals(3,tokens.size())@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request(\"index\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(2,tokens.size())@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,registry,mockIndexService(),maxTokenCount)@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"quick\",tokens.get(1).getTerm())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "testWithIndexAnalyzers['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "tokens = analyze.getTokens()@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "request.addCharFilter(\"my_append\")@@@36@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->3 [style = bold, label=""];
4->56 [style = dashed, label="0"];
56->52 [style = bold, label=""];
42->45 [style = bold, label=""];
44->36 [style = solid, label="analyze"];
4->36 [style = solid, label="request"];
44->7 [style = bold, label=""];
7->26 [style = bold, label=""];
3->18 [style = bold, label=""];
33->0 [style = bold, label=""];
17->36 [style = bold, label=""];
0->14 [style = bold, label=""];
45->43 [style = bold, label=""];
28->31 [style = solid, label="analyze"];
10->12 [style = bold, label=""];
11->39 [style = dashed, label="0"];
2->44 [style = bold, label=""];
40->47 [style = bold, label=""];
11->33 [style = bold, label=""];
9->5 [style = bold, label=""];
11->28 [style = solid, label="analyze"];
47->34 [style = bold, label=""];
49->40 [style = bold, label=""];
8->27 [style = bold, label=""];
2->28 [style = bold, label=""];
23->57 [style = dashed, label="0"];
4->16 [style = bold, label=""];
25->57 [style = bold, label=""];
57->54 [style = bold, label=""];
13->25 [style = bold, label=""];
48->49 [style = bold, label=""];
4->28 [style = solid, label="request"];
22->9 [style = bold, label=""];
41->4 [style = bold, label=""];
34->42 [style = bold, label=""];
16->19 [style = bold, label=""];
26->24 [style = bold, label=""];
51->35 [style = bold, label=""];
4->31 [style = solid, label="request"];
4->43 [style = solid, label="request"];
46->37 [style = bold, label=""];
43->46 [style = bold, label=""];
19->53 [style = dashed, label="0"];
29->20 [style = bold, label=""];
31->36 [style = dashed, label="0"];
19->13 [style = bold, label=""];
27->11 [style = bold, label=""];
48->43 [style = solid, label="analyze"];
39->44 [style = solid, label="analyze"];
23->10 [style = bold, label=""];
38->25 [style = bold, label=""];
4->11 [style = solid, label="request"];
19->38 [style = bold, label=""];
4->39 [style = solid, label="request"];
36->48 [style = solid, label="analyze"];
21->4 [style = bold, label=""];
16->52 [style = dashed, label="0"];
31->32 [style = bold, label=""];
4->44 [style = solid, label="request"];
13->38 [style = dashed, label="0"];
20->1 [style = bold, label=""];
50->48 [style = bold, label=""];
32->30 [style = bold, label=""];
39->33 [style = bold, label=""];
27->39 [style = bold, label=""];
13->11 [style = solid, label="analyze"];
12->8 [style = bold, label=""];
14->29 [style = bold, label=""];
38->39 [style = solid, label="analyze"];
53->13 [style = bold, label=""];
15->2 [style = bold, label=""];
30->22 [style = bold, label=""];
52->53 [style = bold, label=""];
37->51 [style = bold, label=""];
4->38 [style = solid, label="request"];
25->23 [style = bold, label=""];
1->15 [style = bold, label=""];
17->31 [style = bold, label=""];
28->7 [style = bold, label=""];
18->17 [style = bold, label=""];
36->32 [style = bold, label=""];
55->56 [style = bold, label=""];
4->48 [style = solid, label="request"];
10->54 [style = dashed, label="0"];
28->44 [style = dashed, label="0"];
5->50 [style = bold, label=""];
24->6 [style = bold, label=""];
56->13 [style = solid, label="request"];
4->13 [style = solid, label="request"];
}
