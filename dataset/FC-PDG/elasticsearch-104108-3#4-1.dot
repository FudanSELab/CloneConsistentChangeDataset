digraph {
5 [style = filled, label = "i < max@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ThreadBarrier barrier = new ThreadBarrier(max + 1)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testScaleUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "barrier.await()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testScaleUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int min = between(1,3)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "latch.await()@@@26@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ThreadPoolExecutor pool = EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(),min,max,between(1,100),randomTimeUnit(),EsExecutors.daemonThreadFactory(\"test\"),threadContext)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "latch.await()@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "testScaleDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(\"Min property\",pool.getCorePoolSize(),equalTo(min))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(\"Max property\",pool.getMaximumPoolSize(),equalTo(max))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(\"wrong active size\",pool.getActiveCount(),equalTo(max))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertBusy(null)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "++i@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "barrier.await()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "terminate(pool)@@@37@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "barrier.await()@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "pool.execute(new Runnable(){@Override public void run(){latch.countDown()try {barrier.await()barrier.await()}catch (Exception e) }})@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(\"wrong pool size\",pool.getPoolSize(),equalTo(max))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final CyclicBarrier barrier = new CyclicBarrier(max + 1)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "final ThreadPoolExecutor pool = EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(),min,max,between(1,100),TimeUnit.MILLISECONDS,EsExecutors.daemonThreadFactory(\"test\"),threadContext)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final int max = between(min + 1,6)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "pool.execute(null)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->6 [style = solid, label="min"];
14->16 [style = bold, label=""];
16->3 [style = bold, label=""];
0->9 [style = bold, label=""];
25->1 [style = bold, label=""];
8->15 [style = bold, label=""];
7->18 [style = dashed, label="0"];
24->2 [style = bold, label=""];
3->5 [style = solid, label="i"];
17->9 [style = solid, label="max"];
17->18 [style = solid, label="max"];
21->15 [style = bold, label=""];
5->19 [style = dotted, label="true"];
9->10 [style = bold, label=""];
20->1 [style = bold, label=""];
5->12 [style = dotted, label="true"];
13->19 [style = dashed, label="0"];
11->24 [style = bold, label=""];
5->15 [style = dotted, label="true"];
11->2 [style = bold, label=""];
15->5 [style = bold, label=""];
17->5 [style = solid, label="max"];
1->17 [style = bold, label=""];
17->6 [style = solid, label="max"];
1->17 [style = solid, label="min"];
23->2 [style = solid, label="pool"];
17->0 [style = solid, label="max"];
17->7 [style = bold, label=""];
6->14 [style = bold, label=""];
17->16 [style = solid, label="max"];
12->13 [style = bold, label=""];
23->14 [style = bold, label=""];
5->13 [style = dotted, label="true"];
3->5 [style = bold, label=""];
17->10 [style = solid, label="max"];
22->0 [style = bold, label=""];
5->0 [style = bold, label=""];
5->12 [style = bold, label=""];
18->6 [style = bold, label=""];
7->23 [style = bold, label=""];
6->23 [style = dashed, label="0"];
7->6 [style = bold, label=""];
17->23 [style = solid, label="max"];
6->11 [style = solid, label="pool"];
5->21 [style = dotted, label="true"];
4->1 [style = bold, label=""];
13->8 [style = bold, label=""];
12->19 [style = bold, label=""];
5->8 [style = dotted, label="true"];
5->22 [style = bold, label=""];
6->2 [style = solid, label="pool"];
1->23 [style = solid, label="min"];
17->7 [style = solid, label="max"];
17->18 [style = bold, label=""];
1->14 [style = solid, label="min"];
10->11 [style = bold, label=""];
19->21 [style = bold, label=""];
}
