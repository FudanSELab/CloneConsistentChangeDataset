digraph {
4 [style = filled, label = "double score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "double normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(score,(_constraint.getMaxScore() + _constraint.getMinScore()) / 2)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(true)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testGetAssignmentScoreWhenReplicaIsTopStateLightLoad['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "double normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "float score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(score,0.0)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "verifyZeroInteractions(_testNode)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "double score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(normalizedScore,1.0)@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(_testNode.getAssignedTopStatePartitionsCount()).thenReturn(0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verifyZeroInteractions(_clusterContext)@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testGetAssignmentScoreWhenReplicaNotTopState['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "testGetAssignmentScoreWhenReplicaNotTopState['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(_clusterContext.getEstimatedMaxTopStateCount()).thenReturn(20)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
8->10 [style = bold, label=""];
7->2 [style = solid, label="normalizedScore"];
3->4 [style = solid, label="score"];
2->1 [style = solid, label="normalizedScore"];
0->6 [style = bold, label=""];
11->6 [style = bold, label=""];
4->2 [style = bold, label=""];
7->4 [style = bold, label=""];
9->8 [style = bold, label=""];
15->16 [style = bold, label=""];
5->1 [style = bold, label=""];
4->5 [style = solid, label="score"];
9->8 [style = solid, label="score"];
3->7 [style = bold, label=""];
3->9 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
10->12 [style = bold, label=""];
16->14 [style = bold, label=""];
13->15 [style = bold, label=""];
6->9 [style = bold, label=""];
2->5 [style = bold, label=""];
14->4 [style = bold, label=""];
}
