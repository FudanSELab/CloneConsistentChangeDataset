digraph {
39 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS.subList(1,SHARD0_RECORDS.size())).once()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Assert.assertEquals(SHARDS_LAG_MILLIS,recordSupplier.getPartitionTimeLag())@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSeekToLatest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Thread.sleep(100)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "recordSupplier.start()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "StreamPartition<String> shard0Partition = StreamPartition.of(STREAM,SHARD_ID0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "replayAll()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testSeekToLatest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "i++@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "recordSupplier.seek(shard1Partition,SHARD1_RECORDS.get(2).getSequenceNumber())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "recordSupplier.assign(partitions)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(SHARD1_ITERATOR).anyTimes()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "EasyMock.expect(getRecordsResult0.getMillisBehindLatest()).andReturn(SHARD0_LAG_MILLIS).once()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0,shard1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(9,polledRecords.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "StreamPartition<String> shard1Partition = StreamPartition.of(STREAM,SHARD_ID1)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD1_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 2@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD0_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "EasyMock.expect(getRecordsResult1.getMillisBehindLatest()).andReturn(SHARD1_LAG_MILLIS).once()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100,true)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "testSeek['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "verifyAll()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "int i = 0@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(4,12)))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "recordSupplier.seekToLatest(partitions)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS.subList(2,SHARD1_RECORDS.size())).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(1,2)))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(SHARD0_ITERATOR).anyTimes()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "recordSupplier.seek(shard0Partition,SHARD0_RECORDS.get(1).getSequenceNumber())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "EasyMock.expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(STREAM,SHARD_ID1)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "recordSupplier.assign(partitions)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Thread.sleep(100)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "recordSupplier.start()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(STREAM,SHARD_ID0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0Partition,shard1Partition)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "verifyAll()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 9@@@26@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "i++@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "replayAll()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18->3 [style = bold, label=""];
40->23 [style = solid, label="shard0Partition"];
2->9 [style = solid, label="recordsPerFetch"];
12->5 [style = bold, label=""];
37->49 [style = bold, label=""];
42->45 [style = bold, label=""];
2->6 [style = bold, label=""];
21->15 [style = bold, label=""];
11->9 [style = bold, label=""];
45->24 [style = bold, label=""];
25->44 [style = bold, label=""];
12->26 [style = dashed, label="0"];
19->30 [style = dashed, label="0"];
10->8 [style = bold, label=""];
9->21 [style = dashed, label="0"];
1->12 [style = bold, label=""];
0->40 [style = bold, label=""];
8->11 [style = bold, label=""];
2->35 [style = solid, label="recordsPerFetch"];
4->46 [style = bold, label=""];
8->48 [style = dashed, label="0"];
18->29 [style = dashed, label="0"];
5->10 [style = bold, label=""];
30->41 [style = bold, label=""];
28->30 [style = bold, label=""];
0->19 [style = bold, label=""];
16->29 [style = bold, label=""];
27->31 [style = bold, label=""];
26->43 [style = bold, label=""];
24->38 [style = bold, label=""];
23->16 [style = solid, label="partitions"];
16->17 [style = bold, label=""];
11->18 [style = solid, label="partitions"];
3->0 [style = bold, label=""];
23->35 [style = bold, label=""];
6->4 [style = bold, label=""];
16->41 [style = dashed, label="0"];
36->25 [style = bold, label=""];
7->2 [style = bold, label=""];
1->46 [style = dashed, label="0"];
43->22 [style = bold, label=""];
30->32 [style = dotted, label="true"];
38->47 [style = bold, label=""];
10->11 [style = solid, label="shard0"];
34->28 [style = solid, label="i"];
30->28 [style = dotted, label="true"];
28->30 [style = solid, label="i"];
34->30 [style = solid, label="i"];
11->21 [style = bold, label=""];
31->36 [style = bold, label=""];
30->32 [style = bold, label=""];
11->23 [style = dashed, label="0"];
29->37 [style = bold, label=""];
19->16 [style = bold, label=""];
11->15 [style = solid, label="partitions"];
13->19 [style = bold, label=""];
48->23 [style = bold, label=""];
19->14 [style = bold, label=""];
10->40 [style = dashed, label="0"];
22->39 [style = bold, label=""];
4->1 [style = bold, label=""];
14->13 [style = bold, label=""];
33->2 [style = bold, label=""];
40->37 [style = solid, label="shard0Partition"];
19->14 [style = dotted, label="true"];
48->29 [style = solid, label="shard1Partition"];
35->16 [style = bold, label=""];
40->48 [style = bold, label=""];
0->13 [style = solid, label="i"];
19->13 [style = dotted, label="true"];
39->27 [style = bold, label=""];
49->34 [style = bold, label=""];
15->18 [style = bold, label=""];
34->30 [style = bold, label=""];
20->2 [style = bold, label=""];
46->26 [style = bold, label=""];
13->19 [style = solid, label="i"];
9->15 [style = bold, label=""];
8->11 [style = solid, label="shard1"];
0->19 [style = solid, label="i"];
2->21 [style = solid, label="recordsPerFetch"];
32->28 [style = bold, label=""];
48->23 [style = solid, label="shard1Partition"];
44->0 [style = bold, label=""];
41->42 [style = bold, label=""];
}
