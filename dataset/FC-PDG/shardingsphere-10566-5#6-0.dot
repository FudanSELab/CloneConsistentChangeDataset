digraph {
22 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(0).getName(),is(\"id\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "when(props.getValue(ConfigurationPropertyKey.CHECK_TABLE_METADATA_ENABLED)).thenReturn(false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Map<String,TableMetaData> actual = loader.load(Collections.singletonList(TABLE_NAME),shardingRule,new SchemaBuilderMaterials(databaseType,Collections.singletonMap(\"ds\",dataSource),rules,props))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertLoadTablesOracle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Collection<String> tableNames = new LinkedList<>()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DatabaseType databaseType = mock()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertResult(actual)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertThat(tableMetaData.getIndexes().values().iterator().next().getName(),is(\"ORDER_INDEX_T_ORDER_T_ORDER_0\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "assertThat(indexMetaData.getName(),is(\"order_index_t_order_t_order_0\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "TableMetaData tableMetaData = actual.values().iterator().next()@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Map<String,TableMetaData> actual = loader.load(tableNames,shardingRule,new SchemaBuilderMaterials(databaseType,Collections.singletonMap(\"ds\",dataSource),rules,props))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final Map<String,TableMetaData> actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(2).getName(),is(\"pwd_plain\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(databaseType.getName()).thenReturn(\"Oracle\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(0).getName(),is(\"ID\"))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "ShardingRule shardingRule = createShardingRuleForOracle()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(actual.keySet().iterator().next(),is(\"t_order\"))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(1).getName(),is(\"pwd_cipher\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder)OrderedSPIRegistry.getRegisteredServices(,rules).get(shardingRule)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(1).getName(),is(\"PWD_CIPHER\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "IndexMetaData indexMetaData = tableMetaData.getIndexes().values().iterator().next()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Collection<ShardingSphereRule> rules = Collections.singletonList(shardingRule)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ShardingTableMetaDataBuilder loader = (ShardingTableMetaDataBuilder)OrderedSPIRegistry.getRegisteredServices(,rules).get(shardingRule)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(tableMetaData.getColumnMetaData(2).getName(),is(\"PWD_PLAIN\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertLoadTablesOracle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "TableMetaData tableMetaData = actual.values().iterator().next()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "tableNames.add(TABLE_NAME)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->25 [style = bold, label=""];
13->10 [style = solid, label="shardingRule"];
9->11 [style = bold, label=""];
25->22 [style = bold, label=""];
0->6 [style = bold, label=""];
6->8 [style = solid, label="actual"];
19->16 [style = solid, label="databaseType"];
17->9 [style = bold, label=""];
12->17 [style = bold, label=""];
18->15 [style = bold, label=""];
21->24 [style = bold, label=""];
3->16 [style = bold, label=""];
10->7 [style = bold, label=""];
13->1 [style = bold, label=""];
11->18 [style = bold, label=""];
7->3 [style = bold, label=""];
2->10 [style = dashed, label="0"];
20->27 [style = bold, label=""];
5->6 [style = solid, label="tableNames"];
8->9 [style = dashed, label="0"];
3->5 [style = bold, label=""];
23->26 [style = dotted, label="true"];
5->0 [style = bold, label=""];
22->20 [style = bold, label=""];
6->8 [style = bold, label=""];
1->16 [style = solid, label="rules"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
2->7 [style = bold, label=""];
14->13 [style = bold, label=""];
1->10 [style = bold, label=""];
27->21 [style = bold, label=""];
7->19 [style = bold, label=""];
19->3 [style = bold, label=""];
16->12 [style = bold, label=""];
1->6 [style = solid, label="rules"];
13->16 [style = solid, label="shardingRule"];
13->1 [style = solid, label="shardingRule"];
}
