digraph {
12 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "IndexableField dvField = fields(1(@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"2016-03-11\").endObject()),XContentType.JSON))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "DocumentMapper mapper = createDocumentMapper(fieldMapping(null))@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(1457654400000L,pointField.numericValue().longValue())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))),pointField.binaryValue())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(1,pointField.fieldType().pointIndexDimensionCount())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertFalse(dvField.fieldType().stored())@@@17@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"ip\").endObject().endObject().endObject().endObject())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "IndexableField(( fields = doc.rootDoc().getFields(\"field\")@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertFalse(dvField.fieldType().stored())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertFalse(pointField.fieldType().stored())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "DocumentMapper mapper = parser.parse(\"type\",new CompressedXContent(mapping))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testDefaults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))),dvField.binaryValue())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "IndexableField pointField = fields(0(@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testDefaults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(16,pointField.fieldType().pointNumBytes())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1457654400000L,dvField.numericValue().longValue())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(2,fields.length)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(2,fields.length)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\").startObject(\"field\").field(\"type\",\"date\").endObject().endObject().endObject().endObject())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ParsedDocument doc = mapper.parse(new SourceToParse(\"test\",\"1\",BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\",\"::1\").endObject()),XContentType.JSON))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(DocValuesType.SORTED_SET,dvField.fieldType().docValuesType())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(DocValuesType.SORTED_NUMERIC,dvField.fieldType().docValuesType())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ParsedDocument doc = mapper.parse(source(null))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertEquals(mapping,mapper.mappingSource().toString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
25->14 [style = solid, label="mapping"];
15->13 [style = bold, label=""];
7->23 [style = dashed, label="0"];
19->12 [style = bold, label=""];
10->14 [style = bold, label=""];
1->26 [style = dashed, label="0"];
25->2 [style = solid, label="mapping"];
1->15 [style = bold, label=""];
11->4 [style = bold, label=""];
22->9 [style = bold, label=""];
12->11 [style = bold, label=""];
8->6 [style = bold, label=""];
25->14 [style = bold, label=""];
16->17 [style = bold, label=""];
23->8 [style = bold, label=""];
7->8 [style = bold, label=""];
17->19 [style = bold, label=""];
6->22 [style = dashed, label="0"];
4->0 [style = bold, label=""];
10->14 [style = solid, label="mapping"];
0->7 [style = bold, label=""];
21->12 [style = bold, label=""];
8->22 [style = bold, label=""];
9->26 [style = bold, label=""];
3->10 [style = bold, label=""];
18->20 [style = bold, label=""];
26->27 [style = bold, label=""];
20->16 [style = bold, label=""];
0->23 [style = bold, label=""];
5->12 [style = bold, label=""];
12->4 [style = solid, label="fields"];
2->21 [style = bold, label=""];
17->8 [style = solid, label="fields"];
24->25 [style = bold, label=""];
10->2 [style = solid, label="mapping"];
5->21 [style = dashed, label="0"];
12->9 [style = solid, label="fields"];
14->2 [style = bold, label=""];
15->27 [style = dashed, label="0"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
17->12 [style = solid, label="fields"];
10->25 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
