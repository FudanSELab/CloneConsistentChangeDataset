digraph {
3 [style = filled, label = "{Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(dottedHiddenIndex,Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(),true).build()).state(State.OPEN).putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true))).put(indexBuilder(hiddenIndex,Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(),true).build()).state(State.OPEN).putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)))ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()String(( indexNamesindexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\".hidden_a*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(dottedHiddenIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\".hidden_a*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(dottedHiddenIndex,hiddenIndex))expectThrows(,null)indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"*_alias\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(dottedHiddenIndex,hiddenIndex))}@@@63@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "MetaData.Builder mdBuilder = MetaData.builder().put(indexBuilder(hiddenIndex,Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(),true).build()).state(State.OPEN).putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)).putAlias(AliasMetaData.builder(visibleAlias).build()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false,false,true,false,false,true,false,false,false)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String hiddenAlias = \"hidden_alias\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(Arrays.asList(indexNames),empty())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final String hiddenIndex = \"my-hidden-index\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testHiddenIndexWithVisibleAliasOverlappingNameResolution['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(Arrays.asList(indexNames),containsInAnyOrder(hiddenIndex))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final String visibleAlias = \"my-visible-alias\"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testHiddenAliasAndHiddenIndexResolution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final String hiddenIndex = \"hidden_index\"@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String dottedHiddenAlias = \".hidden_alias\"@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"my-*\",\"-my-visible*\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(Arrays.asList(indexNames),empty())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias))).put(indexBuilder(hiddenIndex,Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(),true).build()).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)))ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()String(( indexNamesindexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"hidden*\",\"visible*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"hidden*\",\"visible*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"*_alias\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"*_alias\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,hiddenAlias)assertThat(Arrays.asList(indexNames),containsInAnyOrder(hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,hiddenAlias)assertThat(Arrays.asList(indexNames),containsInAnyOrder(hiddenIndex))}@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true))).put(indexBuilder(hiddenIndex,Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(),true).build()).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)))ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()String(( indexNamesindexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))expectThrows(,null)indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"*_alias\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,hiddenAlias)assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,hiddenAlias)assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))}@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final String dottedHiddenIndex = \".hidden_index\"@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false,true,true,false,false,true,false,false,false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false,true,true,false,true,true,false,false,false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final String hiddenAlias = \"my-hidden-alias\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String(( indexNames@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"my-*\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"my-hidden*\",\"-my-hidden-a*\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testHiddenAliasAndHiddenIndexResolution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{Metadata.Builder mdBuilder = Metadata.builder().put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias))).put(indexBuilder(hiddenIndex,Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(),true).build()).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build()String(( indexNamesindexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"*_alias\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,\"*_alias\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,visibleAlias)assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,includeHiddenOptions,visibleAlias)assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex,hiddenIndex))indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"*\")assertThat(Arrays.asList(indexNames),containsInAnyOrder(visibleIndex))}@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertThat(Arrays.asList(indexNames),empty())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final String visibleIndex = \"visible_index\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "indexNames = indexNameExpressionResolver.concreteIndexNames(state,excludeHiddenOptions,\"my-hidden*\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false,false,true,false,true,true,false,false,false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final String visibleAlias = \"visible_alias\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->29 [style = solid, label="excludeHiddenOptions"];
25->23 [style = bold, label=""];
29->21 [style = bold, label=""];
6->4 [style = solid, label="includeHiddenOptions"];
15->30 [style = bold, label=""];
25->14 [style = solid, label="excludeHiddenOptions"];
12->9 [style = solid, label="hiddenIndex"];
26->17 [style = bold, label=""];
12->4 [style = solid, label="hiddenIndex"];
6->4 [style = bold, label=""];
29->21 [style = solid, label="indexNames"];
9->2 [style = solid, label="indexNames"];
20->16 [style = bold, label=""];
17->27 [style = solid, label="state"];
17->14 [style = solid, label="state"];
18->22 [style = bold, label=""];
12->2 [style = solid, label="hiddenIndex"];
1->12 [style = bold, label=""];
1->2 [style = solid, label="visibleIndex"];
17->19 [style = bold, label=""];
7->3 [style = solid, label="dottedHiddenIndex"];
22->27 [style = bold, label=""];
9->2 [style = bold, label=""];
16->15 [style = bold, label=""];
5->3 [style = solid, label="excludeHiddenOptions"];
25->18 [style = solid, label="excludeHiddenOptions"];
5->2 [style = solid, label="excludeHiddenOptions"];
10->11 [style = bold, label=""];
10->2 [style = solid, label="hiddenAlias"];
30->25 [style = bold, label=""];
6->3 [style = solid, label="includeHiddenOptions"];
0->1 [style = bold, label=""];
8->9 [style = solid, label="visibleAlias"];
6->2 [style = solid, label="includeHiddenOptions"];
23->26 [style = bold, label=""];
11->7 [style = bold, label=""];
2->3 [style = bold, label=""];
14->28 [style = bold, label=""];
1->4 [style = solid, label="visibleIndex"];
6->9 [style = solid, label="includeHiddenOptions"];
2->3 [style = solid, label="indexNames"];
17->29 [style = solid, label="state"];
27->24 [style = bold, label=""];
12->3 [style = solid, label="hiddenIndex"];
4->9 [style = solid, label="indexNames"];
16->28 [style = solid, label="hiddenIndex"];
8->30 [style = dashed, label="0"];
5->4 [style = solid, label="excludeHiddenOptions"];
27->24 [style = solid, label="indexNames"];
21->18 [style = bold, label=""];
5->9 [style = solid, label="excludeHiddenOptions"];
4->9 [style = bold, label=""];
12->15 [style = dashed, label="0"];
10->4 [style = solid, label="hiddenAlias"];
1->16 [style = dashed, label="0"];
7->5 [style = bold, label=""];
13->1 [style = bold, label=""];
28->29 [style = bold, label=""];
19->14 [style = bold, label=""];
23->27 [style = solid, label="includeHiddenOptions"];
18->22 [style = solid, label="indexNames"];
7->26 [style = dashed, label="0"];
12->8 [style = bold, label=""];
1->9 [style = solid, label="visibleIndex"];
17->18 [style = solid, label="state"];
8->10 [style = bold, label=""];
5->6 [style = bold, label=""];
14->28 [style = solid, label="indexNames"];
}
