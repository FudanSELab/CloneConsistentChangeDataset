digraph {
31 [style = filled, label = "checkStandardStrategies['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "checkBroadcastMergeJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,sink.getInput().getShipStrategy())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(set0,join.getInput1().getLocalStrategyKeys())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(set0,join.getInput2().getLocalStrategyKeys())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(),join.getInput2().getLocalStrategySortOrder()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "SingleInputPlanNode map@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput2())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput2().getLocalStrategy())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_COMBINE,combiner.getDriverStrategy())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "combiner != null@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "DualInputPlanNode join@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return false@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "SinkPlanNode sink@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "DualInputPlanNode join@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(DriverStrategy.COLLECTOR_MAP,map.getDriverStrategy())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "return true@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(LocalStrategy.SORT,join.getInput1().getLocalStrategy())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(LocalStrategy.NONE,combiner.getInput().getLocalStrategy())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(DriverStrategy.NONE,sink.getDriverStrategy())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "SingleInputPlanNode combiner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "checkBroadcastMergeJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(set0,join.getKeysForInput1())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "DriverStrategy.INNER_MERGE == join.getDriverStrategy()@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(DriverStrategy.SORTED_GROUP_REDUCE,reducer.getDriverStrategy())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SingleInputPlanNode reducer@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(LocalStrategy.COMBININGSORT,reducer.getInput().getLocalStrategy())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(set01,reducer.getInput().getLocalStrategyKeys())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ShipStrategyType.FORWARD,map.getInput().getShipStrategy())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(),reducer.getSortOrders(0)))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(set01,reducer.getKeys(0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "DriverStrategy.MERGE == join.getDriverStrategy()@@@3@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
19->10 [style = dotted, label="true"];
15->5 [style = dotted, label="true"];
28->29 [style = bold, label=""];
19->1 [style = dotted, label="true"];
19->14 [style = dotted, label="true"];
31->25 [style = dotted, label="true"];
31->22 [style = dotted, label="true"];
5->8 [style = bold, label=""];
24->28 [style = bold, label=""];
31->23 [style = bold, label=""];
12->5 [style = bold, label=""];
19->0 [style = dotted, label="false"];
33->20 [style = bold, label=""];
13->3 [style = dotted, label="true"];
17->18 [style = dotted, label="true"];
4->6 [style = bold, label=""];
7->12 [style = bold, label=""];
16->24 [style = dashed, label="0"];
19->12 [style = dotted, label="true"];
7->20 [style = dashed, label="0"];
15->10 [style = dotted, label="true"];
21->24 [style = bold, label=""];
15->19 [style = dashed, label="0"];
19->7 [style = dotted, label="true"];
12->30 [style = dashed, label="0"];
15->14 [style = dotted, label="true"];
15->16 [style = dotted, label="true"];
15->7 [style = dotted, label="true"];
33->30 [style = dotted, label="true"];
19->8 [style = dotted, label="true"];
17->3 [style = dotted, label="true"];
15->4 [style = dotted, label="true"];
9->16 [style = bold, label=""];
15->9 [style = dotted, label="true"];
19->0 [style = bold, label=""];
33->20 [style = dotted, label="true"];
31->32 [style = dotted, label="true"];
14->7 [style = bold, label=""];
17->19 [style = bold, label=""];
6->14 [style = bold, label=""];
13->2 [style = dotted, label="true"];
8->1 [style = bold, label=""];
4->28 [style = dashed, label="0"];
29->33 [style = bold, label=""];
6->29 [style = dashed, label="0"];
15->0 [style = dotted, label="false"];
15->8 [style = dotted, label="true"];
23->21 [style = bold, label=""];
19->9 [style = bold, label=""];
31->26 [style = dotted, label="true"];
19->4 [style = dotted, label="true"];
15->9 [style = bold, label=""];
19->11 [style = dotted, label="true"];
15->1 [style = dotted, label="true"];
15->6 [style = dotted, label="true"];
15->0 [style = bold, label=""];
9->21 [style = dashed, label="0"];
19->9 [style = dotted, label="true"];
31->27 [style = dotted, label="true"];
26->33 [style = solid, label="combiner"];
19->16 [style = dotted, label="true"];
15->11 [style = dotted, label="true"];
19->5 [style = dotted, label="true"];
15->12 [style = dotted, label="true"];
19->6 [style = dotted, label="true"];
13->15 [style = bold, label=""];
3->32 [style = dashed, label="0"];
16->4 [style = bold, label=""];
20->30 [style = bold, label=""];
1->10 [style = bold, label=""];
10->11 [style = bold, label=""];
}
