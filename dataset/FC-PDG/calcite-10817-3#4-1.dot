digraph {
24 [style = filled, label = "tester.checkFails(\"^any_value(1, 2)^\",\"Invalid number of arguments to function 'ANY_VALUE'. Was expecting 1 arguments\",false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "tester.checkAgg(\"any_value(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",values,\"-1\",0d)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "tester.checkFails(\"^any_value()^\",\"Invalid number of arguments to function 'ANY_VALUE'. Was expecting 1 arguments\",false)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "tester.checkType(\"any_value(1)\",\"INTEGER\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testMinFunc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "tester.checkType(\"any_value(DISTINCT 1.5)\",\"DECIMAL(2, 1)\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "tester.checkType(\"min(1)\",\"INTEGER\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tester.setFor(SqlStdOperatorTable.MIN,VM_EXPAND)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "tester.checkFails(\"min(^*^)\",\"Unknown identifier '\*'\",false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tester.checkAgg(\"any_value(DISTINCT x)\",values,\"0\",0d)@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tester.setFor(SqlStdOperatorTable.ANY_VALUE,VM_EXPAND)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final String(( values = {\"0\",\"CAST(null AS INTEGER)\",\"2\",\"2\"}@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "return@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testAnyValueFunc['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "tester.checkType(\"min(DISTINCT 1.5)\",\"DECIMAL(2, 1)\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "!enable@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "tester.checkAgg(\"min(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",values,\"-1\",0d)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tester.checkAgg(\"any_value(x)\",values,\"0\",0d)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testMinFunc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tester.checkAgg(\"min(x)\",values,\"0\",0d)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "tester.checkType(\"any_value(1.2)\",\"DECIMAL(2, 1)\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "tester.checkFails(\"^min()^\",\"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",false)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "tester.checkAgg(\"min(CASE x WHEN 0 THEN NULL ELSE -1 END)\",values,\"-1\",0d)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tester.checkType(\"min(1.2)\",\"DECIMAL(2, 1)\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "tester.checkAgg(\"min(DISTINCT x)\",values,\"0\",0d)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "tester.checkFails(\"any_value(^*^)\",\"Unknown identifier '\*'\",false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "tester.checkAgg(\"any_value(CASE x WHEN 0 THEN NULL ELSE -1 END)\",values,\"-1\",0d)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "tester.checkFails(\"^min(1, 2)^\",\"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",false)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = bold, label=""];
23->16 [style = bold, label=""];
3->17 [style = dashed, label="0"];
16->27 [style = bold, label=""];
9->19 [style = solid, label="values"];
7->10 [style = bold, label=""];
6->20 [style = dashed, label="0"];
7->16 [style = dashed, label="0"];
0->23 [style = dashed, label="0"];
11->26 [style = dashed, label="0"];
1->20 [style = bold, label=""];
1->14 [style = dotted, label="true"];
9->11 [style = solid, label="values"];
8->21 [style = dashed, label="0"];
10->27 [style = dashed, label="0"];
27->22 [style = bold, label=""];
11->2 [style = bold, label=""];
0->7 [style = bold, label=""];
8->0 [style = bold, label=""];
9->6 [style = solid, label="values"];
6->4 [style = bold, label=""];
13->24 [style = dashed, label="0"];
17->24 [style = bold, label=""];
1->6 [style = bold, label=""];
9->2 [style = solid, label="values"];
10->12 [style = bold, label=""];
19->26 [style = bold, label=""];
12->22 [style = dashed, label="0"];
2->18 [style = dashed, label="0"];
3->13 [style = bold, label=""];
22->17 [style = bold, label=""];
9->4 [style = solid, label="values"];
4->19 [style = dashed, label="0"];
1->14 [style = bold, label=""];
12->3 [style = bold, label=""];
13->9 [style = bold, label=""];
9->1 [style = bold, label=""];
4->11 [style = bold, label=""];
20->19 [style = bold, label=""];
9->26 [style = solid, label="values"];
9->18 [style = solid, label="values"];
14->6 [style = bold, label=""];
15->8 [style = bold, label=""];
9->20 [style = solid, label="values"];
24->9 [style = bold, label=""];
25->21 [style = bold, label=""];
14->20 [style = bold, label=""];
26->18 [style = bold, label=""];
21->23 [style = bold, label=""];
}
