digraph {
14 [style = filled, label = "i++@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "i++@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+a0\",0),new KeyValueTimestamp<>(1,\"A1+a1\",0))@@@33@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "processor.checkAndClearProcessResult()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "stream2 = builder.stream(topic2,consumed)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "processor.checkAndClearProcessResult()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final KStream<Integer,String> stream2@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final int(( expectedKeys = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5874f@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "joined = stream1.join(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100)),StreamJoined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "final TestInputTopic<Integer,String> inputTopic2 = driver.createInputTopic(topic2,new IntegerSerializer(),new StringSerializer(),Instant.ofEpochMilli(0L),Duration.ZERO)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "inputTopic2.pipeInput(expectedKeys(i(,\"c\" + expectedKeys(i()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int i = 0@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "i < 2@@@23@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "processor.checkAndClearProcessResult(EMPTY)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+b0\",0L),new KeyValueTimestamp<>(0,\"B0+b0\",0L),new KeyValueTimestamp<>(1,\"A1+b1\",0L),new KeyValueTimestamp<>(1,\"B1+b1\",0L),new KeyValueTimestamp<>(2,\"B2+b2\",0L),new KeyValueTimestamp<>(3,\"B3+b3\",0L))@@@41@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
47 [style = filled, label = "joined = stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100)),StreamJoined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final TestInputTopic<Integer,String> inputTopic1 = driver.createInputTopic(topic1,new IntegerSerializer(),new StringSerializer(),Instant.ofEpochMilli(0L),Duration.ZERO)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final MockProcessorSupplier<Integer,String> supplier = new MockProcessorSupplier<>()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final KStream<Integer,String> stream1@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+a0\",0L),new KeyValueTimestamp<>(1,\"A1+a1\",0L))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "joined = stream1.join(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100L)),StreamJoined.with(Serdes.Integer(),Serdes.String(),Serdes.String()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "int i = 0@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"C0+a0\",0L),new KeyValueTimestamp<>(0,\"C0+b0\",0L),new KeyValueTimestamp<>(1,\"C1+a1\",0L),new KeyValueTimestamp<>(1,\"C1+b1\",0L),new KeyValueTimestamp<>(2,\"C2+b2\",0L),new KeyValueTimestamp<>(3,\"C3+b3\",0L))@@@45@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+c0\",0),new KeyValueTimestamp<>(0,\"B0+c0\",0),new KeyValueTimestamp<>(0,\"C0+c0\",0),new KeyValueTimestamp<>(1,\"A1+c1\",0),new KeyValueTimestamp<>(1,\"B1+c1\",0),new KeyValueTimestamp<>(1,\"C1+c1\",0))@@@51@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testJoin['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testOuterJoin['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+c0\",0L),new KeyValueTimestamp<>(0,\"B0+c0\",0L),new KeyValueTimestamp<>(0,\"C0+c0\",0L),new KeyValueTimestamp<>(1,\"A1+c1\",0L),new KeyValueTimestamp<>(1,\"B1+c1\",0L),new KeyValueTimestamp<>(1,\"C1+c1\",0L))@@@51@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final KStream<Integer,String> joined@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"A0+b0\",0),new KeyValueTimestamp<>(0,\"B0+b0\",0),new KeyValueTimestamp<>(1,\"A1+b1\",0),new KeyValueTimestamp<>(1,\"B1+b1\",0),new KeyValueTimestamp<>(2,\"B2+b2\",0),new KeyValueTimestamp<>(3,\"B3+b3\",0))@@@41@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"B0+a0\",0),new KeyValueTimestamp<>(1,\"B1+a1\",0))@@@37@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int i = 0@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "inputTopic1.pipeInput(expectedKey,\"C\" + expectedKey)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final MockProcessor<Integer,String> processor = supplier.theCapturedProcessor()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "stream1 = builder.stream(topic1,consumed)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"C0+a0\",0),new KeyValueTimestamp<>(0,\"C0+b0\",0),new KeyValueTimestamp<>(1,\"C1+a1\",0),new KeyValueTimestamp<>(1,\"C1+b1\",0),new KeyValueTimestamp<>(2,\"C2+b2\",0),new KeyValueTimestamp<>(3,\"C3+b3\",0))@@@45@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "testJoin['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(1,copartitionGroups.size())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "inputTopic1.pipeInput(expectedKeys(i(,\"A\" + expectedKeys(i()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "inputTopic2.pipeInput(expectedKey,\"b\" + expectedKey)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "inputTopic1.pipeInput(expectedKey,\"B\" + expectedKey)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0,\"B0+a0\",0L),new KeyValueTimestamp<>(1,\"B1+a1\",0L))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "i < 2@@@47@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "inputTopic2.pipeInput(expectedKeys(i(,\"a\" + expectedKeys(i()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "joined.process(supplier)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i < 2@@@29@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "i++@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->30 [style = bold, label=""];
14->25 [style = bold, label=""];
8->22 [style = solid, label="expectedKeys"];
24->33 [style = dotted, label="true"];
14->25 [style = solid, label="i"];
6->38 [style = dashed, label="0"];
7->36 [style = solid, label="i"];
12->9 [style = bold, label=""];
36->33 [style = bold, label=""];
41->28 [style = bold, label=""];
14->27 [style = solid, label="i"];
23->13 [style = bold, label=""];
12->44 [style = dashed, label="0"];
26->47 [style = solid, label="stream2"];
45->17 [style = bold, label=""];
24->10 [style = bold, label=""];
16->3 [style = bold, label=""];
43->16 [style = bold, label=""];
9->39 [style = bold, label=""];
21->19 [style = bold, label=""];
7->33 [style = solid, label="i"];
3->11 [style = bold, label=""];
26->47 [style = bold, label=""];
22->32 [style = bold, label=""];
26->43 [style = bold, label=""];
8->36 [style = solid, label="expectedKeys"];
7->24 [style = solid, label="i"];
19->6 [style = bold, label=""];
48->17 [style = bold, label=""];
20->25 [style = bold, label=""];
18->28 [style = bold, label=""];
25->27 [style = bold, label=""];
7->24 [style = bold, label=""];
32->19 [style = solid, label="i"];
5->43 [style = dashed, label="0"];
19->22 [style = dotted, label="true"];
20->25 [style = solid, label="i"];
46->20 [style = bold, label=""];
29->16 [style = solid, label="supplier"];
19->46 [style = bold, label=""];
35->34 [style = bold, label=""];
19->38 [style = bold, label=""];
19->22 [style = bold, label=""];
47->16 [style = bold, label=""];
30->15 [style = bold, label=""];
21->32 [style = solid, label="i"];
17->8 [style = bold, label=""];
38->20 [style = bold, label=""];
4->17 [style = bold, label=""];
27->14 [style = bold, label=""];
25->41 [style = bold, label=""];
20->14 [style = solid, label="i"];
25->18 [style = bold, label=""];
32->19 [style = bold, label=""];
28->12 [style = bold, label=""];
37->7 [style = bold, label=""];
5->16 [style = bold, label=""];
6->20 [style = bold, label=""];
31->26 [style = bold, label=""];
26->5 [style = solid, label="stream2"];
0->1 [style = bold, label=""];
33->24 [style = bold, label=""];
39->1 [style = bold, label=""];
34->23 [style = bold, label=""];
21->22 [style = solid, label="i"];
44->9 [style = bold, label=""];
24->36 [style = dotted, label="true"];
1->37 [style = bold, label=""];
24->42 [style = bold, label=""];
15->2 [style = bold, label=""];
9->0 [style = bold, label=""];
1->40 [style = bold, label=""];
26->5 [style = bold, label=""];
21->19 [style = solid, label="i"];
18->41 [style = dashed, label="0"];
5->47 [style = dashed, label="0"];
29->31 [style = bold, label=""];
33->24 [style = solid, label="i"];
8->27 [style = solid, label="expectedKeys"];
25->14 [style = dotted, label="true"];
33->36 [style = solid, label="i"];
11->35 [style = bold, label=""];
20->27 [style = solid, label="i"];
6->46 [style = dashed, label="0"];
24->36 [style = bold, label=""];
40->7 [style = bold, label=""];
19->32 [style = dotted, label="true"];
32->22 [style = solid, label="i"];
28->44 [style = bold, label=""];
25->27 [style = dotted, label="true"];
2->29 [style = bold, label=""];
13->21 [style = bold, label=""];
26->43 [style = solid, label="stream2"];
}
