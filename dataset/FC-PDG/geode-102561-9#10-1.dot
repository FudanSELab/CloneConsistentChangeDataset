digraph {
10 [style = filled, label = "wrapFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "wrappedData.flip()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,FINISHED,0,0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testEngine.addReturnResult(new SSLEngineResult(CLOSED,NEED_TASK,appData.remaining(),appData.remaining()))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "unwrapWithDecryptionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error encrypting data\")@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThatThrownBy(null).isInstanceOf().hasMessageContaining(\"Error decrypting data\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "wrappedData.put(netBytes)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestSSLEngine testEngine = new TestSSLEngine()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "appData.flip()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ByteBuffer wrappedData = ByteBuffer.allocate(inputSharing.getBuffer().capacity())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Arrays.fill(appBytes,(byte)0x1F)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "spyNioSslEngine.engine = testEngine@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "byte(( netBytes = new byte((((@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "appData.put(appBytes)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "wrapFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "byte(( appBytes = new byte((((@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteBuffer appData = ByteBuffer.allocate(outputSharing.getBuffer().capacity() + 100)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Arrays.fill(netBytes,(byte)0x1F)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
16->13 [style = bold, label=""];
9->11 [style = bold, label=""];
3->1 [style = bold, label=""];
6->8 [style = solid, label="appBytes"];
9->4 [style = bold, label=""];
12->15 [style = bold, label=""];
1->18 [style = dashed, label="0"];
10->7 [style = bold, label=""];
1->9 [style = bold, label=""];
15->16 [style = solid, label="netBytes"];
3->18 [style = bold, label=""];
6->2 [style = solid, label="appBytes"];
15->17 [style = bold, label=""];
2->0 [style = bold, label=""];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
6->15 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
14->12 [style = bold, label=""];
0->13 [style = dashed, label="0"];
7->6 [style = bold, label=""];
6->8 [style = bold, label=""];
18->9 [style = bold, label=""];
3->9 [style = solid, label="testEngine"];
7->12 [style = dashed, label="0"];
8->17 [style = dashed, label="0"];
5->7 [style = bold, label=""];
4->11 [style = dashed, label="0"];
15->17 [style = solid, label="netBytes"];
17->16 [style = bold, label=""];
}
