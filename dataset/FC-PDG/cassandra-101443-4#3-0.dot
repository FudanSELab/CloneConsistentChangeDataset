digraph {
10 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,sixToken),fullReplica(cOrB,threeToken,sixToken))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedResult.put(fullReplica(aAddress,threeToken,sixToken),transientReplica(dAddress,threeToken,sixToken))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EndpointsByReplica.Mutable expectedResult = new EndpointsByReplica.Mutable()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testMoveBackwardBetweenCalculateRangesToFetchWithPreferredEndpoints['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "expectedResult.put(fullReplica(aAddress,sixToken,sevenToken),fullReplica(dAddress,sixToken,nineToken))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testMoveBackwardBetweenCalculateRangesToFetchWithPreferredEndpoints['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expectedResult.put(fullReplica(aAddress,sixToken,sevenToken),transientReplica(eAddress,sixToken,nineToken))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveForwardBetween().right,constructTMDsMoveForwardBetween(),expectedResult.asImmutableView())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "invokeCalculateRangesToFetchWithPreferredEndpoints(calculateStreamAndFetchRangesMoveBackwardBetween().right,constructTMDsMoveBackwardBetween(),expectedResult.asImmutableView())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectedResult.put(transientReplica(aAddress,sixToken,nineToken),transientReplica(eAddress,sixToken,nineToken))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "InetAddressAndPort cOrB = (downNodes.contains(cAddress) || sourceFilterDownNodes.contains(cAddress))? bAddress: cAddress@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expectedResult.put(fullReplica(address01,nineToken,elevenToken),fullReplica(address05,nineToken,elevenToken))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "expectedResult.put(transientReplica(address01,sixToken,nineToken),transientReplica(address05,sixToken,nineToken))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "expectedResult.put(fullReplica(aAddress,nineToken,elevenToken),fullReplica(eAddress,nineToken,elevenToken))@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testMoveForwardBetweenCalculateRangesToFetchWithPreferredEndpoints['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3->5 [style = dashed, label="0"];
7->5 [style = bold, label=""];
0->14 [style = bold, label=""];
6->0 [style = bold, label=""];
1->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
9->0 [style = bold, label=""];
10->8 [style = bold, label=""];
8->13 [style = bold, label=""];
2->7 [style = dashed, label="0"];
11->10 [style = bold, label=""];
3->4 [style = bold, label=""];
14->10 [style = solid, label="cOrB"];
14->12 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
0->7 [style = bold, label=""];
12->11 [style = bold, label=""];
}
