digraph {
4 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "List<ResultRow> expectedResults = Arrays.asList(makeRow(fullQuery,\"2011-04-01\",\"alias\",\"business\",\"rows\",2L,\"idx\",217L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"mezzanine\",\"rows\",6L,\"idx\",4420L),makeRow(fullQuery,\"2011-04-01\",\"alias\",\"premium\",\"rows\",6L,\"idx\",4416L))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testHavingSpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final GroupByQuery fullQuery = builder.build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testMergedHavingSpec['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,GroupByQueryRunnerTestHelper.runQuery(factory,runner,fullQuery),\"havingspec\")@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,mergedRunner.run(QueryPlus.wrap(fullQuery)),\"merged\")@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "QueryRunner mergedRunner = factory.getToolchest().mergeResults(new QueryRunner<Row>(){@Override public Sequence<Row> run(QueryPlus<Row> queryPlus,ResponseContext responseContext){final QueryPlus queryPlus1 = queryPlus.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-04-02/2011-04-03\"))))final QueryPlus queryPlus2 = queryPlus.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-04-03/2011-04-04\"))))return new MergeSequence(queryPlus.getQuery().getResultOrdering(),Sequences.simple(Arrays.asList(runner.run(queryPlus1,responseContext),runner.run(queryPlus2,responseContext))))}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "GroupByQuery fullQuery = builder.build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "GroupByQuery.Builder builder = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval(\"2011-04-02/2011-04-04\").setDimensions(new DefaultDimensionSpec(\"quality\",\"alias\")).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory(\"idx\",\"index\")).setGranularity(new PeriodGranularity(new Period(\"P1M\"),null,null)).setHavingSpec(new OrHavingSpec(ImmutableList.of(new GreaterThanHavingSpec(\"rows\",2L),new EqualToHavingSpec(\"idx\",217L))))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testHavingSpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6->0 [style = bold, label=""];
2->7 [style = dashed, label="0"];
5->3 [style = bold, label=""];
2->5 [style = bold, label=""];
0->2 [style = bold, label=""];
7->8 [style = bold, label=""];
8->9 [style = bold, label=""];
5->3 [style = solid, label="expectedResults"];
10->4 [style = bold, label=""];
4->3 [style = solid, label="expectedResults"];
7->9 [style = solid, label="fullQuery"];
2->3 [style = solid, label="fullQuery"];
4->0 [style = bold, label=""];
2->5 [style = solid, label="fullQuery"];
0->7 [style = bold, label=""];
1->4 [style = bold, label=""];
2->3 [style = bold, label=""];
4->9 [style = solid, label="expectedResults"];
}
