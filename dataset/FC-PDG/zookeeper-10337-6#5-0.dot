digraph {
4 [style = filled, label = "assertEquals(\"expected 5 arguments\",zkMain.cl.getNumArguments(),4)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "String cmdstring = \" ls / \"@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "zkMain.cl.parseCommand(cmdstring)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"create is not taken as first argument\",zkMain.cl.getCmdArgument(0),\"create\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "String cmdstring = \"create /node '' ''\"@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"empty string is not taken as fourth argument\",zkMain.cl.getCmdArgument(3),\"\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"ls is not taken as first argument\",zkMain.cl.getCmdArgument(0),\"ls\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(zkMain.cl.getCmdArgument(2),\"\",\"empty string is not taken as third argument\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "testParseWithMultipleQuotes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(\"/ is not taken as second argument\",zkMain.cl.getCmdArgument(1),\"/\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ZooKeeperMain zkMain = new ZooKeeperMain(zk)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testParseWithExtraSpaces['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testParseWithMultipleQuotes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"/node is not taken as second argument\",zkMain.cl.getCmdArgument(1),\"/node\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"Spaces also considered as characters\",zkMain.cl.getNumArguments(),2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(zkMain.cl.getNumArguments(),4,\"expected 5 arguments\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertEquals(zkMain.cl.getCmdArgument(1),\"/node\",\"/node is not taken as second argument\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"empty string is not taken as third argument\",zkMain.cl.getCmdArgument(2),\"\")@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(zkMain.cl.getCmdArgument(0),\"create\",\"create is not taken as first argument\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "final ZooKeeper zk = createClient()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(zkMain.cl.getCmdArgument(3),\"\",\"empty string is not taken as fourth argument\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4->9 [style = bold, label=""];
4->18 [style = dashed, label="0"];
1->4 [style = bold, label=""];
16->0 [style = bold, label=""];
7->17 [style = bold, label=""];
17->1 [style = bold, label=""];
2->1 [style = bold, label=""];
1->15 [style = bold, label=""];
19->20 [style = bold, label=""];
18->19 [style = bold, label=""];
2->1 [style = solid, label="cmdstring"];
14->10 [style = bold, label=""];
3->6 [style = bold, label=""];
1->18 [style = bold, label=""];
17->1 [style = solid, label="cmdstring"];
2->17 [style = dashed, label="0"];
6->10 [style = dashed, label="0"];
0->7 [style = bold, label=""];
0->7 [style = solid, label="zk"];
9->19 [style = dashed, label="0"];
5->0 [style = bold, label=""];
7->2 [style = bold, label=""];
4->15 [style = dashed, label="0"];
3->20 [style = dashed, label="0"];
6->8 [style = bold, label=""];
12->14 [style = bold, label=""];
9->3 [style = bold, label=""];
15->12 [style = bold, label=""];
9->12 [style = dashed, label="0"];
3->14 [style = dashed, label="0"];
8->11 [style = dashed, label="0"];
13->0 [style = bold, label=""];
10->11 [style = bold, label=""];
}
