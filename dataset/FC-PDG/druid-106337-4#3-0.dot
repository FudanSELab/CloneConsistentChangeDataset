digraph {
17 [style = filled, label = "final SegmentAnalysis analysis1 = new SegmentAnalysis(\"id\",null,Maps.newHashMap(),0,0,null,null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertNull(mergeStrict(analysis1,analysis2).getAggregators())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testMergeAggregatorsConflict['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final Map<String,AggregatorFactory> expectedLenient = Maps.newHashMap()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "expectedLenient.put(\"baz\",new LongMaxAggregatorFactory(\"baz\",\"baz\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(mergeLenient(analysis1,analysis2).getAggregators())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "expectedLenient.put(\"bar\",null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testMergeAggregatorsConflict['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final SegmentAnalysis analysis2 = new SegmentAnalysis(\"id\",null,new HashMap<>(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleMaxAggregatorFactory(\"bar\",\"bar\"),\"baz\",new LongMaxAggregatorFactory(\"baz\",\"baz\")),null,null,null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertNull(mergeStrict(analysis1,analysis2).getAggregators())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final SegmentAnalysis analysis2 = new SegmentAnalysis(\"id\",null,Maps.newHashMap(),0,0,null,null,null,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final SegmentAnalysis analysis1 = new SegmentAnalysis(\"id\",null,Maps.newHashMap(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleSumAggregatorFactory(\"bar\",\"bar\")),null,null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(expectedLenient,mergeLenient(analysis1,analysis2).getAggregators())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final SegmentAnalysis analysis2 = new SegmentAnalysis(\"id\",null,Maps.newHashMap(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleMaxAggregatorFactory(\"bar\",\"bar\"),\"baz\",new LongMaxAggregatorFactory(\"baz\",\"baz\")),null,null,null)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "final Map<String,AggregatorFactory> expectedLenient = new HashMap<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final SegmentAnalysis analysis1 = new SegmentAnalysis(\"id\",null,new HashMap<>(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleSumAggregatorFactory(\"bar\",\"bar\")),null,null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "expectedLenient.put(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testMergeAggregatorsAllNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(expectedLenient,mergeLenient(mergeLenient(analysis1,analysis2),mergeLenient(analysis1,analysis2)).getAggregators())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
5->8 [style = bold, label=""];
6->7 [style = solid, label="expectedLenient"];
2->6 [style = bold, label=""];
6->3 [style = solid, label="expectedLenient"];
0->2 [style = bold, label=""];
18->15 [style = bold, label=""];
12->11 [style = bold, label=""];
10->3 [style = solid, label="expectedLenient"];
0->11 [style = dashed, label="0"];
16->17 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->9 [style = bold, label=""];
4->0 [style = bold, label=""];
6->10 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
10->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
2->13 [style = dashed, label="0"];
11->13 [style = bold, label=""];
3->15 [style = dashed, label="0"];
9->3 [style = bold, label=""];
14->18 [style = bold, label=""];
10->7 [style = solid, label="expectedLenient"];
}
