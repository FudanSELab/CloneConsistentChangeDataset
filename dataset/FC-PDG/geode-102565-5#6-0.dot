digraph {
24 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
37 [style = filled, label = "final int individualRead = 150@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "ByteBuffer data = nioSslEngine.readAtLeast(mockChannel,amountToRead,wrappedBuffer)@@@23@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SocketChannel mockChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
2->16 [style = solid, label="mockChannel"];
5->8 [style = bold, label=""];
30->38 [style = bold, label=""];
17->26 [style = bold, label=""];
14->37 [style = dashed, label="0"];
14->7 [style = solid, label="individualRead"];
7->31 [style = dashed, label="0"];
27->4 [style = solid, label="initialFreeSpace"];
11->27 [style = solid, label="preexistingBytes"];
11->4 [style = solid, label="preexistingBytes"];
23->25 [style = solid, label="testSSLEngine"];
20->9 [style = bold, label=""];
35->9 [style = bold, label=""];
15->5 [style = solid, label="initialUnwrappedBufferSize"];
11->6 [style = bold, label=""];
1->21 [style = solid, label="unwrappedBuffer"];
12->17 [style = bold, label=""];
18->33 [style = bold, label=""];
36->4 [style = bold, label=""];
18->19 [style = bold, label=""];
11->5 [style = solid, label="preexistingBytes"];
37->29 [style = bold, label=""];
38->12 [style = bold, label=""];
28->9 [style = bold, label=""];
34->7 [style = bold, label=""];
32->33 [style = solid, label="preexistingBytes"];
1->18 [style = bold, label=""];
37->38 [style = solid, label="individualRead"];
5->8 [style = solid, label="initialFreeSpace"];
18->30 [style = solid, label="unwrappedBuffer"];
13->30 [style = bold, label=""];
7->31 [style = bold, label=""];
14->10 [style = solid, label="individualRead"];
6->16 [style = solid, label="wrappedBuffer"];
25->16 [style = bold, label=""];
3->4 [style = bold, label=""];
22->23 [style = bold, label=""];
32->2 [style = bold, label=""];
15->18 [style = bold, label=""];
9->37 [style = bold, label=""];
33->13 [style = bold, label=""];
15->1 [style = solid, label="initialUnwrappedBufferSize"];
4->0 [style = bold, label=""];
14->26 [style = solid, label="individualRead"];
0->7 [style = bold, label=""];
6->2 [style = bold, label=""];
1->13 [style = solid, label="unwrappedBuffer"];
29->32 [style = solid, label="initialUnwrappedBufferSize"];
11->18 [style = solid, label="preexistingBytes"];
37->31 [style = solid, label="individualRead"];
32->31 [style = solid, label="preexistingBytes"];
29->18 [style = solid, label="initialUnwrappedBufferSize"];
26->27 [style = bold, label=""];
27->4 [style = bold, label=""];
7->5 [style = bold, label=""];
23->24 [style = bold, label=""];
19->13 [style = bold, label=""];
10->16 [style = bold, label=""];
21->22 [style = bold, label=""];
24->25 [style = bold, label=""];
29->32 [style = bold, label=""];
11->7 [style = solid, label="preexistingBytes"];
2->15 [style = bold, label=""];
4->34 [style = dashed, label="0"];
9->16 [style = solid, label="amountToRead"];
9->14 [style = bold, label=""];
17->3 [style = bold, label=""];
15->27 [style = solid, label="initialUnwrappedBufferSize"];
12->36 [style = solid, label="testSSLEngine"];
11->26 [style = solid, label="preexistingBytes"];
18->21 [style = bold, label=""];
12->39 [style = bold, label=""];
16->17 [style = solid, label="testSSLEngine"];
14->22 [style = solid, label="individualRead"];
14->11 [style = bold, label=""];
16->12 [style = bold, label=""];
39->36 [style = bold, label=""];
4->34 [style = bold, label=""];
12->39 [style = dashed, label="0"];
11->8 [style = solid, label="preexistingBytes"];
15->1 [style = bold, label=""];
}
