digraph {
58 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "maxTotalRows = 3L@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Thread.sleep(10)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
89 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "int i = 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
56 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,nextOffsets)))))@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@73@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
36 [style = filled, label = "i < numToAdd@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i++@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@67@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
84 [style = filled, label = "Thread.sleep(10)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
49 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "i < records.size()@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
88 [style = filled, label = "insertData()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "int i = numToAdd@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@67@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,currentOffsets)))))@@@52@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->46 [style = solid, label="desc6"];
34->9 [style = bold, label=""];
6->70 [style = bold, label=""];
47->67 [style = dashed, label="0"];
89->6 [style = solid, label="desc2"];
36->29 [style = bold, label=""];
16->11 [style = solid, label="desc4"];
37->76 [style = dashed, label="0"];
41->35 [style = solid, label="desc2"];
21->48 [style = bold, label=""];
31->17 [style = solid, label="desc6"];
41->11 [style = solid, label="desc2"];
74->85 [style = bold, label=""];
78->86 [style = solid, label="consumerProps"];
61->73 [style = dashed, label="0"];
51->10 [style = bold, label=""];
27->15 [style = solid, label="numToAdd"];
47->11 [style = bold, label=""];
61->64 [style = bold, label=""];
43->58 [style = solid, label="task"];
60->23 [style = solid, label="startPartitions"];
38->30 [style = bold, label=""];
1->6 [style = solid, label="desc1"];
1->48 [style = solid, label="desc1"];
3->66 [style = dashed, label="0"];
81->84 [style = dotted, label="true"];
30->60 [style = solid, label="currentOffsets"];
13->45 [style = bold, label=""];
6->23 [style = solid, label="currentOffsets"];
4->79 [style = bold, label=""];
50->33 [style = dotted, label="true"];
85->86 [style = solid, label="startPartitions"];
25->36 [style = solid, label="i"];
80->42 [style = bold, label=""];
79->88 [style = bold, label=""];
6->69 [style = solid, label="currentOffsets"];
16->62 [style = bold, label=""];
76->75 [style = bold, label=""];
43->55 [style = solid, label="task"];
43->31 [style = solid, label="task"];
58->11 [style = solid, label="desc1"];
30->57 [style = solid, label="currentOffsets"];
55->22 [style = solid, label="desc3"];
2->28 [style = solid, label="desc7"];
55->17 [style = solid, label="desc3"];
51->34 [style = dotted, label="true"];
9->51 [style = bold, label=""];
27->12 [style = bold, label=""];
83->43 [style = bold, label=""];
60->68 [style = dashed, label="0"];
24->0 [style = bold, label=""];
25->36 [style = bold, label=""];
66->8 [style = bold, label=""];
9->51 [style = solid, label="i"];
77->48 [style = bold, label=""];
59->4 [style = bold, label=""];
48->50 [style = bold, label=""];
43->20 [style = solid, label="task"];
57->60 [style = bold, label=""];
89->6 [style = bold, label=""];
31->2 [style = bold, label=""];
20->14 [style = bold, label=""];
45->36 [style = solid, label="i"];
6->48 [style = solid, label="currentOffsets"];
33->50 [style = bold, label=""];
50->49 [style = bold, label=""];
72->43 [style = bold, label=""];
54->69 [style = dashed, label="0"];
26->27 [style = bold, label=""];
15->9 [style = solid, label="i"];
15->51 [style = solid, label="i"];
18->65 [style = dashed, label="0"];
65->72 [style = bold, label=""];
52->69 [style = solid, label="nextOffsets"];
43->62 [style = solid, label="task"];
42->56 [style = bold, label=""];
58->8 [style = solid, label="desc1"];
5->61 [style = bold, label=""];
21->57 [style = dashed, label="0"];
71->42 [style = bold, label=""];
39->43 [style = solid, label="endPartitions"];
0->44 [style = bold, label=""];
19->46 [style = bold, label=""];
14->1 [style = dotted, label="true"];
36->29 [style = dotted, label="true"];
67->11 [style = bold, label=""];
48->5 [style = bold, label=""];
27->36 [style = solid, label="numToAdd"];
39->72 [style = dashed, label="0"];
21->70 [style = dashed, label="0"];
32->42 [style = bold, label=""];
73->83 [style = bold, label=""];
14->6 [style = bold, label=""];
2->17 [style = bold, label=""];
23->54 [style = bold, label=""];
86->1 [style = solid, label="task"];
60->37 [style = bold, label=""];
55->11 [style = solid, label="desc3"];
40->53 [style = bold, label=""];
63->65 [style = bold, label=""];
78->74 [style = bold, label=""];
22->19 [style = bold, label=""];
46->28 [style = bold, label=""];
58->17 [style = solid, label="desc1"];
59->43 [style = solid, label="baseSequenceName"];
6->21 [style = bold, label=""];
60->82 [style = bold, label=""];
68->63 [style = bold, label=""];
30->43 [style = solid, label="consumerProps"];
43->20 [style = bold, label=""];
60->43 [style = solid, label="startPartitions"];
45->36 [style = bold, label=""];
11->66 [style = bold, label=""];
16->19 [style = solid, label="desc4"];
6->70 [style = solid, label="currentOffsets"];
87->81 [style = bold, label=""];
18->75 [style = dashed, label="0"];
51->9 [style = dotted, label="true"];
75->86 [style = bold, label=""];
6->77 [style = bold, label=""];
52->53 [style = solid, label="nextOffsets"];
8->35 [style = bold, label=""];
31->11 [style = solid, label="desc6"];
57->68 [style = bold, label=""];
62->19 [style = solid, label="desc5"];
6->21 [style = solid, label="currentOffsets"];
52->54 [style = solid, label="nextOffsets"];
12->13 [style = bold, label=""];
72->43 [style = solid, label="endPartitions"];
54->24 [style = bold, label=""];
17->67 [style = bold, label=""];
86->89 [style = solid, label="task"];
18->39 [style = bold, label=""];
11->3 [style = bold, label=""];
41->17 [style = solid, label="desc2"];
52->40 [style = bold, label=""];
75->86 [style = solid, label="endPartitions"];
61->23 [style = bold, label=""];
3->8 [style = bold, label=""];
69->24 [style = bold, label=""];
49->7 [style = bold, label=""];
45->25 [style = solid, label="i"];
7->15 [style = bold, label=""];
6->54 [style = solid, label="currentOffsets"];
50->33 [style = bold, label=""];
55->16 [style = bold, label=""];
85->83 [style = solid, label="startPartitions"];
42->59 [style = bold, label=""];
56->59 [style = bold, label=""];
68->43 [style = solid, label="startPartitions"];
2->17 [style = solid, label="desc7"];
88->78 [style = bold, label=""];
81->84 [style = bold, label=""];
43->16 [style = solid, label="task"];
2->11 [style = solid, label="desc7"];
89->5 [style = solid, label="desc2"];
1->89 [style = bold, label=""];
62->11 [style = solid, label="desc5"];
23->83 [style = dashed, label="0"];
53->5 [style = bold, label=""];
41->55 [style = bold, label=""];
64->69 [style = bold, label=""];
17->47 [style = bold, label=""];
35->22 [style = bold, label=""];
86->87 [style = solid, label="task"];
24->20 [style = dashed, label="0"];
30->57 [style = bold, label=""];
39->43 [style = bold, label=""];
4->26 [style = bold, label=""];
29->25 [style = bold, label=""];
37->63 [style = dashed, label="0"];
10->52 [style = bold, label=""];
58->41 [style = bold, label=""];
14->1 [style = bold, label=""];
86->87 [style = bold, label=""];
70->48 [style = bold, label=""];
68->64 [style = solid, label="startPartitions"];
0->14 [style = dashed, label="0"];
62->17 [style = solid, label="desc5"];
59->86 [style = solid, label="baseSequenceName"];
62->31 [style = bold, label=""];
43->41 [style = solid, label="task"];
43->2 [style = solid, label="task"];
42->56 [style = dotted, label="true"];
52->40 [style = solid, label="nextOffsets"];
37->18 [style = bold, label=""];
85->76 [style = bold, label=""];
16->17 [style = solid, label="desc4"];
1->14 [style = bold, label=""];
44->58 [style = bold, label=""];
84->81 [style = bold, label=""];
36->38 [style = bold, label=""];
51->34 [style = bold, label=""];
81->30 [style = bold, label=""];
36->25 [style = dotted, label="true"];
82->73 [style = bold, label=""];
6->64 [style = solid, label="currentOffsets"];
23->64 [style = dashed, label="0"];
15->51 [style = bold, label=""];
}
