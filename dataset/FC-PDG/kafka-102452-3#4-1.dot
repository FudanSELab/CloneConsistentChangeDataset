digraph {
5 [style = filled, label = "final ProcessorStateManager stateMgr = new ProcessorStateManager(taskId,Task.TaskType.STANDBY,false,logContext,stateDirectory,changelogReader,emptyMap(),emptySet())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "stateMgr.registerStore(persistentStore,persistentStore.stateRestoreCallback)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldNotRegisterNonLoggedStore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final Map<TopicPartition,Long> read = checkpoint.read()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "shouldNotRegisterNonLoggedStore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final ProcessorStateManager stateMgr = new ProcessorStateManager(taskId,emptySet(),Task.TaskType.STANDBY,stateDirectory,emptyMap(),changelogReader,logContext)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{stateMgr.close()}@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "shouldNotWriteCheckpointForStoresWithoutChangelogTopic['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "stateMgr.checkpoint(singletonMap(persistentStorePartition,987L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{stateMgr.close()}@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertFalse(changelogReader.isPartitionRegistered(persistentStorePartition))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(read,equalTo(emptyMap()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->3 [style = bold, label=""];
5->3 [style = bold, label=""];
3->9 [style = bold, label=""];
11->8 [style = bold, label=""];
6->5 [style = bold, label=""];
4->1 [style = bold, label=""];
7->11 [style = bold, label=""];
1->5 [style = dashed, label="0"];
0->9 [style = dashed, label="0"];
9->7 [style = bold, label=""];
10->1 [style = bold, label=""];
7->11 [style = solid, label="read"];
3->0 [style = bold, label=""];
0->2 [style = bold, label=""];
}
