digraph {
4 [style = filled, label = "ArgumentCaptor<HttpEntity> argumentCaptor = ArgumentCaptor.forClass()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "testPut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "verify(restTemplate).put(serviceOne + \"/\" + path,request)@@@5@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ResponseEntity someEntity = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "retryableRestTemplate.delete(Env.DEV,path)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "retryableRestTemplate.put(Env.DEV,path,request)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(restTemplate).exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.PUT),argumentCaptor.capture(),(Class<Object>)isNull())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(request,argumentCaptor.getValue().getBody())@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testPut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "when(restTemplate.exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.PUT),any(),(Class<Object>)isNull())).thenReturn(someEntity)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "retryableRestTemplate.put(Env.DEV,path,request)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "testDelete['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "verify(restTemplate).delete(serviceOne + \"/\" + path)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6->11 [style = bold, label=""];
4->5 [style = bold, label=""];
12->0 [style = bold, label=""];
14->13 [style = bold, label=""];
11->4 [style = bold, label=""];
0->2 [style = bold, label=""];
0->14 [style = bold, label=""];
2->14 [style = dashed, label="0"];
3->0 [style = bold, label=""];
2->1 [style = bold, label=""];
8->10 [style = bold, label=""];
5->7 [style = bold, label=""];
1->13 [style = dashed, label="0"];
10->9 [style = bold, label=""];
9->6 [style = bold, label=""];
10->6 [style = solid, label="someEntity"];
}
