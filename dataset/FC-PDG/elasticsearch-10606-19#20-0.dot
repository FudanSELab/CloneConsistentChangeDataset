digraph {
7 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testExtractRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "rangeQuery2 = mapperService.fieldType(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,context)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,24),equalTo(20L))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "testExtractTermsAndRanges_partial['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,28),equalTo(20))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,8),equalTo(15L))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "addQueryFieldMappings()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "PhraseQuery phraseQuery = new PhraseQuery(\"field\",\"term\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Query rangeQuery2 = mapperService.fieldType(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,context)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(document.getFields().size(),equalTo(4))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "BooleanQuery.Builder bq = new BooleanQuery.Builder()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "IndexSettings settings = new IndexSettings(build,Settings.EMPTY)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "PercolatorFieldMapper.PercolatorFieldType fieldType = (PercolatorFieldMapper.PercolatorFieldType)fieldMapper.fieldType()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "IndexMetadata build = IndexMetadata.builder(\"\").settings(Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED,Version.CURRENT)).numberOfShards(1).numberOfReplicas(0).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "bq = new BooleanQuery.Builder()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "List<IndexableField> fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "QueryShardContext context = createSearchContext(indexService).getQueryShardContext()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(1L))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,12),equalTo(15))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,mapperService.documentMapperParser(),documentMapper,null,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "fieldMapper.processQuery(phraseQuery,parseContext)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(documentMapper,null,null)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(2L))@@@46@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Query rangeQuery1 = mapperService.fieldType(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,context)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PercolatorFieldMapper.PercolatorFieldType fieldType = (PercolatorFieldMapper.PercolatorFieldType)fieldMapper.fieldType()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "testExtractRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
46 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(documentMapper,null,null)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "DocumentMapper documentMapper = mapperService.documentMapper()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(settings,mapperService.documentMapperParser(),documentMapper,null,null)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertThat(document.getFields().get(0).binaryValue().utf8ToString(),equalTo(\"field term\"))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "document = parseContext.doc()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15->10 [style = bold, label=""];
16->37 [style = bold, label=""];
29->5 [style = bold, label=""];
13->47 [style = bold, label=""];
56->52 [style = bold, label=""];
53->38 [style = solid, label="parseContext"];
38->51 [style = bold, label=""];
17->9 [style = bold, label=""];
33->20 [style = solid, label="parseContext"];
40->15 [style = bold, label=""];
49->48 [style = bold, label=""];
24->30 [style = bold, label=""];
22->4 [style = bold, label=""];
47->22 [style = bold, label=""];
8->1 [style = bold, label=""];
3->36 [style = bold, label=""];
28->21 [style = bold, label=""];
18->22 [style = bold, label=""];
52->53 [style = solid, label="settings"];
11->13 [style = bold, label=""];
22->38 [style = dashed, label="0"];
37->19 [style = solid, label="rangeQuery2"];
43->0 [style = bold, label=""];
18->22 [style = solid, label="parseContext"];
53->38 [style = bold, label=""];
9->29 [style = bold, label=""];
56->52 [style = solid, label="build"];
25->28 [style = bold, label=""];
41->32 [style = bold, label=""];
49->53 [style = solid, label="documentMapper"];
11->33 [style = solid, label="settings"];
36->41 [style = bold, label=""];
4->2 [style = bold, label=""];
40->25 [style = solid, label="context"];
11->18 [style = bold, label=""];
1->17 [style = bold, label=""];
18->50 [style = bold, label=""];
26->16 [style = bold, label=""];
35->40 [style = bold, label=""];
20->8 [style = bold, label=""];
38->47 [style = solid, label="documentMapper"];
5->6 [style = bold, label=""];
47->22 [style = solid, label="parseContext"];
10->25 [style = bold, label=""];
15->38 [style = solid, label="phraseQuery"];
12->14 [style = bold, label=""];
21->7 [style = bold, label=""];
46->20 [style = bold, label=""];
19->46 [style = bold, label=""];
40->37 [style = solid, label="context"];
32->42 [style = bold, label=""];
13->18 [style = bold, label=""];
19->33 [style = bold, label=""];
40->21 [style = solid, label="context"];
2->3 [style = bold, label=""];
0->12 [style = bold, label=""];
42->39 [style = bold, label=""];
34->11 [style = solid, label="build"];
54->15 [style = bold, label=""];
25->16 [style = solid, label="rangeQuery1"];
34->22 [style = solid, label="build"];
6->27 [style = bold, label=""];
14->23 [style = bold, label=""];
31->44 [style = bold, label=""];
30->31 [style = bold, label=""];
38->34 [style = bold, label=""];
21->7 [style = solid, label="rangeQuery2"];
27->24 [style = bold, label=""];
38->18 [style = solid, label="documentMapper"];
45->40 [style = bold, label=""];
15->49 [style = bold, label=""];
18->47 [style = dashed, label="0"];
48->56 [style = bold, label=""];
33->20 [style = bold, label=""];
52->53 [style = bold, label=""];
38->46 [style = solid, label="documentMapper"];
39->43 [style = bold, label=""];
23->26 [style = bold, label=""];
33->46 [style = dashed, label="0"];
25->28 [style = solid, label="rangeQuery1"];
34->11 [style = bold, label=""];
7->38 [style = bold, label=""];
38->33 [style = solid, label="documentMapper"];
37->19 [style = bold, label=""];
51->34 [style = bold, label=""];
55->54 [style = bold, label=""];
34->20 [style = solid, label="build"];
46->20 [style = solid, label="parseContext"];
11->18 [style = solid, label="settings"];
}
