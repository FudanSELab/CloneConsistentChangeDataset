digraph {
77 [style = filled, label = "Thread.sleep(10)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@31@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Thread.sleep(10)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "kafkaProducer.beginTransaction()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "i < records.size()@@@38@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "insertData()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "kafkaProducer.initTransactions()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "i < numToAdd@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "int i = numToAdd@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,0L))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
62 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "int numToAdd = records.size() - 2@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@70@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "i++@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "kafkaProducer.initTransactions()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@31@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "int i = 0@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(topic,currentOffsets,ImmutableSet.of())),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,nextOffsets)))))@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "kafkaProducer.commitTransaction()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,3L,1,0L))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "maxTotalRows = 3L@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,currentOffsets)))))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,1L,1,0L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "kafkaProducer.beginTransaction()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "i++@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->28 [style = solid, label="desc2"];
63->13 [style = solid, label="desc2"];
42->15 [style = solid, label="desc7"];
5->55 [style = bold, label=""];
57->31 [style = bold, label=""];
28->6 [style = bold, label=""];
7->62 [style = bold, label=""];
74->65 [style = bold, label=""];
38->5 [style = solid, label="desc1"];
43->35 [style = dotted, label="true"];
52->8 [style = solid, label="desc5"];
54->57 [style = bold, label=""];
11->8 [style = solid, label="desc4"];
46->27 [style = solid, label="baseSequenceName"];
23->68 [style = bold, label=""];
61->46 [style = bold, label=""];
35->43 [style = bold, label=""];
19->64 [style = dashed, label="0"];
68->73 [style = bold, label=""];
10->1 [style = dashed, label="0"];
17->65 [style = dashed, label="0"];
24->21 [style = bold, label=""];
7->62 [style = solid, label="nextOffsets"];
60->27 [style = solid, label="consumerProps"];
3->13 [style = solid, label="desc1"];
11->28 [style = solid, label="desc4"];
63->13 [style = bold, label=""];
43->0 [style = bold, label=""];
75->77 [style = bold, label=""];
17->44 [style = bold, label=""];
41->54 [style = bold, label=""];
47->34 [style = bold, label=""];
73->76 [style = bold, label=""];
25->51 [style = solid, label="i"];
7->50 [style = solid, label="nextOffsets"];
56->53 [style = bold, label=""];
75->60 [style = bold, label=""];
13->69 [style = bold, label=""];
27->52 [style = solid, label="task"];
39->58 [style = solid, label="desc3"];
7->44 [style = solid, label="nextOffsets"];
45->3 [style = dotted, label="true"];
9->39 [style = bold, label=""];
59->60 [style = bold, label=""];
60->37 [style = solid, label="currentOffsets"];
4->51 [style = dotted, label="true"];
77->75 [style = bold, label=""];
22->50 [style = bold, label=""];
38->26 [style = solid, label="desc1"];
51->4 [style = solid, label="i"];
13->54 [style = solid, label="currentOffsets"];
14->38 [style = bold, label=""];
4->18 [style = bold, label=""];
30->74 [style = dashed, label="0"];
3->63 [style = bold, label=""];
40->5 [style = solid, label="desc6"];
36->14 [style = bold, label=""];
71->75 [style = bold, label=""];
29->27 [style = bold, label=""];
46->72 [style = solid, label="baseSequenceName"];
65->27 [style = bold, label=""];
22->62 [style = dashed, label="0"];
31->57 [style = bold, label=""];
52->5 [style = solid, label="desc5"];
43->0 [style = dotted, label="true"];
72->71 [style = bold, label=""];
27->38 [style = solid, label="task"];
41->33 [style = dashed, label="0"];
3->54 [style = solid, label="desc1"];
2->78 [style = dashed, label="0"];
39->28 [style = solid, label="desc3"];
18->7 [style = bold, label=""];
4->32 [style = dotted, label="true"];
26->48 [style = bold, label=""];
1->45 [style = bold, label=""];
79->72 [style = solid, label="startPartitions"];
32->51 [style = bold, label=""];
36->45 [style = dashed, label="0"];
40->12 [style = solid, label="desc6"];
64->72 [style = bold, label=""];
21->47 [style = bold, label=""];
43->59 [style = bold, label=""];
48->58 [style = bold, label=""];
27->39 [style = solid, label="task"];
6->26 [style = bold, label=""];
30->17 [style = bold, label=""];
25->4 [style = solid, label="i"];
72->3 [style = solid, label="task"];
51->4 [style = bold, label=""];
38->28 [style = solid, label="desc1"];
42->28 [style = solid, label="desc7"];
34->49 [style = bold, label=""];
19->29 [style = bold, label=""];
58->8 [style = bold, label=""];
3->45 [style = bold, label=""];
9->5 [style = solid, label="desc2"];
38->9 [style = bold, label=""];
78->64 [style = bold, label=""];
60->33 [style = solid, label="currentOffsets"];
70->46 [style = bold, label=""];
49->35 [style = solid, label="i"];
37->66 [style = bold, label=""];
27->9 [style = solid, label="task"];
13->17 [style = solid, label="currentOffsets"];
39->5 [style = solid, label="desc3"];
72->63 [style = solid, label="task"];
13->41 [style = bold, label=""];
7->22 [style = bold, label=""];
72->71 [style = solid, label="task"];
21->25 [style = solid, label="numToAdd"];
37->17 [style = solid, label="startPartitions"];
76->67 [style = bold, label=""];
29->27 [style = solid, label="endPartitions"];
52->40 [style = bold, label=""];
37->27 [style = solid, label="startPartitions"];
64->72 [style = solid, label="endPartitions"];
9->48 [style = solid, label="desc2"];
52->28 [style = solid, label="desc5"];
37->2 [style = bold, label=""];
76->72 [style = solid, label="consumerProps"];
42->5 [style = solid, label="desc7"];
67->79 [style = bold, label=""];
33->37 [style = bold, label=""];
40->28 [style = solid, label="desc6"];
46->23 [style = bold, label=""];
8->12 [style = bold, label=""];
35->43 [style = solid, label="i"];
7->22 [style = solid, label="nextOffsets"];
16->46 [style = bold, label=""];
27->42 [style = solid, label="task"];
57->31 [style = dotted, label="true"];
21->43 [style = solid, label="numToAdd"];
27->1 [style = bold, label=""];
2->19 [style = bold, label=""];
53->25 [style = bold, label=""];
45->3 [style = bold, label=""];
66->74 [style = bold, label=""];
50->20 [style = bold, label=""];
12->15 [style = bold, label=""];
44->10 [style = bold, label=""];
69->54 [style = bold, label=""];
25->4 [style = bold, label=""];
54->20 [style = bold, label=""];
45->13 [style = bold, label=""];
11->52 [style = bold, label=""];
13->41 [style = solid, label="currentOffsets"];
13->44 [style = solid, label="currentOffsets"];
39->11 [style = bold, label=""];
49->43 [style = bold, label=""];
75->77 [style = dotted, label="true"];
10->36 [style = bold, label=""];
79->65 [style = solid, label="startPartitions"];
57->56 [style = bold, label=""];
27->1 [style = solid, label="task"];
23->24 [style = bold, label=""];
60->33 [style = bold, label=""];
11->5 [style = solid, label="desc4"];
79->78 [style = bold, label=""];
27->11 [style = solid, label="task"];
0->35 [style = bold, label=""];
62->50 [style = bold, label=""];
63->20 [style = solid, label="desc2"];
49->43 [style = solid, label="i"];
42->5 [style = bold, label=""];
20->30 [style = bold, label=""];
27->40 [style = solid, label="task"];
40->42 [style = bold, label=""];
4->32 [style = bold, label=""];
55->28 [style = bold, label=""];
}
