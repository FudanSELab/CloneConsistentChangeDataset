digraph {
22 [style = filled, label = "fetchRecords(tp0,records,Errors.NONE,100L,0)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "v < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testFetchResponseMetricsPartialResponse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "subscriptions.seek(tp2,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "subscriptions.assignFromUser(singleton(tp1))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "KafkaMetric recordsCountAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "KafkaMetric fetchSizeAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(2,recordsCountAverage.value(),EPSILON)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "subscriptions.seek(tp0,1)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "int expectedBytes = 0@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "subscriptions.seek(tp1,1)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "partitions.put(tp1,new FetchResponse.PartitionData(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,records))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "partitions.put(tp2,new FetchResponse.PartitionData(Errors.OFFSET_OUT_OF_RANGE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,MemoryRecords.EMPTY))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "fetchRecords(tp1,records,Errors.NONE,100L,0)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "MemoryRecords records = builder.build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Map<TopicPartition,FetchResponse.PartitionData> partitions = new HashMap<>()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testFetchResponseMetricsPartialResponse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "subscriptions.seek(tp1,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "assertEquals(3,recordsCountAverage.value(),EPSILON)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "client.prepareResponse(new FetchResponse(new LinkedHashMap<>(partitions),0))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "v++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "fetcher.fetchedRecords()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "subscriptions.assignFromUser(singleton(tp0))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "consumerClient.poll(0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "subscriptions.assignFromUser(Utils.mkSet(tp1,tp2))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "int v = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "record.offset() >= 1@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testFetchResponseMetricsWithOnePartitionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->2 [style = solid, label="v"];
11->16 [style = bold, label=""];
34->29 [style = bold, label=""];
30->24 [style = bold, label=""];
35->27 [style = bold, label=""];
5->0 [style = solid, label="expectedBytes"];
16->18 [style = bold, label=""];
27->36 [style = bold, label=""];
16->11 [style = bold, label=""];
8->15 [style = bold, label=""];
9->0 [style = bold, label=""];
26->32 [style = bold, label=""];
28->37 [style = bold, label=""];
1->10 [style = dotted, label="true"];
12->37 [style = dashed, label="0"];
4->6 [style = bold, label=""];
16->18 [style = dotted, label="true"];
7->24 [style = dashed, label="0"];
25->30 [style = bold, label=""];
0->12 [style = bold, label=""];
36->31 [style = bold, label=""];
24->39 [style = bold, label=""];
15->21 [style = solid, label="v"];
1->21 [style = dotted, label="true"];
13->21 [style = solid, label="v"];
9->22 [style = dashed, label="0"];
1->38 [style = solid, label="v"];
13->38 [style = dotted, label="true"];
32->34 [style = bold, label=""];
16->22 [style = bold, label=""];
11->9 [style = bold, label=""];
18->0 [style = solid, label="expectedBytes"];
2->38 [style = solid, label="v"];
1->13 [style = bold, label=""];
7->3 [style = bold, label=""];
13->1 [style = bold, label=""];
38->2 [style = bold, label=""];
33->26 [style = bold, label=""];
2->13 [style = bold, label=""];
13->1 [style = solid, label="v"];
29->28 [style = bold, label=""];
5->16 [style = bold, label=""];
15->10 [style = solid, label="v"];
1->13 [style = dotted, label="true"];
11->0 [style = solid, label="expectedBytes"];
29->28 [style = solid, label="expectedBytes"];
13->2 [style = dotted, label="true"];
18->22 [style = bold, label=""];
1->13 [style = solid, label="v"];
22->0 [style = bold, label=""];
20->23 [style = bold, label=""];
10->13 [style = bold, label=""];
21->13 [style = bold, label=""];
2->9 [style = solid, label="records"];
17->14 [style = bold, label=""];
39->17 [style = bold, label=""];
1->21 [style = bold, label=""];
7->19 [style = dashed, label="0"];
31->33 [style = bold, label=""];
23->19 [style = bold, label=""];
15->1 [style = solid, label="v"];
15->13 [style = solid, label="v"];
2->22 [style = solid, label="records"];
5->27 [style = solid, label="records"];
6->23 [style = dashed, label="0"];
13->5 [style = bold, label=""];
3->17 [style = bold, label=""];
13->38 [style = bold, label=""];
6->30 [style = dashed, label="0"];
14->8 [style = bold, label=""];
1->2 [style = bold, label=""];
6->7 [style = bold, label=""];
13->10 [style = solid, label="v"];
1->10 [style = bold, label=""];
16->11 [style = dotted, label="true"];
19->3 [style = bold, label=""];
5->35 [style = bold, label=""];
16->9 [style = bold, label=""];
2->13 [style = solid, label="v"];
35->33 [style = solid, label="partitions"];
2->5 [style = bold, label=""];
15->1 [style = bold, label=""];
18->16 [style = bold, label=""];
}
