digraph {
8 [style = filled, label = "operands.add(simplified)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "RexNode operand@@@12@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "a.getKind()@@@25@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "!a.getType().isNullable()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,operand))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "simplifyIsNull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RexNode simplified = simplifyIsNull(operand)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "((RexCall)a).getOperands()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "predicates.pulledUpPredicates.contains(a)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "return null@@@29@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "simplifyIsNotNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final List<RexNode> operands = new ArrayList<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "simplifyIsNull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Strong.policy(a.getKind())@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "operands.add(rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL,operand))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "RexNode a@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "((RexCall)a).getOperands()@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "((RexCall)a).getOperands()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "simplified == null@@@14@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "final RexNode simplified = simplifyIsNotNull(operand)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "return RexUtil.composeDisjunction(rexBuilder,operands,false)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "throw new AssertionError(\"every CUSTOM policy needs a handler, \" + a.getKind())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return RexUtil.composeConjunction(rexBuilder,operands,false)@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "RexNode a@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "return rexBuilder.makeLiteral(false)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "simplified.isAlwaysFalse()@@@17@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "return rexBuilder.makeLiteral(!((RexLiteral)a).isNull())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "return rexBuilder.makeLiteral(true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->22 [style = bold, label=""];
5->1 [style = bold, label=""];
11->27 [style = dashed, label="0"];
25->26 [style = bold, label=""];
8->31 [style = bold, label=""];
15->6 [style = bold, label=""];
12->24 [style = bold, label=""];
4->19 [style = solid, label="operands"];
12->5 [style = dotted, label="true"];
12->16 [style = bold, label=""];
18->11 [style = dotted, label="true"];
12->29 [style = dotted, label="true"];
31->8 [style = solid, label="simplified"];
22->28 [style = bold, label=""];
12->14 [style = dotted, label="true"];
7->5 [style = solid, label="simplified"];
9->23 [style = dashed, label="0"];
6->19 [style = dashed, label="0"];
9->12 [style = bold, label=""];
12->24 [style = dotted, label="true"];
12->7 [style = dotted, label="true"];
1->8 [style = dotted, label="false"];
5->10 [style = dotted, label="true"];
4->6 [style = solid, label="operands"];
22->28 [style = dotted, label="true"];
26->16 [style = bold, label=""];
1->15 [style = dotted, label="true"];
12->16 [style = dotted, label="true"];
5->21 [style = dotted, label="true"];
1->8 [style = bold, label=""];
15->31 [style = bold, label=""];
12->31 [style = dotted, label="true"];
15->7 [style = bold, label=""];
27->22 [style = solid, label="a"];
10->7 [style = bold, label=""];
6->29 [style = bold, label=""];
12->4 [style = dotted, label="true"];
2->12 [style = bold, label=""];
31->5 [style = bold, label=""];
0->11 [style = dotted, label="true"];
1->15 [style = bold, label=""];
12->29 [style = bold, label=""];
4->31 [style = bold, label=""];
12->6 [style = dotted, label="true"];
21->6 [style = bold, label=""];
5->8 [style = dotted, label="false"];
8->19 [style = bold, label=""];
2->23 [style = dotted, label="true"];
4->7 [style = bold, label=""];
5->8 [style = bold, label=""];
10->6 [style = bold, label=""];
7->31 [style = dashed, label="0"];
12->19 [style = dotted, label="true"];
12->4 [style = bold, label=""];
24->4 [style = bold, label=""];
29->26 [style = dotted, label="true"];
8->6 [style = bold, label=""];
29->25 [style = bold, label=""];
6->16 [style = bold, label=""];
19->16 [style = bold, label=""];
2->9 [style = bold, label=""];
5->21 [style = bold, label=""];
12->3 [style = bold, label=""];
7->5 [style = bold, label=""];
8->7 [style = bold, label=""];
22->12 [style = bold, label=""];
5->1 [style = dotted, label="false"];
3->4 [style = bold, label=""];
18->2 [style = bold, label=""];
28->12 [style = bold, label=""];
30->27 [style = dotted, label="true"];
2->9 [style = dotted, label="true"];
7->8 [style = solid, label="simplified"];
12->13 [style = dotted, label="true"];
30->2 [style = bold, label=""];
10->21 [style = dashed, label="0"];
3->24 [style = dashed, label="0"];
12->20 [style = dotted, label="true"];
5->10 [style = bold, label=""];
10->19 [style = bold, label=""];
12->17 [style = dotted, label="true"];
31->5 [style = solid, label="simplified"];
2->22 [style = bold, label=""];
29->25 [style = dotted, label="true"];
0->2 [style = bold, label=""];
21->31 [style = bold, label=""];
2->23 [style = bold, label=""];
12->3 [style = dotted, label="true"];
29->26 [style = bold, label=""];
}
