digraph {
8 [style = filled, label = "return Types.optional(BINARY).as(LogicalTypeAnnotation.StringLogicalTypeAnnotation.stringType()).named(columnName)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "buildSchema['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "throw new RuntimeException(\"Unsupported Repetition type\")@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return Types.optional(BINARY).as(UTF8).named(columnName)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "optionalOrRequired(this.jsonSchema)@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "this.repeated@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String columnName = this.jsonSchema.getColumnName()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "return Types.repeated(BINARY).as(UTF8).named(columnName)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "return Types.repeated(BINARY).as(LogicalTypeAnnotation.StringLogicalTypeAnnotation.stringType()).named(columnName)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "buildSchema['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return Types.required(BINARY).as(LogicalTypeAnnotation.StringLogicalTypeAnnotation.stringType()).named(columnName)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "buildSchema['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "return Types.required(BINARY).as(UTF8).named(columnName)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->8 [style = dotted, label="true"];
5->0 [style = dotted, label="true"];
4->6 [style = bold, label=""];
11->4 [style = bold, label=""];
5->10 [style = dotted, label="true"];
5->8 [style = bold, label=""];
2->5 [style = bold, label=""];
5->3 [style = dotted, label="true"];
5->1 [style = bold, label=""];
12->4 [style = bold, label=""];
2->9 [style = dashed, label="0"];
0->10 [style = dashed, label="0"];
4->3 [style = solid, label="columnName"];
5->10 [style = bold, label=""];
0->1 [style = bold, label=""];
6->2 [style = bold, label=""];
4->9 [style = solid, label="columnName"];
6->9 [style = bold, label=""];
10->1 [style = bold, label=""];
5->0 [style = bold, label=""];
7->4 [style = bold, label=""];
3->0 [style = bold, label=""];
6->5 [style = bold, label=""];
6->9 [style = dotted, label="true"];
4->8 [style = solid, label="columnName"];
5->1 [style = dotted, label="true"];
5->3 [style = bold, label=""];
6->2 [style = dotted, label="true"];
3->8 [style = dashed, label="0"];
4->2 [style = solid, label="columnName"];
9->5 [style = bold, label=""];
4->10 [style = solid, label="columnName"];
8->10 [style = bold, label=""];
4->0 [style = solid, label="columnName"];
}
