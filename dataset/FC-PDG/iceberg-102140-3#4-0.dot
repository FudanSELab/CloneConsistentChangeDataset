digraph {
6 [style = filled, label = "ignoreDeleted@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "matchingManifests = Iterables.filter(matchingManifests,null)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Iterable<ManifestFile> matchingManifests = evalCache == null? dataManifests: Iterables.filter(dataManifests,null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Evaluator evaluator = new Evaluator(DataFile.getType(EMPTY_STRUCT),fileFilter,caseSensitive)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "deleteManifestReaders['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "LoadingCache<Integer,ManifestEvaluator> evalCache = specsById == null? null: Caffeine.newBuilder().build(null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "BiFunction<ManifestFile,CloseableIterable<ManifestEntry<DataFile>>,CloseableIterable<T>> entryFn@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Iterable<ManifestFile> matchingManifests = evalCache == null? deleteManifests: Iterables.filter(deleteManifests,null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "matchingManifests = Iterables.filter(matchingManifests,null)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return Iterables.transform(matchingManifests,null)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "entries['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "matchingManifests = Iterables.filter(matchingManifests,null)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "return Iterables.transform(matchingManifests,null)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "return Iterables.transform(matchingManifests,null)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "deleteManifestReaders['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ignoreExisting@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
11->7 [style = solid, label="matchingManifests"];
3->2 [style = solid, label="evalCache"];
11->13 [style = solid, label="matchingManifests"];
7->12 [style = bold, label=""];
13->7 [style = solid, label="matchingManifests"];
7->12 [style = solid, label="matchingManifests"];
6->13 [style = dotted, label="true"];
11->6 [style = bold, label=""];
3->14 [style = bold, label=""];
2->0 [style = solid, label="matchingManifests"];
8->3 [style = bold, label=""];
11->10 [style = solid, label="matchingManifests"];
1->3 [style = bold, label=""];
8->15 [style = dotted, label="true"];
0->4 [style = dashed, label="0"];
9->10 [style = bold, label=""];
9->7 [style = bold, label=""];
13->10 [style = solid, label="matchingManifests"];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
6->13 [style = bold, label=""];
10->7 [style = solid, label="matchingManifests"];
13->9 [style = bold, label=""];
6->9 [style = bold, label=""];
9->10 [style = dotted, label="true"];
14->11 [style = bold, label=""];
3->11 [style = solid, label="evalCache"];
2->4 [style = solid, label="matchingManifests"];
}
