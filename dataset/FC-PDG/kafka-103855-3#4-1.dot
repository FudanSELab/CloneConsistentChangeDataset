digraph {
5 [style = filled, label = "assertNull(errorResult1.partitionResult(tp1).get())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final TopicPartition tp1 = new TopicPartition(\"foo\",0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Cluster cluster = new Cluster(\"mockClusterId\",nodes.values(),Collections.emptyList(),Collections.emptySet(),Collections.emptySet(),nodes.get(0))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testDeleteConsumerGroupOffsetsRetriableErrors['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNull(result.all().get())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,Node.noNode()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final String groupId = \"group-0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertNull(result.partitionResult(tp1).get())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE,env.cluster().controller()))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetCommitResponse(tp1,Errors.NONE))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "nodes.put(0,new Node(0,\"localhost\",8121))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final Map<Integer,Node> nodes = new HashMap<>()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS,Node.noNode()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "env.kafkaClient().prepareResponse(prepareFindCoordinatorResponse(Errors.NONE,env.cluster().controller()))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testDeleteConsumerGroupOffsetsRetriableErrors['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "offsets.put(tp1,new OffsetAndMetadata(123L))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final AlterConsumerGroupOffsetsResult result = env.adminClient().alterConsumerGroupOffsets(groupId,offsets)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNull(errorResult1.all().get())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "env.kafkaClient().prepareResponse(prepareOffsetDeleteResponse(\"foo\",0,Errors.NONE))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<TopicPartition,OffsetAndMetadata> offsets = new HashMap<>()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient().deleteConsumerGroupOffsets(groupId,Stream.of(tp1).collect(Collectors.toSet()))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
15->10 [style = bold, label=""];
16->13 [style = bold, label=""];
20->17 [style = bold, label=""];
13->20 [style = solid, label="groupId"];
14->22 [style = solid, label="tp1"];
23->20 [style = solid, label="offsets"];
9->0 [style = bold, label=""];
12->5 [style = bold, label=""];
2->1 [style = bold, label=""];
19->20 [style = bold, label=""];
25->9 [style = bold, label=""];
3->15 [style = bold, label=""];
4->2 [style = bold, label=""];
11->9 [style = bold, label=""];
22->23 [style = bold, label=""];
0->22 [style = dashed, label="0"];
11->18 [style = bold, label=""];
0->7 [style = bold, label=""];
6->4 [style = bold, label=""];
10->8 [style = bold, label=""];
13->1 [style = solid, label="groupId"];
23->19 [style = bold, label=""];
7->6 [style = bold, label=""];
18->25 [style = bold, label=""];
1->12 [style = bold, label=""];
14->19 [style = solid, label="tp1"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
17->21 [style = bold, label=""];
8->13 [style = bold, label=""];
24->15 [style = bold, label=""];
}
