digraph {
36 [style = filled, label = "Assert.assertEquals(jobStatus.getFlowExecutionId(),flowExecutionId)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "JobStatus jobStatus = jobStatusIterator.next()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(jobStatus.getJobName(),MY_JOB_NAME_1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(jobStatus.getJobGroup(),myJobGroup)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(jobStatus.getFlowName(),FLOW_NAME)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "jobStatus = jobStatusIterator.next()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertFalse(jobStatusIterator.hasNext())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME,FLOW_GROUP,flowExecutionId,MY_JOB_NAME_1,myJobGroup)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "addJobStatusToStateStore(flowExecutionId,MY_JOB_NAME_1,ExecutionStatus.RUNNING.name(),JOB_START_TIME,JOB_START_TIME)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "jobStatus.getJobName().equals(JobStatusRetriever.NA_KEY)@@@25@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "Assert.assertTrue(jobStatusIterator.hasNext())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testGetJobStatusesForFlowExecution1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertTrue(jobStatusIterator.hasNext())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(jobStatus.getJobName(),nextExpectedJobName)@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "jobStatus = jobStatusIterator.next()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "jobStatus = jobStatusIterator.next()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(jobStatus.getMessage(),MESSAGE)@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(jobStatus.getJobGroup(),JobStatusRetriever.NA_KEY)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(jobStatus.getEventName(),ExecutionStatus.RUNNING.name())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(jobStatus.getProcessedCount(),0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(jobStatus.getEventName(),ExecutionStatus.COMPILED.name())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "long flowExecutionId = 1234L@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "long flowExecutionId = 1234L@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testGetJobStatusesForFlowExecution['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testGetJobStatusesForFlowExecution['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME,FLOW_GROUP,flowExecutionId,MY_JOB_NAME_1,MY_JOB_GROUP)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "addJobStatusToStateStore(flowExecutionId,JobStatusRetriever.NA_KEY,ExecutionStatus.COMPILED.name())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertEquals(jobStatus.getJobExecutionId(),JOB_EXECUTION_ID)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "jobStatus = jobStatusIterator.next()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(jobStatusIterator.hasNext())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName))? MY_JOB_NAME_2: MY_JOB_NAME_1@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertEquals(jobStatus.getFlowGroup(),FLOW_GROUP)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(jobStatus.getHighWatermark(),\"\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "addJobStatusToStateStore(flowExecutionId,MY_JOB_NAME_2,ExecutionStatus.RUNNING.name())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(jobStatus.getJobGroup(),jobGroup)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(jobStatus.getJobName(),JobStatusRetriever.NA_KEY)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Long flowExecutionId = 1234L@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME,FLOW_GROUP,flowExecutionId)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(jobStatus.getLowWatermark(),\"\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "String jobName = jobStatus.getJobName()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME,FLOW_GROUP,flowExecutionId)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME,FLOW_GROUP,flowExecutionId)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19->33 [style = bold, label=""];
0->1 [style = solid, label="flowExecutionId"];
32->1 [style = solid, label="flowExecutionId"];
4->3 [style = bold, label=""];
11->28 [style = bold, label=""];
0->23 [style = solid, label="flowExecutionId"];
42->37 [style = bold, label=""];
40->35 [style = bold, label=""];
23->5 [style = bold, label=""];
34->40 [style = bold, label=""];
36->41 [style = bold, label=""];
21->27 [style = bold, label=""];
21->22 [style = solid, label="nextExpectedJobName"];
31->24 [style = bold, label=""];
0->32 [style = dashed, label="0"];
25->18 [style = bold, label=""];
3->11 [style = bold, label=""];
14->10 [style = bold, label=""];
16->25 [style = bold, label=""];
13->10 [style = dashed, label="0"];
6->34 [style = dashed, label="0"];
0->39 [style = dashed, label="0"];
32->23 [style = solid, label="flowExecutionId"];
32->15 [style = solid, label="flowExecutionId"];
2->10 [style = bold, label=""];
12->0 [style = bold, label=""];
38->39 [style = bold, label=""];
17->19 [style = bold, label=""];
9->16 [style = bold, label=""];
1->23 [style = bold, label=""];
28->14 [style = bold, label=""];
6->15 [style = bold, label=""];
20->22 [style = bold, label=""];
19->24 [style = bold, label=""];
26->21 [style = bold, label=""];
19->41 [style = dashed, label="0"];
37->5 [style = bold, label=""];
0->11 [style = solid, label="flowExecutionId"];
7->9 [style = bold, label=""];
32->30 [style = solid, label="flowExecutionId"];
39->36 [style = solid, label="flowExecutionId"];
8->17 [style = bold, label=""];
5->2 [style = bold, label=""];
24->26 [style = bold, label=""];
39->42 [style = solid, label="flowExecutionId"];
30->28 [style = bold, label=""];
18->4 [style = bold, label=""];
10->34 [style = bold, label=""];
0->3 [style = solid, label="flowExecutionId"];
10->13 [style = bold, label=""];
32->3 [style = solid, label="flowExecutionId"];
26->21 [style = solid, label="jobName"];
0->1 [style = bold, label=""];
33->24 [style = bold, label=""];
29->32 [style = bold, label=""];
32->1 [style = bold, label=""];
33->31 [style = bold, label=""];
2->7 [style = bold, label=""];
13->6 [style = bold, label=""];
0->8 [style = solid, label="flowExecutionId"];
35->36 [style = bold, label=""];
11->30 [style = dashed, label="0"];
17->36 [style = dashed, label="0"];
39->42 [style = bold, label=""];
3->30 [style = bold, label=""];
27->20 [style = bold, label=""];
15->8 [style = bold, label=""];
0->15 [style = solid, label="flowExecutionId"];
32->8 [style = solid, label="flowExecutionId"];
33->31 [style = dotted, label="true"];
}
