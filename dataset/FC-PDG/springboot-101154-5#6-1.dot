digraph {
0 [style = filled, label = "this.loggingSystem.initialize(this.initializationContext,null,getLogFile(null,tmpDir()))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(fileContents).contains(\"(junit-\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "this.loggingSystem.initialize(null,null,getLogFile(null,tmpDir()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String fileContents = contentOf(new File(tmpDir() + \"/spring.log\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "exceptionsIncludeClassPackaging['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "this.loggingSystem.beforeInitialize()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "exceptionsIncludeClassPackaging['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "CapturedOutput output@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "this.logger.warn(\"Expected exception\",new RuntimeException(\"Expected\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "exceptionsIncludeClassPackaging['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "this.output.expect(expectedOutput)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Matcher<String> expectedOutput = containsString(\"(junit-\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(output).contains(\"(junit-\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(fileContents).is(Matched.by(expectedOutput))@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
11->8 [style = dotted, label="true"];
10->9 [style = bold, label=""];
12->3 [style = bold, label=""];
6->0 [style = bold, label=""];
13->6 [style = bold, label=""];
3->7 [style = solid, label="expectedOutput"];
3->5 [style = solid, label="expectedOutput"];
5->10 [style = dashed, label="0"];
3->7 [style = bold, label=""];
1->10 [style = bold, label=""];
0->12 [style = dashed, label="0"];
4->6 [style = bold, label=""];
7->2 [style = bold, label=""];
2->1 [style = bold, label=""];
11->6 [style = bold, label=""];
0->2 [style = bold, label=""];
6->12 [style = bold, label=""];
}
