digraph {
6 [style = filled, label = "assertTrue(builder.hasOneofNestedMessage())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(message.hasPayload())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "NestedTestAllTypes message = parentBuilder.build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooMessage(TestOneof2.NestedMessage.newBuilder().setQuxInt(234).build()).build()TestOneof2 message2 = TestOneof2.newBuilder().mergeFrom(message).build()assertThat(message2.hasFooMessage()).isTrue()assertThat(message2.getFooMessage().getQuxInt()).isEqualTo(234)}@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testOneofMerge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestAllTypes.Builder builder = parentBuilder.getPayloadBuilder()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testOneofMerge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "NestedTestAllTypes.Builder parentBuilder = NestedTestAllTypes.newBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testOneofNestedBuilderOnChangePropagation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooEnum(TestOneof2.NestedEnum.BAR).build()TestOneof2 message2 = TestOneof2.newBuilder().mergeFrom(message).build()assertThat(message2.hasFooEnum()).isTrue()assertThat(message2.getFooEnum()).isEqualTo(TestOneof2.NestedEnum.BAR)}@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(message.getPayload().hasOneofNestedMessage())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(parentBuilder.hasPayload())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooString(\"foo\").build()TestOneof2 message2 = TestOneof2.newBuilder().mergeFrom(message).build()assertThat(message2.hasFooString()).isTrue()assertThat(message2.getFooString()).isEqualTo(\"foo\")}@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "builder.getOneofNestedMessageBuilder()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "{TestOneof2.Builder builder = TestOneof2.newBuilder()TestOneof2 message = builder.setFooInt(123).build()TestOneof2 message2 = TestOneof2.newBuilder().mergeFrom(message).build()assertThat(message2.hasFooInt()).isTrue()assertThat(message2.getFooInt()).isEqualTo(123)}@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
6->11 [style = bold, label=""];
12->7 [style = bold, label=""];
1->3 [style = bold, label=""];
0->2 [style = bold, label=""];
11->9 [style = bold, label=""];
13->14 [style = bold, label=""];
2->4 [style = bold, label=""];
2->14 [style = dashed, label="0"];
10->6 [style = bold, label=""];
8->10 [style = bold, label=""];
14->8 [style = bold, label=""];
4->1 [style = bold, label=""];
9->12 [style = bold, label=""];
}
