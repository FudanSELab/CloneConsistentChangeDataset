digraph {
0 [style = filled, label = "final Tuple<Boolean,RetentionLeases> retentionLeases = replicationTracker.getRetentionLeases(true)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "startReplica()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testPeerRecoveryRetentionLeasesForUnassignedCopiesExpireEventually['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "replicationTracker.addPeerRecoveryRetentionLease(unknownNodeId,randomCheckpoint(),EMPTY_LISTENER)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "currentTimeMillis.set(randomLongBetween(currentTimeMillis.get() + IndexSettings.INDEX_SOFT_DELETES_RETENTION_LEASE_PERIOD_SETTING.get(settings).millis() + 1,Long.MAX_VALUE))@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Set<String> leaseIds = retentionLeases.v2().leases().stream().map(null).collect(Collectors.toSet())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(leaseIds,equalTo(replicationTracker.routingTable.shards().stream().map(null).collect(Collectors.toSet())))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertFalse(retentionLeases.v1())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final String unknownNodeId = randomAlphaOfLength(10)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final Tuple<Boolean,RetentionLeases> retentionLeases = replicationTracker.getRetentionLeases(true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "safeCommitInfo = randomSafeCommitInfoSuitableForOpsBasedRecovery(globalCheckpoint)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "final Set<String> leaseIds = retentionLeases.v2().leases().stream().map(null).collect(Collectors.toSet())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "replicationTracker.addPeerRecoveryRetentionLease(unknownNodeId,globalCheckpoint,EMPTY_LISTENER)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "currentTimeMillis.set(currentTimeMillis.get() + randomLongBetween(0,Long.MAX_VALUE - currentTimeMillis.get()))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(leaseIds,equalTo(replicationTracker.routingTable.shards().stream().map(null).collect(Collectors.toSet())))@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final long globalCheckpoint = randomCheckpoint()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThat(leaseIds,hasSize(2))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(leaseIds,hasSize(2))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testPeerRecoveryRetentionLeasesForAssignedCopiesDoNotEverExpire['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "randomBoolean()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testPeerRecoveryRetentionLeasesForUnassignedCopiesExpireEventually['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4->6 [style = bold, label=""];
5->10 [style = solid, label="leaseIds"];
7->5 [style = solid, label="leaseIds"];
2->3 [style = dotted, label="true"];
5->8 [style = bold, label=""];
2->4 [style = bold, label=""];
18->7 [style = bold, label=""];
19->5 [style = bold, label=""];
9->2 [style = bold, label=""];
4->6 [style = solid, label="unknownNodeId"];
12->15 [style = solid, label="globalCheckpoint"];
3->20 [style = bold, label=""];
8->13 [style = solid, label="leaseIds"];
11->7 [style = bold, label=""];
2->3 [style = bold, label=""];
16->2 [style = bold, label=""];
15->0 [style = bold, label=""];
8->10 [style = solid, label="leaseIds"];
7->19 [style = solid, label="leaseIds"];
10->13 [style = bold, label=""];
2->20 [style = bold, label=""];
7->0 [style = bold, label=""];
12->11 [style = solid, label="globalCheckpoint"];
5->8 [style = solid, label="leaseIds"];
4->12 [style = bold, label=""];
14->2 [style = bold, label=""];
20->17 [style = bold, label=""];
12->11 [style = bold, label=""];
7->15 [style = bold, label=""];
7->19 [style = bold, label=""];
1->7 [style = bold, label=""];
0->5 [style = bold, label=""];
4->11 [style = solid, label="unknownNodeId"];
0->18 [style = dashed, label="0"];
6->1 [style = bold, label=""];
3->4 [style = bold, label=""];
8->10 [style = bold, label=""];
17->18 [style = bold, label=""];
}
