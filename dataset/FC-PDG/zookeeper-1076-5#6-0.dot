digraph {
11 [style = filled, label = "addDataPoints()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(0L,values.get(\"cnt_key2_test\"),\"cnt_key2_test should =0\")@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Map<String,Object> values = testCounterSet.values()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(0D,values.get(\"avg_key2_test\"),\"avg_key2_test should =0\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertEquals(\"sum_key1_test should =0\",0L,values.get(\"sum_key1_test\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"avg_key1_test should =0\",0D,values.get(\"avg_key1_test\"))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testReset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(0D,values.get(\"avg_key1_test\"),\"avg_key1_test should =0\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testCounterSet.reset()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(0L,values.get(\"min_key2_test\"),\"min_key2_test should =0\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(10,values.size(),\"There should be 10 values in the set\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertEquals(\"p999_key1_test should have p999=0\",0L,values.get(\"p999_key1_test\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"sum_key2_test should =0\",0L,values.get(\"sum_key2_test\"))@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(\"p999_key2_test should have p999=0\",0L,values.get(\"p999_key2_test\"))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(\"cnt_key2_test should =0\",0L,values.get(\"cnt_key2_test\"))@@@18@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(0L,values.get(\"max_key2_test\"),\"max_key2_test should =0\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(0L,values.get(\"sum_key2_test\"),\"sum_key2_test should =0\")@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertEquals(0L,values.get(\"max_key1_test\"),\"max_key1_test should =0\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(\"max_key2_test should =0\",0L,values.get(\"max_key2_test\"))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"p99_key1_test should have p99=0\",0L,values.get(\"p99_key1_test\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testReset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(\"p95_key2_test should have p95=0\",0L,values.get(\"p95_key2_test\"))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"cnt_key1_test should =0\",0L,values.get(\"cnt_key1_test\"))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"min_key1_test should =0\",0L,values.get(\"min_key1_test\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(0L,values.get(\"sum_key1_test\"),\"sum_key1_test should =0\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertEquals(0L,values.get(\"min_key1_test\"),\"min_key1_test should =0\")@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "assertEquals(\"p95_key1_test should have p95=0\",0L,values.get(\"p95_key1_test\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(\"avg_key2_test should =0\",0D,values.get(\"avg_key2_test\"))@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(\"p50_key2_test should have p50=0\",0L,values.get(\"p50_key2_test\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"There should be 10 values in the set\",10,values.size())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"p99_key2_test should have p99=0\",0L,values.get(\"p99_key2_test\"))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"max_key1_test should =0\",0L,values.get(\"max_key1_test\"))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"p50_key1_test should have p50=0\",0L,values.get(\"p50_key1_test\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(0L,values.get(\"cnt_key1_test\"),\"cnt_key1_test should =0\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "testReset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"min_key2_test should =0\",0L,values.get(\"min_key2_test\"))@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
17->25 [style = bold, label=""];
4->14 [style = bold, label=""];
23->20 [style = bold, label=""];
7->21 [style = dashed, label="0"];
6->34 [style = bold, label=""];
25->22 [style = bold, label=""];
1->26 [style = dashed, label="0"];
10->19 [style = dashed, label="0"];
21->15 [style = bold, label=""];
2->3 [style = bold, label=""];
18->11 [style = bold, label=""];
14->10 [style = bold, label=""];
0->11 [style = bold, label=""];
32->27 [style = bold, label=""];
34->31 [style = bold, label=""];
19->17 [style = bold, label=""];
16->19 [style = bold, label=""];
1->7 [style = bold, label=""];
22->23 [style = bold, label=""];
13->1 [style = bold, label=""];
27->35 [style = bold, label=""];
5->20 [style = dashed, label="0"];
26->21 [style = bold, label=""];
35->5 [style = bold, label=""];
3->23 [style = dashed, label="0"];
24->26 [style = bold, label=""];
30->11 [style = bold, label=""];
12->2 [style = bold, label=""];
3->5 [style = bold, label=""];
13->24 [style = dashed, label="0"];
12->25 [style = dashed, label="0"];
28->33 [style = bold, label=""];
6->15 [style = dashed, label="0"];
29->32 [style = bold, label=""];
5->13 [style = bold, label=""];
9->17 [style = dashed, label="0"];
7->6 [style = bold, label=""];
11->8 [style = bold, label=""];
10->9 [style = bold, label=""];
9->12 [style = bold, label=""];
31->28 [style = bold, label=""];
8->4 [style = bold, label=""];
14->16 [style = dashed, label="0"];
20->24 [style = bold, label=""];
2->22 [style = dashed, label="0"];
3->29 [style = bold, label=""];
4->16 [style = bold, label=""];
}
