digraph {
15 [style = filled, label = "Map<Path,FileStatus> targetDesiredMap = Maps.newHashMap()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<Path> expectedFilesToCopy = Lists.newArrayList()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Table table = Mockito.mock()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testFullPathDiffWithUnmanagedPathsWithoutDeletePolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "Map<Path,FileStatus> sourceMap = Maps.newHashMap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testFullPathDiffWithUnmanagedPathsWithoutDeletePolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "populateSourceAndTargetEntities(sourceMap,targetDesiredMap,expectedFilesToCopy,expectedFilesToSkipCopy,expectedFilesToDelete,expectedFilesToSkipDelete)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "HiveCopyEntityHelper helper = Mockito.mock()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.fail(\"Expected an IOException but did not receive any\")@@@38@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertTrue(diff.pathsToDelete.contains(expectedFileToDelete))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "targetDesiredMapWithExtraFile.put(targetPath6,getFileStatus(targetPath6,0,10))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedFilesToDelete.add(targetPath6)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<Path> expectedFilesToSkipDelete = Lists.newArrayList()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Path targetPath6 = new Path(targetRoot,path6)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "HiveCopyEntityHelper.DiffPathSet diff = HiveCopyEntityHelper.fullPathDiff(sourceLocation,targetDesiredLocation,Optional.of(existingTargetLocation),Optional.absent(),timer,helper)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertEquals(diff.filesToCopy.size(),expectedFilesToCopy.size())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "TestLocationDescriptor targetDesiredLocation = new TestLocationDescriptor(targetDesiredMapWithExtraFile)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Mockito.when(helper.isEnforceFileSizeMatch()).thenReturn(true)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "List<Path> expectedFilesToDelete = Lists.newArrayList()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.when(helper.getTargetPathHelper()).thenReturn(targetPathHelper)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MultiTimingEvent timer = Mockito.mock()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Map<Path,FileStatus> targetDesiredMapWithExtraFile = Maps.newHashMap(targetDesiredMap)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testFullPathDiffWithUnmanagedPathsWithDeletePolicy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Mockito.when(targetPathHelper.getTargetPath(Mockito.any(),Mockito.any(),Mockito.any(),Mockito.anyBoolean())).then(new Answer<Path>(){@Override public Path answer(InvocationOnMock invocation){Path path = (Path)invocation.getArguments()(0(return new Path(path.toString().replace(sourceRoot.toString(),targetRoot.toString()))}})@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "HiveDataset hiveDataset = Mockito.mock()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Mockito.when(helper.getUnmanagedDataPolicy()).thenReturn(HiveCopyEntityHelper.UnmanagedDataPolicy.DELETE_UNMANAGED_DATA)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertTrue(containsPath(diff.filesToCopy,expectedFileToCopy))@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Mockito.when(helper.getDataset()).thenReturn(hiveDataset)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Mockito.when(table.getCompleteName()).thenReturn(\"table1\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TestLocationDescriptor sourceLocation = new TestLocationDescriptor(sourceMap)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<Path> expectedFilesToSkipCopy = Lists.newArrayList()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Mockito.when(hiveDataset.getTable()).thenReturn(table)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestLocationDescriptor existingTargetLocation = new TestLocationDescriptor(Maps.newHashMap(targetDesiredMap))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Path path6 = new Path(\"path6\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.assertFalse(diff.pathsToDelete.contains(expectedFileToSkipDelete))@@@48@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Assert.assertEquals(diff.pathsToDelete.size(),expectedFilesToDelete.size())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Mockito.when(helper.getUnmanagedDataPolicy()).thenReturn(HiveCopyEntityHelper.UnmanagedDataPolicy.ABORT)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "HiveTargetPathHelper targetPathHelper = Mockito.mock()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertFalse(containsPath(diff.filesToCopy,expectedFileToSkipCopy))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7->24 [style = solid, label="existingTargetLocation"];
10->18 [style = solid, label="sourceMap"];
15->20 [style = solid, label="targetDesiredMap"];
7->11 [style = bold, label=""];
29->5 [style = bold, label=""];
10->15 [style = bold, label=""];
11->1 [style = bold, label=""];
19->29 [style = bold, label=""];
2->3 [style = bold, label=""];
5->16 [style = solid, label="targetPathHelper"];
17->18 [style = solid, label="expectedFilesToSkipDelete"];
26->8 [style = solid, label="targetPath6"];
18->12 [style = bold, label=""];
10->28 [style = solid, label="sourceMap"];
19->32 [style = solid, label="helper"];
15->6 [style = bold, label=""];
6->0 [style = bold, label=""];
21->24 [style = bold, label=""];
12->26 [style = bold, label=""];
24->38 [style = bold, label=""];
9->10 [style = bold, label=""];
3->16 [style = bold, label=""];
12->26 [style = solid, label="path6"];
15->18 [style = solid, label="targetDesiredMap"];
1->23 [style = bold, label=""];
28->14 [style = bold, label=""];
6->18 [style = solid, label="expectedFilesToCopy"];
14->7 [style = bold, label=""];
19->5 [style = bold, label=""];
20->14 [style = solid, label="targetDesiredMapWithExtraFile"];
23->32 [style = solid, label="timer"];
20->8 [style = bold, label=""];
14->24 [style = solid, label="targetDesiredLocation"];
22->18 [style = solid, label="expectedFilesToDelete"];
28->32 [style = solid, label="sourceLocation"];
16->33 [style = bold, label=""];
31->10 [style = bold, label=""];
21->33 [style = dashed, label="0"];
16->21 [style = bold, label=""];
24->25 [style = bold, label=""];
23->19 [style = bold, label=""];
0->22 [style = bold, label=""];
5->4 [style = bold, label=""];
4->27 [style = bold, label=""];
37->34 [style = bold, label=""];
15->7 [style = solid, label="targetDesiredMap"];
0->18 [style = solid, label="expectedFilesToSkipCopy"];
30->10 [style = bold, label=""];
23->24 [style = solid, label="timer"];
22->17 [style = bold, label=""];
33->32 [style = bold, label=""];
26->13 [style = solid, label="targetPath6"];
28->24 [style = solid, label="sourceLocation"];
36->37 [style = bold, label=""];
14->32 [style = solid, label="targetDesiredLocation"];
11->27 [style = solid, label="table"];
35->36 [style = bold, label=""];
7->32 [style = solid, label="existingTargetLocation"];
38->35 [style = bold, label=""];
32->24 [style = bold, label=""];
19->24 [style = solid, label="helper"];
27->2 [style = bold, label=""];
17->18 [style = bold, label=""];
26->20 [style = bold, label=""];
8->13 [style = bold, label=""];
13->28 [style = bold, label=""];
1->4 [style = solid, label="hiveDataset"];
}
