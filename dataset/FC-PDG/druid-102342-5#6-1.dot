digraph {
9 [style = filled, label = "List<OrderedPartitionableRecord<String,String>> polledRecords = cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD0_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult0).anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i++@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "verifyAll()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0Partition,shard1Partition)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(9,polledRecords.size())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(getRecordsResult1.getRecords()).andReturn(SHARD1_RECORDS.subList(2,SHARD1_RECORDS.size())).once()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "recordSupplier.seek(shard1Partition,SHARD1_RECORDS.get(2).getSequenceNumber())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(1,2)))@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS.subList(4,12)))@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "recordSupplier.assign(partitions)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 12@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "EasyMock.expect(getRecordsResult0.getNextShardIterator()).andReturn(null).anyTimes()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(kinesis.getRecords(generateGetRecordsReq(SHARD1_ITERATOR,recordsPerFetch))).andReturn(getRecordsResult1).anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "recordSupplier.seekToEarliest(partitions)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "testPollDeaggregate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS.subList(1,SHARD0_RECORDS.size())).once()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(polledRecords.containsAll(ALL_RECORDS))@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testSeek['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "EasyMock.expect(getRecordsResult1.getNextShardIterator()).andReturn(null).anyTimes()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(partitions,recordSupplier.getAssignment())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(StreamPartition.of(stream,SHARD_ID0),StreamPartition.of(stream,SHARD_ID1))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verifyAll()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Thread.sleep(100)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "StreamPartition<String> shard1Partition = StreamPartition.of(stream,SHARD_ID1)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int i = 0@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,true,100,5000,5000,60000,100)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "StreamPartition<String> shard1Partition = StreamPartition.of(STREAM,SHARD_ID1)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 9@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(SHARD0_ITERATOR).anyTimes()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "recordSupplier.seek(shard0Partition,SHARD0_RECORDS.get(1).getSequenceNumber())@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "recordSupplier.start()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(SHARD1_ITERATOR).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testSeek['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "EasyMock.expect(getRecordsResult0.getRecords()).andReturn(SHARD0_RECORDS).once()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "StreamPartition<String> shard0Partition = StreamPartition.of(STREAM,SHARD_ID0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "StreamPartition<String> shard0Partition = StreamPartition.of(stream,SHARD_ID0)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16->9 [style = dotted, label="true"];
3->40 [style = dashed, label="0"];
26->36 [style = solid, label="i"];
21->37 [style = dashed, label="0"];
24->39 [style = dashed, label="0"];
30->18 [style = bold, label=""];
9->16 [style = bold, label=""];
3->18 [style = solid, label="shard0Partition"];
19->38 [style = dashed, label="0"];
17->34 [style = solid, label="recordsPerFetch"];
18->22 [style = solid, label="partitions"];
15->20 [style = bold, label=""];
27->17 [style = bold, label=""];
15->41 [style = bold, label=""];
35->38 [style = bold, label=""];
30->18 [style = solid, label="shard1Partition"];
36->13 [style = dotted, label="true"];
22->33 [style = bold, label=""];
36->9 [style = bold, label=""];
5->23 [style = dashed, label="0"];
40->34 [style = bold, label=""];
9->16 [style = solid, label="i"];
16->4 [style = dotted, label="true"];
13->16 [style = bold, label=""];
26->13 [style = bold, label=""];
29->26 [style = bold, label=""];
5->6 [style = bold, label=""];
20->41 [style = dashed, label="0"];
7->2 [style = bold, label=""];
25->30 [style = dashed, label="0"];
33->36 [style = bold, label=""];
12->14 [style = bold, label=""];
39->12 [style = bold, label=""];
1->32 [style = bold, label=""];
34->35 [style = bold, label=""];
3->32 [style = dashed, label="0"];
40->38 [style = solid, label="partitions"];
13->16 [style = solid, label="i"];
4->9 [style = bold, label=""];
24->12 [style = bold, label=""];
3->29 [style = solid, label="shard0Partition"];
8->15 [style = bold, label=""];
22->19 [style = bold, label=""];
19->29 [style = bold, label=""];
11->21 [style = bold, label=""];
25->18 [style = bold, label=""];
1->3 [style = bold, label=""];
16->23 [style = bold, label=""];
32->30 [style = bold, label=""];
21->5 [style = bold, label=""];
2->0 [style = bold, label=""];
36->13 [style = bold, label=""];
30->19 [style = solid, label="shard1Partition"];
25->18 [style = solid, label="shard1Partition"];
18->10 [style = bold, label=""];
13->26 [style = bold, label=""];
28->8 [style = bold, label=""];
16->36 [style = dashed, label="0"];
31->17 [style = bold, label=""];
16->4 [style = bold, label=""];
23->11 [style = bold, label=""];
33->26 [style = solid, label="i"];
36->26 [style = dotted, label="true"];
10->22 [style = bold, label=""];
13->9 [style = solid, label="i"];
40->35 [style = solid, label="partitions"];
1->40 [style = bold, label=""];
3->25 [style = bold, label=""];
26->36 [style = bold, label=""];
9->4 [style = bold, label=""];
42->17 [style = bold, label=""];
40->37 [style = solid, label="partitions"];
37->23 [style = bold, label=""];
33->36 [style = solid, label="i"];
25->19 [style = solid, label="shard1Partition"];
14->1 [style = bold, label=""];
17->7 [style = bold, label=""];
4->37 [style = bold, label=""];
32->29 [style = solid, label="shard0Partition"];
41->39 [style = bold, label=""];
38->22 [style = bold, label=""];
20->24 [style = bold, label=""];
32->18 [style = solid, label="shard0Partition"];
17->10 [style = solid, label="recordsPerFetch"];
0->28 [style = bold, label=""];
}
