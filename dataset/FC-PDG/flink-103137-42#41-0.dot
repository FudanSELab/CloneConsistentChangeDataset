digraph {
8 [style = filled, label = "Assert.assertFalse(operatorStateInputs.iterator().hasNext())@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "count = 0@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testWithRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "OperatorStateBackend operatorStateBackend = stateContext.operatorStateBackend()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testWithRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertNull(timeServiceManager)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "InternalTimeServiceManager<?> timeServiceManager = stateContext.internalTimerServiceManager()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testNoRestore['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(42L,taskStateSnapshot)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "when(streamOperator.getOperatorID()).thenReturn(operatorID)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Assert.assertNotNull(keyedStateBackend)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertTrue(\"Expected the context to be restored\",stateContext.isRestored())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "CheckpointableKeyedStateBackend<?> keyedStateBackend = stateContext.keyedStateBackend()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertFalse(keyedStateInputs.iterator().hasNext())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CloseableIterable<StatePartitionStreamProvider> operatorStateInputs = stateContext.rawOperatorStateInputs()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@50@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "++count@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertFalse(\"Expected the context to NOT be restored\",stateContext.isRestored())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertNotNull(operatorStateBackend)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs = stateContext.rawKeyedStateInputs()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(3,count)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(OptionalLong.of(42L),stateContext.getRestoredCheckpointId())@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "AbstractStreamOperator<?> streamOperator = mock()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "OperatorID operatorID = new OperatorID(47L,11L)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "TaskStateSnapshot taskStateSnapshot = new TaskStateSnapshot()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "MemoryStateBackend stateBackend = spy(new MemoryStateBackend(1024))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(1,count)@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Random random = new Random(0x42)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "taskStateSnapshot.putSubtaskStateByOperatorID(operatorID,operatorSubtaskState)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "++count@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "StreamOperatorStateContext stateContext = streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),new TestProcessingTimeService(),streamOperator,typeSerializer,closeableRegistry,new UnregisteredMetricsGroup(),1.0,false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "JobManagerTaskRestore jobManagerTaskRestore = new JobManagerTaskRestore(0L,taskStateSnapshot)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "StateBackend mockingBackend = spy(new StateBackend(){@Override public AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env,JobID jobID,String operatorIdentifier,TypeSerializer<K> keySerializer,int numberOfKeyGroups,KeyGroupRange keyGroupRange,TaskKvStateRegistry kvStateRegistry,TtlTimeProvider ttlTimeProvider,MetricGroup metricGroup,@Nonnull Collection<KeyedStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}@Override public OperatorStateBackend createOperatorStateBackend(Environment env,String operatorIdentifier,@Nonnull Collection<OperatorStateHandle> stateHandles,CloseableRegistry cancelStreamRegistry){return mock()}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "OperatorSubtaskState operatorSubtaskState = OperatorSubtaskState.builder().setManagedOperatorState(new OperatorStreamStateHandle(Collections.singletonMap(\"a\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc6b1b,SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null))).setRawOperatorState(new OperatorStreamStateHandle(Collections.singletonMap(\"_default_\",new OperatorStateHandle.StateMetaInfo(new long((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bc6b2f,SPLIT_DISTRIBUTE)),CheckpointTestUtils.createDummyStreamStateHandle(random,null))).setManagedKeyedState(CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null)).setRawKeyedState(CheckpointTestUtils.createDummyKeyGroupStateHandle(random,null)).setInputChannelState(singleton(createNewInputChannelStateHandle(10,random))).setResultSubpartitionState(singleton(createNewResultSubpartitionStateHandle(10,random))).build()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int count = 0@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "CloseableRegistry closeableRegistry = new CloseableRegistry()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertNotNull(operatorStateInputs)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertNotNull(keyedStateInputs)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(stateBackend,null,true)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "TypeSerializer<?> typeSerializer = new IntSerializer()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "StreamTaskStateInitializer streamTaskStateManager = streamTaskStateManager(mockingBackend,jobManagerTaskRestore,false)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertNotNull(timeServiceManager)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->0 [style = bold, label=""];
29->5 [style = bold, label=""];
43->37 [style = solid, label="typeSerializer"];
10->34 [style = dashed, label="0"];
0->44 [style = dashed, label="0"];
2->19 [style = solid, label="operatorStateInputs"];
45->2 [style = solid, label="closeableRegistry"];
4->30 [style = dashed, label="0"];
6->7 [style = solid, label="typeSerializer"];
22->2 [style = solid, label="keyedStateBackend"];
9->6 [style = bold, label=""];
33->0 [style = bold, label=""];
27->34 [style = solid, label="taskStateSnapshot"];
10->12 [style = bold, label=""];
37->38 [style = bold, label=""];
30->7 [style = solid, label="closeableRegistry"];
4->8 [style = bold, label=""];
2->5 [style = solid, label="operatorStateInputs"];
13->25 [style = bold, label=""];
24->28 [style = bold, label=""];
27->10 [style = solid, label="taskStateSnapshot"];
15->28 [style = dashed, label="0"];
0->12 [style = solid, label="mockingBackend"];
35->44 [style = bold, label=""];
12->21 [style = bold, label=""];
38->2 [style = solid, label="operatorStateBackend"];
28->3 [style = solid, label="keyedStateBackend"];
26->14 [style = bold, label=""];
39->42 [style = solid, label="operatorID"];
2->4 [style = bold, label=""];
43->45 [style = bold, label=""];
14->31 [style = solid, label="keyedStateInputs"];
13->17 [style = solid, label="count"];
7->24 [style = bold, label=""];
21->9 [style = bold, label=""];
22->24 [style = solid, label="keyedStateBackend"];
19->13 [style = bold, label=""];
18->1 [style = bold, label=""];
15->31 [style = bold, label=""];
30->7 [style = bold, label=""];
11->29 [style = solid, label="count"];
44->41 [style = bold, label=""];
36->42 [style = bold, label=""];
30->5 [style = solid, label="closeableRegistry"];
6->2 [style = solid, label="operatorStateInputs"];
26->15 [style = solid, label="timeServiceManager"];
8->3 [style = bold, label=""];
28->26 [style = bold, label=""];
28->5 [style = solid, label="keyedStateBackend"];
25->17 [style = bold, label=""];
22->9 [style = solid, label="operatorID"];
1->34 [style = bold, label=""];
32->8 [style = bold, label=""];
21->28 [style = solid, label="timeServiceManager"];
24->5 [style = solid, label="operatorStateBackend"];
21->7 [style = solid, label="streamOperator"];
34->12 [style = solid, label="jobManagerTaskRestore"];
14->2 [style = bold, label=""];
9->26 [style = solid, label="keyedStateInputs"];
22->1 [style = solid, label="operatorID"];
23->18 [style = bold, label=""];
31->19 [style = bold, label=""];
11->20 [style = bold, label=""];
14->5 [style = solid, label="keyedStateInputs"];
42->43 [style = bold, label=""];
20->29 [style = bold, label=""];
44->41 [style = solid, label="stateBackend"];
22->21 [style = bold, label=""];
24->8 [style = solid, label="operatorStateBackend"];
3->15 [style = bold, label=""];
45->37 [style = solid, label="closeableRegistry"];
2->40 [style = bold, label=""];
34->12 [style = bold, label=""];
9->2 [style = solid, label="keyedStateInputs"];
10->12 [style = solid, label="jobManagerTaskRestore"];
38->7 [style = solid, label="operatorStateBackend"];
22->27 [style = bold, label=""];
0->22 [style = bold, label=""];
36->37 [style = solid, label="streamOperator"];
18->1 [style = solid, label="operatorSubtaskState"];
27->23 [style = bold, label=""];
45->37 [style = bold, label=""];
41->39 [style = bold, label=""];
38->22 [style = bold, label=""];
1->10 [style = bold, label=""];
39->36 [style = bold, label=""];
4->32 [style = bold, label=""];
40->8 [style = bold, label=""];
6->14 [style = solid, label="operatorStateInputs"];
17->11 [style = bold, label=""];
6->30 [style = bold, label=""];
}
