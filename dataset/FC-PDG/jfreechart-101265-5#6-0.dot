digraph {
14 [style = filled, label = "double(( y1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@236b71@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(0.9,r.getLowerBound(),EPSILON)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(3.1,r.getUpperBound(),EPSILON)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(d1.equals(d2))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "DefaultIntervalXYDataset d1 = new DefaultIntervalXYDataset()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "DefaultIntervalXYDataset d2 = CloneUtils.clone(d1)@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "double(((( data1 = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@236b8f@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "double(( x1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@236b67@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "x1(0( = 111.1@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "double(( y1End = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@236b85@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testCloning2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "double(( x1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@236b53@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DefaultIntervalXYDataset<String> d2 = CloneUtils.clone(d1)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testFindDomainBounds2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "d1.addSeries(\"S1\",data1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Range r = DatasetUtils.findDomainBounds(dataset)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "double(( x1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@236b5d@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "DefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertFalse(d1.equals(d2))@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(d1 != d2)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testCloning2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "dataset.addSeries(\"S1\",data1)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "double(( y1Start = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@236b7b@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "DefaultIntervalXYDataset<String> d1 = new DefaultIntervalXYDataset<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16->0 [style = solid, label="d1"];
3->6 [style = solid, label="d1"];
12->1 [style = solid, label="x1"];
17->5 [style = solid, label="d2"];
13->1 [style = solid, label="x1Start"];
23->22 [style = solid, label="dataset"];
6->5 [style = solid, label="d2"];
10->17 [style = bold, label=""];
6->0 [style = bold, label=""];
6->17 [style = dashed, label="0"];
3->12 [style = bold, label=""];
8->1 [style = solid, label="y1End"];
24->22 [style = bold, label=""];
0->20 [style = dashed, label="0"];
10->6 [style = bold, label=""];
0->15 [style = bold, label=""];
16->17 [style = solid, label="d1"];
15->5 [style = bold, label=""];
20->21 [style = bold, label=""];
14->1 [style = solid, label="y1"];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
3->23 [style = dashed, label="0"];
17->0 [style = bold, label=""];
6->0 [style = solid, label="d2"];
22->20 [style = bold, label=""];
2->1 [style = solid, label="x1End"];
1->24 [style = bold, label=""];
19->23 [style = bold, label=""];
17->7 [style = solid, label="d2"];
1->24 [style = solid, label="data1"];
2->14 [style = bold, label=""];
13->2 [style = bold, label=""];
17->0 [style = solid, label="d2"];
9->3 [style = bold, label=""];
4->8 [style = bold, label=""];
4->1 [style = solid, label="y1Start"];
23->12 [style = bold, label=""];
5->11 [style = bold, label=""];
6->7 [style = solid, label="d2"];
3->0 [style = solid, label="d1"];
1->10 [style = solid, label="data1"];
1->10 [style = bold, label=""];
16->12 [style = bold, label=""];
10->24 [style = dashed, label="0"];
11->7 [style = bold, label=""];
3->16 [style = dashed, label="0"];
14->4 [style = bold, label=""];
18->16 [style = bold, label=""];
}
