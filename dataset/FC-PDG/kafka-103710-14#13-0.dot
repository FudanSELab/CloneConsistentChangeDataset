digraph {
8 [style = filled, label = "props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG,.getName())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(1,MockConsumerInterceptor.INIT_COUNT.get())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testInterceptorConstructorClose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testInterceptorConstructorClose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertEquals(1,MockProducerInterceptor.INIT_COUNT.get())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(1,MockConsumerInterceptor.CLOSE_COUNT.get())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9999\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "consumer.close()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testInterceptorConstructClose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(1,MockProducerInterceptor.CLOSE_COUNT.get())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG,.getName())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9999\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(0,MockConsumerInterceptor.CLOSE_COUNT.get())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KafkaProducer<String,String> producer = new KafkaProducer<>(props,new StringSerializer(),new StringSerializer())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "KafkaConsumer<String,String> consumer = new KafkaConsumer<>(props,new StringDeserializer(),new StringDeserializer())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(0,MockProducerInterceptor.CLOSE_COUNT.get())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(1,MockConsumerInterceptor.INIT_COUNT.get())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{MockConsumerInterceptor.resetCounters()}@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(1,MockProducerInterceptor.INIT_COUNT.get())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "{MockProducerInterceptor.resetCounters()}@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Properties props = new Properties()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP,\"something\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "producer.close()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12->0 [style = bold, label=""];
4->6 [style = bold, label=""];
21->14 [style = bold, label=""];
7->8 [style = bold, label=""];
23->15 [style = bold, label=""];
8->5 [style = bold, label=""];
20->16 [style = bold, label=""];
13->0 [style = bold, label=""];
0->7 [style = bold, label=""];
11->0 [style = bold, label=""];
5->1 [style = bold, label=""];
9->2 [style = bold, label=""];
7->19 [style = dashed, label="0"];
0->19 [style = bold, label=""];
2->10 [style = bold, label=""];
16->22 [style = bold, label=""];
0->5 [style = solid, label="props"];
0->23 [style = solid, label="props"];
8->21 [style = dashed, label="0"];
19->21 [style = bold, label=""];
2->16 [style = dashed, label="0"];
1->3 [style = bold, label=""];
10->4 [style = bold, label=""];
17->24 [style = bold, label=""];
3->9 [style = bold, label=""];
22->18 [style = bold, label=""];
3->15 [style = dashed, label="0"];
15->20 [style = bold, label=""];
14->23 [style = bold, label=""];
18->17 [style = bold, label=""];
4->18 [style = dashed, label="0"];
}
