digraph {
17 [style = filled, label = "int i@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "return UTF8String.fromBytes(strBytes)@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int ordinal@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final int size = (int)(offsetAndSize & ((1L << 32) - 1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final long offsetAndSize = getLong(i)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertIndexIsValid(i)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "getBinary['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "final byte(( strBytes = new byte((((@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "getUTF8String['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int offset = (int)(offsetAndSize >> 32)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final int stringSizeInBytes = (int)PlatformDependent.UNSAFE.getLong(baseObject,baseOffset + offsetToStringSize)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offsetToStringSize + 8,strBytes,PlatformDependent.BYTE_ARRAY_OFFSET,stringSizeInBytes)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final long offsetToStringSize = getLong(i)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "PlatformDependent.copyMemory(baseObject,baseOffset + offset,bytes,PlatformDependent.BYTE_ARRAY_OFFSET,size)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final byte(( bytes = new byte((((@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "return null@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final long offsetAndSize = getLong(ordinal)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "getBinary['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "return bytes@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "isNullAt(ordinal)@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "int i@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "isNullAt(i)@@@3@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertIndexIsValid(ordinal)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6->1 [style = solid, label="i"];
4->10 [style = bold, label=""];
1->3 [style = dotted, label="false"];
0->4 [style = solid, label="bytes"];
18->3 [style = bold, label=""];
2->5 [style = bold, label=""];
15->13 [style = bold, label=""];
15->9 [style = dotted, label="false"];
0->10 [style = solid, label="bytes"];
11->13 [style = solid, label="ordinal"];
17->19 [style = solid, label="i"];
5->9 [style = bold, label=""];
9->0 [style = bold, label=""];
15->14 [style = dotted, label="false"];
15->7 [style = bold, label=""];
14->9 [style = solid, label="offsetAndSize"];
20->17 [style = dotted, label="true"];
18->3 [style = solid, label="strBytes"];
14->5 [style = solid, label="offsetAndSize"];
1->15 [style = dashed, label="0"];
6->11 [style = dashed, label="0"];
1->9 [style = dotted, label="false"];
12->15 [style = bold, label=""];
1->3 [style = bold, label=""];
11->15 [style = solid, label="ordinal"];
18->22 [style = solid, label="strBytes"];
6->17 [style = dashed, label="0"];
15->5 [style = dotted, label="false"];
21->3 [style = solid, label="stringSizeInBytes"];
15->7 [style = dotted, label="true"];
3->22 [style = bold, label=""];
3->13 [style = dashed, label="0"];
1->7 [style = bold, label=""];
5->4 [style = solid, label="offset"];
16->21 [style = solid, label="offsetToStringSize"];
21->18 [style = bold, label=""];
9->4 [style = solid, label="size"];
1->2 [style = dotted, label="false"];
19->16 [style = bold, label=""];
12->11 [style = dotted, label="true"];
1->7 [style = dotted, label="true"];
8->1 [style = bold, label=""];
1->10 [style = dotted, label="false"];
6->2 [style = solid, label="i"];
17->16 [style = solid, label="i"];
15->0 [style = dotted, label="false"];
8->6 [style = dotted, label="true"];
2->14 [style = dashed, label="0"];
3->2 [style = bold, label=""];
1->4 [style = dotted, label="false"];
11->14 [style = solid, label="ordinal"];
0->4 [style = bold, label=""];
16->21 [style = bold, label=""];
2->16 [style = dashed, label="0"];
15->10 [style = dotted, label="false"];
5->21 [style = dashed, label="0"];
1->5 [style = dotted, label="false"];
2->9 [style = solid, label="offsetAndSize"];
15->13 [style = dotted, label="false"];
20->19 [style = bold, label=""];
13->14 [style = bold, label=""];
6->3 [style = solid, label="i"];
16->3 [style = solid, label="offsetToStringSize"];
1->0 [style = dotted, label="false"];
2->5 [style = solid, label="offsetAndSize"];
14->5 [style = bold, label=""];
15->4 [style = dotted, label="false"];
}
