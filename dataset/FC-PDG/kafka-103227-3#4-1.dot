digraph {
14 [style = filled, label = "KerberosShortNamer kerberosShortNamer = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testPrincipalBuilderScram['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(server.getMechanismName()).thenReturn(ScramMechanism.SCRAM_SHA_256.mechanismName())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "verify(kerberosShortNamer,atLeastOnce()).shortName(any())@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testPrincipalBuilderScram['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "verify(server,atLeastOnce()).getMechanismName()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "KafkaPrincipal deserializedPrincipal = builder.deserialize(serializedPrincipal)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder.close()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,SecurityProtocol.SASL_PLAINTEXT,InetAddress.getLocalHost(),SecurityProtocol.SASL_PLAINTEXT.name()))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(kerberosShortNamer,null)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(null,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(server,atLeastOnce()).getAuthorizationID()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(\"foo\",principal.getName())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,SecurityProtocol.SASL_PLAINTEXT,InetAddress.getLocalHost(),SecurityProtocol.SASL_PLAINTEXT.name()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(principal,deserializedPrincipal)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(server.getMechanismName()).thenReturn(SaslConfigs.GSSAPI_MECHANISM)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "byte(( serializedPrincipal = builder.serialize(principal)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(KafkaPrincipal.USER_TYPE,principal.getPrincipalType())@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(server.getAuthorizationID()).thenReturn(\"foo\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SaslServer server = mock()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(kerberosShortNamer.shortName(any())).thenReturn(\"foo\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testPrincipalBuilderSerde['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(server.getAuthorizationID()).thenReturn(\"foo/host@REALM.COM\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
10->20 [style = solid, label="principal"];
8->23 [style = bold, label=""];
0->19 [style = dashed, label="0"];
8->3 [style = bold, label=""];
12->15 [style = bold, label=""];
14->19 [style = bold, label=""];
7->0 [style = bold, label=""];
20->3 [style = bold, label=""];
16->17 [style = bold, label=""];
9->7 [style = bold, label=""];
11->9 [style = bold, label=""];
17->22 [style = bold, label=""];
18->20 [style = solid, label="deserializedPrincipal"];
1->9 [style = bold, label=""];
19->16 [style = bold, label=""];
21->12 [style = bold, label=""];
6->4 [style = bold, label=""];
18->20 [style = bold, label=""];
9->10 [style = solid, label="server"];
5->6 [style = bold, label=""];
10->8 [style = bold, label=""];
14->22 [style = solid, label="kerberosShortNamer"];
10->23 [style = solid, label="principal"];
22->10 [style = bold, label=""];
9->14 [style = bold, label=""];
3->21 [style = bold, label=""];
10->2 [style = bold, label=""];
13->9 [style = bold, label=""];
9->6 [style = solid, label="server"];
23->18 [style = bold, label=""];
23->18 [style = solid, label="serializedPrincipal"];
2->8 [style = bold, label=""];
0->5 [style = bold, label=""];
}
