digraph {
9 [style = filled, label = "assertMethod['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "zipkin2.Span span = COLLECTOR.pop()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "advice.onThrowing(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16ae206,new IOException())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.COMPONENT),is(ZipkinConstants.COMPONENT_NAME))@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(tags.get(ZipkinConstants.Tags.DB_TYPE),is(ZipkinConstants.DB_TYPE_VALUE))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "zipkin2.Span span = collector.pop()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(tags.get(\"error\"),is(\"IOException\"))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "advice.beforeMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16ae1f8,new MethodInvocationResult())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertNotNull(tags)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertNotNull(span)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Map<String,String> tags = span.tags()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "parentSpan.finish()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "advice.afterMethod(getTargetObject(),null,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16ae214,new MethodInvocationResult())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertMethod['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertExceptionHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(span.parentId())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->10 [style = bold, label=""];
4->14 [style = bold, label=""];
0->12 [style = bold, label=""];
14->10 [style = bold, label=""];
15->3 [style = bold, label=""];
1->7 [style = bold, label=""];
12->7 [style = bold, label=""];
1->7 [style = solid, label="span"];
8->0 [style = bold, label=""];
1->12 [style = dashed, label="0"];
6->5 [style = bold, label=""];
11->3 [style = bold, label=""];
12->7 [style = solid, label="span"];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
3->13 [style = bold, label=""];
9->3 [style = bold, label=""];
10->2 [style = bold, label=""];
13->8 [style = bold, label=""];
5->4 [style = solid, label="tags"];
}
