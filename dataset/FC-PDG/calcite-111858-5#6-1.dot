digraph {
29 [style = filled, label = "throw validator.newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final int intValue = literal.intValue(false)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "operandList@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "literal == root && config.sqlConformance().isSortByOrdinal()@@@3@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "SqlLiteral literal@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "havingExpr || !validator.getConformance().isGroupByOrdinal()@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "SqlNode node@@@10@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final int intValue = literal.intValue(false)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@107058dliteral@@@32@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "root.getKind()@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "literal.getTypeName()@@@20@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return nthSelectItem(ordinal,literal.getParserPosition())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1070512literal@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@10704f9literal@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "literal.getTypeName()@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "intValue < 1 || intValue > aliasList.size()@@@7@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "visit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "return SqlUtil.stripAs(select.getSelectList().get(ordinal))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "isOrdinalLiteral = true@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "visit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "root instanceof SqlBasicCall@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "intValue < 1 || intValue > select.getSelectList().size()@@@23@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "boolean isOrdinalLiteral = literal == root@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "literal == root && getConformance().isSortByOrdinal()@@@3@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "throw newValidationError(literal,RESOURCE.orderByOrdinalOutOfRange())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "visit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "intValue >= 0@@@22@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<SqlNode> operandList = ((SqlBasicCall)root).getOperandList()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "int ordinal = intValue - 1@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "intValue >= 0@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int ordinal = intValue - 1@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "isOrdinalLiteral@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "node.equals(literal)@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8->10 [style = bold, label=""];
0->5 [style = dotted, label="true"];
30->13 [style = bold, label=""];
5->9 [style = bold, label=""];
23->22 [style = dotted, label="true"];
28->20 [style = bold, label=""];
20->26 [style = bold, label=""];
4->7 [style = solid, label="literal"];
18->30 [style = bold, label=""];
21->27 [style = dotted, label="true"];
9->7 [style = bold, label=""];
4->13 [style = solid, label="literal"];
3->5 [style = bold, label=""];
12->10 [style = bold, label=""];
23->22 [style = bold, label=""];
32->25 [style = bold, label=""];
5->9 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
6->0 [style = dotted, label="true"];
31->22 [style = solid, label="intValue"];
0->3 [style = bold, label=""];
5->10 [style = bold, label=""];
22->29 [style = dotted, label="true"];
15->13 [style = bold, label=""];
9->2 [style = bold, label=""];
4->29 [style = solid, label="literal"];
4->10 [style = solid, label="literal"];
3->5 [style = solid, label="intValue"];
22->32 [style = bold, label=""];
11->12 [style = bold, label=""];
21->17 [style = dotted, label="true"];
4->28 [style = solid, label="literal"];
1->4 [style = dotted, label="true"];
32->25 [style = solid, label="ordinal"];
20->14 [style = bold, label=""];
21->28 [style = dotted, label="true"];
13->16 [style = bold, label=""];
24->20 [style = bold, label=""];
28->24 [style = dotted, label="true"];
7->2 [style = bold, label=""];
29->32 [style = bold, label=""];
25->26 [style = bold, label=""];
12->0 [style = dotted, label="true"];
28->24 [style = bold, label=""];
16->21 [style = dotted, label="true"];
5->8 [style = dotted, label="true"];
31->32 [style = solid, label="intValue"];
2->8 [style = solid, label="ordinal"];
30->15 [style = bold, label=""];
20->14 [style = dotted, label="true"];
22->29 [style = bold, label=""];
14->23 [style = dotted, label="true"];
9->22 [style = dashed, label="0"];
11->4 [style = dotted, label="true"];
31->23 [style = solid, label="intValue"];
23->32 [style = dotted, label="true"];
1->6 [style = bold, label=""];
13->20 [style = solid, label="isOrdinalLiteral"];
6->10 [style = bold, label=""];
14->31 [style = bold, label=""];
9->7 [style = dotted, label="true"];
23->25 [style = dotted, label="true"];
5->2 [style = dotted, label="true"];
3->9 [style = solid, label="intValue"];
31->23 [style = bold, label=""];
4->12 [style = solid, label="literal"];
23->26 [style = bold, label=""];
6->0 [style = bold, label=""];
12->0 [style = bold, label=""];
4->26 [style = solid, label="literal"];
6->12 [style = dashed, label="0"];
17->28 [style = bold, label=""];
21->20 [style = bold, label=""];
4->15 [style = solid, label="literal"];
16->21 [style = bold, label=""];
21->19 [style = dotted, label="true"];
4->6 [style = solid, label="literal"];
14->31 [style = dotted, label="true"];
6->30 [style = dashed, label="0"];
7->29 [style = dashed, label="0"];
24->20 [style = solid, label="isOrdinalLiteral"];
3->2 [style = solid, label="intValue"];
18->4 [style = dotted, label="true"];
30->15 [style = dotted, label="true"];
21->17 [style = bold, label=""];
2->8 [style = bold, label=""];
}
