digraph {
11 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i += 1@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testInvalidDecimalConversions['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testInvalidConversions(Literal.of(new BigDecimal(\"34.11\")),Types.BooleanType.get(),Types.IntegerType.get(),Types.LongType.get(),Types.FloatType.get(),Types.DoubleType.get(),Types.DateType.get(),Types.TimeType.get(),Types.TimestampType.withZone(),Types.TimestampType.withoutZone(),Types.DecimalType.of(9,4),Types.StringType.get(),Types.UUIDType.get(),Types.FixedType.ofLength(1),Types.BinaryType.get())@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "List<Schema> avroPrimitives = Lists.newArrayList(Schema.create(Schema.Type.BOOLEAN),Schema.create(Schema.Type.INT),Schema.create(Schema.Type.LONG),Schema.create(Schema.Type.FLOAT),Schema.create(Schema.Type.DOUBLE),LogicalTypes.date().addToSchema(Schema.create(Schema.Type.INT)),LogicalTypes.timeMicros().addToSchema(Schema.create(Schema.Type.LONG)),addAdjustToUtc(LogicalTypes.timestampMicros().addToSchema(Schema.create(Schema.Type.LONG)),true),addAdjustToUtc(LogicalTypes.timestampMicros().addToSchema(Schema.create(Schema.Type.LONG)),false),Schema.create(Schema.Type.STRING),LogicalTypes.uuid().addToSchema(Schema.createFixed(\"uuid_fixed\",null,null,16)),Schema.createFixed(\"fixed_12\",null,null,12),Schema.create(Schema.Type.BYTES),LogicalTypes.decimal(9,4).addToSchema(Schema.createFixed(\"decimal_9_4\",null,null,4)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i < primitives.size()@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testPrimitiveTypes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testInvalidDecimalConversions['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Type type = primitives.get(i)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testInvalidConversions(Literal.of(new BigDecimal(\"34.11\")),Types.BooleanType.get(),Types.IntegerType.get(),Types.LongType.get(),Types.FloatType.get(),Types.DoubleType.get(),Types.DateType.get(),Types.TimeType.get(),Types.TimestampType.withZone(),Types.TimestampType.withoutZone(),Types.StringType.get(),Types.UUIDType.get(),Types.FixedType.ofLength(1),Types.BinaryType.get())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Schema avro = avroPrimitives.get(i)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "List<Type> primitives = Lists.newArrayList(Types.BooleanType.get(),Types.IntegerType.get(),Types.LongType.get(),Types.FloatType.get(),Types.DoubleType.get(),Types.DateType.get(),Types.TimeType.get(),Types.TimestampType.withZone(),Types.TimestampType.withoutZone(),Types.StringType.get(),Types.UUIDType.get(),Types.FixedType.ofLength(12),Types.BinaryType.get(),Types.DecimalType.of(9,4))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(\"Primitive to avro schema: \" + type,avro,AvroSchemaUtil.convert(type))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"Avro schema to primitive: \" + avro,type,AvroSchemaUtil.convert(avro))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11->10 [style = solid, label="i"];
12->8 [style = dotted, label="true"];
6->7 [style = solid, label="type"];
10->4 [style = solid, label="avro"];
1->9 [style = dashed, label="0"];
11->12 [style = bold, label=""];
7->8 [style = bold, label=""];
12->6 [style = bold, label=""];
4->7 [style = bold, label=""];
10->7 [style = solid, label="avro"];
6->4 [style = solid, label="type"];
11->6 [style = solid, label="i"];
3->2 [style = bold, label=""];
11->12 [style = solid, label="i"];
12->10 [style = dotted, label="true"];
12->6 [style = dotted, label="true"];
0->1 [style = bold, label=""];
6->10 [style = bold, label=""];
8->10 [style = solid, label="i"];
10->4 [style = bold, label=""];
9->5 [style = bold, label=""];
5->11 [style = bold, label=""];
12->4 [style = dotted, label="true"];
13->9 [style = bold, label=""];
1->2 [style = dashed, label="0"];
12->7 [style = dotted, label="true"];
8->12 [style = solid, label="i"];
8->6 [style = solid, label="i"];
8->12 [style = bold, label=""];
}
