digraph {
11 [style = filled, label = "assertEquals(Errors.NONE,Errors.forCode(partitionResponse.errorCode()))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "context.becomeLeader()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Set<Integer> voters = Utils.mkSet(localId,otherNodeId,syncNodeId)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(oldestSnapshotId.offset,partitionResponse.snapshotId().endOffset())@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(context.log.endOffset().offset,context.client.highWatermark().getAsLong())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(oldestSnapshotId.epoch,partitionResponse.snapshotId().epoch())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int localId = 0@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "RaftClientTestContext context = new RaftClientTestContext.Builder(localId,voters).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"a\",\"b\",\"c\")).appendToLog(oldestSnapshotId.epoch,Arrays.asList(\"d\",\"e\",\"f\")).appendToLog(oldestSnapshotId.epoch + 2,Arrays.asList(\"g\",\"h\",\"i\")).withAppendLingerMs(1).build()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,otherNodeId,oldestSnapshotId.offset,oldestSnapshotId.epoch + 1,0))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(localId,partitionResponse.currentLeader().leaderId())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(oldestSnapshotId.epoch + 2 + 1,epoch)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int epoch = context.currentEpoch()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,otherNodeId,oldestSnapshotId.offset,oldestSnapshotId.epoch,0))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(oldestSnapshotId,snapshot.snapshotId())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "snapshot.freeze()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "context.assertSentFetchPartitionResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "context.pollUntilResponse()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(epoch,partitionResponse.currentLeader().leaderEpoch())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int otherNodeId = localId + 1@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "context.deliverRequest(context.fetchRequest(epoch,syncNodeId,context.log.endOffset().offset,epoch,0))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "int syncNodeId = otherNodeId + 1@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "context.assertSentFetchPartitionResponse(Errors.NONE,epoch,OptionalInt.of(localId))@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testFetchRequestAtLogStartOffsetWithInvalidEpoch['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "OffsetAndEpoch oldestSnapshotId = new OffsetAndEpoch(3,2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "FetchResponseData.PartitionData partitionResponse = context.assertSentFetchPartitionResponse()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "context.client.poll()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "context.pollUntilResponse()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testFetchRequestAtLogStartOffsetWithValidEpoch['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testFetchRequestAtLogStartOffsetWithInvalidEpoch['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "context.log.deleteBeforeSnapshot(oldestSnapshotId)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
26->6 [style = bold, label=""];
16->24 [style = bold, label=""];
8->7 [style = solid, label="epoch"];
2->20 [style = solid, label="localId"];
8->23 [style = solid, label="epoch"];
6->28 [style = bold, label=""];
8->29 [style = solid, label="epoch"];
27->2 [style = bold, label=""];
10->3 [style = solid, label="otherNodeId"];
25->2 [style = bold, label=""];
7->18 [style = bold, label=""];
17->19 [style = bold, label=""];
20->5 [style = bold, label=""];
12->2 [style = bold, label=""];
21->17 [style = bold, label=""];
2->10 [style = bold, label=""];
22->15 [style = bold, label=""];
5->9 [style = bold, label=""];
10->28 [style = solid, label="otherNodeId"];
3->22 [style = solid, label="syncNodeId"];
14->26 [style = bold, label=""];
2->10 [style = solid, label="localId"];
8->21 [style = solid, label="epoch"];
10->3 [style = bold, label=""];
11->7 [style = bold, label=""];
8->1 [style = bold, label=""];
6->21 [style = bold, label=""];
2->4 [style = solid, label="localId"];
0->9 [style = solid, label="oldestSnapshotId"];
23->13 [style = bold, label=""];
19->29 [style = dashed, label="0"];
2->18 [style = solid, label="localId"];
19->11 [style = bold, label=""];
8->28 [style = solid, label="epoch"];
14->6 [style = bold, label=""];
9->14 [style = bold, label=""];
21->28 [style = dashed, label="0"];
15->20 [style = bold, label=""];
8->22 [style = solid, label="epoch"];
8->1 [style = solid, label="epoch"];
3->4 [style = solid, label="syncNodeId"];
10->21 [style = solid, label="otherNodeId"];
1->22 [style = bold, label=""];
4->0 [style = bold, label=""];
24->8 [style = bold, label=""];
0->26 [style = solid, label="oldestSnapshotId"];
3->4 [style = bold, label=""];
10->4 [style = solid, label="otherNodeId"];
17->29 [style = bold, label=""];
2->29 [style = solid, label="localId"];
18->23 [style = bold, label=""];
28->17 [style = bold, label=""];
8->20 [style = solid, label="epoch"];
0->16 [style = bold, label=""];
}
