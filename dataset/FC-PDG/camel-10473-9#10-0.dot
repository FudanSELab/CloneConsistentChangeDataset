digraph {
2 [style = filled, label = "on = name@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(source.endsWith(\"capacity: 1000(\"))@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "name.getCanonicalName().contains(\"DefaultValidatorRegistry\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,current.intValue())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "testManageValidatorRegistry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "TabularData data = (TabularData)mbeanServer.invoke(on,\"listEndpoints\",null,null)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "data = (TabularData)mbeanServer.invoke(on,\"listEndpoints\",null,null)@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "String source = (String)mbeanServer.getAttribute(on,\"Source\")@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "getMockEndpoint(\"mock:result\").expectedMessageCount(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<ObjectName> list = new ArrayList<>(set)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(3,data.size())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(1,current.intValue())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Set<ObjectName> set = mbeanServer.queryNames(new ObjectName(\"*:type=services,*\"),null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"DynamicSize\")@@@24@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(source.startsWith(\"ValidatorRegistry\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "MBeanServer mbeanServer = getMBeanServer()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "mbeanServer.invoke(on,\"purge\",null,null)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(2,current.intValue())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertTrue(source.startsWith(\"EndpointRegistry\"))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"StaticSize\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(2,current.intValue())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(2,current.intValue())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(3,current.intValue())@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Integer max = (Integer)mbeanServer.getAttribute(on,\"MaximumCacheSize\")@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "name.getCanonicalName().contains(\"DefaultEndpointRegistry\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "template.sendBody(\"log:foo\",\"Hello World\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TabularData data = (TabularData)mbeanServer.invoke(on,\"listValidators\",null,null)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"Size\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"StaticSize\")@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertNotNull(on,\"Should have found ValidatorRegistry\")@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(0,current.intValue())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "testManageEndpointRegistry['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"DynamicSize\")@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "assertNotNull(on,\"Should have found EndpointRegistry\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertTrue(source.endsWith(\"capacity: 1000\"))@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertMockEndpointsSatisfied()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "current = (Integer)mbeanServer.getAttribute(on,\"DynamicSize\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(0,current.intValue())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Integer current = (Integer)mbeanServer.getAttribute(on,\"Size\")@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(3,current.intValue())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testManageValidatorRegistry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "assertEquals(2,data.size())@@@39@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "template.sendBody(\"direct:start\",\"Hello World\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(1000,max.intValue())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "ObjectName on = null@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->36 [style = solid, label="on"];
15->27 [style = solid, label="on"];
2->1 [style = solid, label="on"];
32->23 [style = bold, label=""];
15->8 [style = solid, label="on"];
2->9 [style = solid, label="on"];
15->35 [style = solid, label="on"];
26->9 [style = bold, label=""];
8->6 [style = bold, label=""];
3->16 [style = bold, label=""];
15->42 [style = solid, label="on"];
41->2 [style = dotted, label="true"];
12->43 [style = dashed, label="0"];
15->1 [style = solid, label="on"];
2->34 [style = solid, label="on"];
15->20 [style = bold, label=""];
2->36 [style = bold, label=""];
18->32 [style = bold, label=""];
15->41 [style = bold, label=""];
17->36 [style = dashed, label="0"];
33->44 [style = bold, label=""];
13->14 [style = bold, label=""];
22->13 [style = bold, label=""];
2->19 [style = solid, label="on"];
15->9 [style = solid, label="on"];
15->3 [style = solid, label="on"];
5->10 [style = bold, label=""];
24->19 [style = bold, label=""];
2->40 [style = solid, label="on"];
19->12 [style = bold, label=""];
12->21 [style = bold, label=""];
7->0 [style = bold, label=""];
6->37 [style = dashed, label="0"];
41->2 [style = bold, label=""];
44->38 [style = bold, label=""];
9->34 [style = dashed, label="0"];
2->31 [style = solid, label="on"];
15->36 [style = solid, label="on"];
21->9 [style = bold, label=""];
2->27 [style = solid, label="on"];
20->41 [style = dashed, label="0"];
2->42 [style = solid, label="on"];
11->8 [style = bold, label=""];
14->18 [style = bold, label=""];
15->19 [style = solid, label="on"];
2->17 [style = bold, label=""];
15->34 [style = solid, label="on"];
2->0 [style = solid, label="on"];
23->5 [style = bold, label=""];
18->23 [style = bold, label=""];
2->44 [style = solid, label="on"];
15->0 [style = solid, label="on"];
21->34 [style = bold, label=""];
35->39 [style = bold, label=""];
0->11 [style = bold, label=""];
1->7 [style = bold, label=""];
15->31 [style = solid, label="on"];
4->31 [style = bold, label=""];
6->27 [style = bold, label=""];
31->42 [style = bold, label=""];
41->36 [style = bold, label=""];
30->35 [style = bold, label=""];
16->1 [style = bold, label=""];
21->26 [style = dashed, label="0"];
28->8 [style = bold, label=""];
17->3 [style = bold, label=""];
40->30 [style = bold, label=""];
27->24 [style = bold, label=""];
8->37 [style = bold, label=""];
38->40 [style = bold, label=""];
19->43 [style = bold, label=""];
43->21 [style = bold, label=""];
20->17 [style = bold, label=""];
10->15 [style = bold, label=""];
0->6 [style = bold, label=""];
25->13 [style = bold, label=""];
2->17 [style = solid, label="on"];
9->4 [style = bold, label=""];
15->17 [style = solid, label="on"];
42->33 [style = bold, label=""];
6->19 [style = bold, label=""];
12->26 [style = bold, label=""];
36->3 [style = bold, label=""];
2->35 [style = solid, label="on"];
20->2 [style = bold, label=""];
11->28 [style = dashed, label="0"];
5->10 [style = solid, label="set"];
15->44 [style = solid, label="on"];
2->3 [style = solid, label="on"];
15->40 [style = solid, label="on"];
34->4 [style = bold, label=""];
20->2 [style = dotted, label="true"];
37->19 [style = bold, label=""];
2->8 [style = solid, label="on"];
0->28 [style = bold, label=""];
29->13 [style = bold, label=""];
}
