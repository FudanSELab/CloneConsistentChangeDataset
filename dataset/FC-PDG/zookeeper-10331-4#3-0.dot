digraph {
28 [style = filled, label = "assertTrue(children.contains(\"b\"))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "Assert.assertEquals(\"1 children - c should be deleted \",1,children.size())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<String> children = zk.getChildren(\"/a\",false)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testDeleteRecursiveFail['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "List<String> children = zk.getChildren(\"/a\",false)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "zk.create(\"/a/c/0/surprise\",\"\".getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(2,zk.getACL(\"/a/c/0\",new Stat()).size())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertEquals(1,zk.getACL(\"/a/c/0\",new Stat()).size())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Assert.assertTrue(ZKUtil.deleteRecursive(zk,\"/a\",1000))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "children = zk.getChildren(\"/a\",false)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ACL deleteProtection = new ACL(ZooDefs.Perms.DELETE,new Id(\"digest\",\"user:tl+z3z0vO6PfPfEENfLF96E6pM0=\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "List<ACL> acls = Arrays.asList(new ACL(ZooDefs.Perms.READ,Ids.ANYONE_ID_UNSAFE),deleteProtection)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(ZKUtil.deleteRecursive(zk,\"/a\",1000))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(ZKUtil.deleteRecursive(zk,\"/a/b\",1000))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "final ZooKeeper zk = createClient()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "zk.setACL(\"/a/c/0\",acls,-1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(ZKUtil.deleteRecursive(zk,\"/a/c\",1000))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "zk.addAuthInfo(deleteProtection.getId().getScheme(),\"user:test\".getBytes())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(ZKUtil.deleteRecursive(zk,\"/a\",1000))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "setupDataTree(zk)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(\"2 children - c should fail to be deleted \",2,children.size())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(2,zk.getACL(\"/a/c/0\",new Stat()).size())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"1 children - b should be deleted \",1,children.size())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"1 children - b should be deleted \",1,children.size())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "testDeleteRecursiveFail['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"2 children - c should fail to be deleted \",2,children.size())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "List<ACL> acls = Arrays.asList(new ACL(ZooDefs.Perms.READ,Ids.ANYONE_ID_UNSAFE),deleteProtection)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "testDeleteRecursive['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertNull(zk.exists(\"/a\",null))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(1,zk.getACL(\"/a/c/0\",new Stat()).size())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNull(zk.exists(\"/a\",null))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "assertFalse(ZKUtil.deleteRecursive(zk,\"/a/c\",1000))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertTrue(children.contains(\"b\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertNull(zk.exists(\"/a\",null))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertTrue(ZKUtil.deleteRecursive(zk,\"/a/b\",1000))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Assert.assertTrue(children.contains(\"b\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertTrue(ZKUtil.deleteRecursive(zk,\"/a/c\",1000))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->26 [style = solid, label="zk"];
16->1 [style = solid, label="zk"];
23->14 [style = solid, label="acls"];
24->28 [style = bold, label=""];
16->0 [style = bold, label=""];
14->25 [style = bold, label=""];
10->15 [style = bold, label=""];
15->7 [style = bold, label=""];
8->23 [style = bold, label=""];
3->26 [style = dashed, label="0"];
11->14 [style = bold, label=""];
16->0 [style = solid, label="zk"];
26->5 [style = bold, label=""];
16->35 [style = solid, label="zk"];
2->1 [style = bold, label=""];
6->32 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
11->22 [style = dashed, label="0"];
23->4 [style = bold, label=""];
16->18 [style = solid, label="zk"];
19->10 [style = bold, label=""];
15->29 [style = dashed, label="0"];
12->16 [style = bold, label=""];
7->20 [style = bold, label=""];
13->25 [style = dashed, label="0"];
27->16 [style = bold, label=""];
36->33 [style = bold, label=""];
16->19 [style = solid, label="zk"];
6->2 [style = bold, label=""];
20->21 [style = bold, label=""];
8->17 [style = bold, label=""];
16->33 [style = solid, label="zk"];
8->17 [style = solid, label="deleteProtection"];
3->5 [style = bold, label=""];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
10->29 [style = bold, label=""];
9->21 [style = dashed, label="0"];
6->24 [style = dashed, label="0"];
5->24 [style = bold, label=""];
18->20 [style = dashed, label="0"];
25->26 [style = bold, label=""];
2->28 [style = dashed, label="0"];
0->8 [style = bold, label=""];
18->9 [style = bold, label=""];
28->19 [style = bold, label=""];
7->18 [style = bold, label=""];
0->35 [style = bold, label=""];
29->7 [style = bold, label=""];
32->36 [style = bold, label=""];
8->23 [style = solid, label="deleteProtection"];
17->14 [style = solid, label="acls"];
34->32 [style = bold, label=""];
33->31 [style = bold, label=""];
17->23 [style = dashed, label="0"];
14->13 [style = bold, label=""];
16->20 [style = solid, label="zk"];
22->14 [style = bold, label=""];
4->11 [style = bold, label=""];
35->34 [style = bold, label=""];
1->10 [style = bold, label=""];
30->16 [style = bold, label=""];
4->22 [style = bold, label=""];
16->3 [style = solid, label="zk"];
17->4 [style = bold, label=""];
}
