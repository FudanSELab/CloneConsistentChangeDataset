digraph {
9 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testQuery(\"SELECT dim1, COUNT(*) FROM foo\" + \"WHERE dim1 IN ('abc', 'def')\" + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt = 1)\" + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt <> 2)\" + \"GROUP BY 1\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(join(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).filters(selector(\"cnt\",\"1\",null)).aggregators(new LongMaxAggregatorFactory(\"a0\",\"__time\")).context(TIMESERIES_CONTEXT_DEFAULT).build()),\"j0.\",\"(\"__time\" == \"j0.a0\")\",JoinType.INNER),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).filters(not(selector(\"cnt\",\"2\",null))).aggregators(new LongMaxAggregatorFactory(\"a0\",\"__time\")).context(TIMESERIES_CONTEXT_DEFAULT).build()),\"_j0.\",\"(\"__time\" == \"_j0.a0\")\",JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimFilter(in(\"dim1\",ImmutableList.of(\"abc\",\"def\"),null)).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@91743c))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "cannotVectorize()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testTwoSemiJoinsSimultaneously['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testQuery(\"SELECT dim1, COUNT(*) FROM foo\" + \"WHERE dim1 IN ('abc', 'def')\" + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt = 1)\" + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt <> 2)\" + \"GROUP BY 1\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(join(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).filters(selector(\"cnt\",\"1\",null)).aggregators(new LongMaxAggregatorFactory(\"a0\",\"__time\")).context(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",\"(\"__time\" == \"j0.a0\")\",JoinType.INNER),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).filters(not(selector(\"cnt\",\"2\",null))).aggregators(new LongMaxAggregatorFactory(\"a0\",\"__time\")).context(QUERY_CONTEXT_DEFAULT).build()),\"_j0.\",\"(\"__time\" == \"_j0.a0\")\",JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimFilter(in(\"dim1\",ImmutableList.of(\"abc\",\"def\"),null)).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9174fb))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testQuery(\"SELECT dim1, COUNT(*) FROM\" + \"foo\" + \"INNER JOIN (SELECT MAX(__time) t FROM foo) t0 on t0.t = foo.__time\" + \"LEFT JOIN (SELECT MIN(__time) t FROM foo) t1 on t1.t = foo.__time\" + \"WHERE dim1 IN ('abc', 'def') AND t1.t is null\" + \"GROUP BY 1\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(join(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).aggregators(new LongMaxAggregatorFactory(\"a0\",\"__time\")).context(TIMESERIES_CONTEXT_DEFAULT).build()),\"j0.\",\"(\"__time\" == \"j0.a0\")\",JoinType.INNER),new QueryDataSource(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).aggregators(new LongMinAggregatorFactory(\"a0\",\"__time\")).context(TIMESERIES_CONTEXT_DEFAULT).build()),\"_j0.\",\"(\"__time\" == \"_j0.a0\")\",JoinType.LEFT)).setInterval(querySegmentSpec(Filtration.eternity())).setGranularity(Granularities.ALL).setDimFilter(and(in(\"dim1\",ImmutableList.of(\"abc\",\"def\"),null),selector(\"_j0.a0\",null,null))).setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\",\"d0\",ValueType.STRING))).setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\"))).setContext(queryContext).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9175ab))@@@4@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testTwoSemiJoinsSimultaneously['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "!isRewriteJoinToFilter(queryContext)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2->3 [style = dotted, label="true"];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
8->4 [style = bold, label=""];
9->4 [style = solid, label="queryContext"];
5->3 [style = dotted, label="true"];
7->9 [style = dotted, label="true"];
5->0 [style = bold, label=""];
7->8 [style = bold, label=""];
3->1 [style = solid, label="queryContext"];
0->4 [style = bold, label=""];
0->6 [style = bold, label=""];
0->1 [style = bold, label=""];
4->6 [style = bold, label=""];
1->6 [style = dashed, label="0"];
3->9 [style = dashed, label="0"];
0->4 [style = dotted, label="true"];
3->6 [style = solid, label="queryContext"];
}
