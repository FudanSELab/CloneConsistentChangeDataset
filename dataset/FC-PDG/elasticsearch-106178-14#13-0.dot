digraph {
16 [style = filled, label = "restController.dispatchRequest(fakeRequest,channel,threadContext)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "AssertingChannel channel = new AssertingChannel(fakeRequest,false,RestStatus.OK)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertTrue(channel.getSendResponseCalled())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final RestController restController = new RestController(headers,null,null,circuitBreakerService,usageService)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testRequestWithDisallowedMultiValuedHeaderButSameValues['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(channel.getSendResponseCalled())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testRequestWithDisallowedMultiValuedHeader['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Map<String,List<String>> restHeaders = new HashMap<>()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "restController.dispatchRequest(fakeRequest,channel,threadContext)@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "restHeaders.put(\"header.2\",List.of(\"foo\",\"bar\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(channel.getSendResponseCalled())@@@18@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\",true),new RestHeaderDefinition(\"header.2\",false)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "AssertingChannel channel = new AssertingChannel(fakeRequest,false,RestStatus.OK)@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRequestWithDisallowedMultiValuedHeaderButSameValues['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final ThreadContext threadContext = client.threadPool().getThreadContext()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "restController.registerHandler(RestRequest.Method.GET,\"/bar\",new RestHandler(){@Override public void handleRequest(RestRequest request,RestChannel channel,NodeClient client){channel.sendResponse(new BytesRestResponse(RestStatus.OK,BytesRestResponse.TEXT_CONTENT_TYPE,BytesArray.EMPTY))}})@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final RestController restController = new RestController(headers,null,client,circuitBreakerService,usageService)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "restController.registerHandler(new Route(GET,\"/bar\"),null)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "restHeaders.put(\"header.1\",Collections.singletonList(\"boo\"))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "restController.dispatchRequest(fakeRequest,channel,threadContext)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "restHeaders.put(\"header.2\",List.of(\"foo\",\"foo\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "AssertingChannel channel = new AssertingChannel(fakeRequest,false,RestStatus.BAD_REQUEST)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
8->10 [style = bold, label=""];
22->19 [style = solid, label="fakeRequest"];
0->9 [style = bold, label=""];
18->19 [style = solid, label="channel"];
22->18 [style = solid, label="fakeRequest"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
18->19 [style = bold, label=""];
0->16 [style = solid, label="fakeRequest"];
14->16 [style = solid, label="channel"];
1->2 [style = solid, label="headers"];
23->3 [style = bold, label=""];
8->10 [style = solid, label="channel"];
19->17 [style = bold, label=""];
20->6 [style = bold, label=""];
9->8 [style = bold, label=""];
4->21 [style = dashed, label="0"];
0->22 [style = dashed, label="0"];
0->8 [style = solid, label="fakeRequest"];
6->16 [style = solid, label="threadContext"];
1->23 [style = bold, label=""];
4->0 [style = bold, label=""];
0->14 [style = solid, label="fakeRequest"];
5->21 [style = bold, label=""];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
22->18 [style = bold, label=""];
21->22 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
12->14 [style = bold, label=""];
0->10 [style = solid, label="fakeRequest"];
6->19 [style = solid, label="threadContext"];
1->2 [style = bold, label=""];
9->12 [style = dashed, label="0"];
13->6 [style = bold, label=""];
1->23 [style = solid, label="headers"];
6->10 [style = solid, label="threadContext"];
10->11 [style = bold, label=""];
}
