digraph {
1 [style = filled, label = "File file = this.temporaryFolder.newFile()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "MockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(\"application/zip\",file.getAbsolutePath())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fileNotOverwrittenByDefault['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "mockSuccessfulProjectGeneration(request)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "mockSuccessfulProjectGeneration(request)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(this.command.run(\"--force\")).isEqualTo(ExitStatus.OK)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "fileNotOverwrittenByDefault['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "long fileLength = file.length()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(this.command.run()).as(\"Should have failed\").isEqualTo(ExitStatus.ERROR)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "@TempDir File tempDir@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertThat(file.length()).as(\"File should not have changed\").isEqualTo(fileLength)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "overwriteFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "file.createNewFile()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(fileLength != file.length()).as(\"File should have changed\").isTrue()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "File file = new File(tempDir,\"test.file\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10->7 [style = solid, label="tempDir"];
4->14 [style = bold, label=""];
5->14 [style = dashed, label="0"];
3->1 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
12->1 [style = bold, label=""];
0->4 [style = solid, label="request"];
8->0 [style = bold, label=""];
0->11 [style = solid, label="fileLength"];
2->0 [style = bold, label=""];
6->13 [style = dashed, label="0"];
5->6 [style = bold, label=""];
0->4 [style = bold, label=""];
6->11 [style = bold, label=""];
2->6 [style = solid, label="fileLength"];
4->5 [style = solid, label="request"];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
1->7 [style = dashed, label="0"];
9->10 [style = dotted, label="true"];
4->5 [style = bold, label=""];
}
