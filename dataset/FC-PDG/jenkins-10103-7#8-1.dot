digraph {
10 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "createNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"CustomSlaveName\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invoke()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "createNodeSpecifyingDifferentNameExplicitly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomSlaveName\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "createNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(\"A slave with original name should be left untouched\",j.jenkins.getNode(\"SlaveFromXml\"),equalTo(originalSlave))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"CustomSlaveName\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"SlaveFromXML\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final Node originalSlave = j.createSlave(\"SlaveFromXml\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result,succeededSilently())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result,succeededSilently())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->9 [style = bold, label=""];
11->8 [style = bold, label=""];
4->9 [style = dashed, label="0"];
8->4 [style = solid, label="result"];
4->1 [style = bold, label=""];
2->5 [style = solid, label="result"];
1->6 [style = bold, label=""];
6->0 [style = bold, label=""];
8->4 [style = bold, label=""];
9->12 [style = bold, label=""];
15->10 [style = bold, label=""];
3->2 [style = bold, label=""];
10->13 [style = bold, label=""];
14->11 [style = bold, label=""];
7->2 [style = bold, label=""];
11->9 [style = solid, label="originalSlave"];
5->4 [style = bold, label=""];
2->5 [style = bold, label=""];
12->15 [style = bold, label=""];
}
