digraph {
12 [style = filled, label = "return new Indexer(){public void begin(){}public void partitionDelete(DeletionTime deletionTime){}public void rangeTombstone(RangeTombstone tombstone){}public void insertRow(Row row){if (isPrimaryKeyIndex()) {indexPrimaryKey(row.clustering(),getPrimaryKeyIndexLiveness(row),row.deletion())}{if (indexedColumn.isComplex()) indexCells(row.clustering(),row.getComplexColumnData(indexedColumn))indexCell(row.clustering(),row.getCell(indexedColumn))}}public void removeRow(Row row){if (isPrimaryKeyIndex()) indexPrimaryKey(row.clustering(),row.primaryKeyLivenessInfo(),row.deletion())if (indexedColumn.isComplex()) removeCells(row.clustering(),row.getComplexColumnData(indexedColumn))removeCell(row.clustering(),row.getCell(indexedColumn))}public void updateRow(Row oldRow,Row newRow){if (isPrimaryKeyIndex()) indexPrimaryKey(newRow.clustering(),newRow.primaryKeyLivenessInfo(),newRow.deletion())if (indexedColumn.isComplex()) {indexCells(newRow.clustering(),newRow.getComplexColumnData(indexedColumn))removeCells(oldRow.clustering(),oldRow.getComplexColumnData(indexedColumn))}{indexCell(newRow.clustering(),newRow.getCell(indexedColumn))removeCell(oldRow.clustering(),oldRow.getCell(indexedColumn))}}public void finish(){}private void indexCells(Clustering<?> clustering,Iterable<Cell<?>> cells){if (cells == null) returnfor (Cell<?> cell : cells)indexCell(clustering,cell)}private void indexCell(Clustering<?> clustering,Cell<?> cell){if (cell == null || !cell.isLive(nowInSec)) returninsert(key.getKey(),clustering,cell,LivenessInfo.withExpirationTime(cell.timestamp(),cell.ttl(),cell.localDeletionTime()),ctx)}private void removeCells(Clustering<?> clustering,Iterable<Cell<?>> cells){if (cells == null) returnfor (Cell<?> cell : cells)removeCell(clustering,cell)}private void removeCell(Clustering<?> clustering,Cell<?> cell){if (cell == null || !cell.isLive(nowInSec)) returndelete(key.getKey(),clustering,cell,ctx,nowInSec)}private void indexPrimaryKey(final Clustering<?> clustering,final LivenessInfo liveness,final Row.Deletion deletion){if (liveness.timestamp() != LivenessInfo.NO_TIMESTAMP) insert(key.getKey(),clustering,null,liveness,ctx)if (!deletion.isLive()) delete(key.getKey(),clustering,deletion.time(),ctx)}private LivenessInfo getPrimaryKeyIndexLiveness(Row row){long timestamp = row.primaryKeyLivenessInfo().timestamp()int ttl = row.primaryKeyLivenessInfo().ttl()for (Cell<?> cell : row.cells()){long cellTimestamp = cell.timestamp()if (cell.isLive(nowInSec)) {if (cellTimestamp > timestamp) {timestamp = cellTimestampttl = cell.ttl()}}}return LivenessInfo.create(timestamp,ttl,nowInSec)}}@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final WriteContext ctx@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "final int nowInSec@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "!isPrimaryKeyIndex() && !columns.contains(indexedColumn)@@@3@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final RegularAndStaticColumns columns@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final RegularAndStaticColumns columns@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final DecoratedKey key@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final WriteContext ctx@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final RegularAndStaticColumns columns@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "return null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "final IndexTransaction.Type transactionType@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "indexerFor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "indexerFor['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "indexerFor['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final DecoratedKey key@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "final IndexTransaction.Type transactionType@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final IndexTransaction.Type transactionType@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final DecoratedKey key@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final int nowInSec@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
18->12 [style = solid, label="nowInSec"];
16->12 [style = solid, label="ctx"];
13->15 [style = bold, label=""];
4->3 [style = dotted, label="true"];
15->12 [style = bold, label=""];
7->8 [style = dotted, label="true"];
7->10 [style = dotted, label="true"];
4->1 [style = dotted, label="true"];
4->0 [style = dotted, label="true"];
7->9 [style = dotted, label="true"];
11->17 [style = dotted, label="true"];
7->5 [style = dotted, label="true"];
11->16 [style = dotted, label="true"];
13->12 [style = bold, label=""];
11->14 [style = dotted, label="true"];
11->18 [style = dotted, label="true"];
11->13 [style = bold, label=""];
4->5 [style = dotted, label="true"];
13->15 [style = dotted, label="true"];
11->5 [style = dotted, label="true"];
4->2 [style = dotted, label="true"];
7->6 [style = dotted, label="true"];
}
