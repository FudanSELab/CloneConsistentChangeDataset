digraph {
8 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "getDataTypeShouldReturnGemfireEnum['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "int someClassId = 1@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DataOutputStream out = new DataOutputStream(baos)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "String type = DataType.getDataType(bytes)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "out.writeByte(DSCODE.USER_DATA_SERIALIZABLE_4.toByte())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(type).isEqualTo(\"org.apache.geode.Instantiator:org.apache.geode.internal.cache.execute.data.CustId\")@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "out.writeByte(DSCODE.GEMFIRE_ENUM.toByte())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(InternalInstantiator.getClassId(mockInstantiator.getClass())).thenReturn(someClassId)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "mockInstantiator.getInstantiatedClass()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable4['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(type).isEqualTo(\"java.lang.Enum:GEMFIRE_ENUM\")@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "PowerMockito.mockStatic()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "out.writeInt(someClassId)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "PowerMockito.mockStatic()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(InternalInstantiator.getInstantiator(someClassId)).thenReturn(mockInstantiator)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "String type = DataType.getDataType(bytes)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "doReturn().when(mockInstantiator).getInstantiatedClass()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "ByteArrayOutputStream baos = new ByteArrayOutputStream()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "when(DataSerializer.readString(any())).thenReturn(\"GEMFIRE_ENUM\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "getDataTypeShouldReturnUserDataSeriazliable4['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "byte(( bytes = baos.toByteArray()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Instantiator mockInstantiator = PowerMockito.mock()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5->10 [style = bold, label=""];
15->10 [style = bold, label=""];
14->13 [style = solid, label="mockInstantiator"];
16->18 [style = bold, label=""];
3->1 [style = bold, label=""];
12->16 [style = dashed, label="0"];
4->6 [style = bold, label=""];
1->2 [style = solid, label="bytes"];
10->3 [style = solid, label="someClassId"];
22->21 [style = bold, label=""];
19->17 [style = bold, label=""];
7->8 [style = bold, label=""];
10->7 [style = bold, label=""];
10->6 [style = solid, label="someClassId"];
11->5 [style = bold, label=""];
18->20 [style = bold, label=""];
2->0 [style = bold, label=""];
19->17 [style = solid, label="baos"];
13->7 [style = bold, label=""];
23->19 [style = bold, label=""];
6->13 [style = bold, label=""];
7->8 [style = solid, label="baos"];
9->14 [style = bold, label=""];
10->4 [style = bold, label=""];
14->21 [style = dashed, label="0"];
1->2 [style = bold, label=""];
12->3 [style = bold, label=""];
20->7 [style = bold, label=""];
18->20 [style = solid, label="bytes"];
0->7 [style = dashed, label="0"];
14->11 [style = bold, label=""];
8->12 [style = bold, label=""];
17->16 [style = bold, label=""];
21->23 [style = bold, label=""];
}
