digraph {
5 [style = filled, label = "testAutoConvertMatchLong['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "processor.execute(ingestDocument)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(convertedValue,not(randomDouble))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testAutoConvertMatchLong['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testAutoConvertDoubleNotMatched['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(),Collections.singletonMap(\"field\",randomString))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "float randomFloat = Float.parseFloat(randomString)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "long randomLong = randomLong()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Object convertedValue = ingestDocument.getFieldValue(\"field\",)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String randomString = Long.toString(randomLong)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(),Collections.singletonMap(\"field\",randomString))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "double randomDouble = randomDouble()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertThat(convertedValue,equalTo(randomFloat))@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "String randomString = Double.toString(randomDouble)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Processor processor = new ConvertProcessor(randomAlphaOfLength(10),\"field\",\"field\",Type.AUTO,false)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Processor processor = new ConvertProcessor(randomAlphaOfLength(10),null,\"field\",\"field\",Type.AUTO,false)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
4->10 [style = bold, label=""];
1->4 [style = bold, label=""];
7->1 [style = bold, label=""];
12->3 [style = solid, label="randomString"];
11->14 [style = bold, label=""];
6->2 [style = solid, label="randomLong"];
12->15 [style = bold, label=""];
0->7 [style = solid, label="ingestDocument"];
6->14 [style = dashed, label="0"];
6->4 [style = solid, label="randomLong"];
15->3 [style = bold, label=""];
4->10 [style = solid, label="convertedValue"];
8->7 [style = bold, label=""];
9->6 [style = bold, label=""];
6->2 [style = bold, label=""];
15->13 [style = solid, label="randomFloat"];
2->12 [style = dashed, label="0"];
2->0 [style = bold, label=""];
4->13 [style = solid, label="convertedValue"];
5->6 [style = bold, label=""];
10->13 [style = bold, label=""];
3->7 [style = bold, label=""];
3->1 [style = solid, label="ingestDocument"];
2->0 [style = solid, label="randomString"];
12->15 [style = solid, label="randomString"];
14->12 [style = bold, label=""];
0->8 [style = bold, label=""];
3->8 [style = dashed, label="0"];
14->10 [style = solid, label="randomDouble"];
4->10 [style = dashed, label="0"];
14->12 [style = solid, label="randomDouble"];
1->4 [style = solid, label="convertedValue"];
}
