digraph {
5 [style = filled, label = "Node node = metadata.fetch().nodes().get(0)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testMissingOffsetNoResetPolicy['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testResetToCommittedOffset['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testMissingOffsetNoResetPolicy['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MockClient client = new MockClient(time,metadata)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Node coordinator = new Node(Integer.MAX_VALUE - node.id(),node.host(),node.port())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,metadata,assignor,OffsetResetStrategy.NONE,true,groupId)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "consumer.assign(singletonList(tp0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "KafkaConsumer<String,String> consumer = newConsumer(time,client,metadata,assignor,OffsetResetStrategy.NONE,true)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "client.prepareResponseFrom(offsetResponse(Collections.singletonMap(tp0,539L),Errors.NONE),coordinator)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "PartitionAssignor assignor = new RoundRobinAssignor()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "client.prepareResponseFrom(offsetResponse(Collections.singletonMap(tp0,-1L),Errors.NONE),coordinator)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "client.prepareResponseFrom(new FindCoordinatorResponse(Errors.NONE,node),node)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(539L,consumer.position(tp0))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "initMetadata(client,Collections.singletonMap(topic,1))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Time time = new MockTime()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Metadata metadata = createMetadata()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "consumer.poll(Duration.ZERO)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
3->2 [style = solid, label="time"];
0->9 [style = bold, label=""];
1->8 [style = bold, label=""];
3->1 [style = solid, label="time"];
10->2 [style = solid, label="assignor"];
10->14 [style = solid, label="assignor"];
10->14 [style = bold, label=""];
6->14 [style = solid, label="metadata"];
0->17 [style = bold, label=""];
9->4 [style = bold, label=""];
1->2 [style = solid, label="client"];
6->2 [style = solid, label="metadata"];
3->6 [style = bold, label=""];
3->14 [style = solid, label="time"];
11->12 [style = bold, label=""];
15->3 [style = bold, label=""];
12->0 [style = bold, label=""];
7->3 [style = bold, label=""];
0->9 [style = solid, label="coordinator"];
6->1 [style = bold, label=""];
6->1 [style = solid, label="metadata"];
1->8 [style = solid, label="client"];
2->14 [style = dashed, label="0"];
8->5 [style = bold, label=""];
13->3 [style = bold, label=""];
9->17 [style = dashed, label="0"];
0->17 [style = solid, label="coordinator"];
10->2 [style = bold, label=""];
14->11 [style = bold, label=""];
2->11 [style = bold, label=""];
17->4 [style = bold, label=""];
1->14 [style = solid, label="client"];
4->16 [style = bold, label=""];
5->12 [style = solid, label="node"];
}
