digraph {
2 [style = filled, label = "final int indicator = 999999999@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<Integer>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertTrue(to.values().size() != 0)@@@29@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "ts.awaitDone(5,TimeUnit.SECONDS)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Action(){@Override public void run(){System.out.println(\"Main done!\")}}).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){@Override public Flowable<Integer> apply(Flowable<Integer> w){return w.startWithItem(indicator).doOnComplete(new Action(){@Override public void run(){System.out.println(\"inner done: \" + wip.incrementAndGet())}})}}).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer pv){System.out.println(pv)}}).subscribe(ts)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "takeFlatMapCompletes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestSubscriber<Integer> ts = new TestSubscriber<>()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "final AtomicInteger wip = new AtomicInteger()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "to.assertComplete()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "takeFlatMapCompletes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "takeFlatMapCompletes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TestObserver<Integer> to = new TestObserver<Integer>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertTrue(ts.values().size() != 0)@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "to.awaitDone(5,TimeUnit.SECONDS)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "ts.assertComplete()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ObservableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Action(){@Override public void run(){System.out.println(\"Main done!\")}}).flatMap(new Function<Observable<Integer>,Observable<Integer>>(){@Override public Observable<Integer> apply(Observable<Integer> w){return w.startWithItem(indicator).doOnComplete(new Action(){@Override public void run(){System.out.println(\"inner done: \" + wip.incrementAndGet())}})}}).doOnNext(new Consumer<Integer>(){@Override public void accept(Integer pv){System.out.println(pv)}}).subscribe(to)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->4 [style = bold, label=""];
2->6 [style = bold, label=""];
7->11 [style = dashed, label="0"];
0->12 [style = dashed, label="0"];
6->14 [style = dashed, label="0"];
7->3 [style = bold, label=""];
15->5 [style = bold, label=""];
3->0 [style = bold, label=""];
4->9 [style = dashed, label="0"];
9->6 [style = solid, label="ts"];
5->2 [style = bold, label=""];
11->10 [style = bold, label=""];
10->12 [style = bold, label=""];
4->15 [style = dashed, label="0"];
2->14 [style = bold, label=""];
8->9 [style = bold, label=""];
9->5 [style = bold, label=""];
3->10 [style = dashed, label="0"];
13->15 [style = bold, label=""];
6->7 [style = bold, label=""];
15->14 [style = solid, label="to"];
14->11 [style = bold, label=""];
4->5 [style = bold, label=""];
4->6 [style = solid, label="ts"];
}
