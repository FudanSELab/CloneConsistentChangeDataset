digraph {
6 [style = filled, label = "Assert.assertTrue(\"6 != 7 => true\",structEvaluator.eval(TestHelpers.Row.of(6,8,null,TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(6)))))))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testNotEqual['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertFalse(\"7 < 7 => false\",structEvaluator.eval(TestHelpers.Row.of(7,8,null,TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(7)))))))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Evaluator evaluator = new Evaluator(STRUCT,lessThan(\"x\",7))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertTrue(\"6 < 7 => true\",structEvaluator.eval(TestHelpers.Row.of(6,8,null,TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(6)))))))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertTrue(\"6 < 7 => true\",evaluator.eval(TestHelpers.Row.of(6,8,null,null)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNotEqual['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Evaluator evaluator = new Evaluator(STRUCT,notEqual(\"x\",7))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testLessThan['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Evaluator structEvaluator = new Evaluator(STRUCT,lessThan(\"s1.s2.s3.s4.i\",7))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(1,notEqual(\"x\",5).literals().size())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Assert.assertTrue(\"6 != 7 => true\",evaluator.eval(TestHelpers.Row.of(6,8,null)))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertFalse(\"7 < 7 => false\",evaluator.eval(TestHelpers.Row.of(7,8,null,null)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertFalse(\"7 != 7 => false\",evaluator.eval(TestHelpers.Row.of(7,8,null)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Evaluator structEvaluator = new Evaluator(STRUCT,notEqual(\"s1.s2.s3.s4.i\",7))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertFalse(\"7 != 7 => false\",structEvaluator.eval(TestHelpers.Row.of(7,8,null,TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(TestHelpers.Row.of(7)))))))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
12->9 [style = bold, label=""];
8->7 [style = bold, label=""];
14->13 [style = bold, label=""];
5->0 [style = bold, label=""];
1->3 [style = bold, label=""];
4->11 [style = dashed, label="0"];
13->15 [style = bold, label=""];
1->14 [style = dashed, label="0"];
10->11 [style = bold, label=""];
2->4 [style = bold, label=""];
7->4 [style = bold, label=""];
6->9 [style = dashed, label="0"];
3->13 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
3->5 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
11->14 [style = bold, label=""];
0->12 [style = dashed, label="0"];
}
