digraph {
18 [style = filled, label = "assertThat(groupByRowComparator.compare(o1,o2),is(0))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext,caseSensitives)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\",\"2\"))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement,new GroupByContext(Arrays.asList(createOrderByItem(new IndexOrderByItemSegment(0,0,1,OrderDirection.ASC,OrderDirection.ASC)),createOrderByItem(new IndexOrderByItemSegment(0,0,2,OrderDirection.ASC,OrderDirection.ASC)))),new OrderByContext(Collections.emptyList(),false),new ProjectionsContext(0,0,false,Collections.emptyList()),new PaginationContext(null,null,Collections.emptyList()))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertCompareToForAscWithGroupByItems['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ShardingSphereMetaData metaData = mock()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "selectStatement.setProjections(new ProjectionsSegment(0,0))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "final SelectStatement selectStatement@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(groupByRowComparator.compare(o1,o2) < 0)@@@12@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "selectStatement.setOrderBy(new OrderBySegment(0,0,Collections.emptyList()))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "GroupByRowComparator groupByRowComparator = new GroupByRowComparator(selectStatementContext,caseSensitives)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(metaData.getSchema()).thenReturn(mock())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertCompareToForEqualWithGroupByItems['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertCompareToForAscWithGroupByItems['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\",\"4\"))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"1\",\"2\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "MemoryQueryResultRow o2 = new MemoryQueryResultRow(mockQueryResult(\"3\",\"4\"))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "selectStatement.setGroupBy(new GroupBySegment(0,0,Arrays.asList(new IndexOrderByItemSegment(0,0,1,OrderDirection.ASC,OrderDirection.ASC),new IndexOrderByItemSegment(0,0,2,OrderDirection.ASC,OrderDirection.ASC))))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertTrue(groupByRowComparator.compare(o1,o2) < 0)@@@7@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final SelectStatement selectStatement@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(Collections.singletonMap(DefaultSchema.LOGIC_NAME,metaData),Collections.emptyList(),selectStatement,DefaultSchema.LOGIC_NAME)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "SelectStatementContext selectStatementContext = new SelectStatementContext(selectStatement,new GroupByContext(Arrays.asList(createOrderByItem(new IndexOrderByItemSegment(0,0,1,OrderDirection.ASC,OrderDirection.ASC)),createOrderByItem(new IndexOrderByItemSegment(0,0,2,OrderDirection.DESC,OrderDirection.ASC)))),new OrderByContext(Collections.emptyList(),false),new ProjectionsContext(0,0,false,Collections.emptyList()),new PaginationContext(null,null,Collections.emptyList()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "MemoryQueryResultRow o1 = new MemoryQueryResultRow(mockQueryResult(\"1\",\"2\"))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15->5 [style = dotted, label="true"];
17->10 [style = bold, label=""];
22->21 [style = dotted, label="true"];
4->3 [style = bold, label=""];
2->19 [style = dashed, label="0"];
16->11 [style = bold, label=""];
0->5 [style = dotted, label="true"];
22->19 [style = bold, label=""];
6->20 [style = dashed, label="0"];
0->2 [style = bold, label=""];
3->18 [style = solid, label="o1"];
12->14 [style = solid, label="o2"];
3->6 [style = bold, label=""];
1->18 [style = dashed, label="0"];
21->19 [style = solid, label="selectStatement"];
8->10 [style = solid, label="metaData"];
2->4 [style = bold, label=""];
10->7 [style = bold, label=""];
13->16 [style = bold, label=""];
9->14 [style = solid, label="o1"];
7->9 [style = bold, label=""];
20->18 [style = bold, label=""];
6->1 [style = bold, label=""];
3->20 [style = bold, label=""];
6->1 [style = solid, label="o2"];
3->1 [style = solid, label="o1"];
5->10 [style = solid, label="selectStatement"];
19->4 [style = solid, label="selectStatementContext"];
10->7 [style = solid, label="selectStatementContext"];
12->14 [style = bold, label=""];
5->21 [style = dashed, label="0"];
20->18 [style = solid, label="o2"];
11->17 [style = bold, label=""];
9->12 [style = bold, label=""];
5->2 [style = solid, label="selectStatement"];
19->4 [style = bold, label=""];
2->4 [style = solid, label="selectStatementContext"];
15->8 [style = bold, label=""];
8->13 [style = bold, label=""];
}
