digraph {
0 [style = filled, label = "Connector connectorMock = PowerMock.createMock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "EasyMock.expectLastCall().andReturn(true)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expectAdd(SourceSink.SOURCE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testRestartConnectorFailureOnStart['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "worker.startConnector(EasyMock.eq(CONNECTOR_NAME),EasyMock.eq(config),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED))@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "worker.stopAndAwaitConnector(CONNECTOR_NAME)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Map<String,String> config = connectorConfig(SourceSink.SOURCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "worker.stopConnector(CONNECTOR_NAME)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "cb.get(1000L,TimeUnit.MILLISECONDS)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Capture<Callback<TargetState>> onStart = EasyMock.newCapture()@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "testRestartConnector['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "herder.restartConnector(CONNECTOR_NAME,restartCallback)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "ExecutionException exception@@@19@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "herder.restartConnector(CONNECTOR_NAME,cb)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "FutureCallback<Void> cb = new FutureCallback<>()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L,TimeUnit.SECONDS)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "EasyMock.expectLastCall().andReturn(true)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "EasyMock.expectLastCall().andReturn(false)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "fail()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "herder.putConnectorConfig(CONNECTOR_NAME,config,false,createCallback)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "FutureCallback<Void> restartCallback = new FutureCallback<>()@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "PowerMock.replayAll()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "PowerMock.verifyAll()@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expectLastCall()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "PowerMock.replayAll()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertEquals(,exception.getCause().getClass())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "expectConfigValidation(connectorMock,true,config)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "EasyMock.expectLastCall().andAnswer(new IAnswer<Boolean>(){@Override public Boolean answer(){onStart.getValue().onCompletion(null,TargetState.STARTED)return true}})@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "PowerMock.verifyAll()@@@25@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertEquals(createdInfo(SourceSink.SOURCE),connectorInfo.result())@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "restartCallback.get(1000L,TimeUnit.MILLISECONDS)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "herder.putConnectorConfig(CONNECTOR_NAME,config,false,createCallback)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "worker.startConnector(EasyMock.eq(CONNECTOR_NAME),EasyMock.eq(config),EasyMock.anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED),EasyMock.capture(onStart))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "testRestartConnector['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->11 [style = solid, label="config"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
13->10 [style = bold, label=""];
23->20 [style = bold, label=""];
1->3 [style = solid, label="config"];
16->18 [style = bold, label=""];
22->15 [style = bold, label=""];
20->17 [style = bold, label=""];
15->19 [style = solid, label="onStart"];
12->32 [style = bold, label=""];
3->26 [style = bold, label=""];
9->22 [style = dashed, label="0"];
21->24 [style = bold, label=""];
32->7 [style = bold, label=""];
1->0 [style = bold, label=""];
25->14 [style = bold, label=""];
5->14 [style = bold, label=""];
0->3 [style = solid, label="connectorMock"];
4->26 [style = dashed, label="0"];
15->19 [style = bold, label=""];
13->19 [style = dashed, label="0"];
3->4 [style = bold, label=""];
33->30 [style = dotted, label="true"];
12->7 [style = bold, label=""];
11->2 [style = bold, label=""];
26->22 [style = bold, label=""];
14->1 [style = bold, label=""];
9->6 [style = bold, label=""];
27->23 [style = solid, label="restartCallback"];
24->16 [style = bold, label=""];
1->19 [style = solid, label="config"];
1->6 [style = solid, label="config"];
28->21 [style = bold, label=""];
6->31 [style = bold, label=""];
13->31 [style = dashed, label="0"];
18->27 [style = bold, label=""];
31->10 [style = bold, label=""];
30->7 [style = bold, label=""];
6->13 [style = bold, label=""];
1->24 [style = solid, label="config"];
29->14 [style = bold, label=""];
33->30 [style = bold, label=""];
27->23 [style = bold, label=""];
19->28 [style = bold, label=""];
8->12 [style = bold, label=""];
2->8 [style = bold, label=""];
2->8 [style = solid, label="cb"];
10->11 [style = bold, label=""];
}
