digraph {
14 [style = filled, label = "assertEquals(\"norm 16\",0.25F,sim.computeLengthNorm(16),0.0F)@@@12@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "SweetSpotSimilarity sim = getSimilarity(\"text\",)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"norm 3\",1.00F,sim.computeLengthNorm(3),0.0F)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "i++@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(\"tf: i=\" + i + \" : s=\" + sim.tf(i) + \" < d=\" + d.tf(i),sim.tf(i) < d.tf(i))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"norm 4\",1.00F,sim.computeLengthNorm(4),0.0F)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "assertTrue(\"norm 7 higher then norm 6\",computeNorm(sim,7) < computeNorm(sim,6))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "int i = 1@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"norm 2 == 6\",computeNorm(sim,1),computeNorm(sim,7),0.0F)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "assertEquals(\"tf: i=\" + i,d.tf(i),sim.tf(i),0.0F)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(\"tf i=\" + i,1.5F,sim.tf(i),0.0F)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(\"norm 1 == 7\",computeNorm(sim,1),computeNorm(sim,7),0.0F)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "int i = 0@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "int i = 6@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testDefaults['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"norm 3\",1.00F,computeNorm(sim,3),0.0F)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"norm 1 == 7\",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertTrue(\"norm 7 higher then norm 6\",sim.computeLengthNorm(7) < sim.computeLengthNorm(6))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "assertEquals(\"norm 1\",1.00F,sim.computeLengthNorm(1),0.0F)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"norm 20\",0.25F,computeNorm(sim,20),0.0F)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertEquals(\"norm 4\",0.50F,sim.computeLengthNorm(4),0.0F)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(\"norm 4\",1.00F,computeNorm(sim,4),0.0F)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "ClassicSimilarity d = new ClassicSimilarity()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i <= 6@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(\"norm 6 too high: \" + computeNorm(sim,6),computeNorm(sim,6) < 1.0F)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "testBaselineParameters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "i++@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "SweetSpotSimilarity sim = getSimilarity(\"text_baseline\",)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"norm 5\",1.00F,computeNorm(sim,5),0.0F)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(\"norm 5\",1.00F,sim.computeLengthNorm(5),0.0F)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "i <= 1000@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(\"norm 20\",0.25F,sim.computeLengthNorm(20),0.0F)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "testBaselineParameters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertTrue(\"norm 6 too high: \" + sim.computeLengthNorm(6),sim.computeLengthNorm(6) < 1.0F)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertEquals(\"norm 2 == 6\",sim.computeLengthNorm(1),sim.computeLengthNorm(7),0.0F)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10->18 [style = bold, label=""];
16->6 [style = solid, label="i"];
14->5 [style = solid, label="i"];
32->30 [style = solid, label="i"];
1->19 [style = solid, label="sim"];
15->13 [style = bold, label=""];
28->5 [style = bold, label=""];
29->33 [style = solid, label="i"];
5->14 [style = dotted, label="true"];
2->20 [style = dashed, label="0"];
30->33 [style = bold, label=""];
5->23 [style = bold, label=""];
29->30 [style = bold, label=""];
29->30 [style = solid, label="i"];
19->20 [style = bold, label=""];
18->27 [style = dashed, label="0"];
1->34 [style = dashed, label="0"];
18->11 [style = bold, label=""];
12->17 [style = bold, label=""];
12->32 [style = bold, label=""];
5->6 [style = dotted, label="true"];
17->3 [style = solid, label="i"];
3->15 [style = solid, label="i"];
17->32 [style = dashed, label="0"];
0->26 [style = dashed, label="0"];
3->15 [style = bold, label=""];
32->33 [style = solid, label="i"];
5->14 [style = bold, label=""];
10->22 [style = dashed, label="0"];
34->12 [style = bold, label=""];
15->16 [style = bold, label=""];
2->10 [style = bold, label=""];
32->30 [style = bold, label=""];
3->13 [style = solid, label="i"];
6->33 [style = dashed, label="0"];
4->7 [style = bold, label=""];
31->34 [style = bold, label=""];
4->28 [style = dashed, label="0"];
20->22 [style = bold, label=""];
15->13 [style = dotted, label="true"];
33->29 [style = bold, label=""];
7->5 [style = dashed, label="0"];
6->14 [style = bold, label=""];
8->0 [style = bold, label=""];
15->3 [style = dotted, label="true"];
1->27 [style = solid, label="sim"];
30->29 [style = dotted, label="true"];
14->6 [style = solid, label="i"];
16->5 [style = solid, label="i"];
16->14 [style = solid, label="i"];
30->28 [style = bold, label=""];
17->15 [style = solid, label="i"];
1->22 [style = solid, label="sim"];
5->6 [style = bold, label=""];
13->3 [style = bold, label=""];
22->27 [style = bold, label=""];
17->13 [style = solid, label="i"];
1->20 [style = solid, label="sim"];
7->19 [style = dashed, label="0"];
2->14 [style = dashed, label="0"];
7->2 [style = bold, label=""];
24->25 [style = bold, label=""];
23->19 [style = bold, label=""];
5->4 [style = bold, label=""];
25->26 [style = bold, label=""];
21->1 [style = bold, label=""];
1->26 [style = solid, label="sim"];
17->15 [style = bold, label=""];
1->12 [style = bold, label=""];
1->25 [style = solid, label="sim"];
16->5 [style = bold, label=""];
11->24 [style = dashed, label="0"];
11->8 [style = bold, label=""];
1->24 [style = solid, label="sim"];
8->25 [style = dashed, label="0"];
27->24 [style = bold, label=""];
32->29 [style = solid, label="i"];
1->23 [style = solid, label="sim"];
9->1 [style = bold, label=""];
4->23 [style = dashed, label="0"];
30->33 [style = dotted, label="true"];
14->5 [style = bold, label=""];
}
