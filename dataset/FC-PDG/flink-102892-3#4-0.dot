digraph {
2 [style = filled, label = "assertThat(validator.triggeredCheckpoints,contains(2L))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int i = 0@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "++i@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,validator.getAbortedCheckpointCounter())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,validator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(inputGate.getCheckpointBarrierHandler().isCheckpointPending(),equalTo(false))@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "CheckpointBarrierTracker checkpointBarrierTracker = (CheckpointBarrierTracker)inputGate.getCheckpointBarrierHandler()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "BufferOrEvent(( sequence = {createBarrier(2,0),createBarrier(2,1),createEndOfPartition(1),createBarrier(2,2)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(sequence(3(,inputGate.pollNext().get())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(-1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testDeduplicateChannelsWithBothBarrierAndEndOfPartition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testDeduplicateChannelsWithBothBarrierAndEndOfPartition['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(-1L)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testDeduplicateChannelsWithBothBarrierAndEndOfPartition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(sequence(i(,inputGate.pollNext().get())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,validator.getTriggeredCheckpointCounter())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "check(sequence(i(,inputGate.pollNext().get(),PAGE_SIZE)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "checkpointBarrierTracker.setEnableCheckpointAfterTasksFinished(true)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "i <= 2@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "inputGate.getCheckpointBarrierHandler().setEnableCheckpointAfterTasksFinished(true)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
13->9 [style = solid, label="i"];
3->17 [style = dashed, label="0"];
1->5 [style = dashed, label="0"];
9->11 [style = bold, label=""];
15->7 [style = bold, label=""];
5->9 [style = bold, label=""];
13->1 [style = solid, label="i"];
2->6 [style = bold, label=""];
7->1 [style = solid, label="sequence"];
0->12 [style = bold, label=""];
12->17 [style = bold, label=""];
16->12 [style = solid, label="validator"];
0->16 [style = dashed, label="0"];
19->11 [style = bold, label=""];
7->0 [style = bold, label=""];
7->12 [style = solid, label="sequence"];
7->5 [style = solid, label="sequence"];
13->5 [style = dotted, label="true"];
4->7 [style = bold, label=""];
14->7 [style = bold, label=""];
18->13 [style = solid, label="i"];
18->5 [style = solid, label="i"];
0->12 [style = solid, label="validator"];
12->13 [style = bold, label=""];
13->19 [style = bold, label=""];
13->9 [style = dotted, label="true"];
11->10 [style = bold, label=""];
3->8 [style = bold, label=""];
7->10 [style = solid, label="sequence"];
7->16 [style = bold, label=""];
9->1 [style = dotted, label="true"];
18->13 [style = bold, label=""];
13->5 [style = bold, label=""];
7->2 [style = solid, label="sequence"];
10->2 [style = bold, label=""];
12->3 [style = bold, label=""];
13->9 [style = bold, label=""];
9->1 [style = bold, label=""];
16->12 [style = bold, label=""];
17->18 [style = bold, label=""];
8->13 [style = bold, label=""];
9->13 [style = bold, label=""];
9->5 [style = dotted, label="true"];
}
