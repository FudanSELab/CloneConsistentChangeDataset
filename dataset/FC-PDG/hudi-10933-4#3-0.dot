digraph {
5 [style = filled, label = "fail(\"Should error out on a self-included file.\")@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(456,props.getInteger(\"bad.int.prop\",456))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(123,props.getInteger(\"int.prop\"))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(113.4,props.getDouble(\"double.prop\"),0.001)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(243.4,props.getDouble(\"double.prop\"),0.001)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"str\",props.getString(\"string.prop\",\"default\"))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(\"str\",props.getString(\"string.prop\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "IllegalArgumentException iae@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "new DFSPropertiesConfiguration(dfs,new Path(dfsBasePath + \"/t4.props\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertEquals(8578494434L,props.getLong(\"bad.long.prop\",8578494434L))@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testParsing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "{}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testIncludes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "assertEquals(false,props.getBoolean(\"bad.boolean.prop\",false))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "props.getString(\"invalid.key\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(123,props.getInteger(\"int.prop\",456))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(223.4,props.getDouble(\"bad.double.prop\",223.4),0.001)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\"t3.value\",props.getString(\"string.prop\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testIncludes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1354354354,props.getLong(\"long.prop\"))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "DFSPropertiesConfiguration cfg = new DFSPropertiesConfiguration(dfs,new Path(dfsBasePath + \"/t1.props\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(1354354354,props.getLong(\"long.prop\",8578494434L))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "TypedProperties props = cfg.getConfig()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(\"default\",props.getString(\"bad.string.prop\",\"default\"))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(props.getBoolean(\"boolean.prop\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(true,props.getBoolean(\"boolean.prop\"))@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(113.4,props.getDouble(\"double.prop\",223.4),0.001)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertEquals(5,props.size())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "fail(\"Should error out here.\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(true,props.getBoolean(\"boolean.prop\",false))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "DFSPropertiesConfiguration cfg = new DFSPropertiesConfiguration(dfs,new Path(dfsBasePath + \"/t3.props\"))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2->26 [style = bold, label=""];
6->26 [style = dashed, label="0"];
1->0 [style = bold, label=""];
7->18 [style = bold, label=""];
21->16 [style = bold, label=""];
15->23 [style = bold, label=""];
10->8 [style = bold, label=""];
8->29 [style = dashed, label="0"];
4->8 [style = bold, label=""];
19->24 [style = bold, label=""];
11->6 [style = bold, label=""];
25->17 [style = bold, label=""];
22->15 [style = bold, label=""];
0->11 [style = bold, label=""];
20->1 [style = bold, label=""];
0->13 [style = dashed, label="0"];
24->1 [style = bold, label=""];
27->29 [style = bold, label=""];
23->21 [style = bold, label=""];
14->30 [style = bold, label=""];
18->19 [style = bold, label=""];
3->9 [style = bold, label=""];
6->3 [style = bold, label=""];
3->25 [style = bold, label=""];
12->20 [style = bold, label=""];
29->7 [style = bold, label=""];
2->6 [style = bold, label=""];
16->28 [style = bold, label=""];
8->7 [style = bold, label=""];
17->22 [style = bold, label=""];
7->1 [style = bold, label=""];
2->11 [style = dashed, label="0"];
0->2 [style = bold, label=""];
26->3 [style = bold, label=""];
13->2 [style = bold, label=""];
28->14 [style = bold, label=""];
9->5 [style = bold, label=""];
1->13 [style = bold, label=""];
}
