digraph {
2 [style = filled, label = "testFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",a.format(\"John von Neumann and John Smith and Black Brown, Peter\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(\"\",a.format(\"\"))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\",a.format(\"von Neumann, John and Smith, John and Black Brown, Peter\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testFormat['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(\"Van Something Someone\",a.format(\"Someone, Van Something\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(\"\",a.format(\"\"))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"John von Neumann, John Smith, and Peter Black Brown\",a.format(\"John von Neumann and John Smith and Black Brown, Peter\"))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",a.format(\"John von Neumann and John Smith and Black Brown, Peter\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",a.format(\"von Neumann, John and Smith, John and Black Brown, Peter\"))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"J. von Neumann, J. Smith and P. Black Brown\",a.format(\"von Neumann, John and Smith, John and Black Brown, Peter\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(\"J. von Neumann and P. Black Brown\",a.format(\"John von Neumann and Black Brown, Peter\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(\"John von Neumann and Peter Black Brown\",a.format(\"John von Neumann and Peter Black Brown\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "LayoutFormatter a = new AuthorFirstLastOxfordCommas()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "LayoutFormatter a = new AuthorFirstAbbrLastCommas()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(\"V. S. Someone\",a.format(\"Someone, Van Something\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(\"V. S. Someone\",a.format(\"Someone, Van Something\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(\"J. von Neumann and P. Black Brown\",a.format(\"John von Neumann and Black Brown, Peter\"))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6->17 [style = bold, label=""];
4->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
6->11 [style = dashed, label="0"];
3->11 [style = bold, label=""];
3->6 [style = bold, label=""];
1->9 [style = dashed, label="0"];
1->0 [style = bold, label=""];
9->10 [style = bold, label=""];
11->9 [style = bold, label=""];
15->18 [style = bold, label=""];
0->10 [style = dashed, label="0"];
7->3 [style = bold, label=""];
4->12 [style = dashed, label="0"];
6->1 [style = bold, label=""];
1->17 [style = dashed, label="0"];
10->8 [style = bold, label=""];
5->4 [style = bold, label=""];
0->13 [style = dashed, label="0"];
5->8 [style = dashed, label="0"];
16->14 [style = bold, label=""];
17->13 [style = bold, label=""];
13->15 [style = bold, label=""];
3->14 [style = dashed, label="0"];
5->15 [style = dashed, label="0"];
14->6 [style = bold, label=""];
8->12 [style = bold, label=""];
0->5 [style = bold, label=""];
}
