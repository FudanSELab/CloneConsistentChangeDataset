digraph {
28 [style = filled, label = "ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName,baseAccessor)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "MockParticipantManager(( participants = new MockParticipantManager((((@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int i = 0@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "expectStateMap.put(\"TestDB0_5\",expectInstanceStateMap)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testDisablePartitionCustomIS['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "result = ZkTestHelper.verifyState(_gZkClient,clusterName,\"TestDB0\",expectStateMap,\"!=\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "controller.syncStart()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "controller.syncStop()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,clusterName))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\"@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\"@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Map<String,Map<String,String>> expectStateMap = new HashMap<>()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"),idealState)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(_clusterVerifier.verifyByPolling())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expectStateMap.put(\"TestDB0_0\",expectInstanceStateMap)@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "int i = 0@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "participants(i(.syncStop()@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "i++@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "TestHelper.setupCluster(clusterName,ZK_ADDR,12918,\"localhost\",\"TestDB\",1,8,n,3,\"MasterSlave\",true)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "String instanceName = \"localhost_\" + (12918 + i)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "participants(i( = new MockParticipantManager(ZK_ADDR,clusterName,instanceName)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertTrue(_clusterVerifier.verifyByPolling())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()))@@@50@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ClusterSetup.processCommandLineArgs(command.split(\"\s+\"))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "testDisablePartitionAutoIS['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Map<String,String> expectInstanceStateMap = new HashMap<>()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final int n = 5@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "expectInstanceStateMap.put(\"localhost_12919\",\"OFFLINE\")@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "participants(i(.syncStart()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(result,\"localhost_12919\" + \" should be in OFFLINE for (TestDB0_0, TestDB0_5(\")@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "i < 5@@@38@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "BestPossibleExternalViewVerifier _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME).build()@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "Assert.assertTrue(_clusterVerifier.verifyByPolling())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "i < n@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "ZkHelixClusterVerifier _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "ClusterSetup.processCommandLineArgs(command.split(\"\s+\"))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "String className = TestHelper.getTestClassName()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "participants(i(.syncStop()@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "boolean result = ZkTestHelper.verifyState(_gZkClient,clusterName,\"TestDB0\",expectStateMap,\"==\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "Assert.assertTrue(result)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testDisablePartitionCustomIS['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "deleteCluster(clusterName)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR,clusterName,\"controller_0\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String clusterName = className + \"_\" + methodName@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Assert.assertTrue(result,\"localhost_12919\" + \" should NOT be in OFFLINE\")@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "BestPossibleExternalViewVerifier _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).setZkClient(_gZkClient).build()@@@25@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()))@@@43@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "String methodName = TestHelper.getTestMethodName()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Builder keyBuilder = accessor.keyBuilder()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "i++@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->5 [style = solid, label="clusterName"];
27->32 [style = bold, label=""];
11->41 [style = solid, label="clusterName"];
12->44 [style = bold, label=""];
46->13 [style = bold, label=""];
25->45 [style = bold, label=""];
32->12 [style = bold, label=""];
10->24 [style = bold, label=""];
11->32 [style = solid, label="clusterName"];
27->9 [style = bold, label=""];
29->0 [style = solid, label="i"];
26->2 [style = solid, label="expectInstanceStateMap"];
11->28 [style = solid, label="clusterName"];
31->21 [style = bold, label=""];
51->1 [style = bold, label=""];
40->20 [style = bold, label=""];
11->40 [style = solid, label="clusterName"];
3->18 [style = bold, label=""];
44->23 [style = bold, label=""];
11->1 [style = solid, label="clusterName"];
11->37 [style = solid, label="clusterName"];
45->38 [style = bold, label=""];
36->18 [style = bold, label=""];
3->0 [style = dotted, label="true"];
11->51 [style = solid, label="clusterName"];
28->25 [style = bold, label=""];
23->15 [style = dotted, label="true"];
8->4 [style = bold, label=""];
4->52 [style = solid, label="expectStateMap"];
18->0 [style = bold, label=""];
2->16 [style = bold, label=""];
6->32 [style = bold, label=""];
0->3 [style = bold, label=""];
11->46 [style = solid, label="clusterName"];
42->46 [style = bold, label=""];
23->41 [style = dotted, label="true"];
3->51 [style = bold, label=""];
3->0 [style = bold, label=""];
0->36 [style = bold, label=""];
23->48 [style = bold, label=""];
38->6 [style = bold, label=""];
52->39 [style = solid, label="result"];
41->30 [style = bold, label=""];
21->11 [style = bold, label=""];
11->39 [style = solid, label="clusterName"];
11->10 [style = solid, label="clusterName"];
3->18 [style = dotted, label="true"];
11->22 [style = solid, label="clusterName"];
24->8 [style = bold, label=""];
26->16 [style = solid, label="expectInstanceStateMap"];
42->23 [style = solid, label="n"];
45->6 [style = solid, label="idealState"];
30->15 [style = bold, label=""];
15->34 [style = solid, label="i"];
0->18 [style = dotted, label="true"];
47->31 [style = bold, label=""];
34->41 [style = solid, label="instanceName"];
22->35 [style = solid, label="result"];
35->39 [style = bold, label=""];
23->43 [style = bold, label=""];
11->52 [style = solid, label="clusterName"];
3->18 [style = solid, label="i"];
43->7 [style = bold, label=""];
9->28 [style = bold, label=""];
43->50 [style = dashed, label="0"];
5->19 [style = bold, label=""];
13->27 [style = bold, label=""];
39->17 [style = bold, label=""];
0->1 [style = bold, label=""];
11->27 [style = solid, label="clusterName"];
14->31 [style = bold, label=""];
0->3 [style = solid, label="i"];
16->5 [style = bold, label=""];
20->49 [style = bold, label=""];
48->7 [style = bold, label=""];
21->11 [style = solid, label="methodName"];
19->40 [style = bold, label=""];
22->35 [style = bold, label=""];
31->11 [style = solid, label="className"];
33->2 [style = bold, label=""];
1->37 [style = bold, label=""];
23->50 [style = bold, label=""];
15->23 [style = bold, label=""];
52->39 [style = bold, label=""];
4->39 [style = solid, label="expectStateMap"];
29->3 [style = solid, label="i"];
4->5 [style = solid, label="expectStateMap"];
7->10 [style = bold, label=""];
5->19 [style = solid, label="result"];
29->3 [style = bold, label=""];
18->0 [style = solid, label="i"];
9->28 [style = solid, label="baseAccessor"];
4->26 [style = bold, label=""];
23->30 [style = dotted, label="true"];
50->7 [style = bold, label=""];
34->41 [style = bold, label=""];
11->42 [style = bold, label=""];
53->31 [style = bold, label=""];
44->34 [style = solid, label="i"];
39->17 [style = solid, label="result"];
43->48 [style = dashed, label="0"];
0->36 [style = dotted, label="true"];
20->22 [style = bold, label=""];
3->0 [style = solid, label="i"];
42->27 [style = solid, label="n"];
49->52 [style = bold, label=""];
23->34 [style = bold, label=""];
41->15 [style = solid, label="i"];
17->29 [style = bold, label=""];
26->33 [style = bold, label=""];
15->23 [style = solid, label="i"];
23->34 [style = dotted, label="true"];
44->23 [style = solid, label="i"];
}
