digraph {
17 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll2\")))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "System.out.println(\"################ Done\")@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "System.out.println(\"################ Now about to invoke a method without looping\")@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "System.out.println(\"################ Done\")@@@26@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Parameter(( parameters = {new Parameter(Type.OBJECT_TYPE,\"coll\")}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll1\")))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"manyParamDemo\",array)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "InvokerInvocationException e@@@21@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "classNode.addMethod(new MethodNode(\"manyParamDemo\",ACC_PUBLIC,ClassHelper.VOID_TYPE,parameters,statement))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "testNonLoop['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "statement.addStatement(createPrintlnStatement(new VariableExpression(\"coll3\")))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Class fooClass = loadClass(classNode)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "classNode.addConstructor(new ConstructorNode(ACC_PUBLIC,null))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(\"Loaded a new class\",fooClass != null)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "classNode.addMethod(new MethodNode(\"oneParamDemo\",ACC_PUBLIC,Type.VOID_TYPE,parameters,statement))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(\"Managed to create bean\",bean != null)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Object value = new Integer(10000)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Object(( array = {new Integer(1000 * 1000),\"foo-\",\"bar~\"}@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "System.out.println(\"################ Now about to invoke a method with many parameters\")@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "fail(\"Should not have thrown an exception\")@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "InvokerHelper.invokeMethod(bean,\"oneParamDemo\",new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@161a50f)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "BlockStatement statement = new BlockStatement()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "InvokerInvocationException e@@@24@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testManyParam['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ClassNode classNode = new ClassNode(\"Foo\",ACC_PUBLIC,ClassHelper.OBJECT_TYPE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "ClassNode classNode = new ClassNode(Type.makeType(\"Foo\"),ACC_PUBLIC,Type.OBJECT_TYPE)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "e.getCause().printStackTrace()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Object bean = fooClass.newInstance()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Statement statement = createPrintlnStatement(new VariableExpression(\"coll\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "classNode.addMethod(new MethodNode(\"manyParamDemo\",ACC_PUBLIC,Type.VOID_TYPE,parameters,statement))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "System.out.println(\"Caught: \" + e.getCause())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testManyParam['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7->20 [style = solid, label="classNode"];
27->18 [style = bold, label=""];
7->21 [style = dashed, label="0"];
0->26 [style = bold, label=""];
9->0 [style = bold, label=""];
34->20 [style = bold, label=""];
21->19 [style = bold, label=""];
28->30 [style = bold, label=""];
10->5 [style = solid, label="array"];
20->9 [style = bold, label=""];
34->20 [style = solid, label="bean"];
5->26 [style = dashed, label="0"];
3->31 [style = bold, label=""];
0->17 [style = bold, label=""];
6->18 [style = bold, label=""];
31->32 [style = bold, label=""];
3->13 [style = solid, label="parameters"];
33->28 [style = bold, label=""];
11->6 [style = bold, label=""];
34->26 [style = solid, label="bean"];
30->27 [style = bold, label=""];
18->15 [style = bold, label=""];
14->22 [style = bold, label=""];
33->28 [style = dotted, label="true"];
12->9 [style = dashed, label="0"];
24->34 [style = bold, label=""];
3->32 [style = solid, label="parameters"];
20->9 [style = solid, label="fooClass"];
11->18 [style = dotted, label="true"];
33->30 [style = dotted, label="true"];
0->17 [style = solid, label="bean"];
8->22 [style = solid, label="statement"];
21->20 [style = solid, label="classNode"];
5->1 [style = bold, label=""];
25->24 [style = bold, label=""];
0->26 [style = solid, label="value"];
17->12 [style = bold, label=""];
12->10 [style = bold, label=""];
25->24 [style = solid, label="fooClass"];
10->5 [style = bold, label=""];
10->0 [style = dashed, label="0"];
22->20 [style = bold, label=""];
23->21 [style = bold, label=""];
11->6 [style = dotted, label="true"];
3->8 [style = bold, label=""];
0->5 [style = solid, label="bean"];
32->25 [style = bold, label=""];
29->7 [style = bold, label=""];
16->14 [style = bold, label=""];
13->20 [style = bold, label=""];
7->25 [style = solid, label="classNode"];
31->32 [style = solid, label="statement"];
8->4 [style = bold, label=""];
14->13 [style = bold, label=""];
2->7 [style = bold, label=""];
3->22 [style = solid, label="parameters"];
11->15 [style = dotted, label="true"];
8->31 [style = dashed, label="0"];
33->27 [style = dotted, label="true"];
7->19 [style = bold, label=""];
19->3 [style = bold, label=""];
8->13 [style = solid, label="statement"];
13->22 [style = dashed, label="0"];
4->16 [style = bold, label=""];
26->18 [style = bold, label=""];
15->1 [style = bold, label=""];
}
