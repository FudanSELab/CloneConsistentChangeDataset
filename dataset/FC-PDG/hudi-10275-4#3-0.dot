digraph {
14 [style = filled, label = "Dataset<Row> ds = HoodieClientTestUtils.read(jsc,tablePath,sqlContext,fs,tablePath + \"/*/*/*/*\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<Row> readData = ds.select(\"timestamp\",\"_row_key\",\"rider\",\"driver\",\"begin_lat\",\"begin_lon\",\"end_lat\",\"end_lon\").collectAsList()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<Row> readData = ds.select(\"timestamp\",\"_row_key\",\"rider\",\"driver\",\"begin_lat\",\"begin_lon\",\"end_lat\",\"end_lon\").collectAsList()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "Dataset<Row> ds = HoodieClientTestUtils.read(jsc(),basePath + \"/testTarget\",sqlContext(),dfs(),basePath + \"/testTarget/*/*/*/*\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "Dataset<Row> ds = HoodieClientTestUtils.read(jsc,basePath + \"/testTarget\",sqlContext,dfs,basePath + \"/testTarget/*/*/*/*\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertAll(\"Result list equals\",null,null)@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "insert(jsc)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "List<HoodieTripModel> result = readData.stream().map(null).collect(Collectors.toList())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "insert(jsc())@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "verifyResultData['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "List<HoodieTripModel> expected = expectData.stream().map(null).collect(Collectors.toList())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(result.containsAll(expected) && expected.containsAll(result) && result.size() == expected.size())@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<HoodieTripModel> expected = insertData.stream().map(null).collect(Collectors.toList())@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "List<HoodieTripModel> result = readData.stream().map(null).collect(Collectors.toList())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "SQLContext sqlContext = new SQLContext(jsc)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testImportWithInsert['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "testImportWithInsert['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<GenericRecord> expectData@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertTrue(result.containsAll(expected) && expected.containsAll(result) && result.size() == expected.size())@@@10@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
7->5 [style = solid, label="expected"];
15->13 [style = bold, label=""];
17->18 [style = dotted, label="true"];
7->16 [style = dashed, label="0"];
4->3 [style = solid, label="sqlContext"];
2->0 [style = solid, label="expected"];
1->9 [style = dashed, label="0"];
9->10 [style = bold, label=""];
5->2 [style = dashed, label="0"];
16->2 [style = bold, label=""];
13->16 [style = bold, label=""];
11->2 [style = bold, label=""];
11->0 [style = solid, label="result"];
0->7 [style = bold, label=""];
6->1 [style = bold, label=""];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
17->14 [style = bold, label=""];
12->8 [style = bold, label=""];
0->5 [style = solid, label="result"];
8->9 [style = bold, label=""];
14->15 [style = bold, label=""];
10->11 [style = bold, label=""];
}
