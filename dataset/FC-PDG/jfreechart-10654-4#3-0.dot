digraph {
13 [style = filled, label = "assertTrue(c1.equals(c2))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testSerialization['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "StandardEntityCollection c2 = (StandardEntityCollection)TestUtils.serialised(c1)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertFalse(c1.equals(c2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testCloning['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "c2.clear()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(c1.equals(c2))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(c1 != c2)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testSerialization['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "c1.clear()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "StandardEntityCollection c1 = new StandardEntityCollection()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "c1.add(e1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "PieSectionEntity e1 = new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),0,1,\"Key\",\"ToolTip\",\"URL\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "StandardEntityCollection c2 = (StandardEntityCollection)c1.clone()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(c1.getClass() == c2.getClass())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "StandardEntityCollection c2 = (StandardEntityCollection)TestUtilities.serialised(c1)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertEquals(c1,c2)@@@7@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
16->15 [style = bold, label=""];
4->3 [style = bold, label=""];
9->16 [style = solid, label="c2"];
1->4 [style = bold, label=""];
7->1 [style = bold, label=""];
4->0 [style = solid, label="c1"];
0->2 [style = bold, label=""];
0->6 [style = dashed, label="0"];
4->2 [style = solid, label="c1"];
3->6 [style = bold, label=""];
3->0 [style = bold, label=""];
6->2 [style = bold, label=""];
6->2 [style = solid, label="c2"];
3->9 [style = bold, label=""];
5->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
4->12 [style = solid, label="c1"];
11->13 [style = bold, label=""];
4->6 [style = solid, label="c1"];
12->14 [style = bold, label=""];
0->2 [style = solid, label="c2"];
1->3 [style = solid, label="e1"];
9->12 [style = bold, label=""];
9->12 [style = solid, label="c2"];
9->13 [style = solid, label="c2"];
0->9 [style = dashed, label="0"];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
9->8 [style = solid, label="c2"];
15->8 [style = bold, label=""];
}
