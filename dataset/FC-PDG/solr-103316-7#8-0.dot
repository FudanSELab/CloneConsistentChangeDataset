digraph {
21 [style = filled, label = "assertEquals(2.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testPureMax['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "q = parse(\"foo bar\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertFalse(barClause instanceof BoostQuery)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testBoost['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(5.0,((BoostQuery)fooClause).getBoost(),1e-15)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<Query> qa = ((DisjunctionMaxQuery)clauses(0(.getQuery()).getDisjuncts()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(1,clauses.length)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"text:foo\",qa.get(0).toString())@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(7.0,((BoostQuery)clauses(1(.getQuery()).getBoost(),1e-15)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "q = parse(\"(foo^2.0 bar)^3.0\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertTrue(q instanceof BoostQuery)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@26@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "clauses = clauses(q)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testPureMax['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Query barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertTrue(clauses(0(.getQuery() instanceof DisjunctionMaxQuery)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "clauses = clauses(q)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(1,clauses.length)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(3.0,((BoostQuery)q).getBoost(),1e-15)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(6.0,((BoostQuery)barClause).getBoost(),1e-15)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Query fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "q = parse(\"foo^5.0 bar^6.0 +baz^7\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(2,clauses.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "dmq = ((DisjunctionMaxQuery)clauses(0(.getQuery())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertFalse(q instanceof BoostQuery)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "q = parse(\"foo^3.0\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "clauses = clauses(q)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->27 [style = bold, label=""];
5->17 [style = solid, label="clauses"];
26->5 [style = solid, label="q"];
28->30 [style = bold, label=""];
4->6 [style = bold, label=""];
21->11 [style = bold, label=""];
25->22 [style = solid, label="q"];
5->24 [style = dashed, label="0"];
2->25 [style = dashed, label="0"];
4->21 [style = dashed, label="0"];
2->8 [style = solid, label="q"];
26->30 [style = solid, label="q"];
15->12 [style = bold, label=""];
13->25 [style = bold, label=""];
9->2 [style = bold, label=""];
23->16 [style = bold, label=""];
12->23 [style = bold, label=""];
5->10 [style = bold, label=""];
18->26 [style = bold, label=""];
11->14 [style = bold, label=""];
8->3 [style = bold, label=""];
2->8 [style = bold, label=""];
4->24 [style = bold, label=""];
19->21 [style = bold, label=""];
30->20 [style = bold, label=""];
26->5 [style = bold, label=""];
29->32 [style = bold, label=""];
7->4 [style = bold, label=""];
10->4 [style = bold, label=""];
32->31 [style = bold, label=""];
11->14 [style = solid, label="barClause"];
3->0 [style = bold, label=""];
22->18 [style = bold, label=""];
5->29 [style = bold, label=""];
16->28 [style = bold, label=""];
20->17 [style = bold, label=""];
24->19 [style = bold, label=""];
0->5 [style = bold, label=""];
17->7 [style = bold, label=""];
31->15 [style = bold, label=""];
20->17 [style = solid, label="q"];
25->22 [style = bold, label=""];
1->2 [style = bold, label=""];
5->7 [style = bold, label=""];
7->10 [style = dashed, label="0"];
}
