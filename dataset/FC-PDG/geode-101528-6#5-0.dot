digraph {
23 [style = filled, label = "assertThat(list.size()).isZero()@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "doesNotEvictNodeThatIsEvicted['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "when(evictedNode.isEvicted()).thenReturn(true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "LIFOList list = new LIFOList(controller)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "list.appendEntry(evictedNode)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(node.next()).thenReturn(list.tail)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "EvictionNode node = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(node.previous()).thenReturn(list.head)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "evictingFromNonEmptyListTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "EvictionNode node = mock()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "verify(stats).incEvaluations(2)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "list.appendEntry(node)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "list.appendEntry(node)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor,1)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "EvictionNode evictedNode = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "evictingFromNonEmptyListTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(evictedNode.next()).thenReturn(list.tail)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(list.size()).isZero()@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(node.previous()).thenReturn(list.head)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(evictedNode.previous()).thenReturn(node)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(list.size()).isEqualTo(2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20->13 [style = bold, label=""];
15->21 [style = bold, label=""];
7->0 [style = solid, label="node"];
12->17 [style = bold, label=""];
8->3 [style = bold, label=""];
7->0 [style = bold, label=""];
1->10 [style = dashed, label="0"];
9->10 [style = bold, label=""];
1->7 [style = bold, label=""];
10->7 [style = bold, label=""];
17->23 [style = bold, label=""];
4->14 [style = solid, label="node"];
6->1 [style = bold, label=""];
21->11 [style = solid, label="evictedNode"];
22->18 [style = bold, label=""];
13->12 [style = bold, label=""];
3->2 [style = bold, label=""];
0->4 [style = bold, label=""];
7->2 [style = solid, label="node"];
4->12 [style = solid, label="node"];
11->22 [style = bold, label=""];
21->16 [style = bold, label=""];
4->8 [style = bold, label=""];
16->4 [style = bold, label=""];
19->15 [style = bold, label=""];
8->11 [style = bold, label=""];
18->14 [style = bold, label=""];
14->20 [style = bold, label=""];
2->5 [style = bold, label=""];
4->8 [style = solid, label="node"];
}
