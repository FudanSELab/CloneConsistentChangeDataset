digraph {
14 [style = filled, label = "Flowable.unsafeCreate(new Publisher<Integer>(){@Override public void subscribe(Subscriber<? super Integer> subscriber){subscriber.onSubscribe(new BooleanSubscription())subscriber.onNext(0)subscriber.onNext(1)subscriber.onError(e)}}).groupBy(new Function<Integer,Integer>(){@Override public Integer apply(Integer i){return i % 2}}).subscribe(outer)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final TestSubscriberEx<GroupedFlowable<Integer,Integer>> outer = new TestSubscriberEx<GroupedFlowable<Integer,Integer>>(new DefaultSubscriber<GroupedFlowable<Integer,Integer>>(){@Override public void onComplete(){}@Override public void onError(Throwable e){}@Override public void onNext(GroupedFlowable<Integer,Integer> f){if (f.getKey() == 0) {f.subscribe(inner1)}{f.subscribe(inner2)}}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "groupByShouldPropagateError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final TestObserverEx<GroupedObservable<Integer,Integer>> outer = new TestObserverEx<GroupedObservable<Integer,Integer>>(new DefaultObserver<GroupedObservable<Integer,Integer>>(){@Override public void onComplete(){}@Override public void onError(Throwable e){}@Override public void onNext(GroupedObservable<Integer,Integer> o){if (o.getKey() == 0) {o.subscribe(inner1)}{o.subscribe(inner2)}}})@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(Arrays.asList(e),inner2.errors())@@@37@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(Arrays.asList(e),outer.errors())@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<Integer>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "groupByShouldPropagateError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Throwable e = new RuntimeException(\"Oops\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Observable.unsafeCreate(new ObservableSource<Integer>(){@Override public void subscribe(Observer<? super Integer> observer){observer.onSubscribe(Disposable.empty())observer.onNext(0)observer.onNext(1)observer.onError(e)}}).groupBy(new Function<Integer,Integer>(){@Override public Integer apply(Integer i){return i % 2}}).subscribe(outer)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<Integer>()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(Arrays.asList(e),inner1.errors())@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "groupByShouldPropagateError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1->6 [style = solid, label="e"];
4->7 [style = bold, label=""];
4->7 [style = solid, label="inner2"];
5->14 [style = dashed, label="0"];
8->4 [style = bold, label=""];
7->5 [style = solid, label="outer"];
12->11 [style = solid, label="inner1"];
1->12 [style = bold, label=""];
8->7 [style = solid, label="inner1"];
1->8 [style = bold, label=""];
11->14 [style = solid, label="outer"];
7->11 [style = dashed, label="0"];
1->0 [style = solid, label="e"];
11->14 [style = bold, label=""];
12->13 [style = bold, label=""];
10->1 [style = bold, label=""];
13->11 [style = bold, label=""];
8->12 [style = dashed, label="0"];
3->0 [style = bold, label=""];
13->11 [style = solid, label="inner2"];
2->1 [style = bold, label=""];
6->3 [style = bold, label=""];
14->6 [style = bold, label=""];
7->5 [style = bold, label=""];
4->13 [style = dashed, label="0"];
1->3 [style = solid, label="e"];
9->1 [style = bold, label=""];
5->6 [style = bold, label=""];
}
