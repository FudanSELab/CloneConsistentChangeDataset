digraph {
9 [style = filled, label = "createNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.ADMINISTER).withStdin(getClass().getResourceAsStream(\"node.xml\")).invokeWithArgs(\"CustomSlaveName\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(\"No error output expected\",result.stderr(),isEmptyString())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"SlaveFromXML\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(updatedSlave.getNodeName(),equalTo(\"CustomSlaveName\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"CustomSlaveName\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "createNodeSpecifyingNameExplicitly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Slave updatedSlave = (Slave)j.jenkins.getNode(\"SlaveFromXML\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "createNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.ADMINISTER).withStdin(getClass().getResourceAsStream(\"node.xml\")).invoke()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(\"Command is expected to succeed\",result.returnCode(),equalTo(0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(\"A slave with original name should not exist\",j.jenkins.getNode(\"SlaveFromXml\"),nullValue())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invoke()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(updatedSlave.getNumExecutors(),equalTo(42))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
5->10 [style = bold, label=""];
6->4 [style = bold, label=""];
3->6 [style = bold, label=""];
12->2 [style = bold, label=""];
1->2 [style = bold, label=""];
11->7 [style = bold, label=""];
7->15 [style = bold, label=""];
14->12 [style = bold, label=""];
1->8 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
3->10 [style = dashed, label="0"];
8->2 [style = bold, label=""];
10->13 [style = bold, label=""];
9->8 [style = bold, label=""];
13->11 [style = bold, label=""];
0->1 [style = bold, label=""];
4->7 [style = bold, label=""];
2->5 [style = bold, label=""];
}
