digraph {
7 [style = filled, label = "assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.blockingSingle())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "seedFactory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "seedFactory['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.blockingSingle())@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Single<List<Integer>> o = Flowable.range(1,10).collect(new Supplier<List<Integer>>(){@Override public List<Integer> get(){return new ArrayList<>()}},new BiConsumer<List<Integer>,Integer>(){@Override public void accept(List<Integer> list,Integer t2){list.add(t2)}})@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Observable<List<Integer>> o = Observable.range(1,10).collect(new Supplier<List<Integer>>(){@Override public List<Integer> get(){return new ArrayList<Integer>()}},new BiConsumer<List<Integer>,Integer>(){@Override public void accept(List<Integer> list,Integer t2){list.add(t2)}}).toObservable().takeLast(1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "seedFactory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.blockingGet())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10),o.blockingGet())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
5->7 [style = bold, label=""];
4->1 [style = bold, label=""];
1->5 [style = dashed, label="0"];
8->5 [style = bold, label=""];
3->7 [style = dashed, label="0"];
2->1 [style = bold, label=""];
3->0 [style = bold, label=""];
7->6 [style = bold, label=""];
0->6 [style = dashed, label="0"];
}
