digraph {
18 [style = filled, label = "assertInflightData()@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertInflightData()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final BufferOrEvent(( sequence1 = addSequence(inputGate,createBuffer(0),createBuffer(2),createBuffer(0),createBarrier(1,1),createBarrier(1,2),createBuffer(2),createBuffer(1),createBarrier(1,0),createBuffer(0),createBuffer(2))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertInflightData()@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertInflightData()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertOutput(sequence)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertInflightData()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "inputGate = createInputGate(3,handler)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(5L,channelStateWriter.getLastStartedCheckpointId())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(6L,handler.getLastCanceledCheckpointId())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(2L,handler.getLastCanceledCheckpointId())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertOutput(sequence3)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertOutput(sequence2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final BufferOrEvent(( sequence6 = addSequence(inputGate,createCancellationBarrier(6,1),createCancellationBarrier(6,2),createBarrier(6,0),createBuffer(0),createEndOfPartition(0),createEndOfPartition(1),createEndOfPartition(2))@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertOutput(sequence5)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "final BufferOrEvent(( sequence5 = addSequence(inputGate,createBuffer(0),createBuffer(1),createBuffer(2),createBarrier(5,2),createBarrier(5,1),createBarrier(5,0),createBuffer(0),createBuffer(1))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final BufferOrEvent(( sequence2 = addSequence(inputGate,createBarrier(2,0),createBarrier(2,2),createBuffer(0),createBuffer(2),createCancellationBarrier(2,1))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(1L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(-1L,channelStateWriter.getLastStartedCheckpointId())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertInflightData()@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "inputGate = createInputGate(3,handler,false)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "assertEquals(2L,channelStateWriter.getLastStartedCheckpointId())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(3L,channelStateWriter.getLastStartedCheckpointId())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testMultiChannelTrailingInflightData['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "final BufferOrEvent(( sequence4 = addSequence(inputGate,createBuffer(0),createBuffer(1),createCancellationBarrier(4,1),createBarrier(4,2),createBuffer(0),createBarrier(4,0))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(-1,channelStateWriter.getLastStartedCheckpointId())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertOutput(sequence1)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "BufferOrEvent(( sequence = addSequence(inputGate,createBuffer(0),createBuffer(1),createBuffer(2),createBarrier(1,1),createBarrier(1,2),createBarrier(1,0),createBuffer(2),createBuffer(1),createBuffer(0),createBarrier(2,1),createBuffer(1),createBuffer(1),createEndOfPartition(1),createBuffer(0),createBuffer(2),createBarrier(2,2),createBuffer(2),createEndOfPartition(2),createBuffer(0),createEndOfPartition(0))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertInflightData()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "testMultiChannelAbortCheckpoint['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(2L,channelStateWriter.getLastStartedCheckpointId())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertOutput(sequence4)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testMultiChannelTrailingInflightData['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertOutput(sequence6)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final BufferOrEvent(( sequence3 = addSequence(inputGate,createBuffer(2),createBuffer(1),createBarrier(3,1),createBarrier(3,2),createBarrier(3,0))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(4L,handler.getLastCanceledCheckpointId())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22->11 [style = bold, label=""];
9->22 [style = bold, label=""];
2->1 [style = solid, label="handler"];
15->30 [style = bold, label=""];
30->26 [style = bold, label=""];
10->21 [style = bold, label=""];
6->4 [style = bold, label=""];
8->6 [style = solid, label="inputGate"];
1->24 [style = solid, label="inputGate"];
1->16 [style = solid, label="inputGate"];
27->25 [style = bold, label=""];
34->28 [style = bold, label=""];
14->18 [style = bold, label=""];
3->2 [style = bold, label=""];
33->10 [style = bold, label=""];
24->15 [style = solid, label="sequence1"];
24->15 [style = bold, label=""];
28->19 [style = bold, label=""];
4->15 [style = dashed, label="0"];
16->34 [style = bold, label=""];
13->31 [style = bold, label=""];
35->13 [style = bold, label=""];
17->14 [style = bold, label=""];
8->6 [style = bold, label=""];
16->34 [style = solid, label="sequence3"];
1->8 [style = dashed, label="0"];
1->24 [style = bold, label=""];
1->6 [style = bold, label=""];
26->9 [style = bold, label=""];
1->20 [style = solid, label="inputGate"];
35->13 [style = solid, label="sequence4"];
2->8 [style = bold, label=""];
11->27 [style = bold, label=""];
25->16 [style = bold, label=""];
21->20 [style = bold, label=""];
32->2 [style = bold, label=""];
23->12 [style = bold, label=""];
2->1 [style = bold, label=""];
20->36 [style = solid, label="sequence6"];
19->35 [style = bold, label=""];
12->29 [style = bold, label=""];
1->35 [style = solid, label="inputGate"];
9->22 [style = solid, label="sequence2"];
20->36 [style = bold, label=""];
0->5 [style = bold, label=""];
2->8 [style = solid, label="handler"];
1->9 [style = solid, label="inputGate"];
29->33 [style = solid, label="sequence5"];
31->23 [style = bold, label=""];
36->17 [style = bold, label=""];
29->33 [style = bold, label=""];
1->6 [style = solid, label="inputGate"];
1->29 [style = solid, label="inputGate"];
4->0 [style = bold, label=""];
6->4 [style = solid, label="sequence"];
7->2 [style = bold, label=""];
}
