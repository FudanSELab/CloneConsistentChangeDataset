digraph {
10 [style = filled, label = "assertThat(representation.getString(\"extensions.x-isis-format\"),is(\"double\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "allowingObjectAdapterToReturn((float)123.45)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(representation.getString(\"extensions.x-isis-format\"),is(\"float\"))@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "allowingObjectSpecToReturnSpecIdFor()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(representation.getDouble(\"value\"),is(12345.6789))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(representation.isDecimal(\"value\"),is(true))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "allowingObjectSpecToReturnSpecIdFor()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(representation.getString(\"format\"),is(\"decimal\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "allowingLogicalTypeReturnObjectTypeFor()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "whenDoublePrimitive['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "whenFloatPrimitive['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "allowingObjectAdapterToReturn(12345.6789)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "whenFloatPrimitive['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(representation.getFloat(\"value\"),is((float)123.45))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "jsonValueEncoder.appendValueAndFormat(mockObjectAdapter,mockObjectSpec,representation,null,false)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->12 [style = bold, label=""];
6->4 [style = bold, label=""];
3->6 [style = bold, label=""];
11->6 [style = bold, label=""];
12->2 [style = bold, label=""];
2->5 [style = bold, label=""];
14->13 [style = bold, label=""];
7->13 [style = dashed, label="0"];
0->12 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
9->8 [style = bold, label=""];
2->10 [style = bold, label=""];
1->7 [style = bold, label=""];
13->11 [style = bold, label=""];
7->3 [style = bold, label=""];
3->11 [style = dashed, label="0"];
4->0 [style = bold, label=""];
0->2 [style = bold, label=""];
8->3 [style = bold, label=""];
7->8 [style = dashed, label="0"];
}
