digraph {
5 [style = filled, label = "assertTrue(v.contains(O))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "v.retainAll(Arrays.asList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d54494))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertTrue(v.contains(c))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(v.retainAll(Arrays.asList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d544eb)))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Object c = new Object()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(2,v.size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testRetainAll['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertEquals(2,v.size())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(v.contains(O))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Object a = new Object()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "v.addAll(Arrays.asList(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@d5452a))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Object b = new Object()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(0,v.indexOf(O))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(v.contains(c))@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "v.removeRange(1,3)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testRetainAll['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testRemoveRange['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(0,v.indexOf(O))@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17->8 [style = bold, label=""];
8->10 [style = bold, label=""];
16->13 [style = bold, label=""];
1->8 [style = bold, label=""];
2->12 [style = solid, label="c"];
4->6 [style = bold, label=""];
2->15 [style = solid, label="c"];
2->3 [style = bold, label=""];
2->7 [style = solid, label="c"];
10->3 [style = solid, label="b"];
6->0 [style = bold, label=""];
8->3 [style = solid, label="a"];
3->16 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
6->12 [style = dashed, label="0"];
7->9 [style = bold, label=""];
2->3 [style = solid, label="c"];
2->6 [style = solid, label="c"];
4->12 [style = bold, label=""];
5->7 [style = bold, label=""];
11->8 [style = bold, label=""];
10->2 [style = bold, label=""];
14->15 [style = bold, label=""];
13->14 [style = bold, label=""];
0->5 [style = bold, label=""];
}
