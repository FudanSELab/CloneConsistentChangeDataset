digraph {
6 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(),publishedDescriptors())@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "kafkaProducer.send(record).get()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "handoffConditionTimeout = 100@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2010/P1D\",0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),true,null,null,false))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "kafkaProducer.send(record).get()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "doHandoff = false@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testRunOnNothing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2011/P1D\",0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@21@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testHandoffConditionTimeoutWhenHandoffDoesNotOccur['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,\"sequence0\",new KafkaPartitions(topic,ImmutableMap.of(0,2L)),new KafkaPartitions(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),true,null,null,false))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getProcessed())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIOConfig(0,\"sequence0\",new KafkaPartitions(topic,ImmutableMap.of(0,2L)),new KafkaPartitions(topic,ImmutableMap.of(0,2L)),kafkaServer.consumerProperties(),true,null,null,false))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "testHandoffConditionTimeoutWhenHandoffDoesNotOccur['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5->3 [style = bold, label=""];
14->16 [style = bold, label=""];
8->19 [style = dashed, label="0"];
17->0 [style = solid, label="task"];
7->11 [style = bold, label=""];
24->19 [style = bold, label=""];
0->7 [style = solid, label="desc1"];
10->14 [style = bold, label=""];
4->13 [style = bold, label=""];
12->17 [style = bold, label=""];
16->7 [style = bold, label=""];
3->12 [style = bold, label=""];
10->14 [style = solid, label="desc2"];
2->4 [style = bold, label=""];
1->7 [style = bold, label=""];
6->15 [style = bold, label=""];
14->1 [style = bold, label=""];
20->2 [style = bold, label=""];
10->11 [style = solid, label="desc2"];
0->10 [style = bold, label=""];
23->24 [style = bold, label=""];
21->20 [style = bold, label=""];
17->2 [style = bold, label=""];
8->2 [style = bold, label=""];
12->8 [style = bold, label=""];
8->0 [style = solid, label="task"];
18->5 [style = bold, label=""];
15->0 [style = bold, label=""];
1->16 [style = dashed, label="0"];
13->2 [style = dashed, label="0"];
17->2 [style = solid, label="task"];
9->5 [style = bold, label=""];
8->17 [style = dashed, label="0"];
17->10 [style = solid, label="task"];
0->14 [style = solid, label="desc1"];
13->6 [style = bold, label=""];
8->10 [style = solid, label="task"];
4->22 [style = bold, label=""];
8->2 [style = solid, label="task"];
22->6 [style = bold, label=""];
19->21 [style = solid, label="task"];
19->21 [style = bold, label=""];
}
