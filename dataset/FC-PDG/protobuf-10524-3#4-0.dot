digraph {
7 [style = filled, label = "boolean stillEqual = true@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(CLASSNAME + \" InputStream must now be exhausted\",-1,input.read())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "InputStream input = TEST_STRING.newInput()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "InputStream input = stringUnderTest.newInput()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"InputStream.available() returns correct value\",stringUnderTest.size(),input.available())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testNewInput['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(CLASSNAME + \" must give the same bytes from the InputStream\",stillEqual)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"InputStream.available() returns correct value\",0,input.available())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(classUnderTest + \" InputStream must now be exhausted\",-1,input.read())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertTrue(classUnderTest + \" must give the same bytes from the InputStream\",stillEqual)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int expectedInt = (referenceByte & 0xFF)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "stillEqual = (expectedInt == input.read())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "InputStream input = testString.newInput()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testNewInput['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "assertEquals(\"InputStream.available() returns correct value\",TEST_STRING.size(),input.available())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(\"InputStream.available() returns correct value\",testString.size(),input.available())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testNewInput['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15->13 [style = bold, label=""];
8->15 [style = bold, label=""];
1->14 [style = dashed, label="0"];
2->15 [style = solid, label="stillEqual"];
2->6 [style = solid, label="stillEqual"];
8->6 [style = bold, label=""];
1->10 [style = dashed, label="0"];
9->10 [style = bold, label=""];
0->12 [style = dashed, label="0"];
11->9 [style = bold, label=""];
1->7 [style = bold, label=""];
10->7 [style = bold, label=""];
3->0 [style = bold, label=""];
14->7 [style = bold, label=""];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
5->2 [style = solid, label="expectedInt"];
6->15 [style = dashed, label="0"];
0->1 [style = bold, label=""];
12->14 [style = bold, label=""];
0->9 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
16->12 [style = bold, label=""];
2->8 [style = bold, label=""];
2->5 [style = bold, label=""];
}
