digraph {
8 [style = filled, label = "r.getDouble(0) != 0.0@@@22@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(0.0,r.getDouble(0),eps)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(10,parent.getMaxIter())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Dataset<Row> predNotAllZero = jsql.sql(\"SELECT prediction, myProb FROM predNotAllZero\")@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "assertEquals(1.0,parent.getRegParam(),0.0)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "logisticRegressionWithSetters['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "logisticRegressionWithSetters['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "LogisticRegressionModel model2 = lr.fit(dataset,lr.maxIter().w(5),lr.regParam().w(0.1),lr.threshold().w(0.4),lr.probabilityCol().w(\"theProb\"))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "LogisticRegression parent2 = (LogisticRegression)model2.parent()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(\"theProb\",model2.getProbabilityCol())@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(1.0,parent.getRegParam(),eps)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "LinearRegression parent = (LinearRegression)model.parent()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "LogisticRegression parent = (LogisticRegression)model.parent()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "model.setThreshold(1.0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(0.6,parent.getThreshold(),eps)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(0.6,parent.getThresholds()(1(,eps)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "LinearRegression parent2 = (LinearRegression)model2.parent()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Dataset<Row> predAllZero = jsql.sql(\"SELECT prediction, myProbability FROM predAllZero\")@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(0.1,parent2.getRegParam(),eps)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(0.6,model.getThreshold(),eps)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(0.4,parent.getThresholds()(0(,eps)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertEquals(\"thePred\",model2.getPredictionCol())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "LogisticRegressionModel model = lr.fit(dataset)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Dataset<Row> predNotAllZero = spark.sql(\"SELECT prediction, myProb FROM predNotAllZero\")@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "assertEquals(10,parent.getMaxIter())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "model.transform(dataset,model.threshold().w(0.0),model.probabilityCol().w(\"myProb\")).registerTempTable(\"predNotAllZero\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(0.4,parent2.getThreshold(),eps)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "boolean foundNonZero = false@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertEquals(0.1,parent2.getRegParam(),0.0)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "foundNonZero = true@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "linearRegressionWithSetters['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(5,parent2.getMaxIter())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "LogisticRegression lr = new LogisticRegression().setMaxIter(10).setRegParam(1.0).setThreshold(0.6).setProbabilityCol(\"myProbability\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertTrue(foundNonZero)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "r.getDouble(0) != 0.0@@@22@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "LinearRegression lr = new LinearRegression().setMaxIter(10).setRegParam(1.0).setSolver(\"l-bfgs\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertEquals(5,parent2.getMaxIter())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "LinearRegressionModel model = lr.fit(dataset)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertEquals(0.4,model2.getThreshold(),eps)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "LinearRegressionModel model2 = lr.fit(dataset,lr.maxIter().w(5),lr.regParam().w(0.1),lr.predictionCol().w(\"thePred\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "model.transform(dataset).registerTempTable(\"predAllZero\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Dataset<Row> predAllZero = spark.sql(\"SELECT prediction, myProbability FROM predAllZero\")@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20->9 [style = solid, label="parent"];
14->3 [style = bold, label=""];
8->10 [style = bold, label=""];
1->4 [style = bold, label=""];
0->9 [style = bold, label=""];
41->32 [style = bold, label=""];
22->15 [style = bold, label=""];
24->19 [style = bold, label=""];
12->26 [style = solid, label="foundNonZero"];
34->40 [style = bold, label=""];
10->27 [style = bold, label=""];
29->3 [style = bold, label=""];
23->28 [style = dashed, label="0"];
27->10 [style = dotted, label="true"];
4->21 [style = bold, label=""];
16->25 [style = bold, label=""];
10->26 [style = bold, label=""];
24->40 [style = dashed, label="0"];
28->12 [style = bold, label=""];
8->10 [style = dotted, label="true"];
36->33 [style = bold, label=""];
17->23 [style = bold, label=""];
19->41 [style = dashed, label="0"];
19->1 [style = bold, label=""];
25->20 [style = bold, label=""];
26->0 [style = bold, label=""];
17->28 [style = bold, label=""];
18->22 [style = bold, label=""];
27->26 [style = bold, label=""];
25->38 [style = dashed, label="0"];
10->8 [style = bold, label=""];
21->11 [style = bold, label=""];
10->26 [style = solid, label="foundNonZero"];
20->34 [style = dashed, label="0"];
6->16 [style = bold, label=""];
7->2 [style = bold, label=""];
12->8 [style = bold, label=""];
21->33 [style = dashed, label="0"];
5->13 [style = bold, label=""];
27->10 [style = bold, label=""];
2->14 [style = bold, label=""];
7->35 [style = dashed, label="0"];
40->41 [style = bold, label=""];
38->34 [style = bold, label=""];
39->38 [style = bold, label=""];
9->5 [style = bold, label=""];
32->36 [style = bold, label=""];
3->17 [style = bold, label=""];
11->37 [style = dashed, label="0"];
23->12 [style = bold, label=""];
31->39 [style = bold, label=""];
37->35 [style = bold, label=""];
20->24 [style = bold, label=""];
2->29 [style = bold, label=""];
30->16 [style = bold, label=""];
33->37 [style = bold, label=""];
14->29 [style = dashed, label="0"];
12->27 [style = bold, label=""];
11->7 [style = bold, label=""];
13->18 [style = bold, label=""];
16->39 [style = dashed, label="0"];
8->26 [style = bold, label=""];
34->36 [style = solid, label="parent"];
}
