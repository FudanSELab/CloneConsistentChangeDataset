digraph {
0 [style = filled, label = "cannotVectorize()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "cannotVectorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testQuery(\"SELECT dim2, AVG(m2) FROM (SELECT * FROM foo AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1) AS t3 GROUP BY dim2\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(ImmutableList.of(\"m1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(QUERY_CONTEXT_DEFAULT).build().withOverriddenContext(queryContext)),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"m1\"),DruidExpression.fromColumn(\"j0.m1\")),JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\",ValueType.STRING)).setGranularity(Granularities.ALL).setAggregatorSpecs(useDefault? aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new CountAggregatorFactory(\"a0:count\")): aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0:count\"),not(selector(\"m2\",null,null))))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a0:sum\"),new FieldAccessPostAggregator(null,\"a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build().withOverriddenContext(queryContext)),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ed72,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ed77,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ed7c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ed81): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ed89,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ed8e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ed93))@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testJoinOuterGroupByAndSubqueryHasLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testJoinOuterGroupByAndSubqueryNoLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testQuery(\"SELECT dim2, AVG(m2) FROM (SELECT * FROM foo AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1 LIMIT 10) AS t3 GROUP BY dim2\",ImmutableList.of(GroupByQuery.builder().setDataSource(newScanQueryBuilder().dataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(ImmutableList.of(\"m1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"m1\"),DruidExpression.fromColumn(\"j0.m1\")),JoinType.INNER)).intervals(querySegmentSpec(Filtration.eternity())).limit(10).columns(\"__time\",\"cnt\",\"dim1\",\"dim2\",\"dim3\",\"j0.m1\",\"m1\",\"m2\",\"unique_dim1\").context(QUERY_CONTEXT_DEFAULT).build()).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\",ValueType.STRING)).setGranularity(Granularities.ALL).setAggregatorSpecs(useDefault? aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new CountAggregatorFactory(\"a0:count\")): aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0:count\"),not(selector(\"m2\",null,null))))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a0:sum\"),new FieldAccessPostAggregator(null,\"a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ee55,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ee5a,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ee5f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ee64): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ee6c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ee71,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@a3ee76))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "!isRewriteJoinToFilter(queryContext)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testJoinOuterGroupByAndSubqueryNoLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5->0 [style = dotted, label="true"];
6->4 [style = dotted, label="true"];
5->0 [style = bold, label=""];
5->3 [style = bold, label=""];
0->7 [style = dashed, label="0"];
1->7 [style = bold, label=""];
0->3 [style = bold, label=""];
4->3 [style = solid, label="queryContext"];
2->1 [style = bold, label=""];
6->5 [style = bold, label=""];
1->0 [style = bold, label=""];
8->1 [style = bold, label=""];
}
