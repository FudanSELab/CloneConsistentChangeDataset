digraph {
3 [style = filled, label = "literal = ByteString.copyFrom(mungedBytes())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "byte(( mungedBytes = mungedBytes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\",literal,TEST_STRING)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",literal.equals(TEST_STRING))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(CLASSNAME + \" empty strings must be equal\",ByteString.EMPTY.concat(ByteString.EMPTY),TEST_STRING.substring(55,55))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\",TEST_STRING,literal)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\",testString,literal)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "assertEquals(CLASSNAME + \" must equal RopeByteString with same value\",rope,TEST_STRING)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal the empty string\",testString.equals(ByteString.EMPTY))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "ByteString p2 = ByteString.copyFrom(BYTES,5,BYTES.length - 5)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",rope.equals(TEST_STRING))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",testString.equals(literal))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal the empty string\",TEST_STRING.equals(ByteString.EMPTY))@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "ByteString p1 = ByteString.copyFrom(BYTES,0,5)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testEqualsLiteralByteString['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "p1 = ByteString.copyFrom(mungedBytes,0,5)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "rope = p1.concat(p2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "ByteString rope = p1.concat(p2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertEquals(CLASSNAME + \" empty strings must be equal\",ByteString.EMPTY,TEST_STRING.substring(55,55))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertEquals(CLASSNAME + \" must equal LiteralByteString with same value\",literal,testString)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "assertEquals(CLASSNAME + \" must equal RopeByteString with same value\",TEST_STRING,rope)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",TEST_STRING.equals(literal))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "p2 = ByteString.copyFrom(mungedBytes,5,mungedBytes.length - 5)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ByteString literal = ByteString.copyFrom(BYTES)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "testEqualsRopeByteString['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal every RopeByteString with the same length\",TEST_STRING.equals(rope))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(CLASSNAME + \" empty strings must be equal\",ByteString.EMPTY,testString.substring(55,55))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal the empty string\",TEST_STRING.equals(ByteString.EMPTY.concat(ByteString.EMPTY)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertFalse(CLASSNAME + \" must not equal every LiteralByteString with the same length\",literal.equals(testString))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "testEqualsLiteralByteString['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
22->26 [style = bold, label=""];
19->22 [style = solid, label="p2"];
5->13 [style = dashed, label="0"];
23->20 [style = bold, label=""];
3->15 [style = solid, label="literal"];
17->21 [style = solid, label="p2"];
18->23 [style = bold, label=""];
21->27 [style = bold, label=""];
4->6 [style = bold, label=""];
1->26 [style = dashed, label="0"];
26->29 [style = bold, label=""];
3->18 [style = dashed, label="0"];
6->9 [style = dashed, label="0"];
22->29 [style = solid, label="rope"];
14->10 [style = bold, label=""];
2->7 [style = solid, label="literal"];
7->0 [style = bold, label=""];
3->15 [style = bold, label=""];
1->10 [style = dashed, label="0"];
21->27 [style = solid, label="rope"];
16->17 [style = bold, label=""];
5->29 [style = dashed, label="0"];
3->4 [style = bold, label=""];
11->2 [style = bold, label=""];
2->12 [style = bold, label=""];
29->18 [style = bold, label=""];
0->14 [style = dashed, label="0"];
20->16 [style = bold, label=""];
13->3 [style = bold, label=""];
8->2 [style = bold, label=""];
10->13 [style = bold, label=""];
15->9 [style = bold, label=""];
0->1 [style = bold, label=""];
4->15 [style = dashed, label="0"];
2->12 [style = solid, label="literal"];
12->14 [style = bold, label=""];
25->19 [style = bold, label=""];
2->0 [style = solid, label="literal"];
2->25 [style = dashed, label="0"];
7->12 [style = dashed, label="0"];
28->25 [style = bold, label=""];
22->26 [style = solid, label="rope"];
20->16 [style = solid, label="mungedBytes"];
27->24 [style = bold, label=""];
2->14 [style = solid, label="literal"];
2->7 [style = bold, label=""];
19->22 [style = bold, label=""];
17->21 [style = bold, label=""];
3->4 [style = solid, label="literal"];
20->17 [style = solid, label="mungedBytes"];
}
