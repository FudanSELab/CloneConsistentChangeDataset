digraph {
22 [style = filled, label = "child = child.getInputs().get(0)@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "RelNode convertedRel = planner.changeTraits(noneRel,cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(ALT_EMPTY_TRAIT))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(ALT_TRAIT2,child.getTraitSet().getTrait(ALT_TRAIT_DEF))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(EnumerableConvention.INSTANCE,child.getTraitSet().getTrait(ConventionTraitDef.INSTANCE))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "planner.addRule(new IterSingleRule2())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertEquals(ALT_TRAIT2,result.getTraitSet().getTrait(ALT_TRAIT_DEF))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "child = child.getInputs().get(0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(result instanceof IterSingleRel)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(child instanceof IterSingleRel)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "planner.addRule(new PhysLeafRule())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "planner.addRule(new PhysToIteratorConverterRule())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "NoneSingleRel noneRel = RelOptUtil.addTrait(new NoneSingleRel(cluster,noneLeafRel),ALT_EMPTY_TRAIT)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "testRuleMatchAfterConversion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "RelNode result = planner.chooseDelegate().findBestExp()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(EnumerableConvention.INSTANCE,result.getTraitSet().getTrait(ConventionTraitDef.INSTANCE))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(child instanceof PhysLeafRel)@@@28@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "RelNode convertedRel = planner.changeTraits(noneRel,cluster.traitSetOf(EnumerableConvention.INSTANCE).replace(ALT_TRAIT2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "planner.addRule(new IterSinglePhysMergeRule())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "NoneLeafRel noneLeafRel = RelOptUtil.addTrait(new NoneLeafRel(cluster,\"noneLeafRel\"),ALT_TRAIT)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "planner.addRule(new IterSingleRule())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testRuleMatchAfterConversion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "RelNode child = result.getInputs().get(0)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "planner.setRoot(convertedRel)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "VolcanoPlanner planner = new VolcanoPlanner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "planner.addRelTraitDef(ConventionTraitDef.INSTANCE)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "RelOptCluster cluster = newCluster(planner)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "child = child.getInputs().get(0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "NoneSingleRel noneRel = RelOptUtil.addTrait(new NoneSingleRel(cluster,noneLeafRel),ALT_TRAIT2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testTraitPropagation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(result instanceof IterMergedRel)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "planner.addRelTraitDef(ALT_TRAIT_DEF)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue((child instanceof AltTraitConverter) || (child instanceof PhysToIteratorConverter))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "planner.addRule(new AltTraitConverterRule(ALT_TRAIT,ALT_TRAIT2,\"AltToAlt2ConverterRule\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->9 [style = solid, label="noneLeafRel"];
13->9 [style = solid, label="cluster"];
10->18 [style = bold, label=""];
5->8 [style = bold, label=""];
8->10 [style = bold, label=""];
7->11 [style = bold, label=""];
26->32 [style = bold, label=""];
12->5 [style = bold, label=""];
8->10 [style = solid, label="result"];
11->14 [style = bold, label=""];
0->6 [style = bold, label=""];
22->16 [style = bold, label=""];
23->19 [style = solid, label="child"];
30->28 [style = solid, label="child"];
2->3 [style = bold, label=""];
12->9 [style = dashed, label="0"];
25->27 [style = solid, label="convertedRel"];
4->21 [style = bold, label=""];
9->25 [style = solid, label="noneRel"];
15->6 [style = bold, label=""];
12->5 [style = solid, label="noneRel"];
5->25 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
16->23 [style = bold, label=""];
6->17 [style = solid, label="planner"];
3->4 [style = bold, label=""];
4->7 [style = bold, label=""];
20->33 [style = bold, label=""];
29->26 [style = bold, label=""];
6->2 [style = bold, label=""];
25->27 [style = bold, label=""];
7->24 [style = bold, label=""];
18->29 [style = bold, label=""];
30->28 [style = bold, label=""];
31->6 [style = bold, label=""];
6->13 [style = solid, label="planner"];
13->12 [style = solid, label="cluster"];
26->32 [style = solid, label="child"];
9->25 [style = bold, label=""];
23->19 [style = bold, label=""];
11->24 [style = dashed, label="0"];
24->17 [style = bold, label=""];
33->30 [style = bold, label=""];
5->8 [style = solid, label="convertedRel"];
21->7 [style = bold, label=""];
17->13 [style = bold, label=""];
13->9 [style = bold, label=""];
9->12 [style = bold, label=""];
14->13 [style = bold, label=""];
17->9 [style = solid, label="cluster"];
10->1 [style = solid, label="result"];
10->1 [style = bold, label=""];
9->12 [style = solid, label="noneLeafRel"];
17->13 [style = solid, label="cluster"];
32->20 [style = bold, label=""];
27->8 [style = bold, label=""];
28->22 [style = bold, label=""];
22->16 [style = solid, label="child"];
}
