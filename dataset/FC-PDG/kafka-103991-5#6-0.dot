digraph {
4 [style = filled, label = "state.requestOffsetReset(tp0)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(state.awaitingValidation(tp0))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "SubscriptionState.FetchPosition initialPosition = new SubscriptionState.FetchPosition(initialOffset,Optional.of(initialOffsetEpoch),new Metadata.LeaderAndEpoch(Optional.of(broker1),Optional.of(currentEpoch)))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Node broker1 = new Node(1,\"localhost\",9092)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Optional<OffsetAndMetadata> divergentOffsetMetadataOpt = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(initialOffsetEpoch,initialOffset + 5))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testTruncationDetectionWithoutResetPolicy['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(state.isOffsetResetNeeded(tp0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "state = new SubscriptionState(new LogContext(),OffsetResetStrategy.NONE)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(Optional.of(new OffsetAndMetadata(divergentOffset,Optional.of(divergentOffsetEpoch),\"\")),divergentOffsetMetadata)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "int initialOffsetEpoch = 5@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testMaybeCompleteValidationAfterOffsetReset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "state.seekUnvalidated(tp0,initialPosition)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "long initialOffset = 10L@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testMaybeCompleteValidationAfterOffsetReset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "int currentEpoch = 10@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(state.awaitingValidation(tp0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "state.assignFromUser(Collections.singleton(tp0))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(initialPosition,state.position(tp0))@@@16@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Optional<OffsetAndMetadata> divergentOffsetMetadata = state.maybeCompleteValidation(tp0,initialPosition,new EpochEndOffset(divergentOffsetEpoch,divergentOffset))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "int divergentOffsetEpoch = 7@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "long divergentOffset = 5L@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(Optional.empty(),divergentOffsetMetadataOpt)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
11->22 [style = bold, label=""];
11->4 [style = bold, label=""];
9->10 [style = solid, label="initialOffsetEpoch"];
8->0 [style = solid, label="initialOffset"];
8->9 [style = bold, label=""];
0->3 [style = solid, label="divergentOffsetMetadataOpt"];
1->12 [style = bold, label=""];
12->15 [style = bold, label=""];
10->7 [style = solid, label="initialPosition"];
6->13 [style = bold, label=""];
0->3 [style = bold, label=""];
7->11 [style = bold, label=""];
22->21 [style = solid, label="divergentOffsetMetadata"];
10->15 [style = solid, label="initialPosition"];
18->22 [style = solid, label="divergentOffsetEpoch"];
3->1 [style = bold, label=""];
17->22 [style = solid, label="divergentOffset"];
10->7 [style = bold, label=""];
21->19 [style = bold, label=""];
10->22 [style = solid, label="initialPosition"];
9->17 [style = bold, label=""];
4->22 [style = dashed, label="0"];
18->10 [style = bold, label=""];
16->6 [style = bold, label=""];
17->21 [style = solid, label="divergentOffset"];
2->6 [style = bold, label=""];
14->2 [style = bold, label=""];
2->16 [style = bold, label=""];
13->10 [style = solid, label="currentEpoch"];
22->21 [style = bold, label=""];
20->2 [style = bold, label=""];
13->8 [style = bold, label=""];
10->0 [style = solid, label="initialPosition"];
2->10 [style = solid, label="broker1"];
8->10 [style = solid, label="initialOffset"];
18->21 [style = solid, label="divergentOffsetEpoch"];
9->0 [style = solid, label="initialOffsetEpoch"];
4->0 [style = bold, label=""];
9->10 [style = bold, label=""];
17->18 [style = bold, label=""];
}
