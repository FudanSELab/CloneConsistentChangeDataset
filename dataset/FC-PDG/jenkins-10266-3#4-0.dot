digraph {
17 [style = filled, label = "slave.toComputer().disconnect()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "true@@@5@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,succeededSilently())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "slave.toComputer().isOffline()@@@6@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "Thread.sleep(100)@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "waitNodeOfflineShouldSucceedOnOfflineNode['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ).invokeWithArgs(\"aNode\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(result,succeededSilently())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(slave.toComputer().isOffline(),equalTo(true))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(slave.toComputer().isOffline(),equalTo(true))@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ).invokeWithArgs(\"aNode\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "waitNodeOfflineShouldSucceedOnDisconnectingNode['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DumbSlave slave = j.createSlave(\"aNode\",\"\",null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "waitNodeOfflineShouldSucceedOnOfflineNode['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(slave.toComputer().isOffline(),equalTo(true))@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "slave.toComputer().setTemporarilyOffline(true)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Thread.sleep(100)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "!slave.toComputer().isOffline()@@@5@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
4->6 [style = dotted, label="true"];
4->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
14->15 [style = solid, label="result"];
12->0 [style = solid, label="result"];
4->8 [style = dotted, label="true"];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
9->10 [style = bold, label=""];
15->16 [style = bold, label=""];
5->17 [style = bold, label=""];
12->0 [style = bold, label=""];
4->0 [style = bold, label=""];
7->9 [style = bold, label=""];
4->9 [style = dashed, label="0"];
11->5 [style = bold, label=""];
3->2 [style = bold, label=""];
17->14 [style = bold, label=""];
6->8 [style = bold, label=""];
13->5 [style = bold, label=""];
0->3 [style = solid, label="result"];
5->7 [style = bold, label=""];
14->15 [style = bold, label=""];
10->9 [style = bold, label=""];
9->12 [style = bold, label=""];
8->4 [style = bold, label=""];
9->10 [style = dotted, label="true"];
}
