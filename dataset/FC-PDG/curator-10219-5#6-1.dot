digraph {
4 [style = filled, label = "node.waitForInitialCreate(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "curator.getData().usingWatcher(watcher).inBackground().forPath(node.getActualPath())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "byte(( updatedData = \"Updated\".getBytes()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,initialData)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "server.stop()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,data)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Watcher watcher = new Watcher(){@Override public void process(WatchedEvent event){if (event.getType() == EventType.NodeDataChanged) {dataUpdateLatch.countDown()}}}@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),data))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testSetDataWhenDisconnected['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),updatedData))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "byte(( data = \"Hello World\".getBytes()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testSetDataWhenNodeExists['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "byte(( initialData = \"Hello World\".getBytes()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final CountDownLatch dataUpdateLatch = new CountDownLatch(1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "node.start()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testSetDataWhenNodeExists['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CuratorFramework curator = newCurator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(Arrays.equals(curator.getData().forPath(node.getActualPath()),initialData))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(timing.awaitLatch(dataUpdateLatch))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "node.setData(updatedData)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "server.restart()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH,\"InitialData\".getBytes())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
7->13 [style = bold, label=""];
16->22 [style = solid, label="node"];
24->12 [style = bold, label=""];
23->16 [style = bold, label=""];
16->0 [style = bold, label=""];
7->6 [style = solid, label="curator"];
23->15 [style = solid, label="updatedData"];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
13->11 [style = solid, label="initialData"];
9->7 [style = bold, label=""];
15->19 [style = bold, label=""];
23->12 [style = solid, label="updatedData"];
19->24 [style = bold, label=""];
18->20 [style = bold, label=""];
6->16 [style = dashed, label="0"];
7->16 [style = solid, label="curator"];
14->24 [style = solid, label="dataUpdateLatch"];
3->7 [style = bold, label=""];
0->4 [style = bold, label=""];
17->14 [style = bold, label=""];
7->2 [style = bold, label=""];
1->11 [style = dashed, label="0"];
6->10 [style = bold, label=""];
10->0 [style = bold, label=""];
6->5 [style = solid, label="node"];
13->23 [style = bold, label=""];
21->7 [style = bold, label=""];
11->17 [style = bold, label=""];
8->6 [style = solid, label="data"];
14->18 [style = bold, label=""];
4->1 [style = bold, label=""];
8->1 [style = solid, label="data"];
4->11 [style = bold, label=""];
20->15 [style = bold, label=""];
13->16 [style = solid, label="initialData"];
12->22 [style = bold, label=""];
2->8 [style = bold, label=""];
8->23 [style = dashed, label="0"];
}
