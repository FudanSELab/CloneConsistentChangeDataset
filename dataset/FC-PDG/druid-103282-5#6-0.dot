digraph {
7 [style = filled, label = "BloomKFilter filter = new BloomKFilter(1500)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "String base64 = StringUtils.encodeBase64String(bytes)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "byte(( bytes = BloomFilterSerializersModule.bloomKFilterToBytes(filter)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "testBloomFilterVirtualColumn['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(2 * CAST(dim1 AS float), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns().filters(new ExpressionDimFilter(StringUtils.format(\"bloom_filter_test((2 * CAST(\"dim1\", 'DOUBLE')),'%s')\",base64),createExprMacroTable())).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@972cd8))@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "String base64 = StringUtils.encodeBase64String(bytes)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "filter.addString(\"a-foo\")@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "filter.addString(\"def-foo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "String base64 = StringUtils.encodeBase64String(bytes)@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testBloomFilterVirtualColumnNumber['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testBloomFilterVirtualColumn['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "filter.addDouble(20.2)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "filter.addString(\"-foo\")@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(concat(dim2, '-foo'), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns().filters(new ExpressionDimFilter(StringUtils.format(\"bloom_filter_test(concat(\"dim2\",'-foo'),'%s')\",base64),createExprMacroTable())).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@972c13))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "filter.addBytes(null,0,0)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "byte(( bytes = BloomFilterSerializersModule.bloomKFilterToBytes(filter)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "byte(( bytes = BloomFilterSerializersModule.bloomKFilterToBytes(filter)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "!NullHandling.replaceWithDefault()@@@6@@@['1', '0', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "testQuery(StringUtils.format(\"SELECT COUNT(*) FROM druid.foo WHERE bloom_filter_test(concat(dim1, '-foo'), '%s')\",base64),ImmutableList.of(Druids.newTimeseriesQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).granularity(Granularities.ALL).virtualColumns(expressionVirtualColumn(\"v0\",\"concat(\"dim1\",'-foo')\",ValueType.STRING)).filters(new BloomDimFilter(\"v0\",BloomKFilterHolder.fromBloomKFilter(filter),null)).aggregators(aggregators(new CountAggregatorFactory(\"a0\"))).context(TIMESERIES_CONTEXT_DEFAULT).build()),ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@972c79))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->13 [style = dashed, label="0"];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
5->14 [style = dashed, label="0"];
1->8 [style = bold, label=""];
10->11 [style = solid, label="bytes"];
3->1 [style = bold, label=""];
15->14 [style = bold, label=""];
7->0 [style = bold, label=""];
8->6 [style = bold, label=""];
9->10 [style = bold, label=""];
12->7 [style = bold, label=""];
4->7 [style = bold, label=""];
16->15 [style = solid, label="bytes"];
7->6 [style = solid, label="filter"];
6->2 [style = bold, label=""];
7->16 [style = solid, label="filter"];
17->7 [style = bold, label=""];
7->9 [style = bold, label=""];
11->13 [style = solid, label="base64"];
1->6 [style = bold, label=""];
6->2 [style = solid, label="bytes"];
11->13 [style = bold, label=""];
7->10 [style = solid, label="filter"];
1->8 [style = dotted, label="true"];
7->18 [style = bold, label=""];
0->18 [style = dashed, label="0"];
15->14 [style = solid, label="base64"];
2->5 [style = solid, label="base64"];
0->9 [style = dashed, label="0"];
2->5 [style = bold, label=""];
10->11 [style = bold, label=""];
18->16 [style = bold, label=""];
}
