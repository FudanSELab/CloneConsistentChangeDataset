digraph {
15 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "return metric@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "return (StreamOperation)createInstance(functionNames.get(function),new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e9847e,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e98483)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "functionNames.containsKey(function)@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String function = expression.getFunctionName()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\",expression,expression.getFunctionName()))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "constructOperation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "constructMetric['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Class<? extends Expressible> clazz = functionNames.get(function)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "constructMetric['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StreamExpression expression@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Metric metric = (Metric)createInstance(functionNames.get(function),new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e983e8,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e983ed)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid operation expression %s - function '%s' is unknown (not mapped to a valid StreamOperation)\",expression,expression.getFunctionName()))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return (Metric)createInstance(functionNames.get(function),new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e98434,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e98439)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Class clazz = functionNames.get(function)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->6 [style = dotted, label="true"];
3->11 [style = dotted, label="true"];
5->13 [style = dashed, label="0"];
2->13 [style = solid, label="function"];
5->8 [style = bold, label=""];
0->9 [style = bold, label=""];
10->6 [style = dotted, label="true"];
0->5 [style = dotted, label="true"];
3->1 [style = bold, label=""];
7->14 [style = dashed, label="0"];
2->3 [style = bold, label=""];
3->14 [style = bold, label=""];
2->3 [style = solid, label="function"];
3->11 [style = bold, label=""];
5->9 [style = dashed, label="0"];
6->5 [style = solid, label="expression"];
1->0 [style = bold, label=""];
6->9 [style = solid, label="expression"];
4->2 [style = bold, label=""];
0->12 [style = dashed, label="0"];
16->2 [style = bold, label=""];
9->7 [style = bold, label=""];
1->12 [style = solid, label="clazz"];
15->13 [style = solid, label="expression"];
2->1 [style = solid, label="function"];
8->7 [style = bold, label=""];
0->7 [style = bold, label=""];
0->8 [style = dotted, label="true"];
2->5 [style = solid, label="function"];
12->13 [style = bold, label=""];
2->9 [style = solid, label="function"];
11->0 [style = bold, label=""];
12->13 [style = dotted, label="true"];
3->7 [style = bold, label=""];
6->15 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
3->12 [style = dotted, label="true"];
12->14 [style = bold, label=""];
3->0 [style = dotted, label="true"];
1->12 [style = bold, label=""];
6->7 [style = solid, label="expression"];
10->2 [style = bold, label=""];
5->8 [style = solid, label="metric"];
15->14 [style = solid, label="expression"];
11->0 [style = solid, label="clazz"];
2->11 [style = solid, label="function"];
0->9 [style = dotted, label="true"];
13->14 [style = bold, label=""];
3->1 [style = dotted, label="true"];
1->0 [style = solid, label="clazz"];
0->5 [style = bold, label=""];
16->15 [style = dotted, label="true"];
}
