digraph {
17 [style = filled, label = "testEquals['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "BarPrime barPrime = BarPrime.newBuilder().setName(\"bar\").build()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(foo1a.equals(foo2)).isFalse()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Foo foo2 = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo2\")).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testEquals['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Bar bar = Bar.newBuilder().setName(\"bar\").build()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(foo1a).isEqualTo(foo1b)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Foo foo1b = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Foo foo1a = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Foo foo2 = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo2\")).build()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(foo1a,foo1b)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertFalse(bar.equals(barPrime))@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(foo1a.hashCode(),foo1b.hashCode())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testEquals['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Foo foo1b = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Foo foo1a = Foo.newBuilder().setValue(1).addBar(Bar.newBuilder().setName(\"foo1\")).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(foo1a.hashCode()).isEqualTo(foo1b.hashCode())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertFalse(foo1a.equals(foo2))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(bar).isNotEqualTo((Object)barPrime)@@@11@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
5->2 [style = bold, label=""];
15->8 [style = solid, label="foo1a"];
3->8 [style = solid, label="foo1a"];
13->7 [style = bold, label=""];
6->18 [style = dashed, label="0"];
6->4 [style = bold, label=""];
8->5 [style = bold, label=""];
15->18 [style = bold, label=""];
2->7 [style = bold, label=""];
7->9 [style = bold, label=""];
9->1 [style = solid, label="barPrime"];
16->8 [style = bold, label=""];
1->14 [style = dashed, label="0"];
4->16 [style = dashed, label="0"];
4->8 [style = bold, label=""];
0->3 [style = bold, label=""];
5->11 [style = dashed, label="0"];
10->3 [style = bold, label=""];
3->6 [style = bold, label=""];
9->14 [style = solid, label="barPrime"];
6->12 [style = solid, label="foo1b"];
8->12 [style = dashed, label="0"];
17->15 [style = bold, label=""];
18->16 [style = bold, label=""];
11->13 [style = bold, label=""];
4->12 [style = bold, label=""];
3->15 [style = dashed, label="0"];
9->14 [style = bold, label=""];
4->2 [style = solid, label="foo2"];
12->11 [style = bold, label=""];
16->2 [style = solid, label="foo2"];
18->8 [style = solid, label="foo1b"];
6->8 [style = solid, label="foo1b"];
9->1 [style = bold, label=""];
2->13 [style = dashed, label="0"];
}
