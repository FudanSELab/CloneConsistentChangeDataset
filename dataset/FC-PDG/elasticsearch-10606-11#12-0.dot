digraph {
5 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Query rangeQuery1 = mapperService.fullName(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,null)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
50 [style = filled, label = "IndexMetaData build = IndexMetaData.builder(\"\").settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT)).numberOfShards(1).numberOfReplicas(0).build()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "rangeQuery2 = mapperService.fullName(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,null)@@@30@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Query rangeQuery2 = mapperService.fieldType(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,null)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "fieldMapper.processQuery(phraseQuery,parseContext)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "Query rangeQuery1 = mapperService.fieldType(\"number_field1\").rangeQuery(10,20,true,true,null,null,null,null)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,12),equalTo(10))@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "PercolatorFieldMapper.FieldType fieldType = (PercolatorFieldMapper.FieldType)fieldMapper.fieldType()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(fields.size(),equalTo(2))@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "bq.add(rangeQuery1,Occur.MUST)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,8),equalTo(15L))@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "document = parseContext.doc()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(document.getFields().size(),equalTo(4))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "ParseContext.Document document = parseContext.doc()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,mapperService.documentMapperParser(),documentMapper,null,null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "addQueryFieldMappings()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "testExtractTermsAndRanges_partial['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "PercolatorFieldMapper fieldMapper = (PercolatorFieldMapper)documentMapper.mappers().getMapper(fieldName)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(LongPoint.decodeDimension(fields.get(1).binaryValue().bytes,24),equalTo(20L))@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "DocumentMapper documentMapper = mapperService.documentMapper()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,28),equalTo(20))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "IndexSettings settings = new IndexSettings(build,Settings.EMPTY)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "List<IndexableField> fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.rangeField.name())))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "testExtractRanges['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(1).binaryValue().bytes,12),equalTo(15))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "fields = new ArrayList<>(Arrays.asList(document.getFields(fieldType.minimumShouldMatchField.name())))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@15@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(1L))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(fields.size(),equalTo(1))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "BooleanQuery.Builder bq = new BooleanQuery.Builder()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "PercolatorFieldMapper.FieldType fieldType = (PercolatorFieldMapper.FieldType)fieldMapper.fieldType()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "PhraseQuery phraseQuery = new PhraseQuery(\"field\",\"term\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertThat(fields.get(0).numericValue(),equalTo(2L))@@@45@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "bq = new BooleanQuery.Builder()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(IntPoint.decodeDimension(fields.get(0).binaryValue().bytes,28),equalTo(20))@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "fields.sort(Comparator.comparing(null))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testExtractRanges['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "rangeQuery2 = mapperService.fieldType(\"number_field2\").rangeQuery(15,20,true,true,null,null,null,null)@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "fieldMapper.processQuery(bq.build(),parseContext)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "bq.add(rangeQuery2,Occur.MUST)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Query rangeQuery2 = mapperService.fullName(\"number_field1\").rangeQuery(15,20,true,true,null,null,null,null)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "parseContext = new ParseContext.InternalParseContext(settings,mapperService.documentMapperParser(),documentMapper,null,null)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "assertThat(document.getFields().get(0).binaryValue().utf8ToString(),equalTo(\"field term\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertThat(document.getField(fieldType.extractionResultField.name()).stringValue(),equalTo(EXTRACTION_PARTIAL))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->1 [style = bold, label=""];
9->11 [style = bold, label=""];
2->43 [style = solid, label="settings"];
44->35 [style = bold, label=""];
47->38 [style = solid, label="rangeQuery1"];
26->34 [style = bold, label=""];
4->15 [style = bold, label=""];
45->42 [style = solid, label="rangeQuery2"];
49->48 [style = bold, label=""];
5->45 [style = bold, label=""];
17->43 [style = solid, label="documentMapper"];
48->54 [style = bold, label=""];
6->42 [style = solid, label="rangeQuery2"];
7->16 [style = bold, label=""];
31->30 [style = bold, label=""];
51->17 [style = bold, label=""];
40->22 [style = bold, label=""];
45->42 [style = bold, label=""];
37->25 [style = solid, label="build"];
3->39 [style = bold, label=""];
23->36 [style = bold, label=""];
19->28 [style = bold, label=""];
30->8 [style = bold, label=""];
16->9 [style = bold, label=""];
55->37 [style = bold, label=""];
17->22 [style = solid, label="documentMapper"];
43->25 [style = solid, label="parseContext"];
50->51 [style = solid, label="build"];
37->20 [style = solid, label="build"];
26->47 [style = bold, label=""];
27->31 [style = bold, label=""];
20->3 [style = bold, label=""];
17->37 [style = bold, label=""];
34->38 [style = solid, label="rangeQuery1"];
20->55 [style = dashed, label="0"];
53->35 [style = bold, label=""];
48->17 [style = solid, label="documentMapper"];
51->17 [style = solid, label="settings"];
21->29 [style = bold, label=""];
5->6 [style = bold, label=""];
22->20 [style = bold, label=""];
6->45 [style = dashed, label="0"];
38->46 [style = bold, label=""];
34->38 [style = bold, label=""];
13->0 [style = bold, label=""];
10->18 [style = bold, label=""];
18->23 [style = bold, label=""];
12->17 [style = bold, label=""];
6->42 [style = bold, label=""];
35->49 [style = bold, label=""];
14->46 [style = dashed, label="0"];
14->12 [style = solid, label="rangeQuery2"];
37->2 [style = solid, label="build"];
24->41 [style = bold, label=""];
28->32 [style = bold, label=""];
17->55 [style = bold, label=""];
11->5 [style = bold, label=""];
46->12 [style = solid, label="rangeQuery2"];
37->2 [style = bold, label=""];
35->26 [style = bold, label=""];
8->13 [style = bold, label=""];
36->19 [style = bold, label=""];
33->35 [style = bold, label=""];
32->21 [style = bold, label=""];
42->43 [style = bold, label=""];
15->7 [style = bold, label=""];
46->12 [style = bold, label=""];
22->52 [style = bold, label=""];
34->47 [style = dashed, label="0"];
2->40 [style = bold, label=""];
39->27 [style = bold, label=""];
47->38 [style = bold, label=""];
38->14 [style = bold, label=""];
47->5 [style = solid, label="rangeQuery1"];
54->50 [style = bold, label=""];
49->55 [style = solid, label="phraseQuery"];
2->22 [style = solid, label="settings"];
0->4 [style = bold, label=""];
50->51 [style = bold, label=""];
14->12 [style = bold, label=""];
22->20 [style = solid, label="parseContext"];
17->55 [style = solid, label="parseContext"];
52->3 [style = bold, label=""];
43->25 [style = bold, label=""];
2->22 [style = bold, label=""];
29->24 [style = bold, label=""];
1->10 [style = bold, label=""];
34->5 [style = solid, label="rangeQuery1"];
}
