digraph {
3 [style = filled, label = "CuratorFramework curator = newCurator()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "String path = node.getActualPath()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "curator.getZookeeperClient().getZooKeeper().getTestable().injectSessionExpiration()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "CuratorFramework observer = newCurator()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "int i = 0@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "i++@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "stat = observer.checkExists().usingWatcher(creationTrigger).forPath(path)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "Trigger creationTrigger = Trigger.created()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testDeletesNodeWhenSessionDisconnects['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(stat != null || creationTrigger.firedWithin(timing.forWaiting().seconds(),TimeUnit.SECONDS))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "PersistentEphemeralNode node = new PersistentEphemeralNode(curator,PersistentEphemeralNode.Mode.EPHEMERAL,PATH,new byte(((()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testRecreatesNodeWhenSessionReconnectsMultipleTimes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNodeExists(observer,node.getActualPath())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(deletedTrigger.firedWithin(timing.forSessionSleep().seconds(),TimeUnit.SECONDS))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertNodeExists(observer,path)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testDeletesNodeWhenSessionDisconnects['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "Assert.assertNotNull(stat,\"node should exist: \" + path)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "node.waitForInitialCreate(timing.forWaiting().seconds(),TimeUnit.SECONDS)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Trigger deletedTrigger = Trigger.deletedOrSetData()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "i < 5@@@13@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "node.debugCreateNodeLatch.countDown()@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "node.debugCreateNodeLatch = new CountDownLatch(1)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "node.start()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Compatibility.injectSessionExpiration(curator.getZookeeperClient().getZooKeeper())@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "node.debugCreateNodeLatch = new CountDownLatch(1)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Stat stat = observer.checkExists().usingWatcher(deletionTrigger).forPath(path)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Trigger deletionTrigger = Trigger.deletedOrSetData()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(deletionTrigger.firedWithin(timing.multiple(1.5).forSessionSleep().seconds(),TimeUnit.SECONDS))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "node.debugCreateNodeLatch.countDown()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Compatibility.injectSessionExpiration(curator.getZookeeperClient().getZooKeeper())@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "{CloseableUtils.closeQuietly(node)}@@@27@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "observer.checkExists().usingWatcher(deletedTrigger).forPath(node.getActualPath())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->3 [style = bold, label=""];
13->0 [style = solid, label="node"];
26->32 [style = bold, label=""];
9->0 [style = bold, label=""];
15->7 [style = bold, label=""];
3->1 [style = bold, label=""];
25->22 [style = bold, label=""];
23->30 [style = bold, label=""];
11->14 [style = bold, label=""];
24->0 [style = bold, label=""];
23->28 [style = dotted, label="true"];
2->3 [style = bold, label=""];
12->11 [style = bold, label=""];
23->21 [style = dotted, label="true"];
1->25 [style = solid, label="observer"];
5->15 [style = bold, label=""];
27->31 [style = bold, label=""];
28->26 [style = bold, label=""];
3->13 [style = solid, label="curator"];
21->24 [style = solid, label="stat"];
21->24 [style = bold, label=""];
1->6 [style = solid, label="observer"];
18->25 [style = solid, label="path"];
23->30 [style = dotted, label="true"];
32->19 [style = bold, label=""];
18->21 [style = solid, label="path"];
23->19 [style = dotted, label="true"];
22->23 [style = bold, label=""];
1->13 [style = bold, label=""];
4->7 [style = bold, label=""];
22->23 [style = solid, label="i"];
20->27 [style = bold, label=""];
6->18 [style = dashed, label="0"];
23->32 [style = dotted, label="true"];
23->29 [style = bold, label=""];
7->9 [style = bold, label=""];
7->27 [style = dashed, label="0"];
23->20 [style = dotted, label="true"];
30->21 [style = bold, label=""];
23->26 [style = dotted, label="true"];
13->12 [style = bold, label=""];
10->8 [style = bold, label=""];
8->5 [style = bold, label=""];
4->15 [style = dashed, label="0"];
19->23 [style = bold, label=""];
6->10 [style = bold, label=""];
26->32 [style = solid, label="stat"];
5->4 [style = bold, label=""];
22->19 [style = solid, label="i"];
23->27 [style = dotted, label="true"];
18->25 [style = bold, label=""];
17->3 [style = bold, label=""];
14->18 [style = bold, label=""];
0->20 [style = bold, label=""];
18->24 [style = solid, label="path"];
18->26 [style = solid, label="path"];
31->28 [style = bold, label=""];
23->31 [style = dotted, label="true"];
13->29 [style = solid, label="node"];
23->24 [style = dotted, label="true"];
14->6 [style = bold, label=""];
23->0 [style = dotted, label="true"];
19->23 [style = solid, label="i"];
}
