digraph {
10 [style = filled, label = "HoodieTableMetaClient metaClient = HoodieTestUtils.init(hadoopConf,basePath,HoodieTableType.MERGE_ON_READ)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "String commitTime = makeNewCommitTime(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "metaClient = HoodieTableMetaClient.reload(metaClient)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertFalse(testTable.baseFileExists(p0,\"000\",file1P0))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "os.write(new byte(((()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "String p0 = \"2020/01/01\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testTable.addDeltaCommit(\"001\").withBaseFilesInPartition(p0,file1P0).withLogFile(p0,file1P0,3)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(testTable.baseFileExists(p0,\"001\",file1P0))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(0,cleanStats.size(),\"Must not clean any files\")@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(3,getCleanStat(hoodieCleanStats,p0).getSuccessDeleteFiles().size(),\"Must clean three files, one base and 2 log files\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertTrue(testTable.logFileExists(p0,\"002\",file1P0,4))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HoodieTestTable testTable = HoodieTestTable.of(metaClient)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "List<HoodieCleanStat> hoodieCleanStats = runCleaner(config)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(testTable.logFileExists(p0,\"001\",file1P0,3))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String file1P0 = testTable.addDeltaCommit(\"000\").getFileIdsWithBaseFilesInPartitions(p0).get(p0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testKeepLatestCommitsMOR['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Path commitFile = new Path(Paths.get(metaClient.getBasePath(),HoodieTableMetaClient.METAFOLDER_NAME,f).toString())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertFalse(testTable.logFilesExist(p0,\"000\",file1P0,1,2))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<HoodieCleanStat> cleanStats = runCleaner(config)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testCleanPreviousCorruptedCleanFiles['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testTable.addDeltaCommit(\"002\").withBaseFilesInPartition(p0,file1P0).withLogFile(p0,file1P0,4)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "HoodieWriteConfig config = HoodieWriteConfig.newBuilder().withPath(basePath).withMetadataConfig(HoodieMetadataConfig.newBuilder().withAssumeDatePartitioning(true).build()).withCompactionConfig(HoodieCompactionConfig.newBuilder().withCleanerPolicy(HoodieCleaningPolicy.KEEP_LATEST_COMMITS).retainCommits(1).build()).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(testTable.baseFileExists(p0,\"002\",file1P0))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(3,getCleanStat(hoodieCleanStats,p0).getSuccessDeleteFiles().size(),\"Must clean three files, one parquet and 2 log files\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "testKeepLatestCommitsMOR['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "List<String> cleanerFileNames = Arrays.asList(HoodieTimeline.makeRequestedCleanerFileName(commitTime),HoodieTimeline.makeInflightCleanerFileName(commitTime))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testTable.forDeltaCommit(\"000\").withLogFile(p0,file1P0,1).withLogFile(p0,file1P0,2)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "HoodieWriteConfig config = HoodieWriteConfig.newBuilder().withPath(basePath).withMetadataConfig(HoodieMetadataConfig.newBuilder().withAssumeDatePartitioning(true).build()).withCompactionConfig(HoodieCompactionConfig.newBuilder().withCleanerPolicy(HoodieCleaningPolicy.KEEP_LATEST_FILE_VERSIONS).retainFileVersions(1).build()).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6->17 [style = bold, label=""];
6->3 [style = bold, label=""];
22->25 [style = bold, label=""];
8->16 [style = bold, label=""];
1->16 [style = solid, label="p0"];
15->2 [style = bold, label=""];
7->1 [style = bold, label=""];
3->17 [style = dashed, label="0"];
22->27 [style = solid, label="config"];
1->15 [style = bold, label=""];
15->4 [style = solid, label="file1P0"];
4->13 [style = bold, label=""];
23->26 [style = bold, label=""];
18->12 [style = bold, label=""];
1->4 [style = solid, label="p0"];
15->16 [style = solid, label="file1P0"];
11->12 [style = bold, label=""];
21->24 [style = bold, label=""];
1->8 [style = solid, label="p0"];
10->7 [style = bold, label=""];
3->4 [style = bold, label=""];
15->13 [style = solid, label="file1P0"];
20->22 [style = bold, label=""];
1->2 [style = solid, label="p0"];
15->14 [style = solid, label="file1P0"];
25->21 [style = solid, label="commitTime"];
15->2 [style = solid, label="file1P0"];
26->27 [style = bold, label=""];
23->24 [style = bold, label=""];
12->10 [style = bold, label=""];
2->0 [style = bold, label=""];
15->9 [style = solid, label="file1P0"];
5->6 [style = bold, label=""];
1->13 [style = solid, label="p0"];
12->22 [style = dashed, label="0"];
1->9 [style = solid, label="p0"];
1->5 [style = solid, label="p0"];
16->14 [style = bold, label=""];
1->14 [style = solid, label="p0"];
14->9 [style = bold, label=""];
10->7 [style = solid, label="metaClient"];
27->19 [style = bold, label=""];
1->15 [style = solid, label="p0"];
13->8 [style = bold, label=""];
12->6 [style = solid, label="config"];
15->0 [style = solid, label="file1P0"];
15->5 [style = solid, label="file1P0"];
17->4 [style = bold, label=""];
1->0 [style = solid, label="p0"];
25->21 [style = bold, label=""];
0->5 [style = bold, label=""];
24->23 [style = bold, label=""];
15->8 [style = solid, label="file1P0"];
}
