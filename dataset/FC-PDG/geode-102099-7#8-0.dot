digraph {
4 [style = filled, label = "map != null@@@11@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(owner.getCachePerfStats()).thenReturn(cachePerfStats)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestableAbstractRegionMap['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "CachePerfStats cachePerfStats = mock()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(owner.getScope()).thenReturn(Scope.LOCAL)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "LocalRegion owner = mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "factory != null@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "boolean withConcurrencyChecks@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(owner.getDataPolicy()).thenReturn(DataPolicy.REPLICATE)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "super(null)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "RegionEntryFactory factory@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "setEntryMap(map)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "doThrow().when(owner).checkEntryNotFound(any())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ConcurrentMapWithReusableEntries map@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TestableAbstractRegionMap['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(owner.getEvictionAttributes()).thenReturn(evictionAttributes)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "initialize(owner,new Attributes(),null,false)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "createOwner['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "setEntryFactory(factory)@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "return owner@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(owner.getConcurrencyChecksEnabled()).thenReturn(withConcurrencyChecks)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "when(owner.isInitialized()).thenReturn(true)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0->3 [style = bold, label=""];
22->21 [style = dotted, label="true"];
18->1 [style = solid, label="factory"];
7->1 [style = bold, label=""];
13->24 [style = bold, label=""];
12->5 [style = bold, label=""];
12->5 [style = solid, label="cachePerfStats"];
15->14 [style = bold, label=""];
16->8 [style = bold, label=""];
24->2 [style = bold, label=""];
20->11 [style = dotted, label="true"];
12->14 [style = solid, label="owner"];
4->7 [style = dotted, label="true"];
11->9 [style = solid, label="factory"];
23->15 [style = solid, label="owner"];
22->23 [style = bold, label=""];
16->10 [style = dotted, label="true"];
0->15 [style = bold, label=""];
5->13 [style = solid, label="cachePerfStats"];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
6->2 [style = solid, label="withConcurrencyChecks"];
11->1 [style = solid, label="factory"];
10->7 [style = solid, label="map"];
19->2 [style = solid, label="withConcurrencyChecks"];
20->8 [style = bold, label=""];
2->0 [style = bold, label=""];
11->4 [style = solid, label="map"];
18->9 [style = solid, label="factory"];
14->4 [style = bold, label=""];
5->13 [style = bold, label=""];
21->24 [style = solid, label="withConcurrencyChecks"];
1->9 [style = dotted, label="true"];
17->15 [style = bold, label=""];
20->18 [style = dotted, label="true"];
3->17 [style = bold, label=""];
23->12 [style = bold, label=""];
4->1 [style = bold, label=""];
20->19 [style = dotted, label="true"];
16->11 [style = dotted, label="true"];
11->7 [style = solid, label="map"];
8->12 [style = bold, label=""];
16->6 [style = dotted, label="true"];
13->2 [style = bold, label=""];
10->4 [style = solid, label="map"];
11->21 [style = dashed, label="0"];
}
