digraph {
6 [style = filled, label = "TestInfo testInfo@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "oneway_noClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "instrumentedClientAndServer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(\"10\").id(\"10\").name(\"get\").timestamp((TODAY + 50L) * 1000L).duration(250L * 1000L).kind(Kind.CLIENT).localEndpoint(FRONTEND).build(),Span.newBuilder().traceId(\"10\").id(\"10\").name(\"get\").shared(true).timestamp((TODAY + 100) * 1000L).duration(150L * 1000L).kind(Kind.SERVER).localEndpoint(BACKEND).build(),Span.newBuilder().traceId(\"10\").parentId(\"10\").id(\"11\").name(\"get\").timestamp((TODAY + 150L) * 1000L).duration(50L * 1000L).kind(Kind.CLIENT).localEndpoint(BACKEND).remoteEndpoint(DB).build())@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Endpoint frontend = suffixServiceName(TestObjects.FRONTEND,testSuffix)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(store().getDependencies(endTs(trace),DAY).execute()).containsOnly(DependencyLink.newBuilder().parent(frontend.serviceName()).child(backend.serviceName()).callCount(1).build(),DependencyLink.newBuilder().parent(backend.serviceName()).child(db.serviceName()).callCount(1).build())@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "String testSuffix = testSuffix(testInfo)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "instrumentedClientAndServer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(store().getDependencies(TRACE_ENDTS,DAY).execute()).containsOnly(DependencyLink.newBuilder().parent(\"kafka\").child(\"backend\").callCount(1).build())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "processDependencies(trace)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Endpoint kafka = Endpoint.newBuilder().serviceName(\"kafka\").ip(\"172.17.0.4\").build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(traceId).id(\"10\").name(\"get\").timestamp((TODAY + 50L) * 1000L).duration(250L * 1000L).kind(Kind.CLIENT).localEndpoint(frontend).build(),Span.newBuilder().traceId(traceId).id(\"10\").name(\"get\").shared(true).timestamp((TODAY + 100) * 1000L).duration(150L * 1000L).kind(Kind.SERVER).localEndpoint(backend).build(),Span.newBuilder().traceId(traceId).parentId(\"10\").id(\"11\").name(\"get\").timestamp((TODAY + 150L) * 1000L).duration(50L * 1000L).kind(Kind.CLIENT).localEndpoint(backend).remoteEndpoint(db).build())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Endpoint backend = suffixServiceName(TestObjects.BACKEND,testSuffix)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "processDependencies(trace)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "String traceId = newTraceId()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Endpoint db = suffixServiceName(TestObjects.DB,testSuffix)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "processDependencies(trace)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(\"10\").id(\"10\").name(\"receive\").timestamp(TODAY * 1000).kind(Kind.SERVER).localEndpoint(BACKEND).remoteEndpoint(kafka).build(),Span.newBuilder().traceId(\"10\").parentId(\"10\").id(\"11\").name(\"process\").timestamp((TODAY + 25) * 1000L).duration(325L * 1000L).localEndpoint(BACKEND).build())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->7 [style = bold, label=""];
7->8 [style = bold, label=""];
14->3 [style = bold, label=""];
10->13 [style = solid, label="testSuffix"];
3->16 [style = dashed, label="0"];
6->10 [style = solid, label="testInfo"];
9->13 [style = bold, label=""];
17->14 [style = bold, label=""];
10->9 [style = solid, label="testSuffix"];
8->11 [style = bold, label=""];
12->10 [style = bold, label=""];
1->3 [style = bold, label=""];
8->11 [style = solid, label="trace"];
10->4 [style = bold, label=""];
4->9 [style = bold, label=""];
2->1 [style = bold, label=""];
10->7 [style = solid, label="testSuffix"];
14->3 [style = solid, label="trace"];
2->1 [style = solid, label="trace"];
3->16 [style = bold, label=""];
0->2 [style = bold, label=""];
12->6 [style = dotted, label="true"];
3->5 [style = dashed, label="0"];
11->5 [style = bold, label=""];
15->17 [style = bold, label=""];
}
