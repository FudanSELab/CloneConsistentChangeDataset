digraph {
15 [style = filled, label = "configureAndTestInternalCanHandle['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Mockito.doReturn(storagePoolType).when(storagePool).getPoolType()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "boolean isManagedStorage@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Mockito.doReturn(storagePool).when(primaryDataStoreDao).findById(0l)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "boolean sPool1IsManaged@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Mockito.doReturn(sPool1IsManaged).when(storagePool1).isManaged()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Mockito.doReturn(0l).when(ds).getId()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "StoragePoolVO storagePool = Mockito.spy(new StoragePoolVO())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "StoragePoolVO storagePool0 = Mockito.spy(new StoragePoolVO())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return volumeMap@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Mockito.doReturn(1l).when(ds).getId()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "volumeMap.put(volumeInfo,ds)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Mockito.doReturn(0l).when(volumeInfo).getPoolId()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Mockito.doReturn(storagePool1).when(primaryDataStoreDao).findById(1l)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "StoragePoolType storagePoolType@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Mockito.doReturn(sPool0IsManaged).when(storagePool0).isManaged()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "StrategyPriority strategyPriority = strategy.internalCanHandle(volumeMap,new HostVO(\"srcHostUuid\"),new HostVO(\"destHostUuid\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "boolean sPool0IsManaged@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "StrategyPriority expectedStrategyPriority@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "VolumeObject volumeInfo = Mockito.spy(new VolumeObject())@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DataStore ds = Mockito.spy(new PrimaryDataStoreImpl())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "configureTestInternalCanHandle['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(expectedStrategyPriority,strategyPriority)@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "StrategyPriority strategyPriority = storageSystemDataMotionStrategy.internalCanHandle(volumeMap)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "configureAndTestInternalCanHandle['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Map<VolumeInfo,DataStore> volumeMap = new HashMap<>()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Mockito.doReturn(isManagedStorage).when(storagePool).isManaged()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "StoragePoolVO storagePool1 = Mockito.spy(new StoragePoolVO())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "StrategyPriority expectedStrategyPriority@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "boolean sPool1IsManaged@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.doReturn(storagePool0).when(primaryDataStoreDao).findById(0l)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
11->16 [style = bold, label=""];
29->17 [style = bold, label=""];
7->1 [style = bold, label=""];
21->20 [style = dotted, label="true"];
0->27 [style = bold, label=""];
15->2 [style = dotted, label="true"];
3->27 [style = dashed, label="0"];
12->17 [style = bold, label=""];
17->18 [style = solid, label="volumeMap"];
1->18 [style = bold, label=""];
4->29 [style = bold, label=""];
25->28 [style = dotted, label="true"];
5->14 [style = bold, label=""];
27->22 [style = bold, label=""];
13->26 [style = dashed, label="0"];
17->23 [style = solid, label="volumeMap"];
11->0 [style = solid, label="volumeInfo"];
15->9 [style = dotted, label="true"];
6->18 [style = dashed, label="0"];
24->26 [style = bold, label=""];
3->5 [style = bold, label=""];
1->6 [style = bold, label=""];
17->0 [style = bold, label=""];
17->6 [style = solid, label="volumeMap"];
15->8 [style = dotted, label="true"];
15->11 [style = bold, label=""];
18->10 [style = bold, label=""];
21->9 [style = dotted, label="true"];
21->11 [style = bold, label=""];
25->11 [style = bold, label=""];
13->7 [style = bold, label=""];
20->10 [style = solid, label="expectedStrategyPriority"];
6->10 [style = bold, label=""];
26->23 [style = bold, label=""];
21->19 [style = dotted, label="true"];
12->29 [style = dashed, label="0"];
4->12 [style = bold, label=""];
2->10 [style = solid, label="expectedStrategyPriority"];
14->13 [style = bold, label=""];
22->24 [style = bold, label=""];
16->4 [style = bold, label=""];
6->10 [style = solid, label="strategyPriority"];
18->10 [style = solid, label="strategyPriority"];
25->30 [style = dotted, label="true"];
9->30 [style = dashed, label="0"];
4->0 [style = solid, label="ds"];
5->22 [style = dashed, label="0"];
}
