digraph {
9 [style = filled, label = "testNestedChildren['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertFalse(child1.hasAttributes())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "assertNotNull(x)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(\"child2\",child2.getTagName())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "XMLFragment x = buildRule.getProject().getReference(\"nested-text\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertTrue(!child3.hasAttributes())@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1,nl2.getLength())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertFalse(\"No attributes\",n.hasAttributes())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl.item(1).getNodeType())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "nl2 = child2.getChildNodes()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "NodeList nl = n.getChildNodes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "NodeList nl2 = child1.getChildNodes()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Element child3 = (Element)nl.item(2)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl2.item(0).getNodeType())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(1,nl2.getLength())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "XMLFragment x = buildRule.getProject().getReference(\"with-children\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Element child2 = (Element)nl.item(1)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "testNestedChildren['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertEquals(0,nl2.getLength())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertTrue(!child1.hasAttributes())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertEquals(Node.TEXT_NODE,nl2.item(0).getNodeType())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "nl2 = child3.getChildNodes()@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Element child1 = (Element)nl.item(0)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(3,nl.getLength())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertTrue(child2.hasAttributes())@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"child1\",child1.getTagName())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl.item(2).getNodeType())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertEquals(Node.TEXT_NODE,nl.item(0).getNodeType())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Node n = x.getFragment()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testNestedText['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"bar\",child2.getAttribute(\"foo\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(Node.ELEMENT_NODE,nl.item(0).getNodeType())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(\"foo\",nl2.item(0).getNodeValue())@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(1,nl.getLength())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertFalse(child3.hasAttributes())@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "assertEquals(\"foo\",nl.item(0).getNodeValue())@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(\"child3\",child3.getTagName())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(\"child4\",((Element)nl2.item(0)).getTagName())@@@31@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
1->37 [style = dashed, label="0"];
17->5 [style = bold, label=""];
24->12 [style = bold, label=""];
15->13 [style = bold, label=""];
16->32 [style = dashed, label="0"];
10->36 [style = dashed, label="0"];
7->10 [style = bold, label=""];
19->20 [style = bold, label=""];
22->33 [style = dashed, label="0"];
11->21 [style = bold, label=""];
28->7 [style = bold, label=""];
26->14 [style = bold, label=""];
8->34 [style = dashed, label="0"];
1->23 [style = solid, label="x"];
21->24 [style = bold, label=""];
12->26 [style = bold, label=""];
16->17 [style = bold, label=""];
20->3 [style = bold, label=""];
31->1 [style = bold, label=""];
37->23 [style = bold, label=""];
36->33 [style = bold, label=""];
1->23 [style = bold, label=""];
22->8 [style = bold, label=""];
29->27 [style = bold, label=""];
13->19 [style = bold, label=""];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
30->3 [style = bold, label=""];
35->37 [style = bold, label=""];
25->11 [style = bold, label=""];
7->36 [style = bold, label=""];
23->6 [style = bold, label=""];
37->23 [style = solid, label="x"];
20->30 [style = dashed, label="0"];
18->25 [style = bold, label=""];
0->18 [style = bold, label=""];
14->15 [style = bold, label=""];
8->4 [style = bold, label=""];
9->1 [style = bold, label=""];
2->29 [style = bold, label=""];
33->34 [style = bold, label=""];
32->17 [style = bold, label=""];
4->32 [style = bold, label=""];
4->16 [style = bold, label=""];
6->28 [style = bold, label=""];
19->30 [style = bold, label=""];
}
