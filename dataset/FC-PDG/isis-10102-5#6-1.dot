digraph {
18 [style = filled, label = "Class<?> type@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "val super_action = holderSpec.getActionElseFail(\"sampleActionOverride\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(\"samplePropertyOverride\",super_property.getId())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(1L,holderSpec.streamProperties(MixedIn.EXCLUDED).filter(null).count())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "val super_property = holderSpec.getAssociationElseFail(\"samplePropertyOverride\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1L,holderSpec.streamAnyActions(MixedIn.EXCLUDED).filter(null).count())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "metamodelContributingProperties_shouldBeUnique_whenOverridden['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "type.isInterface() && type.getSuperclass() == null@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNotNull(super_action)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Class<?> type@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"bar\",super_property.getDescription())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"foo\",super_property.getName())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(\"bar\",super_action.getDescription())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "metamodelContributingActions_shouldBeUnique_whenOverridden['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"foo\",super_action.getName())@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "val holderSpec = specificationLoader.loadSpecification(type,IntrospectionState.FULLY_INTROSPECTED)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"sampleActionOverride\",super_action.getId())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "val holderSpec = specificationLoader.specForTypeElseFail(type)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "metamodelContributingActions_shouldBeUnique_whenOverridden['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertNotNull(super_property)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
5->13 [style = dashed, label="0"];
8->10 [style = bold, label=""];
18->8 [style = solid, label="type"];
16->13 [style = bold, label=""];
9->0 [style = dotted, label="true"];
8->19 [style = bold, label=""];
10->19 [style = dashed, label="0"];
11->6 [style = bold, label=""];
10->1 [style = solid, label="super_action"];
14->17 [style = bold, label=""];
8->12 [style = dashed, label="0"];
19->16 [style = solid, label="super_property"];
20->6 [style = bold, label=""];
2->17 [style = dashed, label="0"];
9->6 [style = bold, label=""];
19->16 [style = bold, label=""];
6->4 [style = bold, label=""];
12->10 [style = bold, label=""];
6->4 [style = dotted, label="true"];
3->2 [style = bold, label=""];
0->8 [style = solid, label="type"];
1->16 [style = dashed, label="0"];
11->0 [style = dotted, label="true"];
6->8 [style = bold, label=""];
17->15 [style = bold, label=""];
20->18 [style = dotted, label="true"];
7->15 [style = dashed, label="0"];
4->12 [style = bold, label=""];
0->18 [style = dashed, label="0"];
4->8 [style = bold, label=""];
2->7 [style = bold, label=""];
3->14 [style = dashed, label="0"];
10->1 [style = bold, label=""];
13->14 [style = bold, label=""];
0->12 [style = solid, label="type"];
6->12 [style = bold, label=""];
}
