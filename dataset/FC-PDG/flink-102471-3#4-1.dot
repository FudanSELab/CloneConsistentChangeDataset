digraph {
28 [style = filled, label = "Assert.assertEquals(4L,headOutputWatermarkGauge.getValue().longValue())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(1L,chainedInputWatermarkGauge.getValue().longValue())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testHarness.waitForInputProcessing()@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput1WatermarkGauge.getValue().longValue())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput2WatermarkGauge.getValue().longValue())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(1L,headInputWatermarkGauge.getValue().longValue())@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(4L,chainedInputWatermarkGauge.getValue().longValue())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedInputWatermarkGauge.getValue().longValue())@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(4L,chainedOutputWatermarkGauge.getValue().longValue())@@@68@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final OneInputStreamTaskTestHarness<String,String> testHarness = new OneInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertEquals(2L,taskInputWatermarkGauge.getValue().longValue())@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(2L,chainedInputWatermarkGauge.getValue().longValue())@@@67@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Gauge<Long> taskInputWatermarkGauge = (Gauge<Long>)taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "testHarness.processElement(new Watermark(2L),1,0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "testHarness.processElement(new Watermark(1L),0,0)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "testHarness.waitForInputProcessing()@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInputWatermarkGauge.getValue().longValue())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(2L,headInputWatermarkGauge.getValue().longValue())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(2L,headInput2WatermarkGauge.getValue().longValue())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(2L,chainedOutputWatermarkGauge.getValue().longValue())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "testHarness.waitForInputProcessing()@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testHarness.waitForTaskRunning()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup(){@Override public OperatorMetricGroup addOperator(OperatorID id,String name){if (id.equals(headOperatorId)) {return headOperatorMetricGroup}if (id.equals(chainedOperatorId)) {return chainedOperatorMetricGroup}{return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b12897idname}}}@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "StreamMockEnvironment env = new StreamMockEnvironment(testHarness.jobConfig,testHarness.taskConfig,testHarness.memorySize,new MockInputSplitProvider(),testHarness.bufferSize,new TestTaskStateManager()){@Override public TaskMetricGroup getMetricGroup(){return taskMetricGroup}}@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInput2WatermarkGauge.getValue().longValue())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headOutputWatermarkGauge.getValue().longValue())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testHarness.invoke(env)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(1L,taskInputWatermarkGauge.getValue().longValue())@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headInputWatermarkGauge.getValue().longValue())@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(1L,headInput1WatermarkGauge.getValue().longValue())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "OperatorID chainedOperatorId = new OperatorID()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testHarness.processElement(new Watermark(3L),0,0)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Gauge<Long> chainedInputWatermarkGauge = (Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedInputWatermarkGauge.getValue().longValue())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Assert.assertEquals(1L,headOutputWatermarkGauge.getValue().longValue())@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "OneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "testHarness.setupOperatorChain(headOperatorId,headOperator).chain(chainedOperatorId,chainedOperator,BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).finish()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertEquals(2L,headOutputWatermarkGauge.getValue().longValue())@@@66@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "OperatorID headOperatorId = new OperatorID()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testWatermarkMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedOutputWatermarkGauge.getValue().longValue())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,taskInputWatermarkGauge.getValue().longValue())@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
57 [style = filled, label = "testWatermarkMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "InterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(1L,headInput1WatermarkGauge.getValue().longValue())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testHarness.endInput()@@@69@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Gauge<Long> headInput2WatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "CoStreamMap<String,Integer,String> headOperator = new CoStreamMap<>(new IdentityMap())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "InterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup(){@Override public OperatorMetricGroup addOperator(OperatorID id,String name){if (id.equals(headOperatorId)) {return headOperatorMetricGroup}if (id.equals(chainedOperatorId)) {return chainedOperatorMetricGroup}{return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b126f7idname}}}@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "Gauge<Long> headInputWatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "Gauge<Long> headInput1WatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(2L,headInputWatermarkGauge.getValue().longValue())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,chainedOutputWatermarkGauge.getValue().longValue())@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(3L,headInput1WatermarkGauge.getValue().longValue())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "testHarness.waitForTaskCompletion()@@@70@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "OneInputStreamOperator<String,String> chainedOperator = new WatermarkMetricOperator()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "OneInputStreamOperator<String,String> headOperator = new WatermarkMetricOperator()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testHarness.processElement(new Watermark(2L))@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testWatermarkMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Gauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "testHarness.waitForInputProcessing()@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness = new TwoInputStreamTaskTestHarness<>(null,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testHarness.processElement(new Watermark(1L))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(8L,chainedOutputWatermarkGauge.getValue().longValue())@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "InterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(Long.MIN_VALUE,headOutputWatermarkGauge.getValue().longValue())@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(2L,headInput2WatermarkGauge.getValue().longValue())@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertEquals(\"A metric was registered multiple times.\",5,new HashSet<>(Arrays.asList(taskInputWatermarkGauge,headInputWatermarkGauge,headOutputWatermarkGauge,chainedInputWatermarkGauge,chainedOutputWatermarkGauge)).size())@@@38@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Gauge<Long> headOutputWatermarkGauge = (Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final OperatorID headOperatorId = new OperatorID()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39->19 [style = bold, label=""];
29->5 [style = bold, label=""];
17->34 [style = solid, label="chainedOperatorMetricGroup"];
52->27 [style = bold, label=""];
5->20 [style = bold, label=""];
15->25 [style = bold, label=""];
23->48 [style = dashed, label="0"];
60->53 [style = bold, label=""];
19->11 [style = bold, label=""];
14->28 [style = bold, label=""];
62->55 [style = bold, label=""];
43->26 [style = bold, label=""];
36->12 [style = bold, label=""];
11->9 [style = bold, label=""];
7->56 [style = dashed, label="0"];
0->15 [style = bold, label=""];
22->30 [style = bold, label=""];
24->34 [style = solid, label="headOperatorId"];
37->5 [style = bold, label=""];
35->23 [style = bold, label=""];
65->50 [style = bold, label=""];
33->18 [style = bold, label=""];
18->52 [style = dashed, label="0"];
55->12 [style = bold, label=""];
44->34 [style = solid, label="headOperatorId"];
3->46 [style = bold, label=""];
59->60 [style = bold, label=""];
34->19 [style = bold, label=""];
24->0 [style = bold, label=""];
21->41 [style = bold, label=""];
12->1 [style = bold, label=""];
26->4 [style = bold, label=""];
50->67 [style = bold, label=""];
66->54 [style = bold, label=""];
7->24 [style = bold, label=""];
17->34 [style = bold, label=""];
19->11 [style = solid, label="env"];
32->34 [style = solid, label="headOperatorMetricGroup"];
38->37 [style = bold, label=""];
40->3 [style = bold, label=""];
17->39 [style = bold, label=""];
46->68 [style = bold, label=""];
29->38 [style = bold, label=""];
23->7 [style = bold, label=""];
53->43 [style = bold, label=""];
44->45 [style = bold, label=""];
15->39 [style = solid, label="chainedOperatorId"];
32->17 [style = bold, label=""];
4->22 [style = bold, label=""];
22->6 [style = bold, label=""];
58->61 [style = bold, label=""];
33->52 [style = bold, label=""];
47->3 [style = bold, label=""];
45->15 [style = bold, label=""];
61->69 [style = bold, label=""];
3->26 [style = bold, label=""];
42->47 [style = bold, label=""];
24->44 [style = dashed, label="0"];
16->23 [style = bold, label=""];
30->21 [style = bold, label=""];
67->63 [style = bold, label=""];
34->39 [style = dashed, label="0"];
28->8 [style = bold, label=""];
15->34 [style = solid, label="chainedOperatorId"];
1->2 [style = bold, label=""];
10->33 [style = bold, label=""];
9->12 [style = bold, label=""];
13->6 [style = bold, label=""];
41->14 [style = bold, label=""];
8->13 [style = bold, label=""];
0->45 [style = dashed, label="0"];
34->19 [style = solid, label="taskMetricGroup"];
21->14 [style = bold, label=""];
9->36 [style = bold, label=""];
49->42 [style = bold, label=""];
24->39 [style = solid, label="headOperatorId"];
48->56 [style = bold, label=""];
63->64 [style = bold, label=""];
27->3 [style = bold, label=""];
17->39 [style = solid, label="chainedOperatorMetricGroup"];
25->32 [style = bold, label=""];
54->20 [style = bold, label=""];
9->62 [style = bold, label=""];
5->66 [style = bold, label=""];
69->51 [style = bold, label=""];
20->10 [style = bold, label=""];
51->59 [style = bold, label=""];
57->48 [style = bold, label=""];
27->65 [style = bold, label=""];
6->31 [style = bold, label=""];
18->27 [style = bold, label=""];
27->40 [style = bold, label=""];
64->49 [style = bold, label=""];
39->19 [style = solid, label="taskMetricGroup"];
2->29 [style = bold, label=""];
56->44 [style = bold, label=""];
32->39 [style = solid, label="headOperatorMetricGroup"];
68->58 [style = bold, label=""];
}
