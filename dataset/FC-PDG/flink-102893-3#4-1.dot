digraph {
3 [style = filled, label = "CheckpointBarrierTracker checkpointBarrierTracker = (CheckpointBarrierTracker)inputGate.getCheckpointBarrierHandler()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testTriggerCheckpointsAfterReceivedEndOfPartition['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertEquals(0,validator.getTriggeredCheckpointCounter())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "inputGate = createCheckpointedInputGate(3,sequence,validator)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(validator.triggeredCheckpoints,contains(6L,7L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(boe,inputGate.pollNext().get())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(validator.abortedCheckpoints,contains(5L,6L,7L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ValidatingCheckpointHandler validator = new ValidatingCheckpointHandler(-1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testAbortCheckpointsAfterEndOfPartitionReceived['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testTriggerCheckpointsAfterReceivedEndOfPartition['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(0,validator.getAbortedCheckpointCounter())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BufferOrEvent(( sequence = {createEndOfPartition(2),createBarrier(5,0),createBarrier(6,0),createCancellationBarrier(6,1),createEndOfPartition(1),createCancellationBarrier(7,0)}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "checkpointBarrierTracker.setEnableCheckpointAfterTasksFinished(true)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->8 [style = bold, label=""];
4->3 [style = bold, label=""];
8->10 [style = bold, label=""];
11->6 [style = bold, label=""];
1->6 [style = bold, label=""];
0->12 [style = dashed, label="0"];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
3->7 [style = bold, label=""];
7->8 [style = bold, label=""];
2->4 [style = solid, label="validator"];
2->4 [style = bold, label=""];
10->12 [style = bold, label=""];
5->10 [style = dashed, label="0"];
9->6 [style = bold, label=""];
6->4 [style = solid, label="sequence"];
6->2 [style = bold, label=""];
}
