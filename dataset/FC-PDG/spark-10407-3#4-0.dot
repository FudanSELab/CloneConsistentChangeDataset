digraph {
17 [style = filled, label = "testBinaryComparatorWhenSubtractionCanOverflowLongValue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "row2.pointTo(data2,computeSizeInBytes(numFields * 8))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "row1.setLong(0,Long.MIN_VALUE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testBinaryComparatorWhenSubtractionIsDivisibleByMaxIntValue['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "byte(( data1 = new byte((((@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "row1.setLong(0,11)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int numFields = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testBinaryComparatorWhenSubtractionIsDivisibleByMaxIntValue['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "row2.setLong(0,1)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "UnsafeRow row2 = new UnsafeRow(numFields)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "row2.setLong(0,11L + Integer.MAX_VALUE)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "insertRow(row1)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assert(compare(0,1) < 0)@@@14@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "insertRow(row2)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "row1.pointTo(data1,computeSizeInBytes(numFields * 8))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "UnsafeRow row1 = new UnsafeRow(numFields)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "byte(( data2 = new byte((((@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assert(compare(0,1) > 0)@@@14@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8->16 [style = bold, label=""];
5->10 [style = solid, label="row1"];
7->8 [style = bold, label=""];
1->10 [style = bold, label=""];
6->15 [style = bold, label=""];
12->6 [style = solid, label="data2"];
11->9 [style = bold, label=""];
14->0 [style = bold, label=""];
3->13 [style = bold, label=""];
10->3 [style = bold, label=""];
0->8 [style = solid, label="numFields"];
0->5 [style = solid, label="numFields"];
0->6 [style = solid, label="numFields"];
8->11 [style = bold, label=""];
7->8 [style = solid, label="data1"];
11->16 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
4->13 [style = dashed, label="0"];
2->0 [style = bold, label=""];
0->5 [style = bold, label=""];
9->3 [style = solid, label="row2"];
17->0 [style = bold, label=""];
6->1 [style = bold, label=""];
15->10 [style = bold, label=""];
3->4 [style = bold, label=""];
5->7 [style = bold, label=""];
12->6 [style = bold, label=""];
9->12 [style = bold, label=""];
16->9 [style = bold, label=""];
0->9 [style = solid, label="numFields"];
}
