digraph {
16 [style = filled, label = "assertEquals(TimeWindows.of(3).until(4),TimeWindows.of(3).until(4))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(TimeWindows.of(3).grace(1).hashCode(),TimeWindows.of(3).grace(1).hashCode())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).until(7).hashCode(),SessionWindows.with(1).grace(6).until(7).hashCode())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "verifyEquality(SessionWindows.with(1).grace(6),SessionWindows.with(1).grace(6))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).hashCode(),SessionWindows.with(1).grace(6).hashCode())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "verifyEquality(SessionWindows.with(1),SessionWindows.with(1))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(TimeWindows.of(3).hashCode(),TimeWindows.of(3).hashCode())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(TimeWindows.of(3).grace(1),TimeWindows.of(3).grace(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(TimeWindows.of(3).until(4).hashCode(),TimeWindows.of(3).until(4).hashCode())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(SessionWindows.with(1).until(7).hashCode(),SessionWindows.with(1).until(7).hashCode())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1),TimeWindows.of(3).advanceBy(1))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verifyEquality(SessionWindows.with(1).until(7),SessionWindows.with(1).until(7))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(SessionWindows.with(1).until(7),SessionWindows.with(1).until(7))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertEquals(TimeWindows.of(3),TimeWindows.of(3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(SessionWindows.with(1),SessionWindows.with(1))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(SessionWindows.with(1).hashCode(),SessionWindows.with(1).hashCode())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).grace(1).until(4),TimeWindows.of(3).advanceBy(1).grace(1).until(4))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode(),TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode())@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6),SessionWindows.with(1).grace(6))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "verifyEquality(SessionWindows.with(1).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "equalsAndHashcodeShouldBeValidForPositiveCases['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertEquals(SessionWindows.with(1).grace(6).until(7),SessionWindows.with(1).grace(6).until(7))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(TimeWindows.of(3).advanceBy(1).hashCode(),TimeWindows.of(3).advanceBy(1).hashCode())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
5->13 [style = dashed, label="0"];
5->8 [style = bold, label=""];
24->19 [style = bold, label=""];
3->1 [style = bold, label=""];
1->14 [style = dashed, label="0"];
0->6 [style = bold, label=""];
16->24 [style = bold, label=""];
8->12 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
12->9 [style = bold, label=""];
4->7 [style = bold, label=""];
8->0 [style = bold, label=""];
6->4 [style = bold, label=""];
13->12 [style = bold, label=""];
20->23 [style = bold, label=""];
10->13 [style = bold, label=""];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
15->20 [style = bold, label=""];
21->16 [style = bold, label=""];
23->17 [style = bold, label=""];
14->15 [style = bold, label=""];
0->9 [style = dashed, label="0"];
19->22 [style = bold, label=""];
17->21 [style = bold, label=""];
18->14 [style = bold, label=""];
}
