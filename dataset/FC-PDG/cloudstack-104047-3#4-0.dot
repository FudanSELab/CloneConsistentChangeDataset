digraph {
46 [style = filled, label = "final NiciraNvpApi niciraNvpApi = Mockito.mock()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "when(vmSpec.getMaxRam()).thenReturn(512L)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "fail(e.getMessage())@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "when(vmSpec.getName()).thenReturn(vmName)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final String vmName = \"Test\"@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final StartCommand command = new StartCommand(vmSpec,host,executeInSequence)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "when(dm.getName()).thenReturn(vmName)@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final boolean executeInSequence = false@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testStartCommandHostMemory['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final int(( vms = new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@74e2f8@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "doNothing().when(libvirtComputingResource).createVbd(conn,vmSpec,vmName,vmDef)@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "fail(e.getMessage())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertNotNull(wrapper)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "doNothing().when(niciraNvpApi).deleteLogicalRouter(command.getLogicalRouterUuid())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertTrue(answer.getResult())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final Domain dm = Mockito.mock()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final InternalErrorException e@@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "fail(e.getMessage())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final VirtualMachineTO vmSpec = Mockito.mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final LibvirtException e@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "when(libvirtComputingResource.createVMFromSpec(vmSpec)).thenReturn(vmDef)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int vmId = 1@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "when(conn.listDomains()).thenReturn(vms)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "when(libvirtUtilitiesHelper.getConnectionByType(vmDef.getHvsType())).thenReturn(conn)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertTrue(answer.getResult())@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "final String logicalRouterUuid = \"d2e05a9e-7120-4487-a5fc-414ab36d9345\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "testDeleteLogicalRouterCommand['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "when(vmSpec.getNics()).thenReturn(nics)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertNotNull(wrapper)@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "when(niciraNvpResource.getNiciraNvpApi()).thenReturn(niciraNvpApi)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "when(storagePoolMgr.connectPhysicalDisksViaVmSpec(vmSpec)).thenReturn(true)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final NicTO(( nics = new NicTO((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@74e2eb@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final DeleteLogicalRouterCommand command = new DeleteLogicalRouterCommand(logicalRouterUuid)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final NiciraNvpApiException e@@@10@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "final Answer answer = wrapper.execute(command,niciraNvpResource)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(vmSpec.getType()).thenReturn(VirtualMachine.Type.User)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Answer answer = wrapper.execute(command,libvirtComputingResource)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "final NiciraNvpRequestWrapper wrapper = NiciraNvpRequestWrapper.getInstance()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "fail(e.getMessage())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final URISyntaxException e@@@42@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "when(conn.domainLookupByID(vmId)).thenReturn(dm)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final NicTO nic = Mockito.mock()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final LibvirtVMDef vmDef = Mockito.mock()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final LibvirtRequestWrapper wrapper = LibvirtRequestWrapper.getInstance()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Connect conn = Mockito.mock()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "testStartCommandHostMemory['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
35 [style = filled, label = "final LibvirtUtilitiesHelper libvirtUtilitiesHelper = Mockito.mock()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final com.cloud.host.Host host = Mockito.mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "when(libvirtComputingResource.getTotalMemory()).thenReturn(2048 * 1024L)@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "final KVMStoragePoolManager storagePoolMgr = Mockito.mock()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "when(dm.getMaxMemory()).thenReturn(1024L)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23->31 [style = bold, label=""];
11->20 [style = bold, label=""];
42->41 [style = bold, label=""];
15->30 [style = solid, label="wrapper"];
16->18 [style = bold, label=""];
34->2 [style = solid, label="vmDef"];
37->24 [style = bold, label=""];
30->1 [style = bold, label=""];
25->34 [style = bold, label=""];
27->14 [style = bold, label=""];
22->19 [style = bold, label=""];
4->6 [style = bold, label=""];
21->22 [style = solid, label="executeInSequence"];
3->31 [style = bold, label=""];
44->43 [style = dotted, label="true"];
28->39 [style = bold, label=""];
24->9 [style = bold, label=""];
19->20 [style = solid, label="storagePoolMgr"];
24->46 [style = dashed, label="0"];
41->49 [style = solid, label="wrapper"];
35->10 [style = solid, label="libvirtUtilitiesHelper"];
47->51 [style = solid, label="command"];
18->38 [style = solid, label="nics"];
8->7 [style = dotted, label="true"];
49->51 [style = bold, label=""];
1->51 [style = dashed, label="0"];
41->49 [style = bold, label=""];
7->31 [style = bold, label=""];
36->12 [style = bold, label=""];
20->38 [style = bold, label=""];
15->30 [style = bold, label=""];
51->52 [style = bold, label=""];
11->36 [style = solid, label="vmName"];
2->10 [style = bold, label=""];
31->15 [style = bold, label=""];
17->3 [style = dotted, label="true"];
25->23 [style = solid, label="conn"];
47->50 [style = bold, label=""];
44->43 [style = bold, label=""];
8->7 [style = bold, label=""];
33->26 [style = bold, label=""];
29->13 [style = bold, label=""];
29->44 [style = dashed, label="0"];
35->25 [style = bold, label=""];
48->46 [style = bold, label=""];
34->23 [style = solid, label="vmDef"];
4->6 [style = solid, label="vmId"];
11->23 [style = solid, label="vmName"];
6->5 [style = bold, label=""];
26->27 [style = bold, label=""];
29->13 [style = dotted, label="true"];
18->4 [style = bold, label=""];
36->23 [style = bold, label=""];
50->42 [style = bold, label=""];
9->22 [style = solid, label="host"];
21->22 [style = bold, label=""];
39->2 [style = bold, label=""];
34->16 [style = bold, label=""];
19->35 [style = bold, label=""];
38->0 [style = bold, label=""];
46->50 [style = solid, label="niciraNvpApi"];
45->47 [style = solid, label="logicalRouterUuid"];
9->21 [style = bold, label=""];
45->47 [style = bold, label=""];
17->3 [style = bold, label=""];
22->1 [style = solid, label="command"];
1->32 [style = bold, label=""];
46->45 [style = bold, label=""];
43->41 [style = bold, label=""];
40->24 [style = bold, label=""];
5->11 [style = bold, label=""];
10->33 [style = bold, label=""];
12->23 [style = bold, label=""];
16->18 [style = solid, label="nic"];
13->31 [style = bold, label=""];
25->33 [style = solid, label="conn"];
11->28 [style = solid, label="vmName"];
5->27 [style = solid, label="dm"];
6->26 [style = solid, label="vms"];
0->28 [style = bold, label=""];
24->22 [style = solid, label="vmSpec"];
24->23 [style = solid, label="vmSpec"];
14->36 [style = bold, label=""];
}
