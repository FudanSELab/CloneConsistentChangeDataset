digraph {
26 [style = filled, label = "maxTotalRows = 3L@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@57@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "int i = numToAdd@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@60@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
69 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@59@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,1L,1,0L))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "i++@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@59@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@58@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@71@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@67@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@73@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "SegmentDescriptor desc7 = SD(task,\"2013/P1D\",0)@@@63@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@70@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@62@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "int i = 0@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "SegmentDescriptor desc6 = SD(task,\"2012/P1D\",0)@@@62@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
85 [style = filled, label = "Thread.sleep(10)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "i++@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@34@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@66@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
87 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
53 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@61@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "SegmentDescriptor desc5 = SD(task,\"2011/P1D\",1)@@@61@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
71 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "insertData()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@63@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2011/P1D\",0)@@@60@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
83 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "i < records.size()@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "i < numToAdd@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "Thread.sleep(10)@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
84->86 [style = solid, label="task"];
23->51 [style = bold, label=""];
65->54 [style = bold, label=""];
25->50 [style = solid, label="desc1"];
68->11 [style = solid, label="desc7"];
74->72 [style = bold, label=""];
84->82 [style = solid, label="task"];
10->19 [style = bold, label=""];
62->61 [style = bold, label=""];
12->70 [style = dashed, label="0"];
55->2 [style = bold, label=""];
44->7 [style = bold, label=""];
7->43 [style = solid, label="i"];
37->10 [style = solid, label="currentOffsets"];
36->12 [style = solid, label="task"];
41->60 [style = solid, label="desc5"];
53->54 [style = bold, label=""];
3->38 [style = bold, label=""];
25->35 [style = bold, label=""];
27->15 [style = bold, label=""];
54->5 [style = dotted, label="true"];
56->29 [style = solid, label="desc7"];
67->69 [style = bold, label=""];
36->35 [style = solid, label="task"];
43->6 [style = solid, label="i"];
87->74 [style = bold, label=""];
63->66 [style = bold, label=""];
75->80 [style = solid, label="startPartitions"];
37->31 [style = bold, label=""];
33->42 [style = bold, label=""];
51->36 [style = solid, label="endPartitions"];
64->11 [style = solid, label="desc1"];
24->17 [style = bold, label=""];
31->16 [style = dashed, label="0"];
70->61 [style = solid, label="desc6"];
68->29 [style = solid, label="desc7"];
70->68 [style = bold, label=""];
83->85 [style = bold, label=""];
38->26 [style = bold, label=""];
7->6 [style = solid, label="i"];
14->76 [style = dashed, label="0"];
73->76 [style = bold, label=""];
54->3 [style = bold, label=""];
54->5 [style = bold, label=""];
75->78 [style = bold, label=""];
68->11 [style = bold, label=""];
28->45 [style = bold, label=""];
37->77 [style = bold, label=""];
9->64 [style = bold, label=""];
34->19 [style = bold, label=""];
17->41 [style = bold, label=""];
76->80 [style = bold, label=""];
57->36 [style = solid, label="startPartitions"];
36->69 [style = solid, label="task"];
40->0 [style = bold, label=""];
81->84 [style = solid, label="endPartitions"];
0->21 [style = bold, label=""];
52->82 [style = bold, label=""];
68->61 [style = solid, label="desc7"];
52->37 [style = solid, label="desc1"];
39->21 [style = solid, label="i"];
35->1 [style = solid, label="desc2"];
23->81 [style = dashed, label="0"];
38->87 [style = bold, label=""];
56->68 [style = dashed, label="0"];
80->36 [style = bold, label=""];
36->58 [style = bold, label=""];
57->59 [style = solid, label="startPartitions"];
26->27 [style = bold, label=""];
36->56 [style = solid, label="task"];
67->61 [style = solid, label="desc2"];
36->25 [style = solid, label="task"];
22->20 [style = bold, label=""];
61->32 [style = bold, label=""];
36->63 [style = solid, label="task"];
6->43 [style = dotted, label="true"];
7->6 [style = bold, label=""];
57->30 [style = bold, label=""];
72->84 [style = solid, label="consumerProps"];
20->39 [style = bold, label=""];
13->49 [style = dashed, label="0"];
59->55 [style = bold, label=""];
37->55 [style = solid, label="currentOffsets"];
11->62 [style = bold, label=""];
52->10 [style = solid, label="desc1"];
6->47 [style = bold, label=""];
66->11 [style = solid, label="desc5"];
63->60 [style = solid, label="desc4"];
46->36 [style = solid, label="consumerProps"];
32->50 [style = bold, label=""];
56->11 [style = bold, label=""];
33->42 [style = solid, label="nextOffsets"];
84->52 [style = solid, label="task"];
66->70 [style = bold, label=""];
71->54 [style = bold, label=""];
49->37 [style = bold, label=""];
46->16 [style = bold, label=""];
64->50 [style = solid, label="desc1"];
70->11 [style = solid, label="desc6"];
2->58 [style = dashed, label="0"];
64->61 [style = solid, label="desc1"];
36->68 [style = solid, label="task"];
83->85 [style = dotted, label="true"];
1->48 [style = bold, label=""];
77->10 [style = bold, label=""];
18->33 [style = bold, label=""];
15->44 [style = bold, label=""];
36->58 [style = solid, label="task"];
11->32 [style = bold, label=""];
4->29 [style = bold, label=""];
36->67 [style = solid, label="task"];
58->49 [style = bold, label=""];
28->45 [style = dotted, label="true"];
86->83 [style = bold, label=""];
12->4 [style = solid, label="desc6"];
35->24 [style = bold, label=""];
69->11 [style = solid, label="desc3"];
66->61 [style = solid, label="desc5"];
82->37 [style = solid, label="desc2"];
49->52 [style = dotted, label="true"];
17->60 [style = solid, label="desc4"];
19->14 [style = bold, label=""];
51->36 [style = bold, label=""];
27->39 [style = solid, label="numToAdd"];
59->80 [style = dashed, label="0"];
12->56 [style = bold, label=""];
6->8 [style = dotted, label="true"];
31->10 [style = bold, label=""];
39->40 [style = bold, label=""];
75->84 [style = solid, label="startPartitions"];
36->24 [style = solid, label="task"];
82->37 [style = bold, label=""];
66->60 [style = solid, label="desc5"];
79->75 [style = bold, label=""];
63->11 [style = solid, label="desc4"];
67->11 [style = solid, label="desc2"];
64->67 [style = bold, label=""];
13->9 [style = bold, label=""];
41->12 [style = bold, label=""];
46->16 [style = solid, label="currentOffsets"];
85->83 [style = bold, label=""];
39->40 [style = solid, label="i"];
33->55 [style = solid, label="nextOffsets"];
28->22 [style = bold, label=""];
60->4 [style = bold, label=""];
81->84 [style = bold, label=""];
78->81 [style = bold, label=""];
27->6 [style = solid, label="numToAdd"];
36->66 [style = solid, label="task"];
33->34 [style = solid, label="nextOffsets"];
42->34 [style = bold, label=""];
70->4 [style = solid, label="desc6"];
3->36 [style = solid, label="baseSequenceName"];
67->1 [style = solid, label="desc2"];
10->28 [style = bold, label=""];
24->69 [style = dashed, label="0"];
30->78 [style = dashed, label="0"];
12->11 [style = solid, label="desc6"];
52->49 [style = bold, label=""];
69->61 [style = solid, label="desc3"];
25->64 [style = dashed, label="0"];
36->41 [style = solid, label="task"];
40->21 [style = dotted, label="true"];
24->11 [style = solid, label="desc3"];
30->23 [style = bold, label=""];
57->73 [style = bold, label=""];
35->67 [style = dashed, label="0"];
47->46 [style = bold, label=""];
40->18 [style = bold, label=""];
37->59 [style = solid, label="currentOffsets"];
8->43 [style = bold, label=""];
48->60 [style = bold, label=""];
45->28 [style = bold, label=""];
84->86 [style = bold, label=""];
40->0 [style = dotted, label="true"];
43->6 [style = bold, label=""];
83->46 [style = bold, label=""];
56->11 [style = solid, label="desc7"];
69->48 [style = solid, label="desc3"];
2->13 [style = bold, label=""];
17->11 [style = solid, label="desc4"];
46->57 [style = solid, label="currentOffsets"];
49->52 [style = bold, label=""];
24->48 [style = solid, label="desc3"];
50->1 [style = bold, label=""];
36->64 [style = solid, label="task"];
41->11 [style = solid, label="desc5"];
16->57 [style = bold, label=""];
9->25 [style = bold, label=""];
36->17 [style = solid, label="task"];
6->8 [style = bold, label=""];
63->61 [style = solid, label="desc4"];
17->63 [style = dashed, label="0"];
25->11 [style = solid, label="desc1"];
21->40 [style = bold, label=""];
72->79 [style = bold, label=""];
41->66 [style = dashed, label="0"];
37->31 [style = solid, label="currentOffsets"];
35->11 [style = solid, label="desc2"];
82->19 [style = solid, label="desc2"];
14->59 [style = bold, label=""];
3->84 [style = solid, label="baseSequenceName"];
69->63 [style = bold, label=""];
21->40 [style = solid, label="i"];
36->70 [style = solid, label="task"];
}
