digraph {
8 [style = filled, label = "Assertions.assertEquals(\"val2\",result.get(\"attr2\"))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assertions.assertEquals(\"val1\",result.get(\"attr1\"))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "shouldIgnoreLeadingAndTrailingSpaces['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Map<String,String> result = new ParameterExpression(\" id , jdbcType = VARCHAR, attr1 = val1 , attr2 = val2 \")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Assert.assertEquals(4,result.size())@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "simplePropertyWithOldStyleJdbcTypeAndAttributes['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assertions.assertEquals(4,result.size())@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Map<String,String> result = new ParameterExpression(\"id:VARCHAR, attr1=val1, attr2=val2\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "simplePropertyWithOldStyleJdbcTypeAndAttributes['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"val2\",result.get(\"attr2\"))@@@8@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(\"val1\",result.get(\"attr1\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assertions.assertEquals(\"id\",result.get(\"property\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assertions.assertEquals(\"VARCHAR\",result.get(\"jdbcType\"))@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(\"VARCHAR\",result.get(\"jdbcType\"))@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"id\",result.get(\"property\"))@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
5->1 [style = bold, label=""];
11->5 [style = bold, label=""];
1->4 [style = bold, label=""];
3->5 [style = bold, label=""];
4->9 [style = dashed, label="0"];
6->0 [style = bold, label=""];
0->8 [style = dashed, label="0"];
4->2 [style = bold, label=""];
14->13 [style = bold, label=""];
9->10 [style = bold, label=""];
5->12 [style = bold, label=""];
12->9 [style = bold, label=""];
7->8 [style = bold, label=""];
10->7 [style = bold, label=""];
2->6 [style = bold, label=""];
6->7 [style = dashed, label="0"];
13->1 [style = bold, label=""];
2->10 [style = dashed, label="0"];
}
