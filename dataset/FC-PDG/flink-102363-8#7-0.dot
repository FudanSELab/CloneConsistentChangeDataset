digraph {
7 [style = filled, label = "assertEquals(expectedServicePorts,restService.getSpec().getPorts())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID),internalService.getMetadata().getName())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Service restService = (Service)resources.get(0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testBuildAccompanyingKubernetesResources['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expectedLabels.put(Constants.LABEL_COMPONENT_KEY,Constants.LABEL_COMPONENT_JOB_MANAGER)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(KubernetesUtils.getRestServiceName(CLUSTER_ID),restService.getMetadata().getName())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,this.flinkConfig.getString(JobManagerOptions.ADDRESS))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"ClusterIP\",internalService.getSpec().getType())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expectedLabels.putAll(userLabels)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<ServicePort> expectedServicePorts = Collections.singletonList(new ServicePortBuilder().withName(Constants.REST_PORT_NAME).withPort(REST_PORT).build())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "final List<ServicePort> expectedServicePorts = Collections.singletonList(new ServicePortBuilder().withName(Constants.REST_PORT_NAME).withPort(REST_PORT).build())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "expectedLabels.put(Constants.LABEL_COMPONENT_KEY,Constants.LABEL_COMPONENT_JOB_MANAGER)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testBuildAccompanyingKubernetesResources['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertEquals(expectedLabels,internalService.getMetadata().getLabels())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final List<HasMetadata> resources = this.externalServiceDecorator.buildAccompanyingKubernetesResources()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Service internalService = (Service)resources.get(0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Map<String,String> expectedLabels = getCommonLabels()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"LoadBalancer\",restService.getSpec().getType())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(KubernetesConfigOptions.ServiceExposedType.LoadBalancer.name(),restService.getSpec().getType())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testBuildAccompanyingKubernetesResources['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "assertEquals(expectedServicePorts,internalService.getSpec().getPorts())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "List<ServicePort> expectedServicePorts = Arrays.asList(new ServicePortBuilder().withName(Constants.REST_PORT_NAME).withPort(REST_PORT).build(),new ServicePortBuilder().withName(Constants.JOB_MANAGER_RPC_PORT_NAME).withPort(RPC_PORT).build(),new ServicePortBuilder().withName(Constants.BLOB_SERVER_PORT_NAME).withPort(BLOB_SERVER_PORT).build())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(Constants.API_VERSION,restService.getApiVersion())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Map<String,String> expectedLabels = getCommonLabels()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(Constants.API_VERSION,internalService.getApiVersion())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertEquals(1,resources.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertEquals(expectedLabels,internalService.getSpec().getSelector())@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
2->23 [style = dashed, label="0"];
17->8 [style = bold, label=""];
8->10 [style = bold, label=""];
2->5 [style = bold, label=""];
10->20 [style = bold, label=""];
5->9 [style = bold, label=""];
15->14 [style = bold, label=""];
23->27 [style = bold, label=""];
0->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
12->2 [style = solid, label="expectedLabels"];
16->6 [style = bold, label=""];
26->25 [style = bold, label=""];
19->17 [style = bold, label=""];
18->2 [style = bold, label=""];
9->7 [style = bold, label=""];
24->18 [style = bold, label=""];
3->4 [style = bold, label=""];
6->22 [style = dashed, label="0"];
14->7 [style = bold, label=""];
9->19 [style = dashed, label="0"];
2->23 [style = bold, label=""];
25->24 [style = bold, label=""];
12->2 [style = bold, label=""];
5->27 [style = dashed, label="0"];
2->20 [style = solid, label="expectedLabels"];
9->14 [style = dashed, label="0"];
11->3 [style = bold, label=""];
21->22 [style = bold, label=""];
6->11 [style = bold, label=""];
2->15 [style = bold, label=""];
1->12 [style = bold, label=""];
12->10 [style = solid, label="expectedLabels"];
10->20 [style = dashed, label="0"];
4->1 [style = bold, label=""];
27->19 [style = bold, label=""];
14->7 [style = solid, label="expectedServicePorts"];
19->17 [style = solid, label="expectedServicePorts"];
2->23 [style = solid, label="expectedLabels"];
13->8 [style = bold, label=""];
5->15 [style = dashed, label="0"];
22->11 [style = bold, label=""];
11->26 [style = bold, label=""];
9->7 [style = solid, label="expectedServicePorts"];
}
