digraph {
1 [style = filled, label = "assertTrue(getInMemAuditLogger().size() > 0)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "AuditLogEntry logEntry = getInMemAuditLogger().poll()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(0,getInMemAuditLogger().size())@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(0,getInMemAuditLogger().size())@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertLogEntry(logEntry,AuditLogEntryType.DROP_ROLE,cql,CASS_USER)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String createTestRoleCQL = getCreateRoleCql(TEST_ROLE,true,false)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "testCqlDROPRoleAuditing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "createTestRole['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "createTestRole()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "createTestRole['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertLogEntry(logEntry,AuditLogEntryType.CREATE_ROLE,getCreateRoleCql(TEST_ROLE,true,false,true),CASS_USER)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "String cql = \"DROP ROLE \" + TEST_ROLE@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String createTestRoleCQL = getCreateRoleCql(TEST_ROLE,true,false,false)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "executeWithCredentials(Arrays.asList(createTestRoleCQL),CASS_USER,CASS_PW,AuditLogEntryType.LOGIN_SUCCESS)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "executeWithCredentials(Arrays.asList(cql),CASS_USER,CASS_PW,AuditLogEntryType.LOGIN_SUCCESS)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(getInMemAuditLogger().size() > 0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13->10 [style = bold, label=""];
2->0 [style = solid, label="createTestRoleCQL"];
3->4 [style = solid, label="logEntry"];
15->14 [style = bold, label=""];
3->8 [style = solid, label="logEntry"];
4->6 [style = bold, label=""];
4->13 [style = bold, label=""];
1->3 [style = bold, label=""];
7->0 [style = bold, label=""];
8->6 [style = bold, label=""];
11->12 [style = bold, label=""];
9->7 [style = bold, label=""];
2->7 [style = dashed, label="0"];
3->4 [style = bold, label=""];
11->12 [style = solid, label="cql"];
5->2 [style = bold, label=""];
2->0 [style = bold, label=""];
2->14 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->8 [style = bold, label=""];
11->13 [style = solid, label="cql"];
7->0 [style = solid, label="createTestRoleCQL"];
4->8 [style = dashed, label="0"];
12->3 [style = bold, label=""];
4->13 [style = solid, label="logEntry"];
2->4 [style = solid, label="createTestRoleCQL"];
4->13 [style = dashed, label="0"];
14->11 [style = bold, label=""];
}
