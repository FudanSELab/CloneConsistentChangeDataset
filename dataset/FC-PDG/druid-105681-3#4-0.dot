digraph {
16 [style = filled, label = "List<Segment> segments@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "List<ResultRow> expectedRows = Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(query,\"2000\",COUNT,1674L,VSTRING_DIM,\"spot\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testGroupByWithRegexFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "boolean enableBitmaps@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "testGroupByWithSelectFilter['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "boolean enableColumnBasedMethods@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "List<Row> expectedRows = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\",COUNT,1674L,VSTRING_DIM,\"spot\"),GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\",COUNT,372L,VSTRING_DIM,\"upfront\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "GroupByQuery query = new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(Granularities.ALL).setVirtualColumns(new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension,VSTRING_DIM,enableRowBasedMethods,enableColumnBasedMethods,enableBitmaps,disableValueMatchers)).addDimension(VSTRING_DIM).setAggregatorSpecs(new CountAggregatorFactory(COUNT)).setInterval(\"2000/2030\").addOrderByColumn(VSTRING_DIM).setDimFilter(new RegexDimFilter(VSTRING_DIM,\"(spot)|(upfront)\",null)).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "List<Segment> segments@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testGroupByWithSelectFilter['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "boolean enableRowBasedMethods@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "boolean disableValueMatchers@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "boolean enableColumnBasedMethods@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "boolean enableBitmaps@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "boolean disableValueMatchers@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestHelper.assertExpectedObjects(expectedRows,rows,\"failed\")@@@6@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "boolean disableValueMatchers@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "GroupByQuery query = new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(Granularities.ALL).setVirtualColumns(new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension,VSTRING_DIM,enableRowBasedMethods,enableColumnBasedMethods,enableBitmaps,disableValueMatchers)).addDimension(VSTRING_DIM).setAggregatorSpecs(new CountAggregatorFactory(COUNT)).setInterval(\"2000/2030\").addOrderByColumn(VSTRING_DIM).setDimFilter(new SelectorDimFilter(VSTRING_DIM,\"spot\",null)).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "List<Row> expectedRows = Collections.singletonList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\",COUNT,1674L,VSTRING_DIM,\"spot\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "boolean enableBitmaps@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Segment> segments@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "boolean enableColumnBasedMethods@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments,query).toList()@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "boolean enableRowBasedMethods@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4->6 [style = dotted, label="true"];
14->3 [style = bold, label=""];
4->5 [style = dotted, label="true"];
13->16 [style = dotted, label="true"];
14->3 [style = solid, label="expectedRows"];
22->19 [style = dotted, label="true"];
22->18 [style = dotted, label="true"];
22->23 [style = dotted, label="true"];
10->3 [style = solid, label="rows"];
13->12 [style = dotted, label="true"];
10->14 [style = bold, label=""];
4->1 [style = dotted, label="true"];
0->2 [style = bold, label=""];
4->8 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
2->3 [style = solid, label="rows"];
2->9 [style = bold, label=""];
9->3 [style = solid, label="expectedRows"];
22->24 [style = dotted, label="true"];
8->24 [style = dashed, label="0"];
21->3 [style = bold, label=""];
0->20 [style = dashed, label="0"];
2->10 [style = dashed, label="0"];
4->0 [style = bold, label=""];
20->2 [style = bold, label=""];
0->10 [style = bold, label=""];
9->14 [style = dashed, label="0"];
22->20 [style = bold, label=""];
13->8 [style = dotted, label="true"];
2->21 [style = bold, label=""];
9->21 [style = dashed, label="0"];
21->3 [style = solid, label="expectedRows"];
9->3 [style = bold, label=""];
13->11 [style = dotted, label="true"];
22->17 [style = dotted, label="true"];
13->15 [style = dotted, label="true"];
0->14 [style = solid, label="query"];
13->0 [style = bold, label=""];
}
