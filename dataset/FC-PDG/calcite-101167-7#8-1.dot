digraph {
1 [style = filled, label = "expr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\" + \" CAST('2000-01-01' AS TIMESTAMP))\").withOperatorTable(postgresTable).columnType(\"DATE NOT NULL\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testConvertTimezoneFunction['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles',\" + \" CAST('2000-01-01' AS TIMESTAMP))\").fails(\"No match found for function signature \" + \"CONVERT_TIMEZONE\(<CHARACTER>, <CHARACTER>, <TIMESTAMP>\)\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testConvertTimezoneFunction['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "wholeExpr(\"TO_DATE(2000, 'YYYY')\").withOperatorTable(postgresTable).withTypeCoercion(false).fails(\"Cannot apply 'TO_DATE' to arguments of type \" + \"'TO_DATE\(<INTEGER>, <CHAR\(4\)>\)'\. \" + \"Supported form\(s\): 'TO_DATE\(<STRING>, <STRING>\)'\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\").withOperatorTable(postgresTable).columnType(\"DATE NOT NULL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD')\").fails(\"No match found for function signature \" + \"TO_DATE\(<CHARACTER>, <CHARACTER>\)\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles')\").withOperatorTable(postgresTable).fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \" + \"Was expecting 3 arguments\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', \" + \"'UTC', CAST('2000-01-01' AS TIMESTAMP))\").withOperatorTable(postgresTable).fails(\"Invalid number of arguments to function 'CONVERT_TIMEZONE'. \" + \"Was expecting 3 arguments\")@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "wholeExpr(\"CONVERT_TIMEZONE('UTC', 'America/Los_Angeles', '2000-01-01')\").withOperatorTable(postgresTable).fails(\"Cannot apply 'CONVERT_TIMEZONE' to arguments of type \" + \"'CONVERT_TIMEZONE\(<CHAR\(3\)>, <CHAR\(19\)>, \" + \"<CHAR\(10\)>\)'\. Supported form\(s\): \" + \"'CONVERT_TIMEZONE\(<CHARACTER>, <CHARACTER>, <DATETIME>\)'\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expr(\"TO_DATE(2000, 'YYYY')\").withOperatorTable(postgresTable).columnType(\"DATE NOT NULL\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "wholeExpr(\"TO_DATE('2000-01-01')\").withOperatorTable(postgresTable).fails(\"Invalid number of arguments to function 'TO_DATE'. \" + \"Was expecting 2 arguments\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testToDateFunction['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "wholeExpr(\"TO_DATE('2000-01-01', 'YYYY-MM-DD', 'YYYY-MM-DD')\").withOperatorTable(postgresTable).fails(\"Invalid number of arguments to function 'TO_DATE'. \" + \"Was expecting 2 arguments\")@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final SqlOperatorTable postgresTable = SqlLibraryOperatorTableFactory.INSTANCE.getOperatorTable(SqlLibrary.STANDARD,SqlLibrary.POSTGRESQL)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
6->1 [style = bold, label=""];
1->4 [style = bold, label=""];
7->5 [style = bold, label=""];
5->12 [style = dashed, label="0"];
9->12 [style = bold, label=""];
4->14 [style = dashed, label="0"];
1->10 [style = dashed, label="0"];
5->6 [style = bold, label=""];
13->8 [style = bold, label=""];
12->6 [style = bold, label=""];
10->14 [style = bold, label=""];
14->11 [style = bold, label=""];
6->10 [style = bold, label=""];
11->13 [style = bold, label=""];
4->0 [style = bold, label=""];
2->5 [style = bold, label=""];
}
