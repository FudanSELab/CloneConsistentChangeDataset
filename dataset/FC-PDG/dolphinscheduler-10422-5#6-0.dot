digraph {
6 [style = filled, label = "Assert.assertEquals(Status.VERIFY_TENANT_CODE_ERROR,result.get(Constants.STATUS))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Mockito.when(tenantMapper.queryByTenantCode(tenantCode)).thenReturn(getList())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "result = tenantService.createTenant(loginUser,\"test\",\"test\",1,\"TenantServiceTest\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "result = tenantService.createTenant(loginUser,tenantCode,1,\"TenantServiceTest\")@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "result = tenantService.updateTenant(getLoginUser(),1,tenantCode,\"TenantServiceTest001\",1,\"desc\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testUpdateTenant['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "result = tenantService.createTenant(loginUser,\"test\",1,\"TenantServiceTest\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR,result.get(Constants.STATUS))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "logger.info(result.toString())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(Status.TENANT_NOT_EXIST,result.get(Constants.STATUS))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Map<String,Object> result = tenantService.createTenant(getLoginUser(),\"%!1111\",1,\"TenantServiceTest\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testCreateTenant['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "logger.info(result.toString())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "logger.info(result.toString())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "result = tenantService.createTenant(loginUser,tenantCode,tenantName,1,\"TenantServiceTest\")@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testCreateTenant['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "Map<String,Object> result = tenantService.updateTenant(getLoginUser(),912222,tenantCode,tenantName,1,\"desc\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,result.get(Constants.STATUS))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "User loginUser = getLoginUser()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<String,Object> result = tenantService.createTenant(getLoginUser(),\"%!1111\",tenantName,1,\"TenantServiceTest\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(Status.SUCCESS,result.get(Constants.STATUS))@@@10@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
14->3 [style = bold, label=""];
4->17 [style = bold, label=""];
5->9 [style = bold, label=""];
1->5 [style = solid, label="loginUser"];
4->6 [style = bold, label=""];
9->2 [style = bold, label=""];
11->1 [style = bold, label=""];
8->3 [style = bold, label=""];
0->15 [style = dashed, label="0"];
7->0 [style = bold, label=""];
1->14 [style = solid, label="loginUser"];
8->14 [style = dashed, label="0"];
12->1 [style = bold, label=""];
1->7 [style = bold, label=""];
17->19 [style = bold, label=""];
21->18 [style = bold, label=""];
1->13 [style = solid, label="loginUser"];
6->4 [style = dashed, label="0"];
20->4 [style = bold, label=""];
3->10 [style = bold, label=""];
6->5 [style = bold, label=""];
18->20 [style = bold, label=""];
5->17 [style = dashed, label="0"];
19->9 [style = bold, label=""];
0->4 [style = bold, label=""];
16->21 [style = bold, label=""];
6->13 [style = bold, label=""];
1->8 [style = solid, label="loginUser"];
2->14 [style = bold, label=""];
15->4 [style = bold, label=""];
0->18 [style = dashed, label="0"];
7->15 [style = bold, label=""];
13->9 [style = bold, label=""];
2->8 [style = bold, label=""];
}
