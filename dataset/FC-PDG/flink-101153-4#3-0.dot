digraph {
6 [style = filled, label = "pubSubSource.notifyCheckpointComplete(0)@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "TestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(receivedMessage(\"1\",pubSubMessage(\"A\")),receivedMessage(\"2\",pubSubMessage(\"B\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertThat(new ArrayList<>(results),equalTo(Arrays.asList(\"A\",\"B\")))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "{pubSubSource.cancel()thread.join()}@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "ConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>()@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "pubSubSource.notifyCheckpointComplete(0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "PubSubSource<String> pubSubSource = PubSubSource.newBuilder().withDeserializationSchema(new SimpleStringSchema(){@Override public void deserialize(byte(( message,Collector<String> out){String(( records = super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1bfafd4message.split(\",\")for (String record : records){out.collect(record)}}@Override public boolean isEndOfStream(String nextElement){return nextElement.equals(\"C\")}}).withProjectName(\"fakeProject\").withSubscriptionName(\"fakeSubscription\").withPubSubSubscriberFactory(null).withCredentials(mock()).build()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{pubSubSource.cancel()thread.join()}@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "pubSubSource.snapshotState(0,0)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testProcessMessage['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(new ArrayList<>(results),equalTo(Arrays.asList(\"A\",\"B\")))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Thread thread = createSourceThread(pubSubSource,lock,results)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "pubSubSource.snapshotState(0,0)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "PubSubSource<String> pubSubSource = PubSubSource.newBuilder().withDeserializationSchema(new SimpleStringSchema()).withProjectName(\"fakeProject\").withSubscriptionName(\"fakeSubscription\").withPubSubSubscriberFactory(null).withCredentials(mock()).build()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(receivedMessage(\"1\",pubSubMessage(\"A\")),receivedMessage(\"2\",pubSubMessage(\"B,C,D\")),receivedMessage(\"3\",pubSubMessage(\"E\")))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Thread thread = createSourceThread(pubSubSource,lock,results)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "awaitRecordCount(results,2)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testProducingMultipleResults['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(testPubSubSubscriber.getAcknowledgedIds(),equalTo(Arrays.asList(\"1\",\"2\")))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Object lock = new Object()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "thread.start()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertThat(testPubSubSubscriber.getAcknowledgedIds(),equalTo(Arrays.asList(\"1\",\"2\")))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testProducingMultipleResults['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "thread.start()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "awaitRecordCount(results,2)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->1 [style = solid, label="lock"];
17->24 [style = solid, label="results"];
21->3 [style = bold, label=""];
18->25 [style = solid, label="lock"];
11->20 [style = dashed, label="0"];
10->6 [style = bold, label=""];
2->1 [style = solid, label="results"];
24->23 [style = bold, label=""];
15->18 [style = bold, label=""];
3->2 [style = bold, label=""];
7->10 [style = bold, label=""];
11->0 [style = bold, label=""];
4->5 [style = bold, label=""];
20->15 [style = bold, label=""];
25->14 [style = bold, label=""];
23->16 [style = bold, label=""];
0->3 [style = bold, label=""];
14->19 [style = bold, label=""];
19->24 [style = bold, label=""];
22->20 [style = bold, label=""];
17->19 [style = solid, label="results"];
15->25 [style = solid, label="pubSubSource"];
0->1 [style = solid, label="pubSubSource"];
12->9 [style = bold, label=""];
8->11 [style = bold, label=""];
13->11 [style = bold, label=""];
16->21 [style = bold, label=""];
2->7 [style = solid, label="results"];
2->1 [style = bold, label=""];
17->25 [style = solid, label="results"];
2->5 [style = solid, label="results"];
6->12 [style = bold, label=""];
1->4 [style = bold, label=""];
18->17 [style = bold, label=""];
0->15 [style = dashed, label="0"];
5->7 [style = bold, label=""];
17->25 [style = bold, label=""];
}
