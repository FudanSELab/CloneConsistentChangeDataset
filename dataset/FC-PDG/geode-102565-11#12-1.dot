digraph {
36 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "SocketChannel mockChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ByteBufferVendor inputSharingImpl = (ByteBufferVendor)inputSharing@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final int individualRead = 150@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final ByteBufferVendor inputSharingImpl = (ByteBufferVendor)inputSharing@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "nioSslEngine.getInputBufferVendorForTestingOnly().setBufferForTestingOnly(unwrappedBuffer)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30->36 [style = solid, label="preexistingBytes"];
22->26 [style = bold, label=""];
28->29 [style = bold, label=""];
19->15 [style = solid, label="individualRead"];
7->32 [style = bold, label=""];
1->15 [style = solid, label="preexistingBytes"];
16->9 [style = bold, label=""];
11->16 [style = solid, label="testSSLEngine"];
4->35 [style = solid, label="testSSLEngine"];
10->28 [style = bold, label=""];
1->13 [style = solid, label="preexistingBytes"];
29->30 [style = bold, label=""];
29->30 [style = solid, label="initialUnwrappedBufferSize"];
10->19 [style = bold, label=""];
11->4 [style = bold, label=""];
28->36 [style = solid, label="individualRead"];
34->7 [style = bold, label=""];
0->11 [style = bold, label=""];
31->4 [style = bold, label=""];
14->34 [style = bold, label=""];
13->15 [style = solid, label="initialFreeSpace"];
20->14 [style = bold, label=""];
7->0 [style = bold, label=""];
3->15 [style = bold, label=""];
21->24 [style = bold, label=""];
16->23 [style = bold, label=""];
33->10 [style = bold, label=""];
1->18 [style = solid, label="preexistingBytes"];
13->38 [style = dashed, label="0"];
15->36 [style = dashed, label="0"];
5->17 [style = bold, label=""];
24->22 [style = bold, label=""];
15->18 [style = bold, label=""];
38->15 [style = bold, label=""];
15->36 [style = bold, label=""];
29->14 [style = solid, label="initialUnwrappedBufferSize"];
22->27 [style = solid, label="testSSLEngine"];
19->24 [style = solid, label="individualRead"];
19->1 [style = bold, label=""];
26->27 [style = bold, label=""];
27->4 [style = bold, label=""];
12->10 [style = bold, label=""];
1->14 [style = solid, label="preexistingBytes"];
17->18 [style = solid, label="initialUnwrappedBufferSize"];
19->0 [style = solid, label="individualRead"];
28->31 [style = solid, label="individualRead"];
13->3 [style = bold, label=""];
4->37 [style = bold, label=""];
30->5 [style = bold, label=""];
17->14 [style = bold, label=""];
1->9 [style = solid, label="preexistingBytes"];
14->32 [style = solid, label="unwrappedBuffer"];
19->28 [style = dashed, label="0"];
20->7 [style = solid, label="unwrappedBuffer"];
1->8 [style = solid, label="preexistingBytes"];
19->9 [style = solid, label="individualRead"];
17->20 [style = bold, label=""];
25->10 [style = bold, label=""];
1->2 [style = bold, label=""];
18->8 [style = bold, label=""];
13->15 [style = bold, label=""];
13->38 [style = bold, label=""];
37->35 [style = bold, label=""];
17->13 [style = solid, label="initialUnwrappedBufferSize"];
30->34 [style = solid, label="preexistingBytes"];
6->7 [style = bold, label=""];
35->13 [style = bold, label=""];
17->20 [style = solid, label="initialUnwrappedBufferSize"];
4->37 [style = dashed, label="0"];
23->9 [style = bold, label=""];
20->21 [style = solid, label="unwrappedBuffer"];
14->6 [style = bold, label=""];
14->21 [style = bold, label=""];
32->31 [style = bold, label=""];
4->16 [style = bold, label=""];
18->8 [style = solid, label="initialFreeSpace"];
2->5 [style = bold, label=""];
9->13 [style = bold, label=""];
}
