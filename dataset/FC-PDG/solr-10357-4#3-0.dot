digraph {
14 [style = filled, label = "return metric@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Class<? extends Expressible> clazz = functionNames.get(function)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "StreamExpression expression@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String function = expression.getFunctionName()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid metric expression %s - function '%s' is unknown (not mapped to a valid Metric)\",expression,expression.getFunctionName()))@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "constructOperation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Class clazz = functionNames.get(function)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return (StreamOperation)createInstance(functionNames.get(function),new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e98512,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e98517)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "StreamExpression expression@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = ".isAssignableFrom(clazz) && .isAssignableFrom(clazz)@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "throw new IOException(String.format(Locale.ROOT,\"Invalid operation expression %s - function '%s' is unknown (not mapped to a valid StreamOperation)\",expression,expression.getFunctionName()))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "functionNames.containsKey(function)@@@4@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "constructMetric['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Metric metric = (Metric)createInstance(functionNames.get(function),new Class((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e9855f,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@e98564)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "constructOperation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
5->8 [style = dotted, label="true"];
2->11 [style = solid, label="clazz"];
5->11 [style = dotted, label="true"];
5->8 [style = bold, label=""];
4->13 [style = solid, label="function"];
6->4 [style = bold, label=""];
9->4 [style = bold, label=""];
10->12 [style = dotted, label="true"];
4->8 [style = solid, label="function"];
2->7 [style = bold, label=""];
2->11 [style = bold, label=""];
4->5 [style = bold, label=""];
2->8 [style = dashed, label="0"];
13->14 [style = solid, label="metric"];
9->1 [style = dotted, label="true"];
6->1 [style = dotted, label="true"];
7->11 [style = dashed, label="0"];
12->13 [style = solid, label="expression"];
12->15 [style = solid, label="expression"];
0->3 [style = bold, label=""];
11->15 [style = bold, label=""];
5->7 [style = dotted, label="true"];
1->3 [style = solid, label="expression"];
5->15 [style = bold, label=""];
0->13 [style = dashed, label="0"];
7->3 [style = bold, label=""];
8->7 [style = solid, label="clazz"];
1->0 [style = solid, label="expression"];
4->5 [style = solid, label="function"];
11->14 [style = dotted, label="true"];
10->4 [style = bold, label=""];
7->0 [style = bold, label=""];
11->13 [style = bold, label=""];
3->15 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
8->7 [style = bold, label=""];
7->0 [style = dotted, label="true"];
2->7 [style = solid, label="clazz"];
5->3 [style = bold, label=""];
13->14 [style = bold, label=""];
11->13 [style = dotted, label="true"];
14->15 [style = bold, label=""];
4->0 [style = solid, label="function"];
5->2 [style = dotted, label="true"];
4->2 [style = solid, label="function"];
}
