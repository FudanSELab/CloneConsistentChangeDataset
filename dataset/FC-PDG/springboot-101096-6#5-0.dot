digraph {
8 [style = filled, label = "testLoggingPath['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "PropertyResolver resolver@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(\"logpath/spring.log\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "PropertyResolver resolver@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(logFile.toString()).isEqualTo(\"log.file\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Properties properties = new Properties()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "testLoggingPath['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(\"log.file\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo(\"logpath\")@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testLoggingFile['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "LogFile logFile = LogFile.get(resolver)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(\"logpath\" + File.separatorChar + \"spring.log\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)).isNull()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "logFile.applyTo(properties)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(logFile.toString()).isEqualTo(\"logpath\" + File.separatorChar + \"spring.log\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->9 [style = bold, label=""];
5->14 [style = dashed, label="0"];
7->1 [style = bold, label=""];
0->2 [style = bold, label=""];
1->3 [style = bold, label=""];
11->7 [style = solid, label="resolver"];
8->4 [style = dotted, label="true"];
12->7 [style = bold, label=""];
0->10 [style = dashed, label="0"];
3->0 [style = bold, label=""];
8->7 [style = bold, label=""];
12->11 [style = dotted, label="true"];
3->10 [style = bold, label=""];
6->4 [style = dotted, label="true"];
10->13 [style = bold, label=""];
2->9 [style = dashed, label="0"];
2->13 [style = dashed, label="0"];
1->3 [style = solid, label="properties"];
9->5 [style = bold, label=""];
4->7 [style = solid, label="resolver"];
4->11 [style = dashed, label="0"];
6->7 [style = bold, label=""];
13->14 [style = bold, label=""];
2->5 [style = bold, label=""];
}
