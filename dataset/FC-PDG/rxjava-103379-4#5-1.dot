digraph {
22 [style = filled, label = "Assert.assertEquals(Arrays.asList(5),values)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(buf.hasCompleted())@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(Arrays.asList(3,4),values)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "buf.next(2)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2,2000,TimeUnit.MILLISECONDS,test,false)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "buf.collect(values)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "buf.next(4)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "List<Integer> values = new ArrayList<Integer>()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertFalse(buf.hasCompleted())@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "buf.complete()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "test.advanceTimeBy(2,TimeUnit.SECONDS)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "buf.next(3)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertFalse(buf.hasError())@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "values.clear()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertTrue(values.isEmpty())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "timedAndSizedTruncation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "buf.collect(values)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "buf.next(1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "values.clear()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(Arrays.asList(2),values)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(1,buf.size)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "buf.collect(values)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "timedAndSizedTruncation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "test.advanceTimeBy(1,TimeUnit.SECONDS)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "values.clear()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<>(2,2000,TimeUnit.MILLISECONDS,test,false)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "buf.collect(values)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "test.advanceTimeBy(2,TimeUnit.SECONDS)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "timedAndSizedTruncation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "List<Integer> values = new ArrayList<>()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "buf.next(5)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "test.advanceTimeBy(1,TimeUnit.SECONDS)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "TestScheduler test = new TestScheduler()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25->0 [style = bold, label=""];
29->7 [style = solid, label="values"];
9->22 [style = bold, label=""];
14->16 [style = bold, label=""];
4->3 [style = bold, label=""];
28->29 [style = bold, label=""];
26->22 [style = solid, label="values"];
23->31 [style = bold, label=""];
10->20 [style = bold, label=""];
20->17 [style = bold, label=""];
3->28 [style = solid, label="test"];
22->2 [style = bold, label=""];
3->12 [style = solid, label="test"];
16->10 [style = bold, label=""];
29->25 [style = solid, label="values"];
26->9 [style = solid, label="values"];
26->13 [style = solid, label="values"];
27->3 [style = bold, label=""];
29->22 [style = solid, label="values"];
29->9 [style = solid, label="values"];
12->26 [style = bold, label=""];
3->12 [style = bold, label=""];
11->24 [style = bold, label=""];
17->23 [style = bold, label=""];
26->11 [style = bold, label=""];
21->18 [style = bold, label=""];
22->30 [style = bold, label=""];
29->13 [style = solid, label="values"];
5->19 [style = bold, label=""];
26->7 [style = solid, label="values"];
3->28 [style = bold, label=""];
1->6 [style = bold, label=""];
19->13 [style = bold, label=""];
12->28 [style = dashed, label="0"];
2->14 [style = bold, label=""];
29->15 [style = solid, label="values"];
26->15 [style = solid, label="values"];
26->10 [style = solid, label="values"];
18->9 [style = bold, label=""];
8->21 [style = bold, label=""];
29->10 [style = solid, label="values"];
7->25 [style = bold, label=""];
13->15 [style = bold, label=""];
24->1 [style = bold, label=""];
26->25 [style = solid, label="values"];
6->7 [style = bold, label=""];
30->2 [style = bold, label=""];
32->3 [style = bold, label=""];
26->29 [style = dashed, label="0"];
15->8 [style = bold, label=""];
29->11 [style = bold, label=""];
0->5 [style = bold, label=""];
}
