digraph {
8 [style = filled, label = "when(arm._getOwner().isInitialized()).thenReturn(false)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "when(arm._getOwner().isInitialized()).thenReturn(true)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "invalidateOfNonExistentRegionThrowsEntryNotFound['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThatThrownBy(null).isInstanceOf()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "verify(arm._getOwner(),never()).basicInvalidatePart2(any(),any(),anyBoolean(),anyBoolean())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestableAbstractRegionMap arm = new TestableAbstractRegionMap()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(arm.invalidate(event,true,false,false))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "invalidateOfAlreadyInvalidEntryReturnsFalse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "assertThatThrownBy(null).isInstanceOf()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "invalidateOfAlreadyInvalidEntryReturnsFalse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EntryEventImpl event = createEventForInvalidate(arm._getOwner())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(arm._getOwner(),never()).invokeInvalidateCallbacks(any(),any(),anyBoolean())@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2->6 [style = bold, label=""];
4->5 [style = bold, label=""];
6->11 [style = bold, label=""];
1->8 [style = bold, label=""];
1->4 [style = solid, label="event"];
10->7 [style = bold, label=""];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
7->1 [style = bold, label=""];
4->11 [style = dashed, label="0"];
6->4 [style = bold, label=""];
3->7 [style = bold, label=""];
1->2 [style = bold, label=""];
1->6 [style = bold, label=""];
11->5 [style = bold, label=""];
9->7 [style = bold, label=""];
}
