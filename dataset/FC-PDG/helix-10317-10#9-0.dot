digraph {
11 [style = filled, label = "when(_testReplica.isReplicaTopState()).thenReturn(false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testGetAssignmentScoreWhenReplicaNotTopState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "double score = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(score,0.5f)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testWhenInstanceIsFull['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(score,0.5)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "testWhenInstanceIsFull['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "when(_clusterContext.getEstimatedMaxPartitionCount()).thenReturn(10)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "float score = _constraint.getAssignmentScore(_testNode,_testReplica,_clusterContext)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "verifyZeroInteractions(_testNode)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "when(_testNode.getAssignedReplicaCount()).thenReturn(10)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "verifyZeroInteractions(_clusterContext)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "float normalizedScore = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "float score = _constraint.getAssignmentNormalizedScore(_testNode,_testReplica,_clusterContext)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(normalizedScore,0.5f)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->4 [style = bold, label=""];
9->0 [style = bold, label=""];
3->1 [style = bold, label=""];
0->5 [style = dashed, label="0"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
9->12 [style = solid, label="normalizedScore"];
4->6 [style = dashed, label="0"];
7->3 [style = bold, label=""];
4->0 [style = bold, label=""];
4->9 [style = dashed, label="0"];
6->5 [style = bold, label=""];
12->10 [style = bold, label=""];
1->6 [style = bold, label=""];
10->13 [style = bold, label=""];
8->9 [style = bold, label=""];
11->8 [style = bold, label=""];
1->8 [style = dashed, label="0"];
4->0 [style = solid, label="score"];
14->11 [style = bold, label=""];
3->11 [style = dashed, label="0"];
6->5 [style = solid, label="score"];
8->0 [style = solid, label="score"];
}
