digraph {
3 [style = filled, label = "RoutingAllocation allocation = getRestoreRoutingAllocation(yesAllocationDeciders(),\"allocId\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testShardLockObtainFailedExceptionPreferOtherValidCopies['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(true))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "RoutingAllocation allocation = getRestoreRoutingAllocation(yesAllocationDeciders(),randomLong(),\"allocId\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertClusterHealthStatus(allocation,ClusterHealthStatus.YELLOW)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(true))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(allocation.routingNodesChanged(),equalTo(true))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final RoutingAllocation allocation = routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(),CLUSTER_RECOVERED,allocId1,allocId2)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(true))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "testAllocator.addData(node2,allocId2,randomBoolean(),null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "String allocId1 = randomAlphaOfLength(10)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "allocateAllUnassigned(allocation)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testAllocator.addData(node1,allocId1,randomBoolean(),new ShardLockObtainFailedException(shardId,\"test\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).allocationId().getId(),equalTo(allocId2))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "allocateAllUnassigned(allocation)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "String allocId2 = randomAlphaOfLength(10)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "testAllocator.addData(node1,\"some allocId\",randomBoolean())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo(node2.getId()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->0 [style = solid, label="allocation"];
10->14 [style = solid, label="allocId2"];
11->13 [style = solid, label="allocId1"];
12->15 [style = bold, label=""];
13->2 [style = solid, label="allocation"];
3->4 [style = solid, label="allocation"];
19->17 [style = bold, label=""];
16->19 [style = bold, label=""];
2->4 [style = bold, label=""];
7->3 [style = bold, label=""];
9->0 [style = solid, label="allocation"];
10->12 [style = solid, label="allocId2"];
6->2 [style = bold, label=""];
3->5 [style = bold, label=""];
17->12 [style = bold, label=""];
1->6 [style = bold, label=""];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
3->9 [style = dashed, label="0"];
11->10 [style = bold, label=""];
11->18 [style = solid, label="allocId1"];
0->1 [style = bold, label=""];
8->9 [style = bold, label=""];
9->5 [style = bold, label=""];
14->2 [style = bold, label=""];
10->13 [style = solid, label="allocId2"];
18->14 [style = bold, label=""];
9->4 [style = solid, label="allocation"];
4->16 [style = bold, label=""];
13->18 [style = bold, label=""];
20->11 [style = bold, label=""];
13->15 [style = solid, label="allocation"];
}
