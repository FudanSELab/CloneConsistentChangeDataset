digraph {
2 [style = filled, label = "testImportEntries1['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(3,entries.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "testImportEntries2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(Optional.of(\"28\"),entry.getField(StandardField.VOLUME))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Path file = Paths.get(.getResource(\"IsiImporterTest2.isi\").toURI())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"misc\",entry.getType())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertEquals(Optional.of(\"28\"),entry.getField(\"volume\"))@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(Optional.of(\"Optical Materials\"),entry.getField(StandardField.JOURNAL))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertEquals(Optional.of(\"5\"),entry.getField(\"number\"))@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(Optional.of(\"James Brown and James Marc Brown and Brown, J. M. and Brown, J. and Brown, J. M. and Brown, J.\"),entry.getField(StandardField.AUTHOR))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(Optional.of(\"Optical properties of MgO doped LiNbO$_3$ single crystals\"),entry.getField(\"title\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"article\",entry.getType())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testImportEntries1['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(Optional.of(\"James Brown and James Marc Brown and Brown, J. M. and Brown, J. and Brown, J. M. and Brown, J.\"),entry.getField(\"author\"))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "Path file = Paths.get(.getResource(\"IsiImporterTest1.isi\").toURI())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Optional.of(\"Optical Materials\"),entry.getField(\"journal\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(1,entries.size())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BibEntry entry = entries.get(0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(Optional.of(\"467--72\"),entry.getField(\"pages\"))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "assertEquals(Optional.of(\"Optical properties of MgO doped LiNbO$_3$ single crystals\"),entry.getField(StandardField.TITLE))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(StandardEntryType.Article,entry.getType())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertEquals(Optional.of(\"467--72\"),entry.getField(StandardField.PAGES))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertEquals(Optional.of(\"467-72\"),entry.getField(\"pages\"))@@@13@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(Optional.of(\"2006\"),entry.getField(StandardField.YEAR))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "List<BibEntry> entries = importer.importDatabase(file,StandardCharsets.UTF_8).getDatabase().getEntries()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(Optional.of(\"5\"),entry.getField(StandardField.NUMBER))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(Optional.of(\"2006\"),entry.getField(\"year\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
4->18 [style = dashed, label="0"];
6->3 [style = bold, label=""];
5->10 [style = bold, label=""];
15->13 [style = bold, label=""];
9->16 [style = dashed, label="0"];
3->25 [style = dashed, label="0"];
7->14 [style = dashed, label="0"];
11->4 [style = bold, label=""];
1->19 [style = dashed, label="0"];
12->11 [style = bold, label=""];
1->9 [style = dashed, label="0"];
3->15 [style = bold, label=""];
3->12 [style = bold, label=""];
12->24 [style = bold, label=""];
23->8 [style = bold, label=""];
16->19 [style = bold, label=""];
8->21 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
10->6 [style = bold, label=""];
26->22 [style = bold, label=""];
20->5 [style = bold, label=""];
0->7 [style = bold, label=""];
8->0 [style = bold, label=""];
7->9 [style = bold, label=""];
11->13 [style = dashed, label="0"];
25->12 [style = bold, label=""];
17->14 [style = bold, label=""];
22->10 [style = bold, label=""];
12->15 [style = dashed, label="0"];
4->8 [style = bold, label=""];
18->21 [style = bold, label=""];
9->1 [style = bold, label=""];
21->17 [style = bold, label=""];
13->18 [style = bold, label=""];
6->25 [style = bold, label=""];
2->5 [style = bold, label=""];
24->23 [style = bold, label=""];
5->22 [style = dashed, label="0"];
}
