digraph {
9 [style = filled, label = "assertEquals(0,queueThatSkipsDeserializeErrors.size())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shouldThrowStreamsExceptionWhenValueDeserializationFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldThrowStreamsExceptionWhenValueDeserializationFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> records = Collections.singletonList(new ConsumerRecord<>(\"topic\",1,1,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,value))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(exception.getCause(),instanceOf())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final byte(( value = Serdes.Long().serializer().serialize(\"foo\",1L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "shouldNotThrowStreamsExceptionWhenValueDeserializationFailsWithSkipHandler['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "queueThatSkipsDeserializeErrors.addRawRecords(records)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final StreamsException exception = assertThrows(,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> records = Collections.singletonList(new ConsumerRecord<>(\"topic\",1,1,0L,TimestampType.CREATE_TIME,0,0,recordKey,value,new RecordHeaders(),Optional.empty()))@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->3 [style = bold, label=""];
6->3 [style = bold, label=""];
2->5 [style = dashed, label="0"];
4->1 [style = bold, label=""];
3->5 [style = bold, label=""];
3->5 [style = solid, label="value"];
3->2 [style = bold, label=""];
2->4 [style = bold, label=""];
3->2 [style = solid, label="value"];
2->8 [style = bold, label=""];
7->3 [style = bold, label=""];
5->4 [style = bold, label=""];
2->8 [style = solid, label="records"];
4->8 [style = dashed, label="0"];
8->9 [style = bold, label=""];
}
