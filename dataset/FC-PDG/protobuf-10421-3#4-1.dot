digraph {
16 [style = filled, label = "List<RawMessageSet.Item> items = raw.getItemList()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "int typeId1 = 1545008@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "extensionRegistry.add(TestMessageSetExtension1.messageSetExtension)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "CodedOutputStream output = out.getCodedOutput()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "ByteString data = out.build()@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "int i = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "TestMessageSet messageSet = TestMessageSet.newBuilder().mergeFrom(data,extensionRegistry).build()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "output.writeTag(1,WireFormat.WIRETYPE_START_GROUP)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testMergeMessageSetExtensionWithFlag['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "testMergeMessageSetExtensionWithFlag['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "output.writeBytes(3,item.getMessage())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "i++@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "output.writeBytes(3,item.getMessage())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "i < items.size()@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "RawMessageSet.Item item = items.get(i)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "output.writeInt32(2,item.getTypeId())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEquals(123,messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI())@@@21@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "output.writeInt32(2,item.getTypeId())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "TestMessageSet messageSet = TestMessageSet.newBuilder().mergeFrom(data,extensionRegistry).build()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testMergeMessageSetExtensionWithFlag['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(messageSet.getExtension(TestMessageSetExtension1.messageSetExtension).getI()).isEqualTo(123)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "RawMessageSet raw = RawMessageSet.newBuilder().addItem(RawMessageSet.Item.newBuilder().setTypeId(typeId1).setMessage(TestMessageSetExtension1.newBuilder().setI(123).build().toByteString()).build()).build()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ExtensionRegistryLite.setEagerlyParseMessageSets(eagerParsing)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "output.writeTag(1,WireFormat.WIRETYPE_START_GROUP)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "ExtensionRegistryLite extensionRegistry = ExtensionRegistryLite.newInstance()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "ByteString.CodedBuilder out = ByteString.newCodedBuilder(raw.getSerializedSize())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "output.writeTag(1,WireFormat.WIRETYPE_END_GROUP)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "RawMessageSet raw = RawMessageSet.newBuilder().addItem(RawMessageSet.Item.newBuilder().setTypeId(TYPE_ID_1).setMessage(TestMessageSetExtension1.newBuilder().setI(123).build().toByteString()).build()).build()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "boolean eagerParsing@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16->0 [style = bold, label=""];
3->17 [style = dashed, label="0"];
28->15 [style = bold, label=""];
23->8 [style = dotted, label="true"];
6->22 [style = bold, label=""];
15->21 [style = bold, label=""];
3->25 [style = bold, label=""];
24->29 [style = dotted, label="true"];
0->12 [style = bold, label=""];
9->4 [style = bold, label=""];
1->19 [style = dashed, label="0"];
4->19 [style = bold, label=""];
23->4 [style = bold, label=""];
0->27 [style = solid, label="i"];
18->8 [style = dotted, label="true"];
24->29 [style = bold, label=""];
24->27 [style = dotted, label="true"];
2->10 [style = bold, label=""];
19->6 [style = bold, label=""];
24->28 [style = dotted, label="true"];
10->7 [style = bold, label=""];
15->5 [style = bold, label=""];
6->2 [style = bold, label=""];
29->28 [style = bold, label=""];
0->29 [style = solid, label="i"];
9->8 [style = dotted, label="true"];
21->5 [style = bold, label=""];
1->6 [style = bold, label=""];
18->4 [style = bold, label=""];
22->20 [style = bold, label=""];
11->3 [style = bold, label=""];
0->24 [style = bold, label=""];
7->16 [style = bold, label=""];
25->26 [style = bold, label=""];
12->14 [style = bold, label=""];
0->24 [style = solid, label="i"];
24->15 [style = dotted, label="true"];
11->17 [style = bold, label=""];
27->24 [style = solid, label="i"];
27->24 [style = bold, label=""];
4->1 [style = bold, label=""];
15->12 [style = bold, label=""];
13->15 [style = bold, label=""];
5->11 [style = bold, label=""];
14->13 [style = bold, label=""];
5->27 [style = bold, label=""];
20->7 [style = bold, label=""];
24->21 [style = dotted, label="true"];
2->22 [style = dashed, label="0"];
8->4 [style = solid, label="eagerParsing"];
24->3 [style = bold, label=""];
24->5 [style = dotted, label="true"];
27->29 [style = solid, label="i"];
}
