digraph {
9 [style = filled, label = "Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(2,chunks.get(2).getChunkNumber())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(chunks.get(0).isEnd())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)))@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertFalse(chunks.get(2).isStart())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final List<PartitionChunk<String>> chunks = Lists.transform(specs,new Function<ShardSpec,PartitionChunk<String>>(){@Override public PartitionChunk<String> apply(ShardSpec shardSpec){return shardSpec.createChunk(\"rofl\")}})@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final List<ShardSpec> specs = ImmutableList.of(new NumberedShardSpec(0,3),new NumberedShardSpec(1,3),new NumberedShardSpec(2,3))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertFalse(chunks.get(1).isEnd())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final List<ShardSpec> specs = ImmutableList.of(new HashBasedNumberedShardSpec(0,3,0,3,null,objectMapper),new HashBasedNumberedShardSpec(1,3,1,3,null,objectMapper),new HashBasedNumberedShardSpec(2,3,2,3,null,objectMapper))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(chunks.get(2).isEnd())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(chunks.get(1).isStart())@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "testPartitionChunks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testPartitionChunks['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)))@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)))@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(1,chunks.get(1).getChunkNumber())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(0,chunks.get(0).getChunkNumber())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "final List<ShardSpec> specs = ImmutableList.of(new HashBasedNumberedShardSpec(0,3,0,3,null,null,objectMapper),new HashBasedNumberedShardSpec(1,3,1,3,null,null,objectMapper),new HashBasedNumberedShardSpec(2,3,2,3,null,null,objectMapper))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertTrue(chunks.get(0).isStart())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testPartitionChunks['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7->13 [style = bold, label=""];
0->9 [style = bold, label=""];
20->17 [style = bold, label=""];
16->8 [style = bold, label=""];
4->6 [style = bold, label=""];
19->20 [style = bold, label=""];
2->3 [style = bold, label=""];
18->15 [style = bold, label=""];
23->4 [style = bold, label=""];
22->4 [style = solid, label="specs"];
13->1 [style = bold, label=""];
22->4 [style = bold, label=""];
8->22 [style = dashed, label="0"];
3->5 [style = bold, label=""];
21->22 [style = bold, label=""];
15->0 [style = bold, label=""];
14->12 [style = bold, label=""];
6->10 [style = bold, label=""];
12->18 [style = bold, label=""];
9->19 [style = bold, label=""];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
1->14 [style = bold, label=""];
8->4 [style = bold, label=""];
23->4 [style = solid, label="specs"];
8->4 [style = solid, label="specs"];
11->7 [style = bold, label=""];
8->23 [style = dashed, label="0"];
24->23 [style = bold, label=""];
}
