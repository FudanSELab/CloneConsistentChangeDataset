digraph {
10 [style = filled, label = "final ArrayList<String> groupIdList = new ArrayList<>()@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return new DescribeConsumerGroupsResult(resultFutures)@@@66@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "Collection<String> groupIds@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "describeConsumerGroups['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "runnable.call(new Call(\"findCoordinator\",deadline,new LeastLoadedNodeProvider()){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new FindCoordinatorRequest.Builder(FindCoordinatorRequest.CoordinatorType.GROUP,groupId)}@Override void handleResponse(AbstractResponse abstractResponse){final FindCoordinatorResponse response = (FindCoordinatorResponse)abstractResponsefinal long nowDeleteConsumerGroups = time.milliseconds()final int nodeId = response.node().id()runnable.call(new Call(\"deleteConsumerGroups\",deadline,new ConstantNodeIdProvider(nodeId)){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new DeleteGroupsRequest.Builder(Collections.singleton(groupId))}@Override void handleResponse(AbstractResponse abstractResponse){final DeleteGroupsResponse response = (DeleteGroupsResponse)abstractResponsefor (Map.Entry<String,KafkaFutureImpl<Void>> entry : deleteConsumerGroupFutures.entrySet()){final String groupId = entry.getKey()final KafkaFutureImpl<Void> future = entry.getValue()final Errors groupError = response.get(groupId)if (groupError != Errors.NONE) {future.completeExceptionally(groupError.exception())continue}future.complete(null)}}@Override void handleFailure(Throwable throwable){completeAllExceptionally(deleteConsumerGroupFutures.values(),throwable)}},nowDeleteConsumerGroups)deleteConsumerGroupsFuture.complete(new HashMap<String,KafkaFuture<Void>>(deleteConsumerGroupFutures))}@Override void handleFailure(Throwable throwable){deleteConsumerGroupsFuture.completeExceptionally(throwable)}},nowFindCoordinator)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "KafkaFutureImpl<ConsumerGroupDescription> future = new KafkaFutureImpl<>()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "return new DeleteConsumerGroupsResult(deleteConsumerGroupsFuture)@@@53@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "groupIdList.add(groupId)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "futures.put(groupId,new KafkaFutureImpl<ConsumerGroupDescription>())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "entry.getValue().isCompletedExceptionally()@@@15@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "final DescribeConsumerGroupsOptions options@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Collection<String> groupIds@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "final long deadline = calcDeadlineMs(startFindCoordinatorMs,options.timeoutMs())@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "runnable.call(new Call(\"findCoordinator\",deadline,new LeastLoadedNodeProvider()){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new FindCoordinatorRequest.Builder(FindCoordinatorRequest.CoordinatorType.GROUP,groupId)}@Override void handleResponse(AbstractResponse abstractResponse){final FindCoordinatorResponse response = (FindCoordinatorResponse)abstractResponsefinal long nowDescribeConsumerGroups = time.milliseconds()final int nodeId = response.node().id()runnable.call(new Call(\"describeConsumerGroups\",deadline,new ConstantNodeIdProvider(nodeId)){@Override AbstractRequest.Builder createRequest(int timeoutMs){return new DescribeGroupsRequest.Builder(Collections.singletonList(groupId))}@Override void handleResponse(AbstractResponse abstractResponse){final DescribeGroupsResponse response = (DescribeGroupsResponse)abstractResponseKafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)final DescribeGroupsResponse.GroupMetadata groupMetadata = response.groups().get(groupId)final Errors groupError = groupMetadata.error()if (groupError != Errors.NONE) {future.completeExceptionally(groupError.exception())}{final String protocolType = groupMetadata.protocolType()if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {final List<DescribeGroupsResponse.GroupMember> members = groupMetadata.members()final List<MemberDescription> consumers = new ArrayList<>(members.size())for (DescribeGroupsResponse.GroupMember groupMember : members){final PartitionAssignor.Assignment assignment = ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(Utils.readBytes(groupMember.memberAssignment())))final MemberDescription memberDescription = new MemberDescription(groupMember.memberId(),groupMember.clientId(),groupMember.clientHost(),new MemberAssignment(assignment.partitions()))consumers.add(memberDescription)}final String protocol = groupMetadata.protocol()final ConsumerGroupDescription consumerGroupDescription = new ConsumerGroupDescription(groupId,protocolType.isEmpty(),consumers,protocol)future.complete(consumerGroupDescription)}}}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)future.completeExceptionally(throwable)}},nowDescribeConsumerGroups)}@Override void handleFailure(Throwable throwable){KafkaFutureImpl<ConsumerGroupDescription> future = futures.get(groupId)future.completeExceptionally(throwable)}},startFindCoordinatorMs)@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
33 [style = filled, label = "!deleteConsumerGroupFutures.containsKey(groupId)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final Map<String,KafkaFutureImpl<ConsumerGroupDescription>> consumerGroupFutures = new HashMap<>(groupIds.size())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "final KafkaFutureImpl<Map<String,KafkaFuture<Void>>> deleteConsumerGroupsFuture = new KafkaFutureImpl<>()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "consumerGroupFutures.put(groupId,new KafkaFutureImpl<ConsumerGroupDescription>())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "!futures.containsKey(groupId)@@@10@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "final String groupId = entry.getKey()@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "final long startFindCoordinatorMs = time.milliseconds()@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "futures.put(groupId,future)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "deleteConsumerGroups['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final KafkaFutureImpl<Map<String,KafkaFuture<ConsumerGroupDescription>>> resultFutures = new KafkaFutureImpl<>()@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "!consumerGroupFutures.containsKey(groupId)@@@7@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "describeConsumerGroups['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "final Map<String,KafkaFutureImpl<Void>> deleteConsumerGroupFutures = new HashMap<>(groupIds.size())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "groupIdIsUnrepresentable(groupId)@@@5@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final long deadline = calcDeadlineMs(nowFindCoordinator,options.timeoutMs())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "deleteConsumerGroupFutures.put(groupId,new KafkaFutureImpl<Void>())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final Set<String> groupIdList = new HashSet<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final Map<String,KafkaFutureImpl<ConsumerGroupDescription>> futures = new HashMap<>(groupIds.size())@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "DeleteConsumerGroupsOptions options@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final Collection<String> groupIds@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final long nowFindCoordinator = time.milliseconds()@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "future.completeExceptionally(new InvalidGroupIdException(\"The given group id '\" + groupId + \"' cannot be represented in a request.\"))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "return new DescribeConsumerGroupsResult(new HashMap<String,KafkaFuture<ConsumerGroupDescription>>(futures))@@@69@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35->29 [style = dotted, label="true"];
13->24 [style = dotted, label="true"];
33->0 [style = dotted, label="true"];
20->13 [style = bold, label=""];
20->25 [style = dotted, label="true"];
12->5 [style = bold, label=""];
21->27 [style = bold, label=""];
5->26 [style = dashed, label="0"];
25->13 [style = bold, label=""];
15->21 [style = bold, label=""];
3->31 [style = dashed, label="0"];
31->0 [style = bold, label=""];
9->4 [style = bold, label=""];
8->9 [style = solid, label="nowFindCoordinator"];
17->21 [style = solid, label="groupId"];
18->15 [style = bold, label=""];
5->1 [style = solid, label="resultFutures"];
23->26 [style = bold, label=""];
12->2 [style = dotted, label="true"];
13->19 [style = dotted, label="true"];
8->4 [style = solid, label="nowFindCoordinator"];
3->22 [style = dashed, label="0"];
6->34 [style = dashed, label="0"];
10->4 [style = solid, label="groupIdList"];
27->16 [style = bold, label=""];
1->28 [style = dashed, label="0"];
7->0 [style = dotted, label="true"];
7->8 [style = bold, label=""];
24->22 [style = bold, label=""];
20->25 [style = bold, label=""];
10->7 [style = bold, label=""];
15->21 [style = solid, label="deadline"];
35->30 [style = dotted, label="true"];
32->33 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
26->13 [style = bold, label=""];
4->28 [style = bold, label=""];
19->24 [style = bold, label=""];
0->7 [style = bold, label=""];
20->27 [style = bold, label=""];
12->11 [style = dotted, label="true"];
19->22 [style = solid, label="future"];
25->27 [style = bold, label=""];
26->16 [style = solid, label="futures"];
5->36 [style = dashed, label="0"];
23->14 [style = dotted, label="true"];
13->19 [style = bold, label=""];
5->6 [style = bold, label=""];
0->33 [style = bold, label=""];
22->27 [style = bold, label=""];
18->15 [style = solid, label="startFindCoordinatorMs"];
36->28 [style = solid, label="deleteConsumerGroupsFuture"];
7->3 [style = dotted, label="true"];
13->22 [style = dotted, label="true"];
1->16 [style = dashed, label="0"];
10->32 [style = dashed, label="0"];
6->10 [style = bold, label=""];
17->18 [style = bold, label=""];
0->8 [style = bold, label=""];
8->9 [style = bold, label=""];
27->17 [style = bold, label=""];
21->16 [style = bold, label=""];
33->31 [style = bold, label=""];
4->8 [style = bold, label=""];
9->4 [style = solid, label="deadline"];
34->32 [style = bold, label=""];
34->4 [style = solid, label="deleteConsumerGroupFutures"];
4->1 [style = bold, label=""];
7->33 [style = dashed, label="0"];
35->36 [style = bold, label=""];
13->20 [style = dotted, label="false"];
11->30 [style = dashed, label="0"];
18->21 [style = solid, label="startFindCoordinatorMs"];
33->8 [style = bold, label=""];
33->31 [style = dotted, label="true"];
6->4 [style = solid, label="consumerGroupFutures"];
36->34 [style = bold, label=""];
22->13 [style = bold, label=""];
13->20 [style = bold, label=""];
23->11 [style = dotted, label="true"];
}
