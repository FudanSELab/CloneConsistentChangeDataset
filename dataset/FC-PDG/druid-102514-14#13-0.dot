digraph {
8 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2011/P1D\",0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEqualsExceptVersion(ImmutableList.of(desc1,desc2,desc3),publishedDescriptors())@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testRunWithMaximumMessageTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,DateTimes.of(\"2010\")))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(1)))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "testRunWithMinimumMessageTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Thread.sleep(10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(2)))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "SegmentDescriptor desc2 = sd(\"2009/P1D\",0)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "task.getRunner().getStatus() != Status.READING@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SegmentDescriptor desc1 = sd(\"2008/P1D\",0)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",publishedDescriptors.get(0)))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2010/P1D\",0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "insertData()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testRunWithMaximumMessageTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,DateTimes.of(\"2010\"),null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3),publishedDescriptors())@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getThrownAway())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "SegmentDescriptor desc3 = sd(\"2010/P1D\",0)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5->3 [style = bold, label=""];
16->13 [style = bold, label=""];
19->18 [style = bold, label=""];
10->21 [style = dashed, label="0"];
8->15 [style = bold, label=""];
33->27 [style = solid, label="desc2"];
12->5 [style = bold, label=""];
0->6 [style = solid, label="task"];
32->13 [style = solid, label="desc1"];
5->23 [style = bold, label=""];
25->22 [style = bold, label=""];
11->1 [style = bold, label=""];
13->24 [style = bold, label=""];
21->19 [style = bold, label=""];
28->30 [style = bold, label=""];
31->13 [style = bold, label=""];
26->25 [style = bold, label=""];
20->0 [style = bold, label=""];
32->27 [style = solid, label="desc1"];
4->15 [style = bold, label=""];
23->26 [style = bold, label=""];
27->31 [style = bold, label=""];
23->22 [style = solid, label="desc1"];
10->29 [style = dashed, label="0"];
6->16 [style = solid, label="desc3"];
2->10 [style = bold, label=""];
33->27 [style = bold, label=""];
25->22 [style = solid, label="desc3"];
30->33 [style = solid, label="task"];
32->33 [style = bold, label=""];
15->4 [style = dotted, label="true"];
9->19 [style = dashed, label="0"];
26->22 [style = solid, label="desc2"];
5->32 [style = bold, label=""];
3->23 [style = dashed, label="0"];
13->29 [style = bold, label=""];
17->0 [style = bold, label=""];
15->11 [style = bold, label=""];
6->25 [style = dashed, label="0"];
3->7 [style = bold, label=""];
24->21 [style = bold, label=""];
6->16 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->3 [style = solid, label="task"];
7->10 [style = solid, label="desc2"];
14->12 [style = bold, label=""];
7->6 [style = bold, label=""];
30->8 [style = solid, label="task"];
0->8 [style = bold, label=""];
15->4 [style = bold, label=""];
0->30 [style = dashed, label="0"];
0->8 [style = solid, label="task"];
3->2 [style = solid, label="desc1"];
1->14 [style = bold, label=""];
10->9 [style = bold, label=""];
7->33 [style = dashed, label="0"];
3->32 [style = dashed, label="0"];
22->13 [style = bold, label=""];
7->16 [style = solid, label="desc2"];
6->9 [style = solid, label="desc3"];
0->7 [style = solid, label="task"];
30->8 [style = bold, label=""];
7->26 [style = dashed, label="0"];
30->32 [style = solid, label="task"];
33->29 [style = solid, label="desc2"];
16->22 [style = dashed, label="0"];
13->2 [style = bold, label=""];
3->16 [style = solid, label="desc1"];
}
