digraph {
4 [style = filled, label = "throw new RuntimeException(\"didn't unsubscribe\")@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "latch.await(1000,TimeUnit.MILLISECONDS)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(\"2-2\",list.get(1))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(5,list.size())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ArrayList<String> list = new ArrayList<>()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "!infiniteObservable.await(2000,TimeUnit.MILLISECONDS)@@@27@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "!infiniteFlowable.await(2000,TimeUnit.MILLISECONDS)@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "startInfiniteAndFinite['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "final ArrayList<String> list = new ArrayList<String>()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "startInfiniteAndFinite['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "os.subscribe(new DefaultSubscriber<String>(){@Override public void onComplete(){latch.countDown()}@Override public void onError(Throwable e){e.printStackTrace()latch.countDown()}@Override public void onNext(String s){System.out.println(s)list.add(s)}})@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Observable<String> os = OBSERVABLE_OF_5_INTEGERS.zipWith(ASYNC_OBSERVABLE_OF_INFINITE_INTEGERS(infiniteObservable),new BiFunction<Integer,Integer,String>(){@Override public String apply(Integer a,Integer b){return a + \"-\" + b}})@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "os.subscribe(new DefaultObserver<String>(){@Override public void onComplete(){latch.countDown()}@Override public void onError(Throwable e){e.printStackTrace()latch.countDown()}@Override public void onNext(String s){System.out.println(s)list.add(s)}})@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"1-1\",list.get(0))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(\"5-5\",list.get(4))@@@33@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final CountDownLatch infiniteObservable = new CountDownLatch(1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "startInfiniteAndFinite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final CountDownLatch infiniteFlowable = new CountDownLatch(1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Flowable<String> os = OBSERVABLE_OF_5_INTEGERS.zipWith(ASYNC_OBSERVABLE_OF_INFINITE_INTEGERS(infiniteFlowable),new BiFunction<Integer,Integer,String>(){@Override public String apply(Integer a,Integer b){return a + \"-\" + b}})@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
14->3 [style = bold, label=""];
11->16 [style = bold, label=""];
2->7 [style = solid, label="infiniteFlowable"];
8->16 [style = dashed, label="0"];
7->11 [style = bold, label=""];
7->17 [style = dashed, label="0"];
0->12 [style = bold, label=""];
1->18 [style = bold, label=""];
3->15 [style = bold, label=""];
12->6 [style = bold, label=""];
4->0 [style = bold, label=""];
2->15 [style = dashed, label="0"];
8->1 [style = bold, label=""];
6->5 [style = bold, label=""];
15->17 [style = bold, label=""];
11->13 [style = dashed, label="0"];
18->4 [style = bold, label=""];
3->2 [style = bold, label=""];
15->17 [style = solid, label="infiniteObservable"];
16->1 [style = bold, label=""];
10->0 [style = bold, label=""];
10->4 [style = bold, label=""];
9->3 [style = bold, label=""];
11->8 [style = bold, label=""];
18->4 [style = dotted, label="true"];
2->7 [style = bold, label=""];
10->4 [style = dotted, label="true"];
13->8 [style = bold, label=""];
1->10 [style = bold, label=""];
19->3 [style = bold, label=""];
18->0 [style = bold, label=""];
10->18 [style = dashed, label="0"];
17->11 [style = bold, label=""];
}
