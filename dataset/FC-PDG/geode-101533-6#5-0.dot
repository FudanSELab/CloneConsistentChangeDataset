digraph {
20 [style = filled, label = "when(recentlyUsedNode.next()).thenReturn(node).thenReturn(null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(list.size()).isOne()@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "list.appendEntry(node)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "LRUListWithAsyncSorting list = new LRUListWithAsyncSorting(controller,executor,1)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "doesNotEvictRecentlyUsed['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "when(recentlyUsedNode.previous()).thenReturn(list.head)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(evictedNode.previous()).thenReturn(list.head)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EvictionNode evictedNode = mock()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(recentlyUsedNode.isRecentlyUsed()).thenReturn(true)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "when(evictedNode.isEvicted()).thenReturn(true)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "verify(recentlyUsedNode,atLeast(1)).unsetRecentlyUsed()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "EvictionNode recentlyUsedNode = mock()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "list.appendEntry(node)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EvictionNode node = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "doesNotEvictNodeThatIsEvicted['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "EvictionNode node = mock()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "LRUListWithSyncSorting list = new LRUListWithSyncSorting(controller)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "list.appendEntry(recentlyUsedNode)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "doesNotEvictNodeThatIsEvicted['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "when(node.next()).thenReturn(list.tail)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(evictedNode.next()).thenReturn(node)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(node.previous()).thenReturn(recentlyUsedNode)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(list.tail.previous()).isSameAs(recentlyUsedNode)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "when(node.next()).thenReturn(list.tail)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(list.getEvictableEntry()).isSameAs(node)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4->10 [style = bold, label=""];
21->10 [style = bold, label=""];
23->16 [style = bold, label=""];
17->26 [style = bold, label=""];
1->26 [style = dashed, label="0"];
1->15 [style = dashed, label="0"];
4->13 [style = solid, label="node"];
25->3 [style = bold, label=""];
18->19 [style = bold, label=""];
23->16 [style = solid, label="recentlyUsedNode"];
11->23 [style = dashed, label="0"];
11->12 [style = bold, label=""];
8->6 [style = bold, label=""];
5->18 [style = bold, label=""];
3->22 [style = bold, label=""];
10->6 [style = bold, label=""];
22->5 [style = bold, label=""];
7->3 [style = bold, label=""];
3->0 [style = bold, label=""];
1->11 [style = bold, label=""];
4->0 [style = solid, label="node"];
6->20 [style = bold, label=""];
10->6 [style = solid, label="node"];
13->24 [style = dashed, label="0"];
23->5 [style = solid, label="recentlyUsedNode"];
23->3 [style = solid, label="recentlyUsedNode"];
15->11 [style = bold, label=""];
10->8 [style = bold, label=""];
12->4 [style = bold, label=""];
16->21 [style = bold, label=""];
24->25 [style = bold, label=""];
6->13 [style = bold, label=""];
26->23 [style = bold, label=""];
10->22 [style = solid, label="node"];
14->15 [style = bold, label=""];
2->7 [style = bold, label=""];
9->1 [style = bold, label=""];
20->24 [style = bold, label=""];
11->10 [style = solid, label="evictedNode"];
0->5 [style = bold, label=""];
13->2 [style = bold, label=""];
4->8 [style = solid, label="node"];
}
