digraph {
10 [style = filled, label = "Assert.assertNull(mergeStrict(analysis1,analysis2).getAggregators())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final SegmentAnalysis analysis1 = new SegmentAnalysis(\"id\",null,Maps.newHashMap(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"baz\",new DoubleSumAggregatorFactory(\"baz\",\"baz\")),null,null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "final SegmentAnalysis analysis2 = new SegmentAnalysis(\"id\",null,new HashMap<>(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleSumAggregatorFactory(\"bar\",\"bar\")),null,null,null)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "final SegmentAnalysis analysis2 = new SegmentAnalysis(\"id\",null,Maps.newHashMap(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleSumAggregatorFactory(\"bar\",\"bar\")),null,null,null)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final SegmentAnalysis analysis1 = new SegmentAnalysis(\"id\",null,new HashMap<>(),0,0,ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"baz\",new DoubleSumAggregatorFactory(\"baz\",\"baz\")),null,null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "final SegmentAnalysis analysis1 = new SegmentAnalysis(\"id\",null,Maps.newHashMap(),0,0,null,null,null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleSumAggregatorFactory(\"bar\",\"bar\"),\"baz\",new DoubleSumAggregatorFactory(\"baz\",\"baz\")),mergeStrict(analysis1,analysis2).getAggregators())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testMergeAggregatorsOneNull['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testMergeAggregators['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testMergeAggregators['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleSumAggregatorFactory(\"bar\",\"bar\")),mergeLenient(analysis1,analysis2).getAggregators())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableMap.of(\"foo\",new LongSumAggregatorFactory(\"foo\",\"foo\"),\"bar\",new DoubleSumAggregatorFactory(\"bar\",\"bar\"),\"baz\",new DoubleSumAggregatorFactory(\"baz\",\"baz\")),mergeLenient(analysis1,analysis2).getAggregators())@@@6@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1->3 [style = bold, label=""];
4->5 [style = dashed, label="0"];
6->3 [style = bold, label=""];
4->9 [style = dashed, label="0"];
0->8 [style = dashed, label="0"];
4->1 [style = bold, label=""];
7->5 [style = bold, label=""];
5->6 [style = bold, label=""];
9->1 [style = bold, label=""];
10->8 [style = bold, label=""];
1->10 [style = bold, label=""];
11->9 [style = bold, label=""];
2->4 [style = bold, label=""];
1->6 [style = dashed, label="0"];
3->0 [style = bold, label=""];
}
