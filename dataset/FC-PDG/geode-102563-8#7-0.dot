digraph {
5 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@25@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "SocketChannel mockChannel = mock()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@21@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "unwrappedBuffer.limit(unwrappedBuffer.position() + preexistingBytes)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "readAtLeast['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "unwrappedBuffer.position(unwrappedBuffer.capacity() - individualRead)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "ByteBuffer unwrappedBuffer = nioSslEngine.peerAppData@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "verify(mockChannel,times(3)).read(isA())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "nioSslEngine.peerAppData = unwrappedBuffer@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ByteBuffer data = nioSslEngine.readAtLeast(mockChannel,amountToRead,wrappedBuffer)@@@22@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * 3 + preexistingBytes)@@@26@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32->33 [style = solid, label="testSSLEngine"];
4->3 [style = bold, label=""];
13->19 [style = solid, label="individualRead"];
15->20 [style = solid, label="preexistingBytes"];
15->27 [style = solid, label="preexistingBytes"];
2->19 [style = bold, label=""];
13->24 [style = solid, label="individualRead"];
7->17 [style = bold, label=""];
23->5 [style = bold, label=""];
15->24 [style = solid, label="preexistingBytes"];
20->27 [style = solid, label="initialFreeSpace"];
28->22 [style = bold, label=""];
3->25 [style = bold, label=""];
10->34 [style = dashed, label="0"];
16->6 [style = solid, label="initialUnwrappedBufferSize"];
16->6 [style = bold, label=""];
29->31 [style = bold, label=""];
1->0 [style = solid, label="mockChannel"];
14->12 [style = solid, label="initialFreeSpace"];
13->3 [style = solid, label="individualRead"];
35->32 [style = bold, label=""];
6->31 [style = dashed, label="0"];
19->11 [style = bold, label=""];
13->31 [style = solid, label="individualRead"];
10->21 [style = bold, label=""];
12->26 [style = bold, label=""];
26->24 [style = bold, label=""];
15->18 [style = solid, label="preexistingBytes"];
15->14 [style = solid, label="preexistingBytes"];
21->28 [style = bold, label=""];
31->34 [style = bold, label=""];
13->35 [style = solid, label="individualRead"];
20->27 [style = bold, label=""];
3->18 [style = bold, label=""];
24->20 [style = bold, label=""];
5->0 [style = solid, label="amountToRead"];
15->12 [style = solid, label="preexistingBytes"];
8->1 [style = bold, label=""];
1->17 [style = solid, label="mockChannel"];
15->3 [style = solid, label="preexistingBytes"];
17->0 [style = bold, label=""];
22->0 [style = bold, label=""];
16->20 [style = solid, label="initialUnwrappedBufferSize"];
25->12 [style = bold, label=""];
0->4 [style = bold, label=""];
1->16 [style = bold, label=""];
30->5 [style = bold, label=""];
15->10 [style = solid, label="preexistingBytes"];
8->0 [style = solid, label="wrappedBuffer"];
5->13 [style = bold, label=""];
14->12 [style = bold, label=""];
6->10 [style = bold, label=""];
6->2 [style = solid, label="unwrappedBuffer"];
6->28 [style = solid, label="unwrappedBuffer"];
11->33 [style = bold, label=""];
9->5 [style = bold, label=""];
16->29 [style = dashed, label="0"];
10->2 [style = bold, label=""];
13->15 [style = bold, label=""];
34->35 [style = bold, label=""];
0->3 [style = solid, label="testSSLEngine"];
1->29 [style = bold, label=""];
11->17 [style = solid, label="testSSLEngine"];
5->17 [style = solid, label="amountToRead"];
32->11 [style = bold, label=""];
18->14 [style = bold, label=""];
15->8 [style = bold, label=""];
16->14 [style = solid, label="initialUnwrappedBufferSize"];
11->7 [style = bold, label=""];
15->34 [style = solid, label="preexistingBytes"];
33->17 [style = bold, label=""];
13->18 [style = solid, label="individualRead"];
13->22 [style = solid, label="individualRead"];
8->17 [style = solid, label="wrappedBuffer"];
}
