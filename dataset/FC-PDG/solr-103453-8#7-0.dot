digraph {
50 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec853b,null,false))@@@207@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "request.setFieldValue(\"the quick red fox jumped over the lazy brown dogs\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
177 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec804d,null,false))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8274,null,false))@@@115@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
158 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8165,null,true))@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
130 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@119@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
76 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@192@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testCharFilterAnalysis['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec814f,null,false))@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
172 [style = filled, label = "NamedList<NamedList> nameTextType = fieldTypes.get(\"nametext\")@@@219@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(10,tokenList.size())@@@225@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
128 [style = filled, label = "assertEquals(tokenList.size(),10)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec85dc,null,false))@@@229@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
174 [style = filled, label = "NamedList<List<NamedList>> queryPart = textType.get(\"query\")@@@172@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@321@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8409,null,true))@@@166@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
144 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec832f,null,true))@@@139@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
160 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8038,null,false))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getSchema())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.standard.StandardFilter\")@@@183@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
132 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@332@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazi\",null,\"<ALPHANUM>\",34,38,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec83f0,null,false))@@@163@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
147 [style = filled, label = "request.setShowMatch(true)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
169 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'whitetok'\",queryPart)@@@306@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"text\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
187 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@309@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8218,null,false))@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec87dd,null,false))@@@302@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7fcf,null,false))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "assertEquals(tokenList.size(),10)@@@87@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
116 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec881e,null,false))@@@311@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
75 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec87b3,null,false))@@@296@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8123,null,false))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'nametext'\",queryPart)@@@257@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "assertEquals(\"Expecting StandardTokenizer to produce 2 tokens from '\" + request.getQuery() + \"'\",2,tokenList.size())@@@176@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec866f,null,true))@@@250@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
131 [style = filled, label = "indexPart = whitetok.get(\"index\")@@@269@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
104 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec86b0,null,false))@@@259@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@145@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec81bc,null,false))@@@91@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "NamedList<NamedList> fieldNames = result.get(\"field_names\")@@@265@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec82ff,null,false))@@@133@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8317,null,false))@@@136@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8139,null,false))@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
122 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8833,null,false))@@@314@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(\" wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r \",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
180 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@324@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@174@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
183 [style = filled, label = "NamedList<NamedList> whitetok = fieldNames.get(\"whitetok\")@@@267@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertNotNull(\"Expcting StandardFilter analysis breakdown\",tokenList)@@@184@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
154 [style = filled, label = "assertNotNull(\"Expcting StopFilter analysis breakdown\",tokenList)@@@202@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "assertNotNull(\"expecting result for field type 'text'\",textType)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec808c,null,false))@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
185 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field type 'text'\",queryPart)@@@173@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
186 [style = filled, label = "queryPart = whitetok.get(\"query\")@@@305@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
163 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec86c5,null,false))@@@262@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"word\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec865a,null,false))@@@247@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec838c,null,false))@@@151@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@273@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertEquals(tokenList.size(),8)@@@120@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8645,null,false))@@@244@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
150 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec80e1,null,false))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8630,null,false))@@@241@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8478,null,false))@@@180@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
95 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'keywordtok'\",indexPart)@@@320@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec875f,null,true))@@@284@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
137 [style = filled, label = "assertNotNull(\"expecting result for field 'keywordtok'\",keywordtok)@@@318@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
181 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec82e7,null,false))@@@130@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
159 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 10 tokens\",10,tokenList.size())@@@274@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8463,null,false))@@@177@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testCharFilterAnalysis['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
149 [style = filled, label = "indexPart = keywordtok.get(\"index\")@@@319@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"word\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec879e,null,false))@@@293@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8201,null,false))@@@100@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "assertNotNull(\"Expcting StandardTokenizer analysis breakdown\",tokenList)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertNotNull(\"expecting result for field type 'nametext'\",nameTextType)@@@220@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
133 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the quick red fox jumped over the lazy brown dogs\",null,\"word\",0,49,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8881,null,false))@@@325@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
156 [style = filled, label = "NamedList<NamedList> keywordtok = fieldNames.get(\"keywordtok\")@@@317@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@193@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@211@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
175 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8023,null,false))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
141 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",45,49,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8422,null,false))@@@169@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "tokenList = indexPart.get(.getName())@@@272@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
184 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8246,null,false))@@@109@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"word\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8735,null,false))@@@278@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec810d,null,false))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"over\",null,\"word\",25,29,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8789,null,false))@@@290@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\")@@@223@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
176 [style = filled, label = "request.addFieldName(\"keywordtok\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"word\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8684,null,false))@@@253@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
136 [style = filled, label = "tokenList = queryPart.get(.getName())@@@308@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
82 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec829f,null,false))@@@121@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
153 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"word\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8606,null,true))@@@235@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
162 [style = filled, label = "assertNotNull(\"Expcting WhitespaceTokenizer analysis breakdown\",tokenList)@@@224@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec82b7,null,false))@@@124@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
178 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec85c7,null,false))@@@226@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "tokenList = indexPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@118@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec84f8,null,false))@@@198@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
97 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"word\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec87c8,null,true))@@@299@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
152 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8580,null,false))@@@216@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
142 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec84a1,null,false))@@@186@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'nametext'\",indexPart)@@@222@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"over\",null,\"<ALPHANUM>\",25,29,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec83d7,null,false))@@@160@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getSchema())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
151 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec861b,null,false))@@@238@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",18,24,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec83be,null,false))@@@157@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
143 [style = filled, label = "request.addFieldType(\"nametext\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "assertEquals(tokenList.size(),8)@@@147@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
157 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7fe4,null,false))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "tokenList = queryPart.get(.getName())@@@331@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8567,null,false))@@@213@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
120 [style = filled, label = "tokenList = queryPart.get(.getName())@@@258@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
165 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8523,null,false))@@@204@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7ff9,null,false))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "NamedList<List<NamedList>> indexPart = textType.get(\"index\")@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
171 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec84b7,null,false))@@@189@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"word\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8720,null,false))@@@275@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "request.addFieldName(\"whitetok\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
167 [style = filled, label = "tokenList = indexPart.get(.getName())@@@322@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
146 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec80cb,null,false))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
161 [style = filled, label = "assertToken(tokenList.get(6),new TokenInfo(\"the\",null,\"<ALPHANUM>\",30,33,7,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec822f,null,false))@@@106@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
112 [style = filled, label = "assertNotNull(\"expecting a query token analysis for field 'keywordtok'\",queryPart)@@@329@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
135 [style = filled, label = "assertEquals(2,tokenList.size())@@@212@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec80f7,null,true))@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "assertEquals(tokenList.size(),10)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\" whatever \",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
168 [style = filled, label = "assertNotNull(\"Expecting StandardTokenizer analysis breakdown\",tokenList)@@@175@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
182 [style = filled, label = "assertNotNull(\"Expcting PorterStemFilter analysis breakdown\",tokenList)@@@146@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "request.addFieldType(\"text\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec80b5,null,false))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@201@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
140 [style = filled, label = "request.setQuery(\"fox brown\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec82cf,null,true))@@@127@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "request.setShowMatch(false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "testHandleAnalysisRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
164 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"<ALPHANUM>\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec81d3,null,false))@@@94@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
139 [style = filled, label = "assertNotNull(\"expecting only MockTokenizer to be applied\",tokenList)@@@323@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 2 tokens\",2,tokenList.size())@@@310@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "assertEquals(2,tokenList.size())@@@185@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
148 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec84e1,null,false))@@@195@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
173 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"jumped\",null,\"word\",18,24,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8774,null,false))@@@287@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec800e,null,true))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "tokenList = queryPart.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@210@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@307@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"lazy\",null,\"<ALPHANUM>\",34,38,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8062,null,false))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec825d,null,true))@@@112@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
118 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'text'\",indexPart)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
166 [style = filled, label = "assertEquals(\"expecting MockTokenizer to produce 1 token\",1,tokenList.size())@@@333@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
125 [style = filled, label = "assertNotNull(\"expecting result for field 'whitetok'\",whitetok)@@@268@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "assertNotNull(\"Expcting StandardFilter analysis breakdown\",tokenList)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "assertToken(tokenList.get(9),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,10,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec817b,null,false))@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec81a5,null,false))@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"quick\",null,\"<ALPHANUM>\",4,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8373,null,false))@@@148@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "List<NamedList> tokenList = indexPart.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
179 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec83a5,null,true))@@@154@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
84 [style = filled, label = "assertToken(tokenList.get(8),new TokenInfo(\"brown\",null,\"<ALPHANUM>\",39,44,9,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8077,null,true))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "indexPart = nameTextType.get(\"index\")@@@221@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
170 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,indexPart.size())@@@271@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
108 [style = filled, label = "assertNotNull(\"Expcting LowerCaseFilter analysis breakdown\",tokenList)@@@86@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
129 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field 'whitetok'\",indexPart)@@@270@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec85f1,null,false))@@@232@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertToken(tokenList.get(7),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",45,49,8,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec8347,null,false))@@@142@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "queryPart = keywordtok.get(\"query\")@@@328@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "queryPart = nameTextType.get(\"query\")@@@256@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",14,17,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec81ea,null,true))@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
155 [style = filled, label = "assertEquals(2,tokenList.size())@@@194@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
145 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"red\",null,\"word\",10,13,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec874a,null,false))@@@281@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox brown\",null,\"word\",0,9,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec88c2,null,false))@@@334@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec7f3d,null,false))@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "assertEquals(\"expecting only MockTokenizer to be applied\",1,queryPart.size())@@@330@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
138 [style = filled, label = "assertNotNull(\"field_nameds should never be null\",fieldNames)@@@266@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "assertEquals(2,tokenList.size())@@@203@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
163->74 [style = bold, label=""];
27->136 [style = bold, label=""];
112->117 [style = bold, label=""];
42->86 [style = bold, label=""];
176->51 [style = bold, label=""];
67->111 [style = bold, label=""];
36->96 [style = bold, label=""];
171->76 [style = bold, label=""];
5->20 [style = bold, label=""];
40->103 [style = bold, label=""];
59->132 [style = bold, label=""];
74->138 [style = solid, label="fieldNames"];
139->180 [style = bold, label=""];
130->56 [style = bold, label=""];
9->13 [style = solid, label="result"];
150->89 [style = bold, label=""];
35->154 [style = bold, label=""];
151->49 [style = bold, label=""];
82->85 [style = bold, label=""];
69->112 [style = bold, label=""];
62->73 [style = bold, label=""];
54->178 [style = bold, label=""];
166->37 [style = bold, label=""];
152->172 [style = bold, label=""];
114->165 [style = bold, label=""];
11->5 [style = solid, label="indexPart"];
2->16 [style = solid, label="result"];
34->75 [style = bold, label=""];
86->179 [style = bold, label=""];
117->59 [style = bold, label=""];
132->166 [style = bold, label=""];
77->92 [style = bold, label=""];
18->39 [style = dashed, label="0"];
180->133 [style = bold, label=""];
156->137 [style = bold, label=""];
31->35 [style = bold, label=""];
111->33 [style = solid, label="tokenList"];
158->119 [style = solid, label="tokenList"];
8->51 [style = dashed, label="0"];
101->186 [style = bold, label=""];
131->129 [style = solid, label="indexPart"];
83->155 [style = bold, label=""];
165->50 [style = bold, label=""];
14->19 [style = dashed, label="0"];
182->53 [style = bold, label=""];
94->123 [style = bold, label=""];
66->144 [style = bold, label=""];
122->156 [style = bold, label=""];
167->139 [style = bold, label=""];
25->40 [style = bold, label=""];
39->176 [style = bold, label=""];
72->146 [style = bold, label=""];
162->54 [style = bold, label=""];
2->16 [style = bold, label=""];
35->154 [style = solid, label="tokenList"];
5->29 [style = bold, label=""];
73->90 [style = bold, label=""];
161->184 [style = bold, label=""];
23->25 [style = bold, label=""];
129->170 [style = bold, label=""];
156->137 [style = solid, label="keywordtok"];
138->183 [style = bold, label=""];
48->41 [style = bold, label=""];
71->157 [style = bold, label=""];
104->163 [style = bold, label=""];
0->2 [style = solid, label="request"];
21->0 [style = bold, label=""];
6->20 [style = dashed, label="0"];
178->48 [style = bold, label=""];
29->77 [style = bold, label=""];
32->115 [style = bold, label=""];
79->84 [style = bold, label=""];
36->96 [style = solid, label="tokenList"];
29->77 [style = solid, label="textType"];
18->12 [style = bold, label=""];
14->10 [style = bold, label=""];
175->160 [style = bold, label=""];
113->61 [style = bold, label=""];
183->125 [style = bold, label=""];
125->131 [style = bold, label=""];
65->162 [style = bold, label=""];
1->0 [style = bold, label=""];
153->151 [style = bold, label=""];
78->130 [style = solid, label="tokenList"];
121->30 [style = bold, label=""];
98->116 [style = bold, label=""];
57->24 [style = bold, label=""];
120->104 [style = bold, label=""];
91->66 [style = bold, label=""];
159->58 [style = bold, label=""];
65->162 [style = solid, label="tokenList"];
102->173 [style = bold, label=""];
38->108 [style = solid, label="tokenList"];
46->126 [style = bold, label=""];
89->81 [style = bold, label=""];
5->6 [style = bold, label=""];
184->94 [style = bold, label=""];
87->168 [style = bold, label=""];
136->187 [style = solid, label="tokenList"];
128->72 [style = bold, label=""];
106->60 [style = bold, label=""];
81->127 [style = bold, label=""];
51->143 [style = bold, label=""];
110->175 [style = bold, label=""];
87->168 [style = solid, label="tokenList"];
43->107 [style = bold, label=""];
183->125 [style = solid, label="whitetok"];
56->82 [style = bold, label=""];
186->169 [style = bold, label=""];
131->129 [style = bold, label=""];
108->44 [style = bold, label=""];
124->113 [style = bold, label=""];
20->19 [style = bold, label=""];
61->120 [style = bold, label=""];
115->182 [style = bold, label=""];
142->171 [style = bold, label=""];
50->121 [style = bold, label=""];
44->80 [style = bold, label=""];
64->57 [style = bold, label=""];
11->5 [style = solid, label="fieldTypes"];
52->63 [style = bold, label=""];
0->39 [style = bold, label=""];
68->141 [style = bold, label=""];
115->182 [style = solid, label="tokenList"];
4->17 [style = bold, label=""];
47->181 [style = bold, label=""];
107->88 [style = bold, label=""];
100->158 [style = bold, label=""];
26->145 [style = bold, label=""];
160->177 [style = bold, label=""];
164->62 [style = bold, label=""];
99->71 [style = bold, label=""];
53->42 [style = bold, label=""];
19->10 [style = bold, label=""];
179->105 [style = bold, label=""];
85->47 [style = bold, label=""];
38->108 [style = bold, label=""];
135->55 [style = bold, label=""];
59->132 [style = solid, label="tokenList"];
33->70 [style = bold, label=""];
140->147 [style = bold, label=""];
46->126 [style = solid, label="tokenList"];
103->38 [style = bold, label=""];
123->78 [style = bold, label=""];
96->159 [style = bold, label=""];
136->187 [style = bold, label=""];
11->5 [style = bold, label=""];
158->119 [style = bold, label=""];
92->118 [style = bold, label=""];
154->114 [style = bold, label=""];
141->174 [style = bold, label=""];
177->79 [style = bold, label=""];
145->102 [style = bold, label=""];
12->8 [style = bold, label=""];
45->164 [style = bold, label=""];
2->29 [style = dashed, label="0"];
147->2 [style = bold, label=""];
84->100 [style = bold, label=""];
172->64 [style = bold, label=""];
76->83 [style = solid, label="tokenList"];
30->135 [style = bold, label=""];
109->34 [style = bold, label=""];
170->36 [style = bold, label=""];
90->161 [style = bold, label=""];
16->77 [style = dashed, label="0"];
0->18 [style = bold, label=""];
2->16 [style = solid, label="textType"];
58->26 [style = bold, label=""];
5->118 [style = dashed, label="0"];
167->139 [style = solid, label="tokenList"];
174->185 [style = bold, label=""];
133->69 [style = bold, label=""];
0->9 [style = solid, label="request"];
69->112 [style = solid, label="queryPart"];
95->28 [style = bold, label=""];
174->185 [style = solid, label="queryPart"];
15->2 [style = bold, label=""];
16->11 [style = bold, label=""];
93->110 [style = bold, label=""];
126->99 [style = bold, label=""];
168->106 [style = bold, label=""];
157->93 [style = bold, label=""];
118->46 [style = bold, label=""];
55->152 [style = bold, label=""];
173->109 [style = bold, label=""];
155->148 [style = bold, label=""];
111->33 [style = bold, label=""];
113->61 [style = solid, label="queryPart"];
3->15 [style = bold, label=""];
169->27 [style = bold, label=""];
74->138 [style = bold, label=""];
10->4 [style = solid, label="tokenList"];
127->23 [style = bold, label=""];
49->43 [style = bold, label=""];
11->92 [style = dashed, label="0"];
75->97 [style = bold, label=""];
22->140 [style = bold, label=""];
119->128 [style = bold, label=""];
181->91 [style = bold, label=""];
92->118 [style = solid, label="indexPart"];
6->14 [style = bold, label=""];
17->7 [style = bold, label=""];
6->46 [style = dashed, label="0"];
3->15 [style = solid, label="fieldTypes"];
76->83 [style = bold, label=""];
121->30 [style = solid, label="tokenList"];
60->67 [style = bold, label=""];
28->167 [style = bold, label=""];
13->3 [style = bold, label=""];
63->68 [style = bold, label=""];
97->101 [style = bold, label=""];
134->0 [style = bold, label=""];
41->153 [style = bold, label=""];
143->22 [style = bold, label=""];
57->24 [style = solid, label="indexPart"];
8->9 [style = bold, label=""];
149->95 [style = bold, label=""];
10->4 [style = bold, label=""];
78->130 [style = bold, label=""];
149->95 [style = solid, label="indexPart"];
70->142 [style = bold, label=""];
187->98 [style = bold, label=""];
185->87 [style = bold, label=""];
186->169 [style = solid, label="queryPart"];
172->64 [style = solid, label="nameTextType"];
80->45 [style = bold, label=""];
88->124 [style = bold, label=""];
137->149 [style = bold, label=""];
105->52 [style = bold, label=""];
148->31 [style = bold, label=""];
24->65 [style = bold, label=""];
116->122 [style = bold, label=""];
144->32 [style = bold, label=""];
9->13 [style = bold, label=""];
146->150 [style = bold, label=""];
}
