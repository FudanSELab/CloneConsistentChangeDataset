digraph {
56 [style = filled, label = "record4.complete(Arrays.asList(14))@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
85 [style = filled, label = "Assert.assertFalse(pollOperation.isDone())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "StreamRecordQueueEntry<Integer> record4 = new StreamRecordQueueEntry<>(new StreamRecord<>(4,4L))@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "testCompletionOrder['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(record5,thirdPoll.get())@@@70@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
54 [style = filled, label = "ResultFuture<Integer> record3 = putSuccessfully(queue,new StreamRecord<>(3,3L))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Thread.sleep(10L)@@@67@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "CompletableFuture<AsyncResult> firstPoll = CompletableFuture.supplyAsync(null,executor)@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "record6.complete(Collections.emptyList())@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Thread.sleep(10L)@@@43@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "record1.complete(Arrays.asList(11))@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "final UnorderedStreamElementQueue queue = new UnorderedStreamElementQueue(8,executor,operatorActions)@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "ResultFuture<Integer> record2 = putSuccessfully(queue,new StreamRecord<>(2,1L))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
86 [style = filled, label = "entry4.complete(Collections.emptyList())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "ResultFuture<Integer> record6 = putSuccessfully(queue,new StreamRecord<>(6,7L))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
75 [style = filled, label = "record2.complete(Arrays.asList(12))@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
78 [style = filled, label = "record6.complete(Arrays.asList(16))@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
95 [style = filled, label = "queue.put(entry)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(record6,queue.poll())@@@56@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
55 [style = filled, label = "Assert.assertFalse(queue.isEmpty())@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "record2.complete(Collections.emptyList())@@@30@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CompletableFuture<AsyncResult> secondPoll = CompletableFuture.supplyAsync(null,executor)@@@32@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Set<AsyncResult> expected = new HashSet<>(2)@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(Arrays.asList(new StreamRecord<>(15,6L)),popCompleted(queue))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
91 [style = filled, label = "Assert.assertEquals(4,queue.size())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
77 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),popCompleted(queue))@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
88 [style = filled, label = "Thread.sleep(10L)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "List<StreamElementQueueEntry<?>> entries = Arrays.asList(record1,record2,watermark1,record3,record4,watermark2,record5,record6)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(watermark2,queue.poll())@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
89 [style = filled, label = "final OrderedStreamElementQueue queue = new OrderedStreamElementQueue(4,executor,operatorActions)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertFalse(secondPoll.isDone())@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "CompletableFuture<AsyncResult> thirdPoll = CompletableFuture.supplyAsync(null,executor)@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
31 [style = filled, label = "Assert.assertTrue(1 == queue.size())@@@57@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@34@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "WatermarkQueueEntry entry3 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(2L))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "expected.add(record3)@@@49@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "queue.put(entry)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertFalse(firstPoll.isDone())@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "StreamRecordQueueEntry<Integer> record5 = new StreamRecordQueueEntry<>(new StreamRecord<>(5,6L))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
84 [style = filled, label = "entry2.complete(Collections.emptyList())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),popCompleted(queue))@@@36@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(record1,secondPoll.get())@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
94 [style = filled, label = "StreamRecordQueueEntry<Integer> entry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2,1L))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
92 [style = filled, label = "entry1.complete(Collections.emptyList())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "actual.add(queue.poll())@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
68 [style = filled, label = "Assert.assertEquals(8,queue.size())@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "record3.complete(Collections.emptyList())@@@27@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "verify(operatorActions,never()).failOperator(any())@@@72@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
82 [style = filled, label = "CompletableFuture<List<AsyncResult>> pollOperation = CompletableFuture.supplyAsync(null,executor)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "Assert.assertEquals(expected,pollOperation.get())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "OperatorActions operatorActions = mock()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Assert.assertFalse(thirdPoll.isDone())@@@68@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
73 [style = filled, label = "Assert.assertEquals(8,queue.size())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(queue.isEmpty())@@@71@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "Assert.assertTrue(queue.isEmpty())@@@35@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
69 [style = filled, label = "record3.complete(Arrays.asList(13))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
49 [style = filled, label = "ResultFuture<Integer> record1 = putSuccessfully(queue,new StreamRecord<>(1,0L))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "expected.add(record4)@@@50@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
93 [style = filled, label = "StreamRecordQueueEntry<Integer> entry1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertFalse(queue.isEmpty())@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
70 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),popCompleted(queue))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
51 [style = filled, label = "Assert.assertEquals(0,queue.size())@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
65 [style = filled, label = "record5.complete(Arrays.asList(15))@@@32@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "Assert.assertEquals(record2,firstPoll.get())@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "StreamRecordQueueEntry<Integer> record6 = new StreamRecordQueueEntry<>(new StreamRecord<>(6,7L))@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "StreamRecordQueueEntry<Integer> entry4 = new StreamRecordQueueEntry<>(new StreamRecord<>(3,3L))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "testCompletionOrder['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
79 [style = filled, label = "Assert.assertFalse(queue.isEmpty())@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "record4.complete(Collections.emptyList())@@@42@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
58 [style = filled, label = "putSuccessfully(queue,new Watermark(5L))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "putSuccessfully(queue,new Watermark(2L))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "Assert.assertFalse(queue.isEmpty())@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1,0L))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Assert.assertEquals(Arrays.asList(new StreamRecord<>(12,1L)),popCompleted(queue))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "Set<AsyncResult> actual = new HashSet<>(2)@@@51@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "Assert.assertEquals(7,queue.size())@@@26@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "record5.complete(Collections.emptyList())@@@69@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "Assert.assertEquals(1,queue.size())@@@30@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
63 [style = filled, label = "Assert.assertEquals(Arrays.asList(new StreamRecord<>(11,0L),new Watermark(2L),new StreamRecord<>(13,3L),new StreamRecord<>(14,4L),new Watermark(5L),new StreamRecord<>(16,7L)),popCompleted(queue))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "Assert.assertTrue(8 == queue.size())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
80 [style = filled, label = "List<StreamElementQueueEntry<?>> expected = Arrays.asList(entry1,entry2,entry3,entry4)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "Thread.sleep(10L)@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Thread.sleep(10L)@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "Assert.assertFalse(queue.isEmpty())@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
74 [style = filled, label = "ResultFuture<Integer> record5 = putSuccessfully(queue,new StreamRecord<>(5,6L))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
57 [style = filled, label = "ResultFuture<Integer> record4 = putSuccessfully(queue,new StreamRecord<>(4,4L))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
40 [style = filled, label = "Assert.assertEquals(expected,actual)@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
76 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),popCompleted(queue))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "actual.add(queue.poll())@@@53@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(7,queue.size())@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
81 [style = filled, label = "testCompletionOrder['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "WatermarkQueueEntry watermark2 = new WatermarkQueueEntry(new Watermark(5L))@@@10@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "record1.complete(Collections.emptyList())@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(watermark1,queue.poll())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
62 [style = filled, label = "final UnorderedStreamElementQueue<Integer> queue = new UnorderedStreamElementQueue<>(8)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
51->67 [style = bold, label=""];
25->1 [style = bold, label=""];
32->93 [style = dashed, label="0"];
64->51 [style = bold, label=""];
37->11 [style = bold, label=""];
76->68 [style = bold, label=""];
32->66 [style = dashed, label="0"];
54->57 [style = bold, label=""];
32->0 [style = bold, label=""];
38->96 [style = dashed, label="0"];
62->45 [style = solid, label="queue"];
59->62 [style = bold, label=""];
90->80 [style = solid, label="entry4"];
57->58 [style = bold, label=""];
27->57 [style = dashed, label="0"];
89->93 [style = bold, label=""];
11->36 [style = bold, label=""];
22->83 [style = dashed, label="0"];
1->23 [style = bold, label=""];
70->73 [style = bold, label=""];
30->28 [style = bold, label=""];
21->31 [style = bold, label=""];
3->19 [style = bold, label=""];
38->2 [style = solid, label="watermark1"];
10->2 [style = solid, label="record4"];
11->89 [style = solid, label="operatorActions"];
93->94 [style = bold, label=""];
83->97 [style = bold, label=""];
66->50 [style = bold, label=""];
62->49 [style = bold, label=""];
85->84 [style = bold, label=""];
8->39 [style = bold, label=""];
50->54 [style = bold, label=""];
71->65 [style = bold, label=""];
32->30 [style = solid, label="record1"];
62->74 [style = solid, label="queue"];
8->48 [style = dashed, label="0"];
11->89 [style = bold, label=""];
33->15 [style = bold, label=""];
0->2 [style = solid, label="record2"];
73->79 [style = bold, label=""];
94->96 [style = bold, label=""];
93->80 [style = solid, label="entry1"];
75->45 [style = bold, label=""];
38->28 [style = solid, label="watermark1"];
67->53 [style = bold, label=""];
44->12 [style = bold, label=""];
62->76 [style = solid, label="queue"];
22->7 [style = bold, label=""];
94->80 [style = solid, label="entry2"];
0->14 [style = solid, label="record2"];
62->48 [style = solid, label="queue"];
0->38 [style = bold, label=""];
8->2 [style = solid, label="record5"];
42->40 [style = bold, label=""];
87->91 [style = bold, label=""];
62->63 [style = solid, label="queue"];
26->16 [style = bold, label=""];
17->34 [style = bold, label=""];
41->30 [style = bold, label=""];
7->5 [style = bold, label=""];
20->41 [style = bold, label=""];
11->36 [style = solid, label="operatorActions"];
96->90 [style = bold, label=""];
39->21 [style = solid, label="record6"];
8->22 [style = solid, label="record5"];
18->25 [style = bold, label=""];
39->2 [style = solid, label="record6"];
2->33 [style = bold, label=""];
14->18 [style = bold, label=""];
34->35 [style = bold, label=""];
45->52 [style = bold, label=""];
61->63 [style = bold, label=""];
62->58 [style = solid, label="queue"];
82->88 [style = bold, label=""];
63->47 [style = bold, label=""];
23->20 [style = bold, label=""];
29->17 [style = bold, label=""];
80->95 [style = bold, label=""];
35->42 [style = bold, label=""];
4->40 [style = solid, label="expected"];
15->73 [style = dashed, label="0"];
34->40 [style = solid, label="actual"];
13->2 [style = solid, label="watermark2"];
16->92 [style = dashed, label="0"];
38->27 [style = bold, label=""];
48->76 [style = bold, label=""];
26->91 [style = dashed, label="0"];
6->24 [style = bold, label=""];
4->29 [style = bold, label=""];
81->11 [style = bold, label=""];
74->48 [style = bold, label=""];
56->77 [style = bold, label=""];
62->49 [style = solid, label="queue"];
62->64 [style = solid, label="queue"];
55->61 [style = bold, label=""];
92->83 [style = bold, label=""];
27->90 [style = dashed, label="0"];
19->14 [style = bold, label=""];
10->13 [style = bold, label=""];
31->44 [style = bold, label=""];
58->74 [style = bold, label=""];
39->2 [style = bold, label=""];
27->10 [style = bold, label=""];
95->82 [style = bold, label=""];
96->80 [style = solid, label="entry3"];
62->70 [style = solid, label="queue"];
79->75 [style = bold, label=""];
9->3 [style = bold, label=""];
40->43 [style = bold, label=""];
62->77 [style = solid, label="queue"];
60->69 [style = bold, label=""];
24->9 [style = bold, label=""];
91->92 [style = bold, label=""];
46->55 [style = bold, label=""];
68->60 [style = bold, label=""];
43->21 [style = bold, label=""];
27->29 [style = solid, label="record3"];
80->83 [style = solid, label="expected"];
10->17 [style = solid, label="record4"];
32->2 [style = solid, label="record1"];
65->64 [style = bold, label=""];
62->57 [style = solid, label="queue"];
52->72 [style = bold, label=""];
36->32 [style = bold, label=""];
15->6 [style = bold, label=""];
12->26 [style = bold, label=""];
14->71 [style = dashed, label="0"];
20->85 [style = dashed, label="0"];
16->22 [style = bold, label=""];
84->86 [style = bold, label=""];
62->66 [style = solid, label="queue"];
62->53 [style = solid, label="queue"];
77->46 [style = bold, label=""];
47->71 [style = bold, label=""];
3->63 [style = dashed, label="0"];
86->87 [style = bold, label=""];
72->78 [style = bold, label=""];
27->2 [style = solid, label="record3"];
36->89 [style = dashed, label="0"];
49->66 [style = bold, label=""];
62->50 [style = solid, label="queue"];
90->80 [style = bold, label=""];
41->84 [style = dashed, label="0"];
13->43 [style = solid, label="watermark2"];
88->85 [style = bold, label=""];
78->56 [style = bold, label=""];
69->70 [style = bold, label=""];
13->8 [style = bold, label=""];
62->54 [style = solid, label="queue"];
28->4 [style = bold, label=""];
0->94 [style = dashed, label="0"];
}
