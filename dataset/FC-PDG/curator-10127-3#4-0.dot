digraph {
11 [style = filled, label = "removerClient.checkExists().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\")@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{TestCleanState.closeAndTestClean(client)}@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testWithRetryInBackground['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){latch.countDown()}}@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final CountDownLatch latch = new CountDownLatch(1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "removerClient.getData().usingWatcher(w).inBackground(callback).forPath(\"/one/two/three\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "client.start()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(),0)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(removerClient.getWatcherRemovalManager().getEntries().size(),0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "BackgroundCallback callback = new BackgroundCallback(){@Override public void processResult(CuratorFramework client,CuratorEvent event){latch.countDown()}}@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testMissingNodeInBackground['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Watcher w = new Watcher(){@Override public void process(WatchedEvent event){}}@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testWithRetryInBackground['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Watcher w = new Watcher(){@Override public void process(WatchedEvent event){}}@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "WatcherRemovalFacade removerClient = (WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(new Timing().awaitLatch(latch))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "server.stop()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->10 [style = bold, label=""];
13->19 [style = bold, label=""];
2->7 [style = bold, label=""];
17->18 [style = bold, label=""];
11->0 [style = bold, label=""];
6->0 [style = solid, label="latch"];
7->6 [style = bold, label=""];
14->18 [style = solid, label="latch"];
12->1 [style = bold, label=""];
6->17 [style = bold, label=""];
0->3 [style = bold, label=""];
11->17 [style = dashed, label="0"];
6->8 [style = bold, label=""];
3->5 [style = bold, label=""];
4->2 [style = bold, label=""];
8->11 [style = bold, label=""];
10->4 [style = bold, label=""];
15->13 [style = bold, label=""];
14->6 [style = bold, label=""];
19->4 [style = bold, label=""];
2->14 [style = bold, label=""];
9->1 [style = bold, label=""];
13->16 [style = solid, label="client"];
10->5 [style = solid, label="client"];
18->0 [style = bold, label=""];
0->16 [style = bold, label=""];
}
