digraph {
8 [style = filled, label = "assertThat(result,succeededSilently())@@@8@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "final View updatedView = j.jenkins.getView(\"aView\")@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CLICommandInvoker.Result result = command.withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/testview-foo.xml\")).invokeWithArgs(\"tView\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "updateViewShouldModifyViewConfiguration['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(\"Update should not modify view name\",j.jenkins.getView(\"ViewFromXML\"),nullValue())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(updatedView.isFilterExecutors(),equalTo(true))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(updatedView.isFilterQueue(),equalTo(false))@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "j.jenkins.addView(new ListView(\"aView\"))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ,View.CONFIGURE,Jenkins.READ).everywhere().toAuthenticated())@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(View.READ,View.CONFIGURE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\")).invokeWithArgs(\"aView\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(updatedView.getViewName(),equalTo(\"aView\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "updateViewWithRenamedClass['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertThat(result,succeededSilently())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "ListView tv = new ListView(\"tView\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "updateViewWithRenamedClass['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Jenkins.XSTREAM2.addCompatibilityAlias(\"org.acme.old.Foo\",)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "j.jenkins.addView(tv)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(View.READ,View.CONFIGURE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/testview-foo.xml\")).invokeWithArgs(\"tView\")@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
4->17 [style = dashed, label="0"];
16->10 [style = bold, label=""];
2->1 [style = bold, label=""];
12->11 [style = bold, label=""];
14->16 [style = solid, label="result"];
7->8 [style = solid, label="result"];
5->15 [style = bold, label=""];
4->2 [style = bold, label=""];
1->0 [style = bold, label=""];
9->7 [style = bold, label=""];
7->8 [style = bold, label=""];
3->4 [style = bold, label=""];
1->9 [style = bold, label=""];
6->4 [style = bold, label=""];
13->17 [style = bold, label=""];
10->5 [style = bold, label=""];
2->14 [style = dashed, label="0"];
17->14 [style = bold, label=""];
4->2 [style = solid, label="tv"];
0->5 [style = solid, label="result"];
15->12 [style = bold, label=""];
0->5 [style = bold, label=""];
}
