digraph {
21 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"2\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@21@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "Assert.assertEquals(checkpoint2.getPartitionSequenceNumberMap(),nextOffsets)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2049/P1D\",0)@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "recordSupplier.seek(anyObject(),anyString())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc5))@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Thread.sleep(10)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(checkpoint1.getPartitionSequenceNumberMap(),currentOffsets)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\"),ImmutableSet.of())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "Thread.sleep(10)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "maxRecordsPerPoll = 1@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "expect(recordSupplier.getEarliestSequenceNumber(anyObject())).andReturn(\"0\").anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "task.getRunner().getStatus() != SeekableStreamIndexTaskRunner.Status.PAUSED@@@20@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,3)).once().andReturn(records.subList(2,10)).once().andReturn(records.subList(9,11))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(6,task.getRunner().getRowIngestionMeters().getProcessed())@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expectLastCall().once()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@47@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "testIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint2 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Thread.sleep(10)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "final KinesisIndexTask task = createTask(null,new KinesisIndexTaskIOConfig(null,baseSequenceName,startPartitions,endPartitions,true,null,null,\"awsEndpoint\",null,null,null,null,false))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(startPartitions),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,currentOffsets)))))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "final SeekableStreamStartSequenceNumbers<String,String> startPartitions = new SeekableStreamStartSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "expectLastCall().anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "expect(recordSupplier.poll(anyLong())).andReturn(records.subList(0,5)).once().andReturn(records.subList(4,records.size())).once()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"10\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> checkpoint1 = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"4\",shardId0,\"0\"))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "maxRowsPerSegment = 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,currentOffsets,currentOffsets.keySet())),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,nextOffsets)))))@@@37@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"10\"))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "final SeekableStreamEndSequenceNumbers<String,String> endPartitions = new SeekableStreamEndSequenceNumbers<>(stream,ImmutableMap.of(shardId1,\"9\",shardId0,\"1\"))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "recordSupplier.close()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "expectLastCall().anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "verifyAll()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "maxTotalRows = 3L@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,currentOffsets,ImmutableSet.of())),new KinesisDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(stream,nextOffsets)))))@@@37@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
44 [style = filled, label = "final Map<String,String> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "final Map<String,String> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testIncrementalHandOffMaxTotalRows['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@27@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "recordSupplier.assign(anyObject())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@54@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "Assert.assertEquals(4,task.getRunner().getRowIngestionMeters().getUnparseable())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
2->64 [style = solid, label="desc4"];
8->46 [style = solid, label="desc1"];
34->46 [style = bold, label=""];
56->30 [style = bold, label=""];
32->41 [style = solid, label="currentOffsets"];
8->3 [style = solid, label="desc1"];
27->46 [style = solid, label="desc3"];
14->35 [style = bold, label=""];
46->5 [style = bold, label=""];
45->24 [style = solid, label="task"];
2->29 [style = solid, label="desc2"];
36->28 [style = bold, label=""];
45->34 [style = solid, label="task"];
12->42 [style = bold, label=""];
47->37 [style = bold, label=""];
57->58 [style = bold, label=""];
24->43 [style = bold, label=""];
61->59 [style = bold, label=""];
10->41 [style = bold, label=""];
7->49 [style = bold, label=""];
45->30 [style = bold, label=""];
44->47 [style = solid, label="nextOffsets"];
13->1 [style = bold, label=""];
39->68 [style = dashed, label="0"];
45->30 [style = solid, label="task"];
21->36 [style = bold, label=""];
22->0 [style = bold, label=""];
59->27 [style = solid, label="task"];
38->55 [style = solid, label="desc1"];
26->64 [style = solid, label="desc2"];
5->46 [style = dashed, label="0"];
49->13 [style = bold, label=""];
31->48 [style = bold, label=""];
40->47 [style = bold, label=""];
65->64 [style = solid, label="desc7"];
70->35 [style = bold, label=""];
1->12 [style = bold, label=""];
38->26 [style = bold, label=""];
10->57 [style = bold, label=""];
59->65 [style = solid, label="task"];
46->64 [style = dashed, label="0"];
34->19 [style = solid, label="desc7"];
27->11 [style = solid, label="desc5"];
17->16 [style = bold, label=""];
69->12 [style = bold, label=""];
28->45 [style = bold, label=""];
53->29 [style = bold, label=""];
48->37 [style = bold, label=""];
30->67 [style = bold, label=""];
9->39 [style = bold, label=""];
8->29 [style = solid, label="desc3"];
49->45 [style = solid, label="baseSequenceName"];
50->70 [style = bold, label=""];
15->30 [style = dashed, label="0"];
27->64 [style = solid, label="desc5"];
32->48 [style = solid, label="currentOffsets"];
11->18 [style = bold, label=""];
59->45 [style = solid, label="task"];
32->52 [style = solid, label="currentOffsets"];
17->62 [style = bold, label=""];
2->46 [style = solid, label="desc2"];
2->27 [style = bold, label=""];
30->56 [style = dotted, label="true"];
59->8 [style = solid, label="task"];
0->44 [style = bold, label=""];
43->34 [style = bold, label=""];
66->49 [style = bold, label=""];
49->54 [style = bold, label=""];
32->31 [style = bold, label=""];
29->11 [style = bold, label=""];
3->29 [style = bold, label=""];
45->8 [style = solid, label="task"];
67->32 [style = solid, label="currentOffsets"];
30->15 [style = bold, label=""];
25->38 [style = bold, label=""];
43->46 [style = solid, label="desc5"];
21->60 [style = dashed, label="0"];
45->43 [style = solid, label="task"];
24->18 [style = solid, label="desc4"];
8->64 [style = solid, label="desc3"];
59->45 [style = bold, label=""];
18->33 [style = bold, label=""];
23->15 [style = bold, label=""];
9->68 [style = bold, label=""];
39->45 [style = solid, label="startPartitions"];
26->53 [style = solid, label="desc2"];
26->8 [style = bold, label=""];
43->33 [style = solid, label="desc5"];
50->14 [style = bold, label=""];
24->18 [style = solid, label="desc6"];
67->31 [style = solid, label="currentOffsets"];
45->2 [style = solid, label="task"];
42->4 [style = bold, label=""];
39->21 [style = bold, label=""];
58->38 [style = bold, label=""];
59->38 [style = solid, label="task"];
60->61 [style = bold, label=""];
44->52 [style = solid, label="nextOffsets"];
8->2 [style = bold, label=""];
59->2 [style = solid, label="task"];
4->20 [style = bold, label=""];
24->64 [style = solid, label="desc6"];
27->11 [style = solid, label="desc3"];
27->24 [style = bold, label=""];
67->32 [style = bold, label=""];
33->19 [style = bold, label=""];
15->23 [style = dotted, label="true"];
49->59 [style = solid, label="baseSequenceName"];
41->52 [style = dashed, label="0"];
13->54 [style = dashed, label="0"];
32->10 [style = solid, label="currentOffsets"];
33->18 [style = dashed, label="0"];
46->55 [style = bold, label=""];
38->64 [style = solid, label="desc1"];
20->50 [style = bold, label=""];
68->60 [style = bold, label=""];
15->23 [style = bold, label=""];
32->31 [style = solid, label="currentOffsets"];
1->69 [style = dashed, label="0"];
67->62 [style = solid, label="currentOffsets"];
18->11 [style = dashed, label="0"];
35->6 [style = bold, label=""];
16->10 [style = bold, label=""];
65->64 [style = bold, label=""];
68->59 [style = solid, label="startPartitions"];
37->17 [style = bold, label=""];
65->63 [style = solid, label="desc7"];
61->59 [style = solid, label="endPartitions"];
44->40 [style = bold, label=""];
54->69 [style = bold, label=""];
62->10 [style = bold, label=""];
45->27 [style = solid, label="task"];
51->49 [style = bold, label=""];
64->46 [style = bold, label=""];
10->52 [style = bold, label=""];
48->0 [style = bold, label=""];
59->26 [style = solid, label="task"];
0->22 [style = dotted, label="true"];
18->63 [style = bold, label=""];
59->24 [style = solid, label="task"];
34->46 [style = solid, label="desc7"];
52->25 [style = bold, label=""];
24->46 [style = solid, label="desc4"];
0->22 [style = bold, label=""];
55->53 [style = bold, label=""];
36->61 [style = dashed, label="0"];
30->56 [style = bold, label=""];
41->25 [style = bold, label=""];
14->70 [style = dashed, label="0"];
16->17 [style = dashed, label="0"];
6->9 [style = bold, label=""];
39->10 [style = solid, label="startPartitions"];
44->41 [style = solid, label="nextOffsets"];
15->32 [style = bold, label=""];
28->45 [style = solid, label="endPartitions"];
2->11 [style = solid, label="desc4"];
24->65 [style = bold, label=""];
44->40 [style = solid, label="nextOffsets"];
43->27 [style = dashed, label="0"];
68->62 [style = solid, label="startPartitions"];
}
