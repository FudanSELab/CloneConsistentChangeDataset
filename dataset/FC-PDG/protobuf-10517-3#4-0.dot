digraph {
0 [style = filled, label = "assertTrue(CLASSNAME + \".copyTo(4 arg) must give the expected bytes\",stillEqual)@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "TEST_STRING.copyTo(destination,sourceOffset,destinationOffset,length)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "stringUnderTest.copyTo(destination,sourceOffset,destinationOffset,length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "testCopyTo_ByteArrayOffsetLength['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "++i@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCopyTo_ByteArrayOffsetLength['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "int length = 100@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "int sourceOffset = 213@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "byte(( destination = new byte((((@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testString.copyTo(destination,sourceOffset,destinationOffset,length)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "testCopyTo_ByteArrayOffsetLength['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "stillEqual && i < length@@@10@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertTrue(classUnderTest + \".copyTo(4 arg) must give the expected bytes\",stillEqual)@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "stillEqual = BYTES(i + sourceOffset( == destination(i + destinationOffset(@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "boolean stillEqual = true@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "stillEqual = referenceBytes(i + sourceOffset( == destination(i + destinationOffset(@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int destinationOffset = 50@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "int i = 0@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->17 [style = dotted, label="true"];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
17->10 [style = bold, label=""];
4->14 [style = solid, label="length"];
3->17 [style = dashed, label="0"];
1->8 [style = bold, label=""];
9->11 [style = bold, label=""];
8->3 [style = solid, label="i"];
11->14 [style = bold, label=""];
5->10 [style = dotted, label="true"];
17->15 [style = solid, label="stillEqual"];
11->6 [style = bold, label=""];
16->7 [style = bold, label=""];
9->17 [style = solid, label="destination"];
0->15 [style = dashed, label="0"];
5->15 [style = bold, label=""];
7->3 [style = solid, label="destinationOffset"];
1->5 [style = solid, label="stillEqual"];
11->12 [style = bold, label=""];
11->12 [style = solid, label="sourceOffset"];
7->4 [style = bold, label=""];
9->14 [style = solid, label="destination"];
5->3 [style = dotted, label="true"];
7->14 [style = solid, label="destinationOffset"];
7->12 [style = solid, label="destinationOffset"];
12->1 [style = bold, label=""];
5->17 [style = bold, label=""];
6->14 [style = dashed, label="0"];
14->1 [style = bold, label=""];
11->14 [style = solid, label="sourceOffset"];
3->5 [style = solid, label="stillEqual"];
6->12 [style = dashed, label="0"];
3->0 [style = solid, label="stillEqual"];
6->1 [style = bold, label=""];
3->10 [style = bold, label=""];
10->5 [style = bold, label=""];
8->5 [style = bold, label=""];
5->0 [style = bold, label=""];
17->5 [style = solid, label="stillEqual"];
13->7 [style = bold, label=""];
1->0 [style = solid, label="stillEqual"];
8->5 [style = solid, label="i"];
11->6 [style = solid, label="sourceOffset"];
1->15 [style = solid, label="stillEqual"];
4->12 [style = solid, label="length"];
9->6 [style = solid, label="destination"];
8->17 [style = solid, label="i"];
9->12 [style = solid, label="destination"];
7->17 [style = solid, label="destinationOffset"];
2->7 [style = bold, label=""];
9->3 [style = solid, label="destination"];
11->3 [style = solid, label="sourceOffset"];
4->6 [style = solid, label="length"];
4->5 [style = solid, label="length"];
11->17 [style = solid, label="sourceOffset"];
7->6 [style = solid, label="destinationOffset"];
}
