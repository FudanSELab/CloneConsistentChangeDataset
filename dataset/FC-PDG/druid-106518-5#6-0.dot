digraph {
1 [style = filled, label = "!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "GroupByQuery query = new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,\"marketalias\")).setInterval(QueryRunnerTestHelper.fullOnIntervalSpec).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"marketalias\",OrderByColumnSpec.Direction.DESCENDING)),2)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount).setContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).build()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"order-limit\")@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testRejectForceLimitPushDownWithHaving['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,\"marketalias\")).setInterval(QueryRunnerTestHelper.fullOnIntervalSpec).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"marketalias\",OrderByColumnSpec.Direction.DESCENDING)),2)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount).setContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).setHavingSpec(new GreaterThanHavingSpec(\"rows\",10)).build()@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "expectedException.expectMessage(\"Cannot force limit push down when a having spec is present.\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testGroupByLimitPushDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "GroupByQuery query = makeQueryBuilder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,\"marketalias\")).setInterval(QueryRunnerTestHelper.fullOnIntervalSpec).setLimitSpec(new DefaultLimitSpec(Collections.singletonList(new OrderByColumnSpec(\"marketalias\",OrderByColumnSpec.Direction.DESCENDING)),2)).setAggregatorSpecs(QueryRunnerTestHelper.rowsCount).overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,true)).build()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "return@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testGroupByLimitPushDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "expectedException.expect()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "List<Row> expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"marketalias\",\"upfront\",\"rows\",186L),GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\",\"marketalias\",\"total_market\",\"rows\",186L))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->3 [style = bold, label=""];
1->4 [style = bold, label=""];
7->0 [style = bold, label=""];
0->5 [style = solid, label="expectedResults"];
1->4 [style = dotted, label="true"];
4->2 [style = bold, label=""];
2->7 [style = dashed, label="0"];
11->9 [style = bold, label=""];
1->7 [style = bold, label=""];
4->7 [style = bold, label=""];
4->12 [style = dashed, label="0"];
7->3 [style = solid, label="query"];
8->1 [style = bold, label=""];
6->1 [style = bold, label=""];
3->5 [style = bold, label=""];
2->0 [style = bold, label=""];
12->10 [style = bold, label=""];
2->3 [style = solid, label="query"];
3->5 [style = solid, label="results"];
1->2 [style = bold, label=""];
9->12 [style = bold, label=""];
}
