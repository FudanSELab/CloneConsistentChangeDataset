digraph {
13 [style = filled, label = "LazyFieldLite field1 = LazyFieldLite.fromValue(message1)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "field2.getValue(TestAllTypes.getDefaultInstance())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "field1.getValue(TestAllTypes.getDefaultInstance())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "field1.merge(field2)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(expected,field1.getValue(TestAllTypes.getDefaultInstance()))@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestAllTypes message2 = TestAllTypes.newBuilder().setOptionalInt64(2).build()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "TestAllTypes message1 = TestAllTypes.newBuilder().setOptionalInt32(1).build()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "field1 = LazyFieldLite.fromValue(message1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(field1.getValue(TestAllTypes.getDefaultInstance())).isEqualTo(expected)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertEquals(expected,field1.getValue(TestAllTypes.getDefaultInstance()))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "TestAllTypes expected = TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalInt64(2).build()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testMergeBeforeParsing['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "LazyFieldLite field1 = createLazyFieldLiteFromMessage(message1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "TestAllTypes expected = TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalInt64(2).build()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(field1.getValue(TestAllTypes.getDefaultInstance())).isEqualTo(expected)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testMergeOneNotParsed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "field1.merge(field2)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "LazyFieldLite field2 = createLazyFieldLiteFromMessage(message2)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "field2 = createLazyFieldLiteFromMessage(message2)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testMergeOneNotParsed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
5->10 [style = bold, label=""];
4->17 [style = bold, label=""];
1->10 [style = solid, label="expected"];
11->16 [style = dashed, label="0"];
3->4 [style = solid, label="field2"];
0->12 [style = bold, label=""];
2->3 [style = bold, label=""];
18->12 [style = bold, label=""];
0->9 [style = solid, label="message1"];
12->6 [style = solid, label="message2"];
5->14 [style = bold, label=""];
0->18 [style = solid, label="message1"];
11->9 [style = bold, label=""];
12->1 [style = bold, label=""];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
1->16 [style = solid, label="expected"];
19->0 [style = bold, label=""];
9->6 [style = bold, label=""];
8->0 [style = bold, label=""];
6->5 [style = solid, label="field2"];
7->5 [style = bold, label=""];
1->11 [style = solid, label="expected"];
1->14 [style = solid, label="expected"];
15->0 [style = bold, label=""];
12->3 [style = solid, label="message2"];
0->18 [style = bold, label=""];
12->3 [style = bold, label=""];
6->7 [style = bold, label=""];
4->11 [style = bold, label=""];
10->14 [style = dashed, label="0"];
16->9 [style = bold, label=""];
4->16 [style = bold, label=""];
0->13 [style = solid, label="message1"];
13->2 [style = bold, label=""];
17->11 [style = bold, label=""];
17->11 [style = solid, label="expected"];
}
