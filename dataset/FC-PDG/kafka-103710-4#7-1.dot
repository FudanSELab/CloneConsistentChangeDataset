digraph {
9 [style = filled, label = "KafkaConsumer<String,String> consumer = new KafkaConsumer<String,String>(props,new StringDeserializer(),new StringDeserializer())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(1,MockConsumerInterceptor.INIT_COUNT.get())@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(1,MockConsumerInterceptor.CLOSE_COUNT.get())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertEquals(1,MockConsumerInterceptor.INIT_COUNT.get())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "producer.close()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG,.getName())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG,.getName())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(1,MockConsumerInterceptor.INIT_COUNT.get())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "testInterceptorConstructorClose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "testInterceptorConstructClose['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "consumer.close()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(1,MockConsumerInterceptor.INIT_COUNT.get())@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9999\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "{MockProducerInterceptor.resetCounters()}@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Assert.assertEquals(0,MockProducerInterceptor.CLOSE_COUNT.get())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(1,MockProducerInterceptor.CLOSE_COUNT.get())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(0,MockConsumerInterceptor.CLOSE_COUNT.get())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"localhost:9999\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(1,MockConsumerInterceptor.CLOSE_COUNT.get())@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "KafkaProducer<String,String> producer = new KafkaProducer<String,String>(props,new StringSerializer(),new StringSerializer())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testInterceptorConstructorClose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP,\"something\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "{MockConsumerInterceptor.resetCounters()}@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get())@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Assert.assertEquals(1,MockProducerInterceptor.INIT_COUNT.get())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(1,MockProducerInterceptor.INIT_COUNT.get())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertEquals(0,MockConsumerInterceptor.CLOSE_COUNT.get())@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "Properties props = new Properties()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22->25 [style = bold, label=""];
5->14 [style = dashed, label="0"];
4->17 [style = bold, label=""];
4->6 [style = bold, label=""];
2->1 [style = bold, label=""];
10->12 [style = dashed, label="0"];
18->19 [style = bold, label=""];
11->12 [style = bold, label=""];
6->17 [style = dashed, label="0"];
17->22 [style = bold, label=""];
9->8 [style = bold, label=""];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
21->18 [style = bold, label=""];
4->9 [style = solid, label="props"];
5->20 [style = dashed, label="0"];
8->13 [style = dashed, label="0"];
7->9 [style = bold, label=""];
24->16 [style = bold, label=""];
27->4 [style = bold, label=""];
5->2 [style = bold, label=""];
23->24 [style = bold, label=""];
20->23 [style = bold, label=""];
8->5 [style = bold, label=""];
1->24 [style = dashed, label="0"];
1->11 [style = dashed, label="0"];
16->21 [style = bold, label=""];
10->0 [style = bold, label=""];
25->26 [style = bold, label=""];
15->4 [style = bold, label=""];
14->2 [style = bold, label=""];
4->26 [style = solid, label="props"];
6->7 [style = bold, label=""];
1->10 [style = bold, label=""];
13->14 [style = bold, label=""];
7->22 [style = dashed, label="0"];
2->11 [style = bold, label=""];
26->20 [style = bold, label=""];
9->13 [style = bold, label=""];
}
