digraph {
50 [style = filled, label = "AnalyzeRequest request = new AnalyzeRequest()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "request.tokenizer(\"standard\")@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "request.analyzer(\"standard\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "tokens = analyze.getTokens()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "request.addCharFilter(\"append\")@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "AnalyzeAction.Request request = new AnalyzeAction.Request(\"index\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,randomBoolean()? indexAnalyzers: null,registry,environment,maxTokenCount)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "request = new AnalyzeRequest()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "AnalyzeResponse analyze = TransportAnalyzeAction.analyze(request,\"text\",null,null,registry,environment,maxTokenCount)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "request.tokenizer(\"standard\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "request = new AnalyzeRequest()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testNormalizerWithIndex['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "assertEquals(\"foxfoo\",tokens.get(3).getTerm())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "tokens = analyze.getTokens()@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "request.text(\"ABc\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "request.normalizer(\"my_normalizer\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertEquals(\"foxbar\",tokens.get(3).getTerm())@@@41@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertEquals(\"abc\",tokens.get(0).getTerm())@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "AnalyzeResponse analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "request.addCharFilter(\"append_foo\")@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertEquals(\"qu1ck\",tokens.get(0).getTerm())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "AnalyzeAction.Response analyze = TransportAnalyzeAction.analyze(request,\"text\",null,indexAnalyzers,registry,environment,maxTokenCount)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(4,tokens.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "request.addTokenFilter(\"mock\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(\"fox\",tokens.get(2).getTerm())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testNormalizerWithIndex['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "request = new AnalyzeRequest()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(\"qu1ck\",tokens.get(1).getTerm())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "request.text(\"the quick brown fox\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"brown\",tokens.get(1).getTerm())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertEquals(\"brown\",tokens.get(2).getTerm())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "request.tokenizer(\"standard\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(4,tokens.size())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,randomBoolean()? indexAnalyzers: null,registry,environment,maxTokenCount)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "List<AnalyzeAction.AnalyzeToken> tokens = analyze.getTokens()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "assertEquals(\"the\",tokens.get(0).getTerm())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertEquals(4,tokens.size())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(\"qu1ck\",tokens.get(1).getTerm())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<AnalyzeResponse.AnalyzeToken> tokens = analyze.getTokens()@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "AnalyzeRequest request = new AnalyzeRequest(\"index\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "request.text(\"the qu1ck brown fox\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "analyze = TransportAnalyzeAction.analyze(request,\"text\",null,randomBoolean()? indexAnalyzers: null,registry,environment,maxTokenCount)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertEquals(3,tokens.size())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "tokens = analyze.getTokens()@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertEquals(1,tokens.size())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "testNoIndexAnalyzers['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
46->44 [style = bold, label=""];
26->46 [style = bold, label=""];
27->18 [style = bold, label=""];
42->34 [style = bold, label=""];
28->37 [style = bold, label=""];
44->36 [style = bold, label=""];
2->20 [style = dashed, label="0"];
4->6 [style = bold, label=""];
19->31 [style = bold, label=""];
6->9 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
43->42 [style = bold, label=""];
21->41 [style = bold, label=""];
37->29 [style = bold, label=""];
7->48 [style = dashed, label="0"];
42->40 [style = solid, label="request"];
22->40 [style = bold, label=""];
49->23 [style = bold, label=""];
15->30 [style = bold, label=""];
50->16 [style = solid, label="request"];
30->49 [style = bold, label=""];
49->44 [style = solid, label="request"];
2->10 [style = bold, label=""];
16->25 [style = solid, label="analyze"];
14->43 [style = bold, label=""];
7->3 [style = bold, label=""];
0->10 [style = dashed, label="0"];
40->44 [style = solid, label="analyze"];
6->1 [style = bold, label=""];
25->24 [style = bold, label=""];
2->0 [style = bold, label=""];
17->12 [style = bold, label=""];
45->25 [style = bold, label=""];
20->16 [style = bold, label=""];
18->39 [style = bold, label=""];
35->50 [style = bold, label=""];
25->40 [style = solid, label="analyze"];
23->13 [style = bold, label=""];
13->26 [style = bold, label=""];
50->47 [style = bold, label=""];
40->27 [style = bold, label=""];
5->11 [style = dashed, label="0"];
6->50 [style = dashed, label="0"];
39->32 [style = bold, label=""];
47->20 [style = bold, label=""];
24->17 [style = bold, label=""];
12->14 [style = bold, label=""];
48->21 [style = bold, label=""];
8->9 [style = bold, label=""];
5->48 [style = bold, label=""];
16->5 [style = bold, label=""];
32->15 [style = bold, label=""];
5->7 [style = bold, label=""];
33->45 [style = bold, label=""];
6->0 [style = solid, label="request"];
9->10 [style = solid, label="request"];
1->2 [style = bold, label=""];
41->33 [style = bold, label=""];
34->38 [style = bold, label=""];
31->28 [style = bold, label=""];
9->1 [style = bold, label=""];
38->22 [style = bold, label=""];
1->47 [style = dashed, label="0"];
21->25 [style = solid, label="request"];
11->7 [style = bold, label=""];
36->19 [style = bold, label=""];
0->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
