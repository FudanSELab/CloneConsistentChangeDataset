digraph {
16 [style = filled, label = "tester.checkType(\"count(*)\",\"BIGINT NOT NULL\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "tester.checkAgg(\"COUNT(*)\",stringValues,3,0d)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "tester.checkType(\"count(1, 2, 'x', 'y')\",\"BIGINT NOT NULL\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tester.checkAgg(\"COUNT(DISTINCT x)\",values,2,0d)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "tester.checkAgg(\"COUNT(DISTINCT x)\",stringValues,2,0d)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "tester.checkAgg(\"COUNT(x)\",values,3,(double)0)@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "tester.checkType(\"approx_count_distinct(1.2)\",\"BIGINT NOT NULL\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testCountFunc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "tester.checkType(\"count(1, 2)\",\"BIGINT NOT NULL\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tester.checkAgg(\"COUNT(DISTINCT x)\",stringValues,2,(double)0)@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "tester.checkType(\"COUNT(DISTINCT 'x')\",\"BIGINT NOT NULL\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "tester.checkAgg(\"COUNT(x)\",stringValues,2,(double)0)@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "tester.checkFails(\"^APPROX_COUNT_DISTINCT()^\",\"Invalid number of arguments to function 'APPROX_COUNT_DISTINCT'. \" + \"Was expecting 1 arguments\",false)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\",stringValues,2,(double)0)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "tester.checkAgg(\"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",values,2,(double)0)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
34 [style = filled, label = "tester.checkType(\"approx_count_distinct(1, 2, 'x', 'y')\",\"BIGINT NOT NULL\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "tester.checkAgg(\"COUNT(DISTINCT x)\",values,2,(double)0)@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "tester.checkAgg(\"COUNT(DISTINCT 123)\",stringValues,1,0d)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "tester.checkType(\"count(1)\",\"BIGINT NOT NULL\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "tester.checkAgg(\"APPROX_COUNT_DISTINCT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",values,1,(double)0)@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "tester.checkAgg(\"COUNT(DISTINCT 123)\",stringValues,1,(double)0)@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "tester.checkAgg(\"COUNT(x)\",stringValues,2,0d)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "tester.setFor(SqlStdOperatorTable.COUNT,VM_EXPAND)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "tester.checkAgg(\"COUNT(x)\",values,3,0d)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\",stringValues,2,(double)0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "tester.checkAgg(\"APPROX_COUNT_DISTINCT(x)\",values,2,(double)0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT 123)\",stringValues,1,(double)0)@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testApproxCountDistinctFunc['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testCountFunc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "tester.checkAgg(\"APPROX_COUNT_DISTINCT(DISTINCT x)\",values,2,(double)0)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "tester.checkFails(\"^COUNT()^\",\"Invalid number of arguments to function 'COUNT'. Was expecting 1 arguments\",false)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "tester.checkAgg(\"COUNT(CASE x WHEN 0 THEN NULL ELSE -1 END)\",values,2,0d)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "final String(( values = {\"0\",\"CAST(null AS INTEGER)\",\"1\",\"0\"}@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tester.checkAgg(\"COUNT(*)\",stringValues,3,(double)0)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "tester.checkType(\"approx_count_distinct('name')\",\"BIGINT NOT NULL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final String(( stringValues = {\"'a'\",\"CAST(NULL AS VARCHAR(1))\",\"''\"}@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tester.checkType(\"count(1.2)\",\"BIGINT NOT NULL\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "tester.checkFails(\"approx_count_distinct(^*^)\",\"Unknown identifier '\*'\",false)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "tester.checkType(\"approx_count_distinct(1, 2)\",\"BIGINT NOT NULL\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "tester.checkType(\"APPROX_COUNT_DISTINCT(DISTINCT 'x')\",\"BIGINT NOT NULL\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "tester.checkType(\"approx_count_distinct(1)\",\"BIGINT NOT NULL\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "tester.checkType(\"count('name')\",\"BIGINT NOT NULL\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->39 [style = dashed, label="0"];
37->27 [style = bold, label=""];
7->30 [style = bold, label=""];
13->20 [style = dashed, label="0"];
5->18 [style = solid, label="stringValues"];
17->35 [style = dashed, label="0"];
5->17 [style = solid, label="stringValues"];
9->10 [style = bold, label=""];
29->34 [style = bold, label=""];
7->26 [style = bold, label=""];
7->3 [style = solid, label="values"];
23->22 [style = bold, label=""];
30->28 [style = bold, label=""];
7->28 [style = solid, label="values"];
2->36 [style = dashed, label="0"];
24->11 [style = bold, label=""];
11->33 [style = bold, label=""];
16->33 [style = dashed, label="0"];
2->22 [style = dashed, label="0"];
18->0 [style = bold, label=""];
11->16 [style = bold, label=""];
15->34 [style = dashed, label="0"];
5->23 [style = bold, label=""];
10->14 [style = bold, label=""];
38->11 [style = bold, label=""];
16->6 [style = bold, label=""];
31->5 [style = bold, label=""];
6->32 [style = dashed, label="0"];
2->18 [style = bold, label=""];
7->31 [style = solid, label="values"];
5->17 [style = bold, label=""];
5->40 [style = solid, label="stringValues"];
17->2 [style = bold, label=""];
13->31 [style = dashed, label="0"];
13->5 [style = bold, label=""];
17->23 [style = dashed, label="0"];
27->29 [style = bold, label=""];
39->37 [style = bold, label=""];
18->40 [style = dashed, label="0"];
5->2 [style = solid, label="stringValues"];
3->30 [style = dashed, label="0"];
36->40 [style = bold, label=""];
7->20 [style = solid, label="values"];
3->26 [style = dashed, label="0"];
22->19 [style = bold, label=""];
28->31 [style = bold, label=""];
7->12 [style = solid, label="values"];
3->12 [style = bold, label=""];
8->41 [style = dashed, label="0"];
7->13 [style = solid, label="values"];
7->26 [style = solid, label="values"];
12->13 [style = bold, label=""];
25->20 [style = bold, label=""];
5->19 [style = solid, label="stringValues"];
5->35 [style = solid, label="stringValues"];
33->32 [style = bold, label=""];
5->0 [style = solid, label="stringValues"];
32->41 [style = bold, label=""];
5->35 [style = bold, label=""];
5->23 [style = solid, label="stringValues"];
19->21 [style = bold, label=""];
5->22 [style = solid, label="stringValues"];
15->7 [style = bold, label=""];
1->15 [style = bold, label=""];
26->25 [style = bold, label=""];
1->29 [style = dashed, label="0"];
34->7 [style = bold, label=""];
5->21 [style = solid, label="stringValues"];
7->25 [style = solid, label="values"];
18->19 [style = dashed, label="0"];
14->27 [style = dashed, label="0"];
7->3 [style = bold, label=""];
14->1 [style = bold, label=""];
20->5 [style = bold, label=""];
12->25 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
12->28 [style = dashed, label="0"];
6->8 [style = bold, label=""];
8->9 [style = bold, label=""];
10->37 [style = dashed, label="0"];
7->30 [style = solid, label="values"];
35->36 [style = bold, label=""];
41->39 [style = bold, label=""];
4->11 [style = bold, label=""];
5->36 [style = solid, label="stringValues"];
}
