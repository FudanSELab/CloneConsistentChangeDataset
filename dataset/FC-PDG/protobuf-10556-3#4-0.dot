digraph {
4 [style = filled, label = "Proto2Message actual = Proto2Message.parseFrom(actualBytes)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Proto2Message result = ExperimentalSerializationUtil.fromByteArray(expectedBytes,)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(expectedBytes.length,actualBytes.length)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Proto2Message actual = Proto2Message.parseFrom(actualBytes)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Proto2Message result = fromByteArray(expectedBytes,)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "byte(( actualBytes = ExperimentalSerializationUtil.toByteArray(result)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Proto2Message expected = new Proto2MessageFactory(5,10,2,2).newMessage()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result).isEqualTo(expected)@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(expected,result)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "proto2Roundtrip['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "proto2Roundtrip['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(expected,actual)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(actual).isEqualTo(expected)@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "byte(( expectedBytes = expected.toByteArray()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "proto2Roundtrip['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "byte(( actualBytes = toByteArray(result,expectedBytes.length)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6->8 [style = solid, label="expected"];
3->11 [style = bold, label=""];
6->0 [style = solid, label="expected"];
2->4 [style = bold, label=""];
14->3 [style = bold, label=""];
10->6 [style = bold, label=""];
12->14 [style = bold, label=""];
7->15 [style = solid, label="expectedBytes"];
12->3 [style = solid, label="actualBytes"];
13->6 [style = bold, label=""];
9->2 [style = bold, label=""];
4->8 [style = bold, label=""];
6->9 [style = solid, label="expected"];
5->9 [style = bold, label=""];
1->6 [style = bold, label=""];
6->3 [style = solid, label="expected"];
4->3 [style = solid, label="actual"];
5->0 [style = solid, label="result"];
5->2 [style = solid, label="result"];
5->0 [style = bold, label=""];
15->0 [style = bold, label=""];
3->11 [style = solid, label="actual"];
0->12 [style = bold, label=""];
7->5 [style = solid, label="expectedBytes"];
15->12 [style = solid, label="result"];
0->9 [style = dashed, label="0"];
15->0 [style = solid, label="result"];
7->5 [style = bold, label=""];
7->15 [style = bold, label=""];
2->4 [style = solid, label="actualBytes"];
0->2 [style = bold, label=""];
6->7 [style = bold, label=""];
3->8 [style = dashed, label="0"];
4->3 [style = bold, label=""];
5->15 [style = dashed, label="0"];
2->12 [style = dashed, label="0"];
6->11 [style = solid, label="expected"];
}
