digraph {
1 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "long initialVersion = randomLongBetween(1,10)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "FutureUtils.get(futNode1)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "SimpleFuture futNode0 = joinNodeAsync(new JoinRequest(node0,Optional.of(new Join(node0,node0,newTerm,initialTerm,initialVersion))))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "DiscoveryNode node2 = newNode(2,true)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "long newTerm = initialTerm + randomLongBetween(1,10)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "DiscoveryNode node1 = newNode(1,true)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(isLocalNodeElectedMaster())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testJoinAccumulation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node0.getId()))))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "SimpleFuture futNode1 = joinNodeAsync(new JoinRequest(node1,Optional.of(new Join(node1,node0,newTerm,initialTerm,initialVersion))))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testJoinFollowerFails['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "handleFollowerCheckFrom(node1,newTerm)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(isLocalNodeElectedMaster())@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "DiscoveryNode node0 = newNode(0,true)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertFalse(futNode1.isDone())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertFalse(futNode0.isDone())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "deterministicTaskQueue.runAllRunnableTasks()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "setupFakeMasterServiceAndCoordinator(initialTerm,initialState(node0,initialTerm,initialVersion,new VotingConfiguration(Collections.singleton(node2.getId()))))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "FutureUtils.get(futNode0)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "joinNodeAndRun(new JoinRequest(node2,Optional.of(new Join(node2,node0,newTerm,initialTerm,initialVersion))))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertTrue(clusterStateHasNode(node2))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertTrue(clusterStateHasNode(node1))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "testJoinFollowerFails['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "long initialTerm = randomLongBetween(1,10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(expectThrows(,null).getMessage(),containsString(\"join target is a follower\"))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2->23 [style = dashed, label="0"];
0->3 [style = bold, label=""];
10->23 [style = solid, label="initialTerm"];
5->10 [style = bold, label=""];
7->2 [style = solid, label="node0"];
6->0 [style = solid, label="newTerm"];
6->3 [style = solid, label="newTerm"];
22->24 [style = solid, label="node2"];
8->23 [style = solid, label="initialVersion"];
24->19 [style = bold, label=""];
8->23 [style = bold, label=""];
3->1 [style = bold, label=""];
0->13 [style = bold, label=""];
7->18 [style = solid, label="node0"];
0->24 [style = solid, label="newTerm"];
2->6 [style = bold, label=""];
19->29 [style = bold, label=""];
5->18 [style = solid, label="node1"];
21->15 [style = bold, label=""];
27->30 [style = bold, label=""];
18->26 [style = bold, label=""];
0->18 [style = solid, label="newTerm"];
25->18 [style = bold, label=""];
3->11 [style = bold, label=""];
22->27 [style = solid, label="node2"];
10->24 [style = solid, label="initialTerm"];
6->0 [style = bold, label=""];
10->0 [style = solid, label="initialTerm"];
8->18 [style = solid, label="initialVersion"];
11->9 [style = bold, label=""];
20->25 [style = bold, label=""];
12->7 [style = bold, label=""];
4->7 [style = bold, label=""];
1->9 [style = bold, label=""];
5->3 [style = solid, label="node1"];
26->21 [style = bold, label=""];
23->28 [style = bold, label=""];
17->7 [style = bold, label=""];
28->0 [style = bold, label=""];
5->0 [style = solid, label="node1"];
29->27 [style = bold, label=""];
7->13 [style = solid, label="node0"];
7->24 [style = solid, label="node0"];
7->5 [style = bold, label=""];
0->13 [style = solid, label="newTerm"];
10->8 [style = bold, label=""];
8->2 [style = bold, label=""];
5->29 [style = solid, label="node1"];
10->6 [style = solid, label="initialTerm"];
1->11 [style = dashed, label="0"];
8->24 [style = solid, label="initialVersion"];
15->24 [style = bold, label=""];
0->13 [style = dashed, label="0"];
22->10 [style = bold, label=""];
8->13 [style = solid, label="initialVersion"];
7->23 [style = solid, label="node0"];
10->13 [style = solid, label="initialTerm"];
8->2 [style = solid, label="initialVersion"];
30->16 [style = bold, label=""];
13->30 [style = solid, label="futNode0"];
5->22 [style = bold, label=""];
13->14 [style = bold, label=""];
14->20 [style = bold, label=""];
10->2 [style = solid, label="initialTerm"];
18->16 [style = solid, label="futNode1"];
10->18 [style = solid, label="initialTerm"];
}
