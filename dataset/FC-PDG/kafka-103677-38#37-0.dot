digraph {
19 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records = fetchRecords(builder.build(),Errors.NONE,100L,100 * i).get(tp1)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "final long offset = 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-avg\",metricGroup,\"\"))@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
29 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-max\",METRIC_GROUP,\"\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "v++@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "v < 3@@@10@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "builder.appendWithOffset(i * 3 + v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "builder.appendWithOffset((long)i * 3 + v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),String.format(\"value-%d\",v).getBytes())@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "i++@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "v++@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertEquals(3,records.size())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "i < 4@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(300,maxMetric.value(),EPS)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "sender.run(time.milliseconds())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-max\",metricGroup,\"\"))@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "List<ConsumerRecord<byte((,byte((>> records = fetchRecords(builder.build(),Errors.NONE,100L,100 * i).get(tp)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "testQuotaMetrics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "int v = 0@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "subscriptions.assignFromUser(singleton(tp1))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "assertEquals(300,maxMetric.value(),EPSILON)@@@19@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "int i = 1@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "accumulator.append(tp0,0L,\"key\".getBytes(),\"value\".getBytes(),null,MAX_BLOCK_TIMEOUT)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertEquals(200,avgMetric.value(),EPS)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "subscriptions.seek(tp,0)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "client.respond(produceResponse(tp0,offset,Errors.NONE,100 * i))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"produce-throttle-time-avg\",METRIC_GROUP,\"\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "sender.run(time.milliseconds())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "subscriptions.assignFromUser(singleton(tp))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "KafkaMetric maxMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-max\",metricGroup))@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "i <= 3@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(200,avgMetric.value(),EPSILON)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "KafkaMetric avgMetric = allMetrics.get(metrics.metricName(\"fetch-throttle-time-avg\",metricGroup))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testQuotaMetrics['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "subscriptions.seek(tp1,0)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "testQuotaMetrics['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
14->3 [style = bold, label=""];
35->34 [style = solid, label="i"];
27->32 [style = bold, label=""];
2->19 [style = dashed, label="0"];
14->25 [style = dashed, label="0"];
1->5 [style = solid, label="i"];
8->16 [style = dotted, label="true"];
4->7 [style = dotted, label="true"];
30->36 [style = bold, label=""];
32->34 [style = bold, label=""];
7->8 [style = bold, label=""];
9->16 [style = bold, label=""];
1->34 [style = dotted, label="true"];
29->6 [style = bold, label=""];
7->9 [style = solid, label="v"];
35->27 [style = solid, label="i"];
23->8 [style = solid, label="v"];
1->31 [style = bold, label=""];
1->27 [style = dotted, label="true"];
5->9 [style = solid, label="i"];
1->4 [style = bold, label=""];
34->1 [style = solid, label="i"];
5->33 [style = bold, label=""];
8->18 [style = bold, label=""];
16->9 [style = solid, label="v"];
11->22 [style = dashed, label="0"];
8->23 [style = dotted, label="true"];
23->8 [style = bold, label=""];
33->27 [style = bold, label=""];
1->32 [style = dotted, label="true"];
1->18 [style = solid, label="i"];
4->13 [style = dotted, label="true"];
1->33 [style = dotted, label="true"];
21->22 [style = bold, label=""];
15->26 [style = dashed, label="0"];
8->18 [style = dotted, label="true"];
31->28 [style = bold, label=""];
36->35 [style = bold, label=""];
4->2 [style = dotted, label="true"];
28->29 [style = bold, label=""];
4->5 [style = dotted, label="true"];
4->1 [style = dashed, label="0"];
6->26 [style = bold, label=""];
18->23 [style = bold, label=""];
16->8 [style = bold, label=""];
14->28 [style = dashed, label="0"];
4->10 [style = dotted, label="true"];
1->9 [style = solid, label="i"];
4->13 [style = bold, label=""];
19->10 [style = bold, label=""];
3->12 [style = bold, label=""];
1->4 [style = solid, label="i"];
2->10 [style = bold, label=""];
25->20 [style = bold, label=""];
12->6 [style = dashed, label="0"];
10->5 [style = bold, label=""];
35->1 [style = bold, label=""];
8->2 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
5->18 [style = solid, label="i"];
7->16 [style = solid, label="v"];
8->9 [style = dotted, label="true"];
24->1 [style = bold, label=""];
4->19 [style = dotted, label="true"];
3->29 [style = dashed, label="0"];
16->8 [style = solid, label="v"];
7->8 [style = solid, label="v"];
34->27 [style = solid, label="i"];
4->6 [style = bold, label=""];
8->19 [style = bold, label=""];
34->1 [style = bold, label=""];
5->4 [style = solid, label="i"];
12->15 [style = bold, label=""];
4->8 [style = dotted, label="true"];
16->23 [style = dashed, label="0"];
6->14 [style = bold, label=""];
11->0 [style = bold, label=""];
36->27 [style = solid, label="offset"];
23->18 [style = solid, label="v"];
13->7 [style = bold, label=""];
3->20 [style = dashed, label="0"];
20->12 [style = bold, label=""];
8->9 [style = bold, label=""];
0->24 [style = dashed, label="0"];
22->24 [style = bold, label=""];
7->23 [style = solid, label="v"];
35->1 [style = solid, label="i"];
1->5 [style = dotted, label="true"];
6->25 [style = bold, label=""];
7->18 [style = solid, label="v"];
17->11 [style = bold, label=""];
}
