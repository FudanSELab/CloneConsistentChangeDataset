digraph {
2 [style = filled, label = "Region region = find(regions,\"customers2\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "assertThat(regions).hasSize(2)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "listGroup2['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "filter.setGroup(\"group2\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(regions).hasSize(3)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "List<Region> regions = client.list(filter).getConfigResult()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "listGroup1['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group1\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "region = find(regions,\"customers3\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "listGroup2['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Region region = find(regions,\"customers1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "region = find(regions,REGION_IN_MULTIPLE_GROUPS)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group2\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(region.getGroup()).isEqualTo(\"group2\")@@@9@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Region region = find(regions,REGION_WITH_MULTIPLE_TYPES)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "region = find(regions,\"customers3\")@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "filter.setGroup(\"group1\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "region = find(regions,\"customers2\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
1->10 [style = solid, label="regions"];
0->9 [style = bold, label=""];
19->18 [style = bold, label=""];
15->13 [style = bold, label=""];
1->2 [style = solid, label="regions"];
3->1 [style = bold, label=""];
4->17 [style = dashed, label="0"];
0->6 [style = bold, label=""];
7->10 [style = bold, label=""];
9->4 [style = bold, label=""];
8->3 [style = bold, label=""];
6->9 [style = dashed, label="0"];
0->16 [style = dashed, label="0"];
1->9 [style = solid, label="regions"];
11->12 [style = bold, label=""];
1->14 [style = solid, label="regions"];
12->1 [style = bold, label=""];
1->7 [style = bold, label=""];
2->10 [style = dashed, label="0"];
1->18 [style = solid, label="regions"];
6->4 [style = bold, label=""];
13->17 [style = bold, label=""];
2->0 [style = bold, label=""];
3->12 [style = dashed, label="0"];
7->19 [style = dashed, label="0"];
7->2 [style = bold, label=""];
1->6 [style = solid, label="regions"];
10->0 [style = bold, label=""];
2->18 [style = dashed, label="0"];
16->14 [style = bold, label=""];
1->13 [style = solid, label="regions"];
14->15 [style = bold, label=""];
1->19 [style = bold, label=""];
18->16 [style = bold, label=""];
}
