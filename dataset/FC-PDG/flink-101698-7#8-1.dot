digraph {
6 [style = filled, label = "assertEquals(getTestJarPath(),options.getJarFilePath())@@@13@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PackagedProgram prog = frontend.buildProgram(programOptions,executionOptions)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testValidVariantWithNoJarAndNoArgumentsOption['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testVariantWithExplicitJarAndNoArgumentsOption['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String(( arguments = {\"--classpath\",\"file:///tmp/foo\",\"--classpath\",\"file:///tmp/bar\",getTestJarPath(),\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertArrayEquals(reducedArguments,prog.getArguments())@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "ProgramOptions programOptions = new ProgramOptions(commandLine)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "testVariantWithExplicitJarAndNoArgumentsOption['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertArrayEquals(classpath,executionOptions.getClasspaths().toArray())@@@16@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "CommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS,arguments,true)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "ExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
21 [style = filled, label = "String(( reducedArguments = {\"--debug\",\"true\",\"arg1\",\"arg2\"}@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertArrayEquals(classpath,options.getClasspaths().toArray())@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "PackagedProgram prog = frontend.buildProgram(options)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(TEST_JAR_MAIN_CLASS,prog.getMainClassName())@@@20@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(TEST_JAR_MAIN_CLASS,prog.getMainClassName())@@@18@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertArrayEquals(reducedArguments,options.getProgramArgs())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertArrayEquals(reducedArguments,programOptions.getProgramArgs())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "String(( reducedArguments = new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b1c435@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "RunOptions options = CliFrontendParser.parseRunCommand(arguments)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertArrayEquals(reducedArguments,prog.getArguments())@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "URL(( classpath = new URL((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1b1c49f@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(getTestJarPath(),executionOptions.getJarFilePath())@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2->17 [style = bold, label=""];
5->3 [style = bold, label=""];
11->20 [style = bold, label=""];
16->18 [style = bold, label=""];
7->1 [style = bold, label=""];
9->0 [style = bold, label=""];
15->7 [style = bold, label=""];
2->18 [style = solid, label="reducedArguments"];
21->8 [style = bold, label=""];
2->12 [style = solid, label="reducedArguments"];
17->13 [style = solid, label="commandLine"];
19->11 [style = bold, label=""];
8->6 [style = bold, label=""];
7->8 [style = solid, label="arguments"];
12->16 [style = bold, label=""];
19->16 [style = solid, label="executionOptions"];
21->0 [style = solid, label="reducedArguments"];
10->7 [style = bold, label=""];
22->7 [style = bold, label=""];
3->9 [style = bold, label=""];
6->5 [style = bold, label=""];
13->19 [style = bold, label=""];
2->0 [style = solid, label="reducedArguments"];
8->9 [style = solid, label="options"];
2->21 [style = dashed, label="0"];
0->4 [style = bold, label=""];
21->3 [style = solid, label="reducedArguments"];
1->21 [style = bold, label=""];
13->16 [style = solid, label="programOptions"];
20->12 [style = bold, label=""];
7->17 [style = solid, label="arguments"];
2->3 [style = solid, label="reducedArguments"];
8->17 [style = dashed, label="0"];
13->19 [style = solid, label="programOptions"];
1->2 [style = bold, label=""];
17->13 [style = bold, label=""];
1->5 [style = solid, label="classpath"];
1->20 [style = solid, label="classpath"];
18->14 [style = bold, label=""];
2->8 [style = bold, label=""];
}
