digraph {
20 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),new RetryOneTime(1))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(item.str,Integer.toString(i++))@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "queue.getPutListenerContainer().addListener(listener)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertTrue(++iteration < 10)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "DistributedQueue<TestQueueItem> queue = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int iteration = 0@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "queue = QueueBuilder.builder(client,consumer,serializer,QUEUE_PATH).buildQueue()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(++iteration < 10)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "testSimple['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final AtomicInteger listenerCalls = new AtomicInteger(0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testPutListener['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "consumer.size() < itemQty@@@15@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final int itemQty = 10@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "QueuePutListener<TestQueueItem> listener = new QueuePutListener<TestQueueItem>(){@Override public void putCompleted(TestQueueItem item){listenerCalls.incrementAndGet()}@Override public void putMultiCompleted(MultiItem<TestQueueItem> items){}}@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(listenerCalls.get(),itemQty)@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "testPutListener['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "BlockingQueueConsumer<TestQueueItem> consumer = new BlockingQueueConsumer<TestQueueItem>(Mockito.mock())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(listenerCalls.get(),itemQty)@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "client.start()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "queue.start()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "service.submit(producer)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Thread.sleep(1000)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "{CloseableUtils.closeQuietly(queue)CloseableUtils.closeQuietly(client)}@@@24@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertEquals(item.str,Integer.toString(i++))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "ExecutorService service = Executors.newCachedThreadPool()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "QueueTestProducer producer = new QueueTestProducer(queue,itemQty,0)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
13->25 [style = bold, label=""];
11->20 [style = bold, label=""];
21->10 [style = bold, label=""];
13->18 [style = dotted, label="true"];
20->19 [style = solid, label="client"];
12->5 [style = bold, label=""];
3->1 [style = bold, label=""];
16->8 [style = bold, label=""];
26->10 [style = bold, label=""];
12->3 [style = solid, label="queue"];
13->25 [style = dotted, label="true"];
16->24 [style = dashed, label="0"];
0->17 [style = bold, label=""];
8->19 [style = bold, label=""];
10->13 [style = solid, label="itemQty"];
4->13 [style = bold, label=""];
25->4 [style = bold, label=""];
6->24 [style = bold, label=""];
10->23 [style = solid, label="itemQty"];
16->19 [style = bold, label=""];
24->23 [style = bold, label=""];
6->24 [style = solid, label="i"];
1->7 [style = bold, label=""];
10->3 [style = solid, label="itemQty"];
3->0 [style = bold, label=""];
20->2 [style = bold, label=""];
7->9 [style = bold, label=""];
18->25 [style = dashed, label="0"];
6->16 [style = solid, label="i"];
18->4 [style = bold, label=""];
12->19 [style = solid, label="queue"];
15->1 [style = bold, label=""];
6->16 [style = bold, label=""];
23->19 [style = bold, label=""];
14->12 [style = bold, label=""];
2->14 [style = bold, label=""];
17->15 [style = bold, label=""];
22->10 [style = bold, label=""];
10->8 [style = solid, label="itemQty"];
13->6 [style = bold, label=""];
17->15 [style = solid, label="listener"];
3->7 [style = solid, label="producer"];
13->4 [style = dotted, label="true"];
13->18 [style = bold, label=""];
8->23 [style = dashed, label="0"];
9->13 [style = bold, label=""];
10->11 [style = bold, label=""];
}
