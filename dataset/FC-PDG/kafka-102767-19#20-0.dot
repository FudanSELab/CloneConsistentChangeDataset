digraph {
11 [style = filled, label = "final KafkaStreams streams = new KafkaStreams(builder.build(),streamsProp)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(retention,Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "streams.start()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertEquals(LogConfig.Delete(),repartitionProps.getProperty(LogConfig.CleanupPolicyProp()))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "final String appID = APP_ID + \"-compact-delete\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertTrue(policies.contains(LogConfig.Delete()))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "shouldCompactTopicsForKeyValueStoreChangelogs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "produceData(Arrays.asList(\"hello\",\"world\",\"world\",\"hello world\"))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(3,repartitionProps.size())@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "waitForCompletion(streams,2,30000)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "textLines.flatMapValues(null).groupBy(MockMapper.selectValueMapper()).count(Materialized.as(\"Counts\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "shouldCompactTopicsForKeyValueStoreChangelogs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\")@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertEquals(2,policies.size())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final long retention = TimeUnit.MILLISECONDS.convert(1,TimeUnit.DAYS) + durationMs@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID,\"CountWindows\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final KafkaStreams streams = new KafkaStreams(builder.build(),streamsProp)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final String appID = APP_ID + \"-compact\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(policies.contains(LogConfig.Compact()))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertEquals(LogConfig.Delete(),repartitionProps.getProperty(LogConfig.CleanupPolicyProp()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "textLines.flatMapValues(null).groupBy(MockMapper.selectValueMapper()).windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L))).count(Materialized.as(\"CountWindows\").withRetention(ofSeconds(2L)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "streams.close()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(5,repartitionProps.size())@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final int durationMs = 2000@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final KStream<String,String> textLines = builder.stream(DEFAULT_INPUT_TOPIC)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(5,repartitionProps.size())@@@17@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "shouldCompactAndDeleteTopicsForWindowStoreChangelogs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(LogConfig.Compact(),changelogProps.getProperty(LogConfig.CleanupPolicyProp()))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG,appID)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31->27 [style = solid, label="retention"];
15->10 [style = bold, label=""];
3->15 [style = solid, label="appID"];
9->0 [style = bold, label=""];
14->5 [style = solid, label="streams"];
3->4 [style = solid, label="appID"];
11->14 [style = bold, label=""];
25->23 [style = bold, label=""];
7->16 [style = dashed, label="0"];
2->3 [style = bold, label=""];
15->24 [style = dashed, label="0"];
0->11 [style = bold, label=""];
5->15 [style = bold, label=""];
12->6 [style = bold, label=""];
24->18 [style = bold, label=""];
3->4 [style = bold, label=""];
20->25 [style = bold, label=""];
18->28 [style = bold, label=""];
22->30 [style = bold, label=""];
1->9 [style = bold, label=""];
10->18 [style = dashed, label="0"];
26->21 [style = bold, label=""];
3->19 [style = dashed, label="0"];
9->26 [style = bold, label=""];
19->4 [style = solid, label="appID"];
29->19 [style = bold, label=""];
31->27 [style = bold, label=""];
26->31 [style = solid, label="durationMs"];
10->12 [style = bold, label=""];
6->16 [style = bold, label=""];
30->31 [style = bold, label=""];
15->24 [style = bold, label=""];
19->20 [style = solid, label="appID"];
13->5 [style = bold, label=""];
11->13 [style = solid, label="streams"];
17->3 [style = bold, label=""];
4->1 [style = bold, label=""];
14->8 [style = bold, label=""];
19->4 [style = bold, label=""];
3->12 [style = solid, label="appID"];
6->7 [style = bold, label=""];
19->24 [style = solid, label="appID"];
27->20 [style = bold, label=""];
28->22 [style = bold, label=""];
8->13 [style = bold, label=""];
21->14 [style = bold, label=""];
}
