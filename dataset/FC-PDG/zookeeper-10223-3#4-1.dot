digraph {
20 [style = filled, label = "secureClientSocket = connectWithSSL()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "!handshakeCompleted@@@17@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,2,DATA_FROM_CLIENT.length - 2)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "handshakeCompletedLock@@@16@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "int bytesRead = secureClientSocket.getInputStream().read(buf,0,buf.length)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertEquals(buf.length,bytesRead)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "Socket secureClientSocket = null@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,false,DATA_TO_CLIENT)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "socket.getOutputStream().flush()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testConnectWithoutSSLToNonStrictServerPartialWrite['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "secureClientSocket.getOutputStream().flush()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertArrayEquals(DATA_TO_CLIENT,buf)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "Thread.sleep(TIMEOUT / 2)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "handshakeCompletedLock.wait(TIMEOUT)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "{forceClose(socket)serverThread.shutdown(TIMEOUT)}@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "socket.getOutputStream().write(DATA_FROM_CLIENT,0,2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "forceClose(badClientSocket)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Assert.assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "{forceClose(secureClientSocket)serverThread.shutdown(TIMEOUT)}@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(buf.length,bytesRead)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "socket.getOutputStream().flush()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "serverThread.start()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "byte(( buf = new byte((((@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertArrayEquals(DATA_FROM_CLIENT,serverThread.getDataFromClient(0))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "Assert.assertTrue(handshakeCompleted)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Socket badClientSocket = connectWithoutSSL()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "secureClientSocket.getOutputStream().write(DATA_FROM_CLIENT)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "UnifiedServerThread serverThread = new UnifiedServerThread(x509Util,localServerAddress,true,DATA_TO_CLIENT)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "testTLSDetectionNonBlockingStrictServerDisconnectedClient['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "serverThread.start()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->11 [style = solid, label="buf"];
13->10 [style = bold, label=""];
11->28 [style = bold, label=""];
34->29 [style = bold, label=""];
4->6 [style = solid, label="buf"];
23->20 [style = bold, label=""];
19->18 [style = bold, label=""];
28->6 [style = bold, label=""];
22->33 [style = bold, label=""];
30->13 [style = bold, label=""];
11->1 [style = bold, label=""];
11->19 [style = solid, label="bytesRead"];
27->34 [style = dotted, label="true"];
13->12 [style = solid, label="socket"];
17->9 [style = bold, label=""];
11->1 [style = solid, label="bytesRead"];
1->19 [style = dashed, label="0"];
18->15 [style = bold, label=""];
31->29 [style = bold, label=""];
34->31 [style = bold, label=""];
0->26 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
2->9 [style = bold, label=""];
16->17 [style = bold, label=""];
11->19 [style = bold, label=""];
2->17 [style = dashed, label="0"];
20->25 [style = bold, label=""];
10->7 [style = bold, label=""];
14->15 [style = dashed, label="0"];
26->11 [style = bold, label=""];
7->3 [style = bold, label=""];
11->14 [style = solid, label="buf"];
6->18 [style = dashed, label="0"];
6->14 [style = bold, label=""];
11->28 [style = dashed, label="0"];
3->5 [style = bold, label=""];
34->31 [style = dotted, label="true"];
1->6 [style = bold, label=""];
27->34 [style = bold, label=""];
5->0 [style = bold, label=""];
8->2 [style = bold, label=""];
11->28 [style = solid, label="buf"];
0->4 [style = bold, label=""];
27->29 [style = dotted, label="true"];
29->32 [style = bold, label=""];
14->12 [style = bold, label=""];
25->26 [style = bold, label=""];
33->30 [style = bold, label=""];
15->12 [style = bold, label=""];
28->6 [style = solid, label="bytesRead"];
14->27 [style = bold, label=""];
4->18 [style = solid, label="buf"];
4->11 [style = bold, label=""];
13->21 [style = bold, label=""];
21->23 [style = solid, label="badClientSocket"];
32->24 [style = bold, label=""];
20->24 [style = solid, label="secureClientSocket"];
9->13 [style = bold, label=""];
21->23 [style = bold, label=""];
}
