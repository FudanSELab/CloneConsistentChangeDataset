digraph {
4 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "JavaDStream<Tuple2<String,Integer>> stream = JavaTestUtils.attachTestInputStream(ssc,inputData,1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "JavaPairDStream<String,Integer> combined = pairStream.combineByKey(null,new IntegerSum(),new IntegerSum(),new HashPartitioner(2))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testCombineByKey['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "JavaPairDStream<String,Integer> combined = pairStream.combineByKey(null,null,null,new HashPartitioner(2))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Assert.assertEquals(expected,result)@@@10@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "JavaPairDStream<String,Integer> pairStream = JavaPairDStream.fromJavaDStream(stream)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Assert.assertEquals(expected,result)@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "JavaPairDStream<String,Integer> combined = pairStream.combineByKey(new Function<Integer,Integer>(){@Override public Integer call(Integer i){return i}},new IntegerSum(),new IntegerSum(),new HashPartitioner(2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "List<List<Tuple2<String,Integer>>> result = JavaTestUtils.runStreams(ssc,2,2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "JavaTestUtils.attachTestOutputStream(combined)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "JavaTestUtils.attachTestOutputStream(combined)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "List<List<Tuple2<String,Integer>>> expected = Arrays.asList(Arrays.asList(new Tuple2<>(\"california\",4),new Tuple2<>(\"new york\",5)),Arrays.asList(new Tuple2<>(\"california\",10),new Tuple2<>(\"new york\",4)))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "JavaTestUtils.attachTestOutputStream(combined)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testCombineByKey['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(expected,result)@@@10@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testCombineByKey['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "List<List<Tuple2<String,Integer>>> inputData = stringIntKVStream@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->16 [style = bold, label=""];
5->8 [style = bold, label=""];
15->14 [style = bold, label=""];
4->6 [style = bold, label=""];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
14->16 [style = solid, label="result"];
8->16 [style = solid, label="expected"];
7->4 [style = bold, label=""];
11->9 [style = bold, label=""];
2->17 [style = dashed, label="0"];
8->6 [style = solid, label="expected"];
13->12 [style = solid, label="combined"];
5->1 [style = solid, label="inputData"];
8->1 [style = bold, label=""];
13->12 [style = bold, label=""];
2->7 [style = solid, label="combined"];
10->5 [style = bold, label=""];
3->2 [style = bold, label=""];
1->3 [style = solid, label="stream"];
2->13 [style = dashed, label="0"];
18->5 [style = bold, label=""];
11->9 [style = solid, label="result"];
17->15 [style = bold, label=""];
3->13 [style = bold, label=""];
3->17 [style = bold, label=""];
4->6 [style = solid, label="result"];
17->15 [style = solid, label="combined"];
2->7 [style = bold, label=""];
0->5 [style = bold, label=""];
8->9 [style = solid, label="expected"];
}
