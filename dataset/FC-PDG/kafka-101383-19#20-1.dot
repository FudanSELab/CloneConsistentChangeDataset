digraph {
25 [style = filled, label = "driver.advanceWallClockTime(2)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final TransformerSupplier<Number,Number,KeyValue<Integer,Integer>> transformerSupplier = null@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "driver.advanceWallClockTime(1)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final KeyValueTimestamp(( expected = {new KeyValueTimestamp<>(2,10,0),new KeyValueTimestamp<>(20,110,5),new KeyValueTimestamp<>(200,1110,50),new KeyValueTimestamp<>(2000,11110,500),new KeyValueTimestamp<>(-1,2,2),new KeyValueTimestamp<>(-1,3,3)}@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i < expected.length@@@35@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final KeyValueTimestamp(( expected = {new KeyValueTimestamp<>(2,10,0),new KeyValueTimestamp<>(20,110,0),new KeyValueTimestamp<>(200,1110,0),new KeyValueTimestamp<>(2000,11110,0),new KeyValueTimestamp<>(-1,2,2),new KeyValueTimestamp<>(-1,3,3)}@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "driver.pipeInput(recordFactory.create(TOPIC_NAME,expectedKey,expectedKey * 10,0L))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "driver.advanceWallClockTime(Duration.ofMillis(1))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "stream.transform(transformerSupplier).process(processor)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(expected(i(,processor.theCapturedProcessor().processed.get(i))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final StreamsBuilder builder = new StreamsBuilder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testTransformWithNewDriverAndPunctuator['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "inputTopic.pipeInput(expectedKey,expectedKey * 10,expectedKey / 2L)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "driver.advanceWallClockTime(1)@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(expected.length,processor.theCapturedProcessor().processed.size())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final KStream<Integer,Integer> stream = builder.stream(TOPIC_NAME,Consumed.with(Serdes.Integer(),Serdes.Integer()))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "i++@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final TestInputTopic<Integer,Integer> inputTopic = driver.createInputTopic(TOPIC_NAME,new IntegerSerializer(),new IntegerSerializer())@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "int i = 0@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testTransform['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testTransform['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "driver.pipeInput(recordFactory.create(expectedKey,expectedKey * 10,expectedKey / 2L))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "final int(( expectedKeys = {1,10,100,1000}@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(6,processor.theCapturedProcessor().processed.size())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertEquals(expected(i(,processor.theCapturedProcessor().processed.get(i))@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final ConsumerRecordFactory<Integer,Integer> recordFactory = new ConsumerRecordFactory<>(TOPIC_NAME,new IntegerSerializer(),new IntegerSerializer())@@@24@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "final MockProcessorSupplier<Integer,Integer> processor = new MockProcessorSupplier<>()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "driver.advanceWallClockTime(Duration.ofMillis(2))@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17->10 [style = bold, label=""];
16->15 [style = bold, label=""];
22->25 [style = bold, label=""];
4->8 [style = solid, label="expected"];
2->9 [style = solid, label="i"];
11->20 [style = dashed, label="0"];
3->21 [style = dashed, label="0"];
7->12 [style = bold, label=""];
6->23 [style = bold, label=""];
1->9 [style = solid, label="i"];
26->2 [style = solid, label="expected"];
24->2 [style = solid, label="i"];
11->4 [style = bold, label=""];
23->26 [style = bold, label=""];
9->2 [style = solid, label="i"];
3->6 [style = bold, label=""];
1->8 [style = solid, label="i"];
3->22 [style = dashed, label="0"];
15->19 [style = dashed, label="0"];
2->9 [style = bold, label=""];
16->19 [style = bold, label=""];
15->3 [style = bold, label=""];
9->8 [style = bold, label=""];
16->22 [style = bold, label=""];
10->7 [style = bold, label=""];
25->6 [style = bold, label=""];
13->16 [style = bold, label=""];
21->18 [style = bold, label=""];
26->24 [style = bold, label=""];
1->9 [style = bold, label=""];
2->8 [style = solid, label="i"];
20->4 [style = bold, label=""];
6->18 [style = dashed, label="0"];
9->8 [style = dotted, label="true"];
9->1 [style = solid, label="i"];
5->1 [style = bold, label=""];
18->20 [style = bold, label=""];
24->1 [style = solid, label="i"];
0->10 [style = bold, label=""];
24->9 [style = solid, label="i"];
8->2 [style = bold, label=""];
9->2 [style = dotted, label="true"];
6->11 [style = bold, label=""];
27->10 [style = bold, label=""];
1->2 [style = solid, label="i"];
1->9 [style = dotted, label="true"];
12->14 [style = bold, label=""];
14->16 [style = solid, label="processor"];
1->2 [style = bold, label=""];
14->13 [style = bold, label=""];
24->1 [style = bold, label=""];
9->1 [style = bold, label=""];
1->2 [style = dotted, label="true"];
4->5 [style = bold, label=""];
19->21 [style = bold, label=""];
}
