digraph {
0 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder(LineDelimiter.WINDOWS)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(\"a string\",results(0()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testThatContextIsMaintainedBetweenMessages['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "results = decoder.decode(ByteBuffer.wrap(\" string\".getBytes()),context)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "assertEquals(9,context.getBuffer().position())@@@8@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(0,results.length)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertNull(results)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a stringa\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testThatUnixLineTerminatedStringReturnsEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertEquals(9,context.getBuffer().position())@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertEquals(1,context.getBuffer().position())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "testThatUnixLineTerminatedStringReturnsEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(1,results.length)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertNotNull(results)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
1->2 [style = solid, label="context"];
15->13 [style = bold, label=""];
16->18 [style = bold, label=""];
14->5 [style = solid, label="results"];
7->10 [style = bold, label=""];
20->0 [style = bold, label=""];
12->17 [style = bold, label=""];
18->19 [style = bold, label=""];
3->6 [style = bold, label=""];
19->11 [style = bold, label=""];
11->12 [style = bold, label=""];
1->7 [style = solid, label="context"];
11->15 [style = solid, label="results"];
1->14 [style = solid, label="context"];
7->10 [style = solid, label="results"];
2->7 [style = dashed, label="0"];
1->7 [style = bold, label=""];
4->0 [style = bold, label=""];
6->18 [style = dashed, label="0"];
11->12 [style = solid, label="results"];
8->0 [style = bold, label=""];
5->16 [style = bold, label=""];
2->14 [style = dashed, label="0"];
5->10 [style = dashed, label="0"];
0->1 [style = bold, label=""];
17->15 [style = bold, label=""];
14->18 [style = solid, label="results"];
1->14 [style = bold, label=""];
1->2 [style = bold, label=""];
10->9 [style = bold, label=""];
1->11 [style = solid, label="context"];
2->5 [style = solid, label="results"];
3->16 [style = dashed, label="0"];
2->5 [style = bold, label=""];
14->5 [style = bold, label=""];
}
