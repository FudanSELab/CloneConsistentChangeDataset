digraph {
5 [style = filled, label = "expectLastCall()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "changeLogReader.enforceRestoreActive()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expectLastCall()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "expect(consumer.assignment()).andReturn(emptySet())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00))))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions),mkEntry(taskId01,taskId01Partitions))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "consumer.resume(eq(emptySet()))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final Task task00 = new StateMachineTask(taskId00,taskId00Partitions,true){@Override public void initializeIfNeeded(){throw new LockException(\"can't lock\")}}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(asList(task00,task01))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(task00.state(),is(Task.State.CREATED))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "expectLastCall()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldNotCompleteRestorationIfTaskCannotCompleteRestoration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "expect(changeLogReader.completedChangelogs()).andReturn(emptySet())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertThat(task00.state(),is(Task.State.RESTORING))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(activeTaskCreator)@@@35@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(taskManager.standbyTaskMap(),Matchers.anEmptyMap())@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertThat(taskManager.activeTaskMap(),Matchers.equalTo(mkMap(mkEntry(taskId00,task00),mkEntry(taskId01,task01))))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()),is(false))@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "replay(consumer,activeTaskCreator,standbyTaskCreator,changeLogReader)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final Task task01 = new StateMachineTask(taskId01,taskId01Partitions,true){@Override public void initializeIfNeeded(){throw new TimeoutException(\"timed out\")}}@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expect(activeTaskCreator.createTasks(anyObject(),eq(assignment))).andStubReturn(singletonList(task00))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "assertThat(task01.state(),is(Task.State.CREATED))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "taskManager.handleAssignment(assignment,emptyMap())@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldNotCompleteRestorationIfTaskCannotCompleteRestoration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "shouldNotCompleteRestorationIfTasksCannotInitialize['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(),null),is(false))@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final Map<TaskId,Set<TopicPartition>> assignment = mkMap(mkEntry(taskId00,taskId00Partitions))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "consumer.commitSync(Collections.emptyMap())@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->29 [style = bold, label=""];
23->2 [style = bold, label=""];
20->27 [style = bold, label=""];
26->24 [style = bold, label=""];
12->28 [style = bold, label=""];
20->14 [style = solid, label="task00"];
2->11 [style = bold, label=""];
1->22 [style = dashed, label="0"];
25->20 [style = bold, label=""];
15->4 [style = bold, label=""];
22->16 [style = bold, label=""];
10->8 [style = bold, label=""];
12->1 [style = bold, label=""];
27->31 [style = solid, label="task01"];
7->20 [style = bold, label=""];
30->25 [style = bold, label=""];
7->25 [style = dashed, label="0"];
20->23 [style = solid, label="task00"];
5->13 [style = bold, label=""];
12->22 [style = bold, label=""];
16->26 [style = dashed, label="0"];
13->23 [style = dashed, label="0"];
28->1 [style = bold, label=""];
24->31 [style = bold, label=""];
27->17 [style = bold, label=""];
5->23 [style = bold, label=""];
7->19 [style = solid, label="assignment"];
20->13 [style = solid, label="task00"];
11->19 [style = bold, label=""];
16->14 [style = bold, label=""];
6->3 [style = bold, label=""];
31->3 [style = bold, label=""];
14->6 [style = bold, label=""];
21->7 [style = bold, label=""];
20->31 [style = solid, label="task00"];
20->17 [style = bold, label=""];
1->26 [style = bold, label=""];
0->5 [style = bold, label=""];
25->19 [style = solid, label="assignment"];
1->16 [style = bold, label=""];
13->2 [style = bold, label=""];
27->23 [style = solid, label="task01"];
19->12 [style = bold, label=""];
17->10 [style = bold, label=""];
8->15 [style = bold, label=""];
4->18 [style = bold, label=""];
18->0 [style = bold, label=""];
9->7 [style = bold, label=""];
}
