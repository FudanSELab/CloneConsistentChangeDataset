digraph {
0 [style = filled, label = "output.flush()@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEqualBytes(data,rawOutput.toByteArray())@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "output.flush()@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "blockSize *= 2@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Coder coder = OutputType.STREAM.newCoder(blockSize)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertEqualBytes(outputType,data,coder.toByteArray())@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "coder.stream().writeFixed32NoTag(value)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "rawOutput = new ByteArrayOutputStream()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertWriteLittleEndian64['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "coder.stream().flush()@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "output.writeRawLittleEndian32(value)@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Coder coder = outputType.newCoder(data.length)@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "byte(( data@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertEqualBytes(OutputType.STREAM,data,coder.toByteArray())@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "ByteArrayOutputStream rawOutput = new ByteArrayOutputStream()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertWriteLittleEndian32['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "output.writeRawLittleEndian64(value)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "output.writeRawLittleEndian64(value)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int value@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "blockSize <= 16@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "byte(( data@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "assertWriteLittleEndian32['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "byte(( data@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int blockSize = 1@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "output.writeRawLittleEndian32(value)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "int value@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "coder.stream().writeFixed32NoTag(value)@@@13@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "output = CodedOutputStream.newInstance(rawOutput,blockSize)@@@12@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "long value@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEqualBytes(data,rawOutput.toByteArray())@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "coder.stream().flush()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "CodedOutputStream output = CodedOutputStream.newInstance(rawOutput)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->7 [style = dotted, label="true"];
13->15 [style = solid, label="value"];
10->12 [style = solid, label="blockSize"];
28->31 [style = dotted, label="true"];
9->12 [style = solid, label="blockSize"];
18->24 [style = bold, label=""];
21->20 [style = solid, label="data"];
10->12 [style = dotted, label="true"];
15->23 [style = dashed, label="0"];
21->26 [style = solid, label="data"];
27->29 [style = solid, label="value"];
7->2 [style = solid, label="data"];
4->6 [style = bold, label=""];
1->26 [style = dashed, label="0"];
3->14 [style = bold, label=""];
9->18 [style = solid, label="blockSize"];
15->30 [style = dashed, label="0"];
10->3 [style = dotted, label="true"];
5->15 [style = bold, label=""];
26->9 [style = bold, label=""];
4->20 [style = dashed, label="0"];
12->18 [style = dotted, label="true"];
6->10 [style = solid, label="blockSize"];
11->13 [style = dotted, label="true"];
16->22 [style = dotted, label="true"];
16->19 [style = bold, label=""];
31->2 [style = solid, label="data"];
10->9 [style = dotted, label="true"];
0->17 [style = dashed, label="0"];
22->23 [style = solid, label="value"];
6->3 [style = solid, label="blockSize"];
14->1 [style = bold, label=""];
2->12 [style = bold, label=""];
20->10 [style = bold, label=""];
10->14 [style = dotted, label="true"];
10->29 [style = dotted, label="true"];
12->26 [style = dotted, label="true"];
10->18 [style = solid, label="blockSize"];
12->10 [style = bold, label=""];
9->3 [style = solid, label="rawOutput"];
8->5 [style = bold, label=""];
13->31 [style = dashed, label="0"];
10->2 [style = dotted, label="true"];
0->4 [style = bold, label=""];
31->4 [style = solid, label="data"];
10->12 [style = bold, label=""];
24->25 [style = bold, label=""];
19->23 [style = bold, label=""];
12->3 [style = solid, label="blockSize"];
15->0 [style = bold, label=""];
6->10 [style = bold, label=""];
25->26 [style = bold, label=""];
22->24 [style = solid, label="value"];
12->18 [style = bold, label=""];
28->8 [style = bold, label=""];
7->4 [style = solid, label="data"];
12->24 [style = dotted, label="true"];
9->3 [style = bold, label=""];
11->8 [style = bold, label=""];
8->5 [style = solid, label="rawOutput"];
23->17 [style = bold, label=""];
16->21 [style = dotted, label="true"];
10->9 [style = bold, label=""];
1->2 [style = bold, label=""];
27->30 [style = solid, label="value"];
9->12 [style = bold, label=""];
13->14 [style = solid, label="value"];
5->30 [style = bold, label=""];
12->10 [style = solid, label="blockSize"];
30->0 [style = bold, label=""];
20->19 [style = bold, label=""];
29->1 [style = bold, label=""];
10->1 [style = dotted, label="true"];
12->9 [style = dotted, label="true"];
28->27 [style = dotted, label="true"];
13->22 [style = dashed, label="0"];
12->25 [style = dotted, label="true"];
3->29 [style = bold, label=""];
14->29 [style = dashed, label="0"];
17->20 [style = bold, label=""];
}
