digraph {
0 [style = filled, label = "EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(1,((Map)(result.get(\"tiers\").get(null))).get(\"segmentCount\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Response response = dataSourcesResource.getTheDataSource(\"datasource1\",null)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Map<String,Map<String,Object>> result = (Map<String,Map<String,Object>>)response.getEntity()@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assert.assertEquals(\"2010-01-01T00:00:00.000Z\",result.get(\"segments\").get(\"minTime\").toString())@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "EasyMock.verify(inventoryView,server)@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testNullGetTheDataSource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Assert.assertEquals(10L,result.get(\"segments\").get(\"size\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(204,dataSourcesResource.getTheDataSource(\"none\",null).getStatus())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertNotNull(result.get(\"segments\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(10L,((Map)(result.get(\"tiers\").get(null))).get(\"replicatedSize\"))@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(\"2010-01-02T00:00:00.000Z\",result.get(\"segments\").get(\"maxTime\").toString())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "EasyMock.replay(inventoryView,server)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(1,result.get(\"segments\").get(\"count\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView,null,null,null,new AuthConfig(),null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\",new HashMap<>())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(200,response.getStatus())@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(10L,((Map)(result.get(\"tiers\").get(null))).get(\"size\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testSimpleGetTheDataSource['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(10L,result.get(\"segments\").get(\"replicatedSize\"))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "testSimpleGetTheDataSource['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "EasyMock.verify(inventoryView,server)@@@8@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView,null,null,null,new AuthConfig(),null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "dataSource1.addSegment(new DataSegment(\"datasegment1\",Intervals.of(\"2010-01-01/P1D\"),\"\",null,null,null,null,0x9,10))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14->5 [style = bold, label=""];
23->9 [style = bold, label=""];
3->14 [style = bold, label=""];
1->9 [style = bold, label=""];
10->2 [style = bold, label=""];
6->4 [style = bold, label=""];
20->10 [style = bold, label=""];
22->24 [style = bold, label=""];
2->11 [style = bold, label=""];
21->17 [style = bold, label=""];
9->13 [style = bold, label=""];
8->6 [style = bold, label=""];
6->19 [style = bold, label=""];
5->10 [style = bold, label=""];
0->1 [style = bold, label=""];
13->18 [style = bold, label=""];
12->17 [style = bold, label=""];
11->8 [style = bold, label=""];
16->3 [style = bold, label=""];
7->0 [style = bold, label=""];
5->20 [style = bold, label=""];
15->16 [style = bold, label=""];
19->4 [style = bold, label=""];
26->23 [style = bold, label=""];
17->7 [style = bold, label=""];
15->9 [style = dashed, label="0"];
25->22 [style = bold, label=""];
24->26 [style = bold, label=""];
18->15 [style = bold, label=""];
}
