digraph {
12 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "testAddOutputStreamWithOneStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "cos.addOutputStream(streamTwo)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@27@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16341a,2,3)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "verifyNoMoreInteractions(streamTwo)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "cos.close()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@29@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verifyZeroInteractions(streamTwo)@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@16342d)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cos.flush()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "cos.write(9)@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne,streamTwo)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
14->16 [style = bold, label=""];
15->2 [style = bold, label=""];
4->17 [style = bold, label=""];
3->26 [style = dashed, label="0"];
9->24 [style = dashed, label="0"];
20->26 [style = bold, label=""];
18->19 [style = bold, label=""];
31->29 [style = bold, label=""];
20->3 [style = bold, label=""];
0->21 [style = bold, label=""];
29->23 [style = bold, label=""];
20->3 [style = solid, label="streamTwo"];
11->9 [style = bold, label=""];
11->24 [style = bold, label=""];
24->22 [style = bold, label=""];
22->23 [style = bold, label=""];
25->16 [style = bold, label=""];
20->28 [style = solid, label="streamTwo"];
27->15 [style = bold, label=""];
26->13 [style = bold, label=""];
16->22 [style = solid, label="streamOne"];
16->31 [style = solid, label="streamOne"];
17->7 [style = bold, label=""];
11->31 [style = bold, label=""];
20->4 [style = solid, label="streamTwo"];
19->1 [style = bold, label=""];
2->0 [style = bold, label=""];
1->6 [style = bold, label=""];
12->10 [style = bold, label=""];
20->9 [style = solid, label="streamTwo"];
9->31 [style = dashed, label="0"];
10->8 [style = bold, label=""];
7->28 [style = bold, label=""];
21->11 [style = bold, label=""];
13->7 [style = bold, label=""];
5->4 [style = bold, label=""];
13->5 [style = bold, label=""];
3->13 [style = bold, label=""];
20->31 [style = solid, label="streamTwo"];
7->15 [style = bold, label=""];
20->24 [style = solid, label="streamTwo"];
28->27 [style = bold, label=""];
16->3 [style = solid, label="streamOne"];
30->16 [style = bold, label=""];
16->20 [style = bold, label=""];
23->18 [style = bold, label=""];
16->26 [style = solid, label="streamOne"];
6->12 [style = bold, label=""];
}
