digraph {
6 [style = filled, label = "minRecordKey != null && maxRecordKey != null@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "extraMetaData.put(HOODIE_MAX_RECORD_KEY_FOOTER,maxRecordKey)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "bloomFilterOpt.get().getBloomFilterTypeCode().name().contains(HoodieDynamicBoundedBloomFilter.TYPE_CODE_PREFIX)@@@10@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "finalizeWrite['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "extraMetaData.put(HOODIE_MIN_RECORD_KEY_FOOTER,minRecordKey)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "finalizeWrite['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "extraMetaData.put(HOODIE_BLOOM_FILTER_TYPE_CODE,bloomFilter.getBloomFilterTypeCode().name())@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "HashMap<String,String> extraMetaData = new HashMap<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "finalizeWrite['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "return new WriteSupport.FinalizedWriteContext(extraMetaData)@@@14@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "extraMetaData.put(HOODIE_AVRO_BLOOM_FILTER_METADATA_KEY,bloomFilter.serializeToString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "bloomFilterOpt.isPresent()@@@4@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "bloomFilter.getBloomFilterTypeCode().name().contains(HoodieDynamicBoundedBloomFilter.TYPE_CODE_PREFIX)@@@10@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "extraMetaData.put(HOODIE_AVRO_BLOOM_FILTER_METADATA_KEY,bloomFilterOpt.get().serializeToString())@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "extraMetaData.put(HOODIE_BLOOM_FILTER_TYPE_CODE,bloomFilterOpt.get().getBloomFilterTypeCode().name())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "bloomFilter != null@@@4@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5->2 [style = bold, label=""];
11->3 [style = bold, label=""];
12->7 [style = bold, label=""];
8->14 [style = dashed, label="0"];
0->6 [style = dotted, label="true"];
10->13 [style = dotted, label="true"];
4->7 [style = bold, label=""];
1->10 [style = bold, label=""];
11->10 [style = dotted, label="true"];
0->8 [style = dotted, label="true"];
6->1 [style = dotted, label="true"];
0->3 [style = bold, label=""];
0->8 [style = bold, label=""];
8->6 [style = bold, label=""];
7->11 [style = bold, label=""];
15->7 [style = bold, label=""];
11->14 [style = bold, label=""];
10->3 [style = bold, label=""];
2->3 [style = bold, label=""];
6->10 [style = bold, label=""];
6->9 [style = bold, label=""];
0->5 [style = dotted, label="true"];
0->11 [style = dashed, label="0"];
10->13 [style = bold, label=""];
11->14 [style = dotted, label="true"];
11->6 [style = dotted, label="true"];
7->0 [style = bold, label=""];
6->5 [style = bold, label=""];
14->6 [style = bold, label=""];
13->3 [style = bold, label=""];
6->9 [style = dotted, label="true"];
5->10 [style = dashed, label="0"];
7->3 [style = solid, label="extraMetaData"];
5->3 [style = bold, label=""];
9->1 [style = bold, label=""];
5->2 [style = dotted, label="true"];
2->13 [style = dashed, label="0"];
1->5 [style = bold, label=""];
}
