digraph {
43 [style = filled, label = "assertFalse(cos.isEmpty())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final Sequence seqStreamTwo = mockContext.sequence(\"seqStreamTwo\")@@@28@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "cos.close()@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
41 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "cos.flush()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "cos.addOutputStream(streamTwo)@@@57@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "cos.addOutputStream(streamOne)@@@56@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f89d,2,3)@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "cos.addOutputStream(streamOne)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f75e,2,3)@@@60@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f8b0)@@@59@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testAddTwoOutputStreamsWhenEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "cos.close()@@@68@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "mockContext.checking(new Expectations(){})@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertTrue(cos.isEmpty())@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
29 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "cos.write(9)@@@66@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "cos.flush()@@@63@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testAddTwoOutputStreamsWhenEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "mockContext.checking(new Expectations(){})@@@30@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@53@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "assertThat(cos.size()).isEqualTo(0)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
37 [style = filled, label = "assertThat(cos.isEmpty()).isTrue()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "cos.close()@@@64@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(0,cos.size())@@@55@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f7e0)@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne,streamTwo)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
46 [style = filled, label = "testNewCompositeOutputStreamWithTwoStreams['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "cos.addOutputStream(streamTwo)@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertFalse(cos.isEmpty())@@@58@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "cos.flush()@@@67@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@14f7cd,2,3)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "final OutputStream streamTwo = mockContext.mock(,\"streamTwo\")@@@29@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "assertEquals(2,cos.size())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "cos.write(9)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "cos.write(9)@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4->3 [style = bold, label=""];
40->35 [style = bold, label=""];
32->21 [style = solid, label="streamTwo"];
30->33 [style = bold, label=""];
15->14 [style = bold, label=""];
3->1 [style = bold, label=""];
45->15 [style = bold, label=""];
21->27 [style = bold, label=""];
39->34 [style = bold, label=""];
19->20 [style = bold, label=""];
46->2 [style = bold, label=""];
26->25 [style = bold, label=""];
36->31 [style = bold, label=""];
43->48 [style = bold, label=""];
0->32 [style = dashed, label="0"];
25->32 [style = bold, label=""];
44->10 [style = bold, label=""];
14->10 [style = bold, label=""];
15->44 [style = bold, label=""];
31->29 [style = bold, label=""];
25->30 [style = solid, label="streamOne"];
16->17 [style = bold, label=""];
13->19 [style = dashed, label="0"];
17->49 [style = dashed, label="0"];
12->9 [style = bold, label=""];
49->43 [style = bold, label=""];
15->41 [style = dashed, label="0"];
11->2 [style = bold, label=""];
9->16 [style = bold, label=""];
32->30 [style = solid, label="streamTwo"];
7->27 [style = dashed, label="0"];
20->21 [style = bold, label=""];
32->38 [style = bold, label=""];
34->28 [style = bold, label=""];
2->0 [style = bold, label=""];
48->45 [style = bold, label=""];
33->40 [style = bold, label=""];
5->6 [style = bold, label=""];
38->37 [style = bold, label=""];
42->30 [style = bold, label=""];
16->49 [style = bold, label=""];
9->6 [style = solid, label="streamTwo"];
9->49 [style = solid, label="streamTwo"];
27->41 [style = bold, label=""];
0->8 [style = bold, label=""];
0->49 [style = solid, label="streamOne"];
18->13 [style = bold, label=""];
13->5 [style = bold, label=""];
10->4 [style = bold, label=""];
23->39 [style = bold, label=""];
10->47 [style = bold, label=""];
7->15 [style = bold, label=""];
2->25 [style = dashed, label="0"];
18->37 [style = dashed, label="0"];
0->5 [style = solid, label="streamOne"];
37->19 [style = bold, label=""];
28->42 [style = bold, label=""];
35->36 [style = bold, label=""];
29->22 [style = bold, label=""];
6->7 [style = bold, label=""];
22->24 [style = bold, label=""];
41->23 [style = bold, label=""];
8->12 [style = bold, label=""];
17->18 [style = bold, label=""];
25->20 [style = solid, label="streamOne"];
}
