digraph {
28 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "maxTotalRows = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "kafkaProducer.commitTransaction()@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@18@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "insertData()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,0L),ImmutableSet.of())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Assert.assertEquals(1,checkpointRequestsHash.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "testTimeBasedIncrementalHandOff['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "kafkaProducer.send(record).get()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "kafkaProducer.initTransactions()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,2L,1,0L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getProcessed())@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@13@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Thread.sleep(10)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@31@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "insertData()@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "kafkaProducer.beginTransaction()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
45 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamEndSequenceNumbers<>(topic,checkpoint.getPartitionSequenceNumberMap())))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
38 [style = filled, label = "intermediateHandoffPeriod = new Period().withSeconds(0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,1L,1,0L))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@14@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->6 [style = dotted, label="true"];
10->43 [style = solid, label="baseSequenceName"];
11->20 [style = bold, label=""];
5->8 [style = bold, label=""];
21->10 [style = bold, label=""];
1->39 [style = dashed, label="0"];
28->43 [style = solid, label="endPartitions"];
12->5 [style = bold, label=""];
9->11 [style = bold, label=""];
14->2 [style = solid, label="task"];
25->36 [style = bold, label=""];
31->32 [style = bold, label=""];
37->30 [style = bold, label=""];
39->43 [style = solid, label="startPartitions"];
31->32 [style = solid, label="desc2"];
4->13 [style = bold, label=""];
18->19 [style = bold, label=""];
7->35 [style = bold, label=""];
40->25 [style = bold, label=""];
0->14 [style = solid, label="endPartitions"];
43->44 [style = solid, label="task"];
32->27 [style = bold, label=""];
39->45 [style = solid, label="startPartitions"];
11->12 [style = bold, label=""];
31->30 [style = solid, label="desc2"];
1->0 [style = bold, label=""];
16->23 [style = bold, label=""];
46->39 [style = bold, label=""];
36->26 [style = bold, label=""];
41->10 [style = bold, label=""];
1->14 [style = solid, label="startPartitions"];
24->43 [style = solid, label="consumerProps"];
13->14 [style = solid, label="consumerProps"];
43->31 [style = solid, label="task"];
15->22 [style = bold, label=""];
33->29 [style = bold, label=""];
10->14 [style = solid, label="baseSequenceName"];
6->1 [style = bold, label=""];
3->10 [style = bold, label=""];
26->37 [style = solid, label="desc1"];
27->37 [style = bold, label=""];
0->14 [style = bold, label=""];
29->2 [style = bold, label=""];
26->31 [style = bold, label=""];
34->24 [style = bold, label=""];
0->42 [style = dashed, label="0"];
28->43 [style = bold, label=""];
6->13 [style = bold, label=""];
10->23 [style = solid, label="baseSequenceName"];
26->32 [style = solid, label="desc1"];
38->34 [style = bold, label=""];
33->2 [style = solid, label="currentOffsets"];
35->45 [style = bold, label=""];
22->17 [style = bold, label=""];
17->23 [style = solid, label="startPartitions"];
44->13 [style = bold, label=""];
10->9 [style = bold, label=""];
14->2 [style = bold, label=""];
16->23 [style = solid, label="endPartitions"];
33->29 [style = solid, label="currentOffsets"];
8->4 [style = bold, label=""];
13->6 [style = bold, label=""];
2->7 [style = bold, label=""];
42->28 [style = bold, label=""];
9->38 [style = bold, label=""];
13->33 [style = bold, label=""];
39->42 [style = bold, label=""];
20->15 [style = bold, label=""];
43->44 [style = bold, label=""];
23->18 [style = solid, label="task"];
23->18 [style = bold, label=""];
24->46 [style = bold, label=""];
15->23 [style = solid, label="consumerProps"];
17->16 [style = bold, label=""];
45->40 [style = bold, label=""];
43->26 [style = solid, label="task"];
}
