digraph {
23 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"newmet\"))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"nested-foo.bar1\"))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH,\"met-array\",\"$.met.a\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "final Parser<String,Object> jsonParser = new JSONPathParser(new JSONPathSpec(false,fields),null)@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(\"bbb\",jsonMap.get(\"nested-foo.bar2\"))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "thrown.expect()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(7L,8L,9L),jsonMap.get(\"met-array\"))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.JQ,\"jq-met-array\",\".met.a\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"foo.bar1\"))@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "jsonParser.parseToMap(nestedJson)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testNestingNoDiscovery['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertEquals(ImmutableList.of(7L,8L,9L),jsonMap.get(\"jq-met-array\"))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertEquals(\"text\",jsonMap.get(\"simpleVal\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH,\"heybarx0\",\"$.hey(0(.barx\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"met\"))@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertEquals(\"asdf\",jsonMap.get(\"jq-heybarx0\"))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"baz\"))@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Map<String,Object> jsonMap = jsonParser.parseToMap(nestedJson)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"ignore_me\"))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH,\"nested-foo.bar2\",\"$.foo.bar2\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "testRejectDuplicates['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.ROOT,\"timestamp\",\"timestamp\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(\"bbb\",jsonMap.get(\"jq-nested-foo.bar2\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(\"2999\",jsonMap.get(\"timestamp\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Assert.assertEquals(\"asdf\",jsonMap.get(\"heybarx0\"))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"blah\"))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.JQ,\"jq-heybarx0\",\".hey(0(.barx\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.JQ,\"jq-nested-foo.bar2\",\".foo.bar2\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final Map<String,Object> jsonMap = jsonParser.parseToMap(NESTED_JSON)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.ROOT,\"simpleVal\",\"simpleVal\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "fields.add(new JSONPathFieldSpec(JSONPathFieldType.PATH,\"met-array\",\"$.met.a\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testNestingNoDiscovery['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"foo\"))@@@30@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "thrown.expectMessage(\"Cannot have duplicate field definition: met-array\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertFalse(jsonMap.containsKey(\"hey\"))@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<JSONPathFieldSpec> fields = new ArrayList<>()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->27 [style = solid, label="fields"];
29->4 [style = bold, label=""];
0->13 [style = bold, label=""];
27->14 [style = bold, label=""];
16->10 [style = bold, label=""];
4->19 [style = bold, label=""];
23->15 [style = bold, label=""];
35->33 [style = bold, label=""];
27->31 [style = bold, label=""];
10->3 [style = bold, label=""];
9->20 [style = bold, label=""];
10->17 [style = bold, label=""];
22->34 [style = dashed, label="0"];
17->22 [style = bold, label=""];
5->17 [style = bold, label=""];
25->7 [style = bold, label=""];
33->27 [style = bold, label=""];
32->10 [style = bold, label=""];
26->11 [style = bold, label=""];
19->8 [style = bold, label=""];
1->23 [style = bold, label=""];
20->5 [style = bold, label=""];
21->12 [style = bold, label=""];
7->26 [style = bold, label=""];
3->9 [style = bold, label=""];
6->27 [style = bold, label=""];
17->34 [style = bold, label=""];
8->2 [style = bold, label=""];
18->1 [style = bold, label=""];
2->21 [style = bold, label=""];
15->0 [style = bold, label=""];
12->18 [style = bold, label=""];
30->10 [style = bold, label=""];
28->25 [style = bold, label=""];
34->35 [style = bold, label=""];
22->24 [style = bold, label=""];
27->29 [style = bold, label=""];
24->6 [style = bold, label=""];
14->29 [style = dashed, label="0"];
13->28 [style = bold, label=""];
14->4 [style = bold, label=""];
14->31 [style = dashed, label="0"];
}
