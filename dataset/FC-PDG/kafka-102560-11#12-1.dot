digraph {
13 [style = filled, label = "inputTopic.pipeInput(1L,\"value1\")@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final KeyValueStore<Long,String> store = driver.getKeyValueStore(\"store\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final String topic = \"topic\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "driver.pipeInput(recordFactory.create(topic,1L,\"value1\"))@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final ConsumerRecordFactory<Long,String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(),new StringSerializer())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "final ForeachAction<Long,String> action = null@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "inputTopic.pipeInput(2L,\"value2\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "shouldUseSerdesDefinedInMaterializedToConsumeTable['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(store.get(2L),equalTo(\"value2\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(store.get(1L),equalTo(\"value1\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "shouldUseSerdesDefinedInMaterializedToConsumeTable['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "builder.globalTable(topic,Materialized.as(\"store\").withKeySerde(Serdes.Long()).withValueSerde(Serdes.String()))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(store.get(2L),equalTo(\"value2\"))@@@11@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final Map<Long,String> results = new HashMap<>()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final KeyValueStore<Long,String> store = driver.getKeyValueStore(\"store\")@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(store.get(1L),equalTo(\"value1\"))@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "driver.pipeInput(recordFactory.create(topic,2L,\"value2\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertThat(results.get(2L),equalTo(\"value2\"))@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "builder.table(topic,Materialized.as(\"store\").withKeySerde(Serdes.Long()).withValueSerde(Serdes.String())).toStream().foreach(action)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final TestInputTopic<Long,String> inputTopic = driver.createInputTopic(topic,new LongSerializer(),new StringSerializer())@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertThat(results.get(1L),equalTo(\"value1\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->3 [style = bold, label=""];
4->9 [style = bold, label=""];
12->8 [style = solid, label="topic"];
15->13 [style = bold, label=""];
1->8 [style = bold, label=""];
21->19 [style = bold, label=""];
19->12 [style = bold, label=""];
20->9 [style = bold, label=""];
12->1 [style = solid, label="topic"];
3->14 [style = bold, label=""];
4->15 [style = bold, label=""];
12->20 [style = bold, label=""];
8->6 [style = bold, label=""];
6->0 [style = bold, label=""];
7->4 [style = bold, label=""];
16->2 [style = bold, label=""];
11->2 [style = bold, label=""];
12->7 [style = bold, label=""];
2->12 [style = bold, label=""];
13->17 [style = bold, label=""];
0->10 [style = bold, label=""];
17->0 [style = bold, label=""];
9->18 [style = bold, label=""];
10->5 [style = bold, label=""];
19->9 [style = solid, label="topic"];
18->1 [style = bold, label=""];
19->18 [style = solid, label="topic"];
7->12 [style = dashed, label="0"];
7->4 [style = solid, label="action"];
12->15 [style = solid, label="topic"];
9->1 [style = bold, label=""];
19->12 [style = solid, label="topic"];
}
