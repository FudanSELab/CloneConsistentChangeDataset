digraph {
7 [style = filled, label = "assertTrue(queue.isEmpty())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(2L,timestampExtractor.partitionTime)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(RecordQueue.UNKNOWN,timestampExtractor.partitionTime)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertThat(queue.partitionTime(),is(2L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(queue.partitionTime(),is(2L))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> list1 = Arrays.asList(new ConsumerRecord<>(\"topic\",1,2,0L,TimestampType.CREATE_TIME,0,0,recordKey,recordValue,new RecordHeaders(),Optional.empty()),new ConsumerRecord<>(\"topic\",1,1,0L,TimestampType.CREATE_TIME,0,0,recordKey,recordValue,new RecordHeaders(),Optional.empty()),new ConsumerRecord<>(\"topic\",1,3,0L,TimestampType.CREATE_TIME,0,0,recordKey,recordValue,new RecordHeaders(),Optional.empty()),new ConsumerRecord<>(\"topic\",1,4,0L,TimestampType.CREATE_TIME,0,0,recordKey,recordValue,new RecordHeaders(),Optional.empty()))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "shouldTrackPartitionTimeAsMaxProcessedTimestamp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertTrue(queue.isEmpty())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "queue.addRawRecords(list1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(2L,timestampExtractor.partitionTime)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(RecordQueue.UNKNOWN,timestampExtractor.partitionTime)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(queue.size(),is(0))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertEquals(RecordQueue.UNKNOWN,queue.headRecordTimestamp())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "queue.poll()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> list1 = Arrays.asList(new ConsumerRecord<>(\"topic\",1,2,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue),new ConsumerRecord<>(\"topic\",1,1,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue),new ConsumerRecord<>(\"topic\",1,3,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue),new ConsumerRecord<>(\"topic\",1,4,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "final List<ConsumerRecord<byte((,byte((>> list1 = Arrays.asList(new ConsumerRecord<>(\"topic\",1,2,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue),new ConsumerRecord<>(\"topic\",1,1,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue),new ConsumerRecord<>(\"topic\",1,3,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue),new ConsumerRecord<>(\"topic\",1,4,0L,TimestampType.CREATE_TIME,0L,0,0,recordKey,recordValue))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "queue.addRawRecords(list1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "shouldPassPartitionTimeToTimestampExtractor['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(queue.partitionTime(),is(3L))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "shouldTrackPartitionTimeAsMaxProcessedTimestamp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertEquals(3L,timestampExtractor.partitionTime)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "queue.poll()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(queue.partitionTime(),is(RecordQueue.UNKNOWN))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertEquals(0,queue.size())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "queue.poll()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final PartitionTimeTrackingTimestampExtractor timestampExtractor = new PartitionTimeTrackingTimestampExtractor()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final RecordQueue queue = new RecordQueue(new TopicPartition(\"topic\",1),mockSourceNodeWithMetrics,timestampExtractor,new LogAndFailExceptionHandler(),context,new LogContext())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->18 [style = bold, label=""];
1->8 [style = bold, label=""];
15->7 [style = bold, label=""];
17->1 [style = bold, label=""];
4->25 [style = bold, label=""];
22->19 [style = bold, label=""];
18->23 [style = bold, label=""];
11->22 [style = dashed, label="0"];
0->11 [style = bold, label=""];
10->3 [style = bold, label=""];
7->0 [style = bold, label=""];
21->24 [style = bold, label=""];
0->26 [style = dashed, label="0"];
4->2 [style = bold, label=""];
5->14 [style = bold, label=""];
9->7 [style = bold, label=""];
2->10 [style = bold, label=""];
12->6 [style = bold, label=""];
13->1 [style = dashed, label="0"];
13->1 [style = bold, label=""];
26->22 [style = bold, label=""];
2->10 [style = dashed, label="0"];
24->20 [style = bold, label=""];
3->23 [style = dashed, label="0"];
11->5 [style = bold, label=""];
13->17 [style = bold, label=""];
12->14 [style = dashed, label="0"];
19->13 [style = bold, label=""];
5->12 [style = bold, label=""];
1->16 [style = bold, label=""];
6->13 [style = bold, label=""];
24->20 [style = solid, label="timestampExtractor"];
25->10 [style = bold, label=""];
19->17 [style = solid, label="list1"];
12->6 [style = solid, label="list1"];
14->6 [style = solid, label="list1"];
8->4 [style = bold, label=""];
8->4 [style = dashed, label="0"];
16->4 [style = bold, label=""];
14->6 [style = bold, label=""];
11->26 [style = bold, label=""];
20->11 [style = bold, label=""];
}
