digraph {
14 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,2,\")@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(result,failedWith(3))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1-3-\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,2,', expected correct notation M,N or M-N\"))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1-3-', expected correct notation M,N or M-N\"))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\",2,3\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertThat(result,failedWith(3))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result,failedWith(3))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse ',2,3', expected correct notation M,N or M-N\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,,3\")@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\"1,,3\")@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "CLICommandInvoker.Result result = command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,\",2,3\")@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "result = command.authorizedTo(Jenkins.READ,Item.READ).invokeWithArgs(PROJECT_NAME,\"1,2,\")@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Unable to parse '1,,3', expected correct notation M,N or M-N\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16->6 [style = solid, label="result"];
7->1 [style = bold, label=""];
5->9 [style = bold, label=""];
19->5 [style = solid, label="result"];
3->8 [style = solid, label="result"];
16->6 [style = bold, label=""];
2->3 [style = bold, label=""];
0->2 [style = bold, label=""];
18->19 [style = bold, label=""];
16->8 [style = solid, label="result"];
13->1 [style = solid, label="result"];
3->6 [style = bold, label=""];
19->11 [style = bold, label=""];
1->0 [style = bold, label=""];
15->11 [style = solid, label="result"];
9->7 [style = bold, label=""];
5->17 [style = bold, label=""];
19->11 [style = solid, label="result"];
13->1 [style = bold, label=""];
4->11 [style = solid, label="result"];
11->5 [style = bold, label=""];
15->11 [style = bold, label=""];
4->5 [style = solid, label="result"];
3->6 [style = solid, label="result"];
7->0 [style = solid, label="result"];
13->0 [style = solid, label="result"];
4->15 [style = dashed, label="0"];
9->17 [style = dashed, label="0"];
6->8 [style = bold, label=""];
7->13 [style = dashed, label="0"];
10->4 [style = bold, label=""];
4->19 [style = dashed, label="0"];
14->15 [style = bold, label=""];
4->11 [style = bold, label=""];
8->12 [style = bold, label=""];
3->16 [style = dashed, label="0"];
7->1 [style = solid, label="result"];
9->13 [style = bold, label=""];
15->5 [style = solid, label="result"];
2->16 [style = bold, label=""];
}
