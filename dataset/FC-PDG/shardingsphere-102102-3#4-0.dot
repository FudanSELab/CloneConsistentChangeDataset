digraph {
2 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual statement should exist.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exist.\"),actual)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final AlterShardingBroadcastTableRulesStatement actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertThat(assertContext.getText(\"read-write splitting assertion error: \"),actual.getRuleNames(),is(expected.getRules()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AlterShardingBroadcastTableRulesStatementTestCase expected@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final DropReadWriteSplittingRuleStatementTestCase expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exist.\"),actual)@@@4@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final AlterShardingBroadcastTableRulesStatement actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNull(assertContext.getText(\"Actual statement should not exist.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertThat(assertContext.getText(\"sharding broadcast table rule assertion error : \"),actual.getTables(),is(expected.getTables()))@@@8@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final DropReadwriteSplittingRuleStatement actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8->10 [style = dotted, label="true"];
5->2 [style = bold, label=""];
5->0 [style = dotted, label="true"];
13->2 [style = solid, label="expected"];
2->11 [style = dotted, label="true"];
4->2 [style = solid, label="expected"];
2->6 [style = dotted, label="false"];
2->1 [style = dotted, label="false"];
17->14 [style = dotted, label="true"];
17->16 [style = dotted, label="true"];
2->7 [style = bold, label=""];
2->11 [style = bold, label=""];
5->3 [style = dotted, label="true"];
10->12 [style = solid, label="actual"];
2->12 [style = dotted, label="false"];
17->13 [style = dotted, label="true"];
4->16 [style = dashed, label="0"];
10->11 [style = solid, label="actual"];
5->4 [style = dotted, label="true"];
7->11 [style = dashed, label="0"];
3->7 [style = solid, label="actual"];
3->1 [style = solid, label="actual"];
1->6 [style = bold, label=""];
14->1 [style = solid, label="actual"];
14->7 [style = solid, label="actual"];
8->2 [style = bold, label=""];
2->12 [style = bold, label=""];
2->15 [style = dotted, label="false"];
2->1 [style = bold, label=""];
1->15 [style = bold, label=""];
1->12 [style = dashed, label="0"];
6->15 [style = dashed, label="0"];
8->4 [style = dotted, label="true"];
2->7 [style = dotted, label="true"];
12->6 [style = bold, label=""];
17->2 [style = bold, label=""];
8->9 [style = dotted, label="true"];
}
