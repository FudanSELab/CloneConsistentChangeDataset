digraph {
33 [style = filled, label = "int i = 0@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "i < records.size()@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "SegmentDescriptor desc7 = sd(task,\"2013/P1D\",0)@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "Thread.sleep(10)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint1 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,3L,1,0L))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "kafkaProducer.commitTransaction()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "Assert.assertEquals(2,checkpointRequestsHash.size())@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@34@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "task.getRunner().setEndOffsets(nextOffsets,false)@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "return@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "maxTotalRows = null@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "kafkaProducer.send(record).get()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "task.getRunner().setEndOffsets(currentOffsets,false)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "SegmentDescriptor desc3 = sd(task,\"2010/P1D\",0)@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "SegmentDescriptor desc5 = sd(task,\"2011/P1D\",1)@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "kafkaProducer.commitTransaction()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(8,task.getRunner().getRowIngestionMeters().getProcessed())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "int numToAdd = records.size() - 2@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "testIncrementalHandOffMaxTotalRows['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> checkpoint2 = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,0L))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "kafkaProducer.send(records.get(i)).get()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> endPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final SeekableStreamEndSequenceNumbers<Integer,Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(topic,ImmutableMap.of(0,10L,1,2L))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2009/P1D\",0)@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "task.getRunner().getStatus() != Status.PAUSED@@@28@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "kafkaProducer.beginTransaction()@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2008/P1D\",0)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "Assert.assertTrue(checkpoint2.getPartitionSequenceNumberMap().equals(nextOffsets))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "kafkaProducer.initTransactions()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "int i = numToAdd@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "i < numToAdd@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"g\"),readSegmentColumn(\"dim1\",desc6))@@@72@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,10L,1,2L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(startPartitions),new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,currentOffsets)))))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testCanStartFromLaterThanEarliestOffset['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
45 [style = filled, label = "Assert.assertTrue(checkpointRequestsHash.contains(Objects.hash(DATA_SCHEMA.getDataSource(),0,new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,currentOffsets)),new KafkaDataSourceMetadata(new SeekableStreamPartitions(topic,nextOffsets)))))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertTrue((ImmutableList.of(\"d\",\"e\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"h\").equals(readSegmentColumn(\"dim1\",desc5))) || (ImmutableList.of(\"d\",\"h\").equals(readSegmentColumn(\"dim1\",desc4)) && ImmutableList.of(\"e\").equals(readSegmentColumn(\"dim1\",desc5))))@@@71@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "kafkaProducer.commitTransaction()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4,desc5,desc6,desc7),publishedDescriptors())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "maxTotalRows = 3L@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "Map<String,Object> consumerProps = kafkaServer.consumerProperties()@@@20@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "i++@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "maxRowsPerSegment = Integer.MAX_VALUE@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,baseSequenceName,startPartitions,endPartitions,consumerProps,KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "!isIncrementalHandoffSupported@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "int numToAdd = records.size()@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "final SeekableStreamPartitions<Integer,Long> startPartitions = new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L,1,0L))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "i++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "SegmentDescriptor desc4 = sd(task,\"2011/P1D\",0)@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "SegmentDescriptor desc6 = sd(task,\"2012/P1D\",0)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "Assert.assertTrue(checkpoint1.getPartitionSequenceNumberMap().equals(currentOffsets))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc7))@@@73@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "kafkaProducer.initTransactions()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "final Map<Integer,Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Thread.sleep(10)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final String baseSequenceName = \"sequence0\"@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "consumerProps.put(\"max.poll.records\",\"1\")@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final SeekableStreamStartSequenceNumbers<Integer,Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(topic,ImmutableMap.of(0,0L,1,1L),ImmutableSet.of())@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
68 [style = filled, label = "final Map<Integer,Long> nextOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "kafkaProducer.beginTransaction()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
1->67 [style = bold, label=""];
5->10 [style = solid, label="task"];
16->9 [style = dotted, label="true"];
12->5 [style = bold, label=""];
68->43 [style = bold, label=""];
44->56 [style = solid, label="task"];
33->51 [style = solid, label="i"];
24->34 [style = bold, label=""];
44->61 [style = solid, label="task"];
51->25 [style = dotted, label="true"];
51->47 [style = dotted, label="true"];
44->49 [style = solid, label="task"];
26->23 [style = solid, label="desc2"];
45->24 [style = bold, label=""];
70->44 [style = bold, label=""];
36->44 [style = solid, label="startPartitions"];
50->65 [style = bold, label=""];
26->62 [style = solid, label="desc2"];
42->72 [style = solid, label="desc4"];
52->68 [style = bold, label=""];
55->74 [style = bold, label=""];
26->72 [style = solid, label="desc2"];
38->30 [style = bold, label=""];
64->31 [style = bold, label=""];
21->72 [style = bold, label=""];
33->25 [style = solid, label="i"];
56->72 [style = solid, label="desc6"];
35->50 [style = bold, label=""];
42->60 [style = solid, label="desc4"];
20->5 [style = solid, label="endPartitions"];
6->36 [style = dashed, label="0"];
51->47 [style = bold, label=""];
57->16 [style = bold, label=""];
65->31 [style = solid, label="currentOffsets"];
44->26 [style = solid, label="task"];
44->63 [style = solid, label="task"];
68->43 [style = solid, label="nextOffsets"];
31->46 [style = bold, label=""];
15->44 [style = solid, label="baseSequenceName"];
25->51 [style = solid, label="i"];
32->3 [style = bold, label=""];
28->55 [style = bold, label=""];
46->58 [style = dotted, label="true"];
16->9 [style = bold, label=""];
30->70 [style = bold, label=""];
25->51 [style = bold, label=""];
60->66 [style = bold, label=""];
5->10 [style = bold, label=""];
65->48 [style = solid, label="currentOffsets"];
61->26 [style = bold, label=""];
12->20 [style = dashed, label="0"];
73->37 [style = bold, label=""];
10->14 [style = bold, label=""];
54->60 [style = bold, label=""];
19->20 [style = bold, label=""];
6->44 [style = solid, label="consumerProps"];
41->37 [style = bold, label=""];
4->19 [style = bold, label=""];
26->49 [style = bold, label=""];
37->29 [style = bold, label=""];
51->0 [style = bold, label=""];
15->5 [style = solid, label="baseSequenceName"];
42->40 [style = bold, label=""];
68->28 [style = solid, label="nextOffsets"];
1->11 [style = bold, label=""];
50->35 [style = dotted, label="true"];
66->69 [style = bold, label=""];
63->69 [style = solid, label="desc7"];
36->48 [style = solid, label="startPartitions"];
65->64 [style = solid, label="currentOffsets"];
6->5 [style = solid, label="startPartitions"];
47->25 [style = bold, label=""];
63->62 [style = bold, label=""];
3->2 [style = bold, label=""];
37->41 [style = dotted, label="true"];
49->54 [style = solid, label="desc3"];
72->71 [style = bold, label=""];
6->19 [style = dashed, label="0"];
61->62 [style = solid, label="desc1"];
58->46 [style = bold, label=""];
2->33 [style = bold, label=""];
73->37 [style = solid, label="i"];
40->60 [style = solid, label="desc5"];
63->62 [style = solid, label="desc7"];
13->0 [style = bold, label=""];
2->17 [style = bold, label=""];
59->50 [style = bold, label=""];
23->54 [style = bold, label=""];
56->66 [style = solid, label="desc6"];
40->56 [style = bold, label=""];
12->36 [style = bold, label=""];
44->59 [style = bold, label=""];
68->45 [style = solid, label="nextOffsets"];
74->48 [style = bold, label=""];
61->72 [style = solid, label="desc1"];
71->53 [style = bold, label=""];
40->72 [style = solid, label="desc5"];
39->73 [style = bold, label=""];
11->3 [style = bold, label=""];
32->73 [style = solid, label="numToAdd"];
0->5 [style = solid, label="consumerProps"];
22->39 [style = bold, label=""];
7->32 [style = dashed, label="0"];
53->23 [style = bold, label=""];
67->32 [style = bold, label=""];
17->13 [style = bold, label=""];
37->52 [style = bold, label=""];
61->53 [style = solid, label="desc1"];
50->35 [style = bold, label=""];
56->63 [style = bold, label=""];
49->72 [style = solid, label="desc3"];
49->62 [style = solid, label="desc3"];
46->22 [style = bold, label=""];
15->1 [style = bold, label=""];
18->16 [style = bold, label=""];
6->12 [style = bold, label=""];
16->15 [style = bold, label=""];
49->42 [style = bold, label=""];
44->42 [style = solid, label="task"];
4->6 [style = bold, label=""];
0->6 [style = bold, label=""];
27->61 [style = bold, label=""];
44->40 [style = solid, label="task"];
65->64 [style = bold, label=""];
29->41 [style = bold, label=""];
19->5 [style = solid, label="startPartitions"];
44->59 [style = solid, label="task"];
37->29 [style = dotted, label="true"];
46->58 [style = bold, label=""];
70->44 [style = solid, label="endPartitions"];
42->62 [style = solid, label="desc4"];
7->3 [style = bold, label=""];
73->41 [style = solid, label="i"];
12->5 [style = solid, label="endPartitions"];
43->28 [style = bold, label=""];
20->5 [style = bold, label=""];
40->62 [style = solid, label="desc5"];
63->72 [style = solid, label="desc7"];
48->45 [style = bold, label=""];
33->51 [style = bold, label=""];
11->67 [style = dashed, label="0"];
0->4 [style = bold, label=""];
9->15 [style = bold, label=""];
36->38 [style = bold, label=""];
32->51 [style = solid, label="numToAdd"];
56->62 [style = solid, label="desc6"];
11->7 [style = bold, label=""];
62->21 [style = bold, label=""];
41->37 [style = solid, label="i"];
34->27 [style = bold, label=""];
65->45 [style = solid, label="currentOffsets"];
}
