digraph {
8 [style = filled, label = "TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "JobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(headOperatorID,new CounterOperator(),tailOperatorID,new CounterOperator(),Optional.empty())@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "stateHandles.putSubtaskStateByOperatorID(headOperatorID,emptyHeadOperatorState)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(headOperatorID,tailOperatorID)),RESTORED_OPERATORS)@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(new HashSet<>(Arrays.asList(headOperatorID,tailOperatorID)),RESTORED_OPERATORS)@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "testRestoreWithoutState['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "testRestoreAfterScaleUp['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "OperatorID headOperatorID = new OperatorID(42L,42L)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "JobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(headOperatorID,new StatelessOperator(),tailOperatorID,new CounterOperator(),Optional.empty())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testRestoreAfterScaleUp['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "OperatorID tailOperatorID = new OperatorID(44L,44L)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(2,stateHandles.getSubtaskStateMappings().size())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "createRunAndCheckpointOperatorChain(headOperatorID,new StatelessOperator(),tailOperatorID,new CounterOperator(),Optional.of(restore))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "OperatorSubtaskState emptyHeadOperatorState = OperatorSubtaskState.builder().build()@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "OperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(new OperatorInstanceID(0,headOperatorID),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap())@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "createRunAndCheckpointOperatorChain(headOperatorID,new CounterOperator(),tailOperatorID,new CounterOperator(),Optional.of(restore))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0->6 [style = bold, label=""];
9->1 [style = solid, label="headOperatorID"];
3->1 [style = solid, label="tailOperatorID"];
13->15 [style = bold, label=""];
11->6 [style = solid, label="emptyHeadOperatorState"];
2->4 [style = bold, label=""];
8->5 [style = bold, label=""];
12->13 [style = solid, label="restore"];
9->0 [style = solid, label="headOperatorID"];
10->9 [style = bold, label=""];
7->9 [style = bold, label=""];
9->3 [style = bold, label=""];
1->8 [style = bold, label=""];
9->12 [style = solid, label="headOperatorID"];
14->9 [style = bold, label=""];
11->6 [style = bold, label=""];
9->6 [style = solid, label="headOperatorID"];
3->15 [style = solid, label="tailOperatorID"];
6->2 [style = bold, label=""];
5->13 [style = bold, label=""];
9->2 [style = solid, label="headOperatorID"];
3->1 [style = bold, label=""];
5->0 [style = bold, label=""];
3->4 [style = solid, label="tailOperatorID"];
5->11 [style = bold, label=""];
3->12 [style = bold, label=""];
0->6 [style = solid, label="emptyHeadOperatorState"];
9->15 [style = solid, label="headOperatorID"];
1->12 [style = dashed, label="0"];
3->13 [style = solid, label="tailOperatorID"];
1->2 [style = solid, label="restore"];
12->8 [style = bold, label=""];
9->4 [style = solid, label="headOperatorID"];
3->12 [style = solid, label="tailOperatorID"];
3->2 [style = solid, label="tailOperatorID"];
9->13 [style = solid, label="headOperatorID"];
}
