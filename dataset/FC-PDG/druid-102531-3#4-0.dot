digraph {
38 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2010/P1D\",0)@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
39 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,13L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "future.get(10,TimeUnit.SECONDS)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "scanResultValues = scanData(task,rollbackedInterval)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc4))@@@60@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Assert.assertEquals(2,Iterables.size(scanResultValues1))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "Assert.assertEquals(1,task.getRunner().getRowIngestionMeters().getThrownAway())@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "kafkaProducer.initTransactions()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "final QuerySegmentSpec firstInterval = objectMapper.readValue(\"\"2008/2010\"\",)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "kafkaProducer.flush()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertEquals(0,Iterables.size(scanResultValues))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "final QuerySegmentSpec rollbackedInterval = objectMapper.readValue(\"\"2010/2012\"\",)@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getThrownAway())@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testRunTransactionModeRollback['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "kafkaProducer.commitTransaction()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "kafkaProducer.beginTransaction()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "countEvents(task) != 2@@@13@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "TimeoutException e@@@35@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Thread.sleep(25)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "{}@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2011/P1D\",0)@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
66 [style = filled, label = "Iterable<ScanResultValue> scanResultValues1 = scanData(task,endInterval)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "kafkaProducer.beginTransaction()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "kafkaProducer.send(record).get()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertEquals(Status.READING,task.getRunner().getStatus())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"f\"),readSegmentColumn(\"dim1\",desc3))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,2L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,6L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@49@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2013/P1D\",0)@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "final QuerySegmentSpec endInterval = objectMapper.readValue(\"\"2008/2049\"\",)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "{}@@@35@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "testRunWithPauseAndResume['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "Assert.assertEquals(Status.PAUSED,task.getRunner().getStatus())@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "kafkaProducer.beginTransaction()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "kafkaProducer.send(record).get()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,6L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "Assert.fail(\"Task completed when it should have been paused\")@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "SegmentDescriptor desc4 = SD(task,\"2049/P1D\",0)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "testRunWithPauseAndResume['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc1))@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "Iterable<ScanResultValue> scanResultValues = scanData(task,firstInterval)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "kafkaProducer.initTransactions()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "kafkaProducer.abortTransaction()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "Map<Integer,Long> currentOffsets = objectMapper.readValue(task.getRunner().pause().getEntity().toString(),new TypeReference<Map<Integer,Long>>(){})@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getUnparseable())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,13L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,null))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "kafkaProducer.initTransactions()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2011/P1D\",0)@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "kafkaProducer.beginTransaction()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Assert.assertEquals(task.getRunner().getEndOffsets(),task.getRunner().getCurrentOffsets())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "kafkaProducer.commitTransaction()@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2010/P1D\",0)@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "kafkaProducer.commitTransaction()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "kafkaProducer.send(record).get()@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "Assert.assertEquals(2,countEvents(task))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3,desc4),publishedDescriptors())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "kafkaProducer.initTransactions()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "kafkaProducer.send(record).get()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "kafkaProducer.flush()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->30 [style = bold, label=""];
16->0 [style = bold, label=""];
24->71 [style = dashed, label="0"];
22->15 [style = bold, label=""];
53->69 [style = bold, label=""];
34->20 [style = bold, label=""];
43->55 [style = bold, label=""];
6->22 [style = bold, label=""];
50->64 [style = solid, label="task"];
70->65 [style = bold, label=""];
27->28 [style = bold, label=""];
68->57 [style = solid, label="rollbackedInterval"];
55->51 [style = bold, label=""];
47->62 [style = solid, label="desc4"];
9->43 [style = bold, label=""];
64->58 [style = solid, label="desc1"];
52->68 [style = bold, label=""];
3->5 [style = bold, label=""];
12->38 [style = bold, label=""];
31->19 [style = solid, label="desc1"];
31->64 [style = dashed, label="0"];
50->8 [style = solid, label="task"];
6->11 [style = bold, label=""];
33->56 [style = bold, label=""];
28->25 [style = bold, label=""];
4->7 [style = solid, label="task"];
47->60 [style = bold, label=""];
39->58 [style = bold, label=""];
60->39 [style = bold, label=""];
14->20 [style = bold, label=""];
55->51 [style = solid, label="scanResultValues"];
57->46 [style = bold, label=""];
50->40 [style = solid, label="task"];
4->38 [style = solid, label="task"];
0->3 [style = bold, label=""];
5->10 [style = bold, label=""];
1->4 [style = bold, label=""];
22->33 [style = bold, label=""];
24->19 [style = bold, label=""];
64->71 [style = bold, label=""];
67->64 [style = bold, label=""];
33->44 [style = dashed, label="0"];
38->19 [style = solid, label="desc1"];
40->52 [style = bold, label=""];
26->14 [style = bold, label=""];
37->19 [style = solid, label="desc2"];
48->44 [style = bold, label=""];
25->2 [style = bold, label=""];
56->66 [style = solid, label="endInterval"];
41->61 [style = bold, label=""];
66->70 [style = solid, label="scanResultValues1"];
71->41 [style = solid, label="desc2"];
31->38 [style = dashed, label="0"];
54->60 [style = solid, label="desc3"];
4->8 [style = solid, label="task"];
50->57 [style = solid, label="task"];
10->34 [style = bold, label=""];
38->37 [style = bold, label=""];
4->50 [style = dashed, label="0"];
24->21 [style = solid, label="desc2"];
46->20 [style = bold, label=""];
8->29 [style = dotted, label="true"];
51->42 [style = bold, label=""];
64->60 [style = solid, label="desc1"];
59->48 [style = bold, label=""];
12->31 [style = bold, label=""];
26->20 [style = bold, label=""];
63->45 [style = bold, label=""];
15->33 [style = bold, label=""];
50->30 [style = solid, label="task"];
66->70 [style = bold, label=""];
71->54 [style = bold, label=""];
24->19 [style = solid, label="desc2"];
50->66 [style = solid, label="task"];
31->24 [style = bold, label=""];
54->61 [style = solid, label="desc3"];
30->9 [style = bold, label=""];
19->17 [style = bold, label=""];
45->53 [style = bold, label=""];
44->67 [style = bold, label=""];
33->12 [style = bold, label=""];
56->66 [style = bold, label=""];
69->40 [style = bold, label=""];
23->20 [style = solid, label="currentOffsets"];
12->67 [style = dashed, label="0"];
4->7 [style = bold, label=""];
49->50 [style = bold, label=""];
4->37 [style = solid, label="task"];
21->39 [style = dashed, label="0"];
42->63 [style = bold, label=""];
24->37 [style = dashed, label="0"];
37->21 [style = solid, label="desc2"];
11->22 [style = bold, label=""];
4->30 [style = solid, label="task"];
50->55 [style = solid, label="task"];
23->18 [style = bold, label=""];
61->62 [style = bold, label=""];
18->16 [style = bold, label=""];
29->8 [style = bold, label=""];
32->21 [style = bold, label=""];
50->54 [style = solid, label="task"];
50->47 [style = solid, label="task"];
71->60 [style = solid, label="desc2"];
25->13 [style = bold, label=""];
47->60 [style = solid, label="desc4"];
57->46 [style = solid, label="scanResultValues"];
50->7 [style = bold, label=""];
31->32 [style = solid, label="desc1"];
20->6 [style = bold, label=""];
17->32 [style = bold, label=""];
36->26 [style = bold, label=""];
4->31 [style = solid, label="task"];
35->4 [style = bold, label=""];
58->41 [style = bold, label=""];
2->13 [style = bold, label=""];
68->57 [style = bold, label=""];
4->24 [style = solid, label="task"];
9->23 [style = bold, label=""];
32->60 [style = dashed, label="0"];
54->47 [style = bold, label=""];
65->59 [style = bold, label=""];
43->55 [style = solid, label="firstInterval"];
7->27 [style = bold, label=""];
38->32 [style = solid, label="desc1"];
37->19 [style = bold, label=""];
13->8 [style = bold, label=""];
50->71 [style = solid, label="task"];
50->7 [style = solid, label="task"];
8->29 [style = bold, label=""];
}
