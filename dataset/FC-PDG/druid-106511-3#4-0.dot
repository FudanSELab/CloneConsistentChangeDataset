digraph {
20 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",0L,\"qf\",0.0,\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "testGroupByNumericStringsAsNumericWithDecoration['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "NullHandling.replaceWithDefault()@@@11@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "expectedException.expectMessage(\"GroupBy v1 only supports dimensions with an outputType of STRING.\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ListFilteredDimensionSpec listFilteredSpec = new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityFloat\",\"qf\",ValueType.FLOAT),Sets.newHashSet(\"17000.0\"),true)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "ListFilteredDimensionSpec listFilteredSpec = new ListFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityNumericString\",\"qf\",ValueType.FLOAT),Sets.newHashSet(\"170000\"),true)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",NullHandling.defaultLongValue(),\"qf\",NullHandling.defaultDoubleValue(),\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",170000L,\"qf\",170000.0,\"count\",2L))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testGroupByNumericStringsAsNumericWithDecoration['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "RegexFilteredDimensionSpec regexSpec = new RegexFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityLong\",\"ql\",ValueType.LONG),\"1700\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "RegexFilteredDimensionSpec regexSpec = new RegexFilteredDimensionSpec(new DefaultDimensionSpec(\"qualityNumericString\",\"ql\",ValueType.LONG),\"170000\")@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(regexSpec,listFilteredSpec).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).addOrderByColumn(\"ql\").build()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"numeric-string\")@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "GroupByQuery query = GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(regexSpec,listFilteredSpec).setDimFilter(new InDimFilter(\"quality\",Arrays.asList(\"entertainment\",\"technology\"),null)).setAggregatorSpecs(new CountAggregatorFactory(\"count\")).setGranularity(QueryRunnerTestHelper.allGran).build()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testGroupByDecorationOnNumerics['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "expectedResults = Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",null,\"qf\",null,\"count\",2L),GroupByQueryRunnerTestHelper.createExpectedRow(\"2011-04-01\",\"ql\",1700L,\"qf\",17000.0,\"count\",2L))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "List<Row> expectedResults@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Iterable<Row> results = GroupByQueryRunnerTestHelper.runQuery(factory,runner,query)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "TestHelper.assertExpectedObjects(expectedResults,results,\"\")@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "expectedException.expect()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->3 [style = bold, label=""];
0->9 [style = bold, label=""];
0->9 [style = solid, label="results"];
7->1 [style = bold, label=""];
1->8 [style = bold, label=""];
0->12 [style = solid, label="results"];
0->12 [style = bold, label=""];
18->13 [style = dotted, label="false"];
14->17 [style = bold, label=""];
8->6 [style = bold, label=""];
4->18 [style = bold, label=""];
5->0 [style = solid, label="query"];
6->17 [style = dashed, label="0"];
18->20 [style = dotted, label="true"];
8->14 [style = dashed, label="0"];
16->2 [style = bold, label=""];
11->2 [style = bold, label=""];
3->0 [style = bold, label=""];
20->21 [style = solid, label="expectedResults"];
6->5 [style = bold, label=""];
18->20 [style = bold, label=""];
13->19 [style = bold, label=""];
13->21 [style = solid, label="expectedResults"];
19->21 [style = solid, label="results"];
2->1 [style = dotted, label="true"];
2->7 [style = dotted, label="true"];
2->14 [style = bold, label=""];
5->4 [style = bold, label=""];
15->4 [style = bold, label=""];
17->15 [style = bold, label=""];
18->13 [style = bold, label=""];
15->19 [style = solid, label="query"];
10->2 [style = bold, label=""];
1->14 [style = bold, label=""];
9->12 [style = dashed, label="0"];
2->7 [style = bold, label=""];
20->19 [style = bold, label=""];
3->12 [style = solid, label="expectedResults"];
5->15 [style = dashed, label="0"];
3->9 [style = solid, label="expectedResults"];
2->8 [style = bold, label=""];
19->21 [style = bold, label=""];
}
