digraph {
13 [style = filled, label = "RetryPolicy policy = new RetryPolicy(){@Override public boolean allowRetry(int retryCount,long elapsedTimeMs,RetrySleeper sleeper){semaphore.release()if (retries.incrementAndGet() == MAX_RETRIES) {try {server.restart()}catch (Exception e) }try {sleeper.sleepFor(100,TimeUnit.MILLISECONDS)}catch (InterruptedException e) return true}}@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testRetry['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "server.stop()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertTrue(semaphore.tryAcquire(MAX_RETRIES,timing.forWaiting().seconds(),TimeUnit.SECONDS),\"Remaining leases: \" + semaphore.availablePermits())@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@23@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(new RetryOneTime(100))@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "client.getZookeeperClient().setRetryPolicy(policy)@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "semaphore.drainPermits()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "testRetry['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "client.start()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testNestedCalls['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "server.stop()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "final AtomicInteger retries = new AtomicInteger(0)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Assert.assertTrue(latch.await(10,TimeUnit.SECONDS))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "client.checkExists().inBackground().forPath(\"/hey\")@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "client.start()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(),timing.session(),timing.connection(),new RetryOneTime(10))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final int MAX_RETRIES = 3@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "client.checkExists().inBackground(latch).forPath(\"/hey\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "client.checkExists().forPath(\"/hey\")@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final File tempDirectory = server.getTempDirectory()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
4 [style = filled, label = "final Semaphore semaphore = new Semaphore(0)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "client.getCuratorListenable().addListener(new CuratorListener(){@Override public void eventReceived(CuratorFramework client,CuratorEvent event){if (event.getType() == CuratorEventType.EXISTS) {Stat stat = client.checkExists().forPath(\"/yo/yo/yo\")Assert.assertNull(stat)client.create().inBackground(event.getContext()).forPath(\"/what\")}if (event.getType() == CuratorEventType.CREATE) {((CountDownLatch)event.getContext()).countDown()}}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "{CloseableUtils.closeQuietly(client)}@@@43@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final int serverPort = server.getPort()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "retries.set(0)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8->16 [style = bold, label=""];
17->1 [style = bold, label=""];
11->14 [style = bold, label=""];
20->9 [style = bold, label=""];
1->8 [style = solid, label="MAX_RETRIES"];
19->20 [style = bold, label=""];
27->28 [style = bold, label=""];
26->25 [style = bold, label=""];
4->13 [style = bold, label=""];
30->23 [style = bold, label=""];
1->13 [style = solid, label="MAX_RETRIES"];
1->3 [style = bold, label=""];
5->15 [style = bold, label=""];
10->21 [style = bold, label=""];
13->10 [style = solid, label="policy"];
11->16 [style = solid, label="client"];
1->11 [style = bold, label=""];
24->30 [style = bold, label=""];
1->9 [style = solid, label="MAX_RETRIES"];
23->29 [style = bold, label=""];
25->27 [style = bold, label=""];
6->4 [style = bold, label=""];
0->10 [style = bold, label=""];
7->5 [style = bold, label=""];
25->29 [style = solid, label="client"];
13->12 [style = bold, label=""];
9->18 [style = bold, label=""];
3->2 [style = bold, label=""];
28->24 [style = bold, label=""];
21->7 [style = bold, label=""];
22->1 [style = bold, label=""];
12->19 [style = bold, label=""];
13->12 [style = solid, label="policy"];
14->6 [style = bold, label=""];
2->11 [style = bold, label=""];
18->0 [style = bold, label=""];
15->8 [style = bold, label=""];
}
