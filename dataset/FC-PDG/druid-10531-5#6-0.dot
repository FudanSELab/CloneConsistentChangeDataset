digraph {
11 [style = filled, label = "doCompactSegments(compactSegments,compactionConfigs)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ArgumentCaptor<List<DataSegment>> segmentsCaptor = ArgumentCaptor.forClass()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Mockito.when(mockIndexingServiceClient.getTaskPayload(ArgumentMatchers.eq(conflictTaskId))).thenReturn(runningConflictCompactionTaskPayload)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testCompactWithGranularitySpecConflictWithActiveCompactionTask['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "TaskStatusPlus runningConflictCompactionTask = new TaskStatusPlus(conflictTaskId,\"groupId\",\"compact\",DateTimes.EPOCH,DateTimes.EPOCH,TaskState.RUNNING,RunnerTaskState.RUNNING,-1L,TaskLocation.unknown(),dataSource,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final String dataSource = DATA_SOURCE_PREFIX + 0@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER,mockIndexingServiceClient)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Mockito.verify(mockIndexingServiceClient).compactSegments(ArgumentMatchers.anyString(),segmentsCaptor.capture(),ArgumentMatchers.anyInt(),ArgumentMatchers.any(),granularitySpecArgumentCaptor.capture(),ArgumentMatchers.any(),ArgumentMatchers.any())@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "doCompactSegments(compactSegments,compactionConfigs)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>()@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testCompactWithGranularitySpec['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Assert.assertNotNull(actual)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Mockito.when(mockIndexingServiceClient.getActiveTasks()).thenReturn(ImmutableList.of(runningConflictCompactionTask))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "compactionConfigs.add(new DataSourceCompactionConfig(dataSource,0,500L,null,new Period(\"PT0H\"),new UserCompactionTaskQueryTuningConfig(null,null,null,null,partitionsSpec,null,null,null,null,null,3,null,null,null,null,null,null),new UserCompactionTaskGranularityConfig(Granularities.YEAR,null),null,null))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "ArgumentCaptor<ClientCompactionTaskGranularitySpec> granularitySpecArgumentCaptor = ArgumentCaptor.forClass()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "TaskPayloadResponse runningConflictCompactionTaskPayload = new TaskPayloadResponse(conflictTaskId,new ClientCompactionTaskQuery(conflictTaskId,dataSource,new ClientCompactionIOConfig(new ClientCompactionIntervalSpec(Intervals.of(\"2000/2099\"),\"testSha256OfSortedSegmentIds\")),null,new ClientCompactionTaskGranularitySpec(Granularities.DAY,null),null))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Assert.assertEquals(datasourceToSegments.get(dataSource).size(),segmentsCaptor.getValue().size())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "ClientCompactionTaskGranularitySpec actual = granularitySpecArgumentCaptor.getValue()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "final String conflictTaskId = \"taskIdDummy\"@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Mockito.verify(mockIndexingServiceClient).compactSegments(ArgumentMatchers.anyString(),segmentsCaptor.capture(),ArgumentMatchers.anyInt(),ArgumentMatchers.any(),granularitySpecArgumentCaptor.capture(),ArgumentMatchers.any())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER,mockIndexingServiceClient)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "ClientCompactionTaskGranularitySpec expected = new ClientCompactionTaskGranularitySpec(Granularities.YEAR,null)@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testCompactWithGranularitySpec['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "Assert.assertEquals(expected,actual)@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "compactionConfigs.add(new DataSourceCompactionConfig(dataSource,0,500L,null,new Period(\"PT0H\"),new UserCompactionTaskQueryTuningConfig(null,null,null,null,partitionsSpec,null,null,null,null,null,3,null,null,null,null,null,null),new UserCompactionTaskGranularityConfig(Granularities.YEAR,null),null))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Mockito.verify(mockIndexingServiceClient).cancelTask(conflictTaskId)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->2 [style = bold, label=""];
27->24 [style = solid, label="runningConflictCompactionTask"];
12->7 [style = bold, label=""];
10->14 [style = solid, label="compactSegments"];
19->10 [style = bold, label=""];
1->9 [style = bold, label=""];
26->13 [style = bold, label=""];
10->17 [style = bold, label=""];
1->9 [style = solid, label="actual"];
23->24 [style = bold, label=""];
20->0 [style = solid, label="dataSource"];
10->17 [style = solid, label="dataSource"];
27->23 [style = bold, label=""];
11->18 [style = bold, label=""];
11->15 [style = bold, label=""];
10->5 [style = solid, label="dataSource"];
21->25 [style = solid, label="expected"];
1->25 [style = solid, label="actual"];
8->6 [style = bold, label=""];
9->21 [style = bold, label=""];
22->20 [style = bold, label=""];
0->11 [style = bold, label=""];
15->6 [style = bold, label=""];
7->15 [style = solid, label="compactSegments"];
20->27 [style = solid, label="dataSource"];
4->1 [style = bold, label=""];
7->13 [style = bold, label=""];
16->12 [style = bold, label=""];
21->25 [style = bold, label=""];
5->0 [style = bold, label=""];
14->9 [style = solid, label="actual"];
6->14 [style = bold, label=""];
13->27 [style = bold, label=""];
3->12 [style = bold, label=""];
11->8 [style = bold, label=""];
20->23 [style = solid, label="dataSource"];
10->11 [style = solid, label="compactSegments"];
8->15 [style = dashed, label="0"];
1->9 [style = solid, label="expected"];
26->27 [style = solid, label="conflictTaskId"];
12->7 [style = solid, label="mockIndexingServiceClient"];
7->2 [style = solid, label="compactSegments"];
23->19 [style = solid, label="runningConflictCompactionTaskPayload"];
2->0 [style = bold, label=""];
24->19 [style = bold, label=""];
13->2 [style = solid, label="compactionConfigs"];
14->4 [style = bold, label=""];
18->8 [style = bold, label=""];
14->4 [style = solid, label="actual"];
13->10 [style = bold, label=""];
7->8 [style = solid, label="compactSegments"];
26->18 [style = solid, label="conflictTaskId"];
20->26 [style = bold, label=""];
5->17 [style = dashed, label="0"];
10->5 [style = bold, label=""];
5->11 [style = solid, label="compactionConfigs"];
17->2 [style = bold, label=""];
13->10 [style = solid, label="mockIndexingServiceClient"];
26->23 [style = solid, label="conflictTaskId"];
}
