digraph {
8 [style = filled, label = "DataStreamSink<Integer> sink = process.addSink(new DiscardingSink<>())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "StreamGraph graph = graphGenerator.generate()@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "SingleOutputStreamOperator<Integer> process = env.fromElements(1,2).keyBy(null).process(DUMMY_PROCESS_FUNCTION)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testDisablingSortingInputsWithoutBatchStateBackendOneInputTransformation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "graphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expectedException.expectMessage(\"Batch state backend requires the sorted inputs to be enabled!\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "StreamNode processNode = graph.getStreamNode(process.getId())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
14 [style = filled, label = "testDisablingStateBackendOneInputTransformation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "graphGenerator.generate()@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(processNode.getInputRequirements().get(0),equalTo(StreamConfig.InputRequirement.SORTED))@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "testDisablingStateBackendOneInputTransformation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(graph.getStateBackend(),nullValue())@@@14@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "StreamGraphGenerator graphGenerator = new StreamGraphGenerator(Collections.singletonList(sink.getTransformation()),env.getConfig(),env.getCheckpointConfig(),configuration)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertThat(processNode.getOperatorFactory().getChainingStrategy(),equalTo(ChainingStrategy.HEAD))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Configuration configuration = new Configuration()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "StreamGraph graph = getStreamGraphInBatchMode(sink,configuration)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertThat(graph.getStateBackend(),nullValue())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertThat(graph.getTimerServiceProvider(),nullValue())@@@15@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(graph.getTimerServiceProvider(),nullValue())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "configuration.set(ExecutionOptions.USE_BATCH_STATE_BACKEND,false)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "configuration.set(ExecutionOptions.SORT_INPUTS,false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "expectedException.expect()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
0->3 [style = bold, label=""];
16->3 [style = bold, label=""];
7->17 [style = solid, label="configuration"];
22->19 [style = bold, label=""];
4->6 [style = bold, label=""];
11->1 [style = bold, label=""];
9->18 [style = dashed, label="0"];
12->11 [style = bold, label=""];
9->17 [style = bold, label=""];
9->10 [style = bold, label=""];
3->12 [style = bold, label=""];
15->16 [style = bold, label=""];
2->4 [style = bold, label=""];
7->10 [style = solid, label="configuration"];
8->7 [style = bold, label=""];
20->22 [style = bold, label=""];
7->9 [style = bold, label=""];
8->17 [style = solid, label="sink"];
18->10 [style = bold, label=""];
10->13 [style = bold, label=""];
6->8 [style = bold, label=""];
17->15 [style = bold, label=""];
7->18 [style = bold, label=""];
21->4 [style = bold, label=""];
13->0 [style = bold, label=""];
14->4 [style = bold, label=""];
13->20 [style = bold, label=""];
}
