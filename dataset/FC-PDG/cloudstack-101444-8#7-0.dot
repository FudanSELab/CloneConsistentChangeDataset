digraph {
44 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range is used for static nat purposes. Cleanup the rules first\")@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "List<DomainVlanMapVO> domainVlan = _domainVlanMapDao.listDomainVlanMapsByVlan(vlanRange.getId())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "boolean isAccountSpecific = false@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "throw new InvalidParameterValueException(\"Cannot delete vlan range \" + vlanDbId + \" as \" + ipAlias.getIp4Address() + \"is being used for providing dhcp service in this subnet. Delete all VMs in this subnet and try again\")@@@62@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
65 [style = filled, label = "SearchCriteria<IPAddressVO> sc = sb.create()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "vlanRange = _vlanDao.acquireInLockTable(vlanDbId,30)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final NicIpAliasVO ipAlias = _nicIpAliasDao.findByGatewayAndNetworkIdAndState(vlanRange.getVlanGateway(),vlanRange.getNetworkId(),NicIpAlias.State.active)@@@60@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "isAccountSpecific = true@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range has firewall rules applied. Cleanup the rules first\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "final NicIpAliasVO ipAlias = _nicIpAliasDao.findByGatewayAndNetworkIdAndState(vlanRange.getVlanGateway(),vlanRange.getNetworkId(),NicIpAlias.State.active)@@@59@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "return userIpAddresVO.isForSystemVms()@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "allocIpCount > 0@@@65@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "final List<IPAddressVO> ips = _publicIpAddressDao.listByVlanId(vlanDbId)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "VlanVO vlanRange = _vlanDao.findById(vlanDbId)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "SearchBuilder<IPAddressVO> sb = userIpAddressDao.createSearchBuilder()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "isForSystemVms['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "deleteVlanAndPublicIpRange['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "boolean success = true@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "return true@@@84@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "ip.isSourceNat()@@@33@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final long allocIpCount = _publicIpAddressDao.countIPs(vlanRange.getDataCenterId(),vlanDbId,true)@@@63@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "isAccountSpecific@@@18@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "acctVln != null && !acctVln.isEmpty()@@@9@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "domainVlan != null && !domainVlan.isEmpty()@@@14@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "sb.and(\"vlanId\",sb.entity().getVlanId(),SearchCriteria.Op.EQ)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "s_logger.isDebugEnabled()@@@25@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final long vlanDbId@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "vlanRange == null@@@22@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "s_logger.debug(\"lock vlan \" + vlanDbId + \" is acquired\")@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "ip.getAllocatedTime() != null@@@39@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "throw new InvalidParameterValueException(\"Please specify a valid IP range id.\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "_firewallDao.countRulesByIpId(ip.getId()) > 0@@@36@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final List<AccountVlanMapVO> acctVln = _accountVlanMapDao.listAccountVlanMapsByVlan(vlanRange.getId())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "return true@@@83@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "success = _ipAddrMgr.disassociatePublicIpAddress(ip.getId(),userId,caller)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "!success@@@42@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "final boolean usageHidden = _ipAddrMgr.isUsageHidden(ip)@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "ips@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
53 [style = filled, label = "Transaction.execute(new TransactionCallbackNoReturn(){@Override public void doInTransactionWithoutResult(final TransactionStatus status){_publicIpAddressDao.deletePublicIPRange(vlanDbId)s_logger.debug(String.format(\"Delete Public IP Range (from user_ip_address, where vlan_db_d=%s)\",vlanDbId))_vlanDao.remove(vlanDbId)s_logger.debug(String.format(\"Mark vlan as Remove vlan (vlan_db_id=%s)\",vlanDbId))SearchBuilder<PodVlanMapVO> sb = podVlanMapDao.createSearchBuilder()sb.and(\"vlan_db_id\",sb.entity().getVlanDbId(),SearchCriteria.Op.EQ)SearchCriteria<PodVlanMapVO> sc = sb.create()sc.setParameters(\"vlan_db_id\",vlanDbId)podVlanMapDao.remove(sc)s_logger.debug(String.format(\"Delete vlan_db_id=%s in pod_vlan_map\",vlanDbId))}})@@@69@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
58 [style = filled, label = "long vlanId@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "final IPAddressVO ip@@@28@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_RELEASE,acctVln.get(0).getAccountId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlanRange.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid())@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "ipAlias != null && vlanDbId == _publicIpAddressDao.findByIpAndSourceNetworkId(vlanRange.getNetworkId(),ipAlias.getIp4Address()).getVlanId()@@@61@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "vlanRange == null@@@4@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "ip.isOneToOneNat()@@@30@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int resourceCountToBeDecrement = 0@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "final long vlanDbId@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "sc.setParameters(\"vlanId\",vlanId)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "isDomainSpecific = true@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "throw new InvalidParameterValueException(\"Can't delete account specific vlan \" + vlanDbId + \" as ip \" + ip + \" belonging to the range is a source nat ip for the network id=\" + ip.getSourceNetworkId() + \". IP range with the source nat ip address can be removed either as a part of Network, or account removal\")@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "{_vlanDao.releaseFromLockTable(vlanDbId)if (resourceCountToBeDecrement > 0) {_resourceLimitMgr.decrementResourceCount(acctVln.get(0).getAccountId(),ResourceType.public_ip,new Long(resourceCountToBeDecrement))}}@@@51@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "throw new CloudRuntimeException(\"Unable to acquire vlan configuration: \" + vlanDbId)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_RELEASE,acctVln.get(0).getAccountId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlanRange.getVlanType().toString(),ip.getSystem(),usageHidden,ip.getClass().getName(),ip.getUuid())@@@48@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
61 [style = filled, label = "IPAddressVO userIpAddresVO = userIpAddressDao.findOneBy(sc)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "{_vlanDao.releaseFromLockTable(vlanDbId)if (resourceCountToBeDecrement > 0) {_resourceLimitMgr.decrementResourceCount(acctVln.get(0).getAccountId(),ResourceType.public_ip,new Long(resourceCountToBeDecrement))}}@@@52@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "final long allocIpCount = _publicIpAddressDao.countIPs(vlanRange.getDataCenterId(),vlanDbId,true)@@@64@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "final Account caller@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "throw new InvalidParameterValueException(allocIpCount + \" Ips are in use. Cannot delete this vlan\")@@@66@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "resourceCountToBeDecrement++@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Transaction.execute(new TransactionCallbackNoReturn(){@Override public void doInTransactionWithoutResult(final TransactionStatus status){_publicIpAddressDao.deletePublicIPRange(vlanDbId)s_logger.debug(String.format(\"Delete Public IP Range (from user_ip_address, where vlan_db_d=%s)\",vlanDbId))_vlanDao.remove(vlanDbId)s_logger.debug(String.format(\"Mark vlan as Remove vlan (vlan_db_id=%s)\",vlanDbId))SearchBuilder<PodVlanMapVO> sb = podVlanMapDao.createSearchBuilder()sb.and(\"vlan_db_id\",sb.entity().getVlanDbId(),SearchCriteria.Op.EQ)SearchCriteria<PodVlanMapVO> sc = sb.create()sc.setParameters(\"vlan_db_id\",vlanDbId)podVlanMapDao.remove(sc)s_logger.debug(String.format(\"Delete vlan_db_id=%s in pod_vlan_map\",vlanDbId))}})@@@68@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final long userId@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "deleteVlanAndPublicIpRange['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "ips@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
32 [style = filled, label = "boolean isDomainSpecific = false@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "s_logger.warn(\"Some ip addresses failed to be released as a part of vlan \" + vlanDbId + \" removal\")@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "final Account caller@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
28->13 [style = bold, label=""];
60->61 [style = bold, label=""];
8->9 [style = dotted, label="false"];
37->51 [style = bold, label=""];
9->16 [style = solid, label="ipAlias"];
47->10 [style = solid, label="vlanDbId"];
8->25 [style = dotted, label="false"];
14->33 [style = solid, label="vlanDbId"];
13->6 [style = bold, label=""];
43->28 [style = bold, label=""];
39->32 [style = bold, label=""];
40->53 [style = bold, label=""];
37->2 [style = bold, label=""];
3->7 [style = bold, label=""];
47->33 [style = solid, label="vlanDbId"];
56->52 [style = bold, label=""];
8->15 [style = dotted, label="true"];
39->36 [style = dotted, label="true"];
7->40 [style = bold, label=""];
15->26 [style = bold, label=""];
8->25 [style = bold, label=""];
47->48 [style = solid, label="vlanDbId"];
8->5 [style = dotted, label="true"];
65->61 [style = solid, label="sc"];
5->33 [style = bold, label=""];
52->43 [style = bold, label=""];
25->9 [style = solid, label="ipAlias"];
32->0 [style = bold, label=""];
16->7 [style = bold, label=""];
38->27 [style = dotted, label="true"];
8->28 [style = dotted, label="true"];
21->14 [style = dotted, label="true"];
14->44 [style = solid, label="vlanDbId"];
13->20 [style = bold, label=""];
7->19 [style = bold, label=""];
10->38 [style = bold, label=""];
47->44 [style = solid, label="vlanDbId"];
14->9 [style = solid, label="vlanDbId"];
36->8 [style = solid, label="isAccountSpecific"];
57->47 [style = dotted, label="true"];
8->3 [style = dotted, label="false"];
64->63 [style = bold, label=""];
14->26 [style = solid, label="vlanDbId"];
8->13 [style = dotted, label="true"];
8->11 [style = dotted, label="true"];
30->2 [style = solid, label="resourceCountToBeDecrement"];
16->48 [style = dotted, label="true"];
30->51 [style = solid, label="resourceCountToBeDecrement"];
41->30 [style = bold, label=""];
29->51 [style = solid, label="resourceCountToBeDecrement"];
0->42 [style = bold, label=""];
9->16 [style = bold, label=""];
57->10 [style = bold, label=""];
22->41 [style = bold, label=""];
8->34 [style = dotted, label="true"];
5->43 [style = bold, label=""];
21->17 [style = dotted, label="true"];
8->20 [style = dotted, label="true"];
6->20 [style = bold, label=""];
14->3 [style = solid, label="vlanDbId"];
45->8 [style = solid, label="isAccountSpecific"];
39->36 [style = bold, label=""];
20->35 [style = bold, label=""];
52->51 [style = bold, label=""];
18->43 [style = bold, label=""];
15->5 [style = bold, label=""];
5->33 [style = dotted, label="true"];
8->16 [style = dotted, label="false"];
25->9 [style = bold, label=""];
57->49 [style = dotted, label="true"];
41->18 [style = dotted, label="false"];
45->23 [style = bold, label=""];
47->4 [style = solid, label="vlanDbId"];
3->40 [style = solid, label="allocIpCount"];
12->41 [style = bold, label=""];
27->45 [style = bold, label=""];
30->56 [style = bold, label=""];
20->12 [style = bold, label=""];
7->40 [style = solid, label="allocIpCount"];
38->45 [style = bold, label=""];
59->65 [style = bold, label=""];
48->7 [style = bold, label=""];
53->54 [style = bold, label=""];
29->2 [style = solid, label="resourceCountToBeDecrement"];
13->6 [style = dotted, label="true"];
57->17 [style = dotted, label="true"];
42->24 [style = bold, label=""];
14->6 [style = solid, label="vlanDbId"];
41->37 [style = bold, label=""];
15->26 [style = dotted, label="true"];
30->18 [style = bold, label=""];
14->37 [style = solid, label="vlanDbId"];
58->60 [style = solid, label="vlanId"];
47->37 [style = solid, label="vlanDbId"];
61->62 [style = bold, label=""];
21->1 [style = dotted, label="true"];
40->55 [style = dotted, label="true"];
28->44 [style = bold, label=""];
47->35 [style = solid, label="vlanDbId"];
63->59 [style = bold, label=""];
7->55 [style = solid, label="allocIpCount"];
28->44 [style = dotted, label="true"];
21->10 [style = bold, label=""];
8->50 [style = dotted, label="true"];
8->41 [style = dotted, label="true"];
47->46 [style = solid, label="vlanDbId"];
2->19 [style = bold, label=""];
20->35 [style = dotted, label="true"];
16->3 [style = bold, label=""];
40->55 [style = bold, label=""];
41->37 [style = dotted, label="true"];
41->30 [style = dotted, label="false"];
9->16 [style = dotted, label="true"];
55->53 [style = bold, label=""];
36->32 [style = bold, label=""];
8->40 [style = dotted, label="false"];
17->22 [style = solid, label="userId"];
47->16 [style = solid, label="vlanDbId"];
8->7 [style = dotted, label="false"];
8->29 [style = dotted, label="true"];
42->24 [style = dotted, label="true"];
33->43 [style = bold, label=""];
14->16 [style = solid, label="vlanDbId"];
10->38 [style = solid, label="vlanRange"];
14->46 [style = solid, label="vlanDbId"];
4->15 [style = solid, label="vlanRange"];
44->13 [style = bold, label=""];
14->35 [style = solid, label="vlanDbId"];
14->19 [style = solid, label="vlanDbId"];
8->9 [style = bold, label=""];
18->2 [style = bold, label=""];
49->22 [style = solid, label="caller"];
56->52 [style = solid, label="usageHidden"];
37->43 [style = bold, label=""];
9->3 [style = bold, label=""];
1->22 [style = solid, label="caller"];
23->39 [style = bold, label=""];
29->4 [style = bold, label=""];
51->53 [style = bold, label=""];
16->48 [style = bold, label=""];
47->26 [style = solid, label="vlanDbId"];
12->22 [style = bold, label=""];
41->56 [style = dotted, label="false"];
14->4 [style = solid, label="vlanDbId"];
64->58 [style = dotted, label="true"];
12->22 [style = dotted, label="true"];
8->29 [style = bold, label=""];
23->39 [style = solid, label="acctVln"];
26->5 [style = bold, label=""];
47->53 [style = solid, label="vlanDbId"];
8->43 [style = dotted, label="true"];
29->30 [style = solid, label="resourceCountToBeDecrement"];
42->46 [style = bold, label=""];
40->19 [style = bold, label=""];
65->60 [style = bold, label=""];
47->7 [style = solid, label="vlanDbId"];
14->10 [style = solid, label="vlanDbId"];
7->40 [style = dotted, label="true"];
35->12 [style = bold, label=""];
19->31 [style = bold, label=""];
0->42 [style = solid, label="domainVlan"];
46->8 [style = bold, label=""];
4->15 [style = bold, label=""];
3->7 [style = solid, label="allocIpCount"];
47->51 [style = solid, label="vlanDbId"];
47->6 [style = solid, label="vlanDbId"];
24->46 [style = bold, label=""];
38->27 [style = bold, label=""];
14->2 [style = solid, label="vlanDbId"];
8->4 [style = dotted, label="true"];
41->52 [style = dotted, label="false"];
8->12 [style = dotted, label="true"];
}
