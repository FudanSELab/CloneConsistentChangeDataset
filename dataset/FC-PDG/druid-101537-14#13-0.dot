digraph {
7 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(authenticationResult).anyTimes()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return req@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "makeExpectedReq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8,\"test_sql_resource_%s\"))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final PlannerConfig plannerConfig = new PlannerConfig(){@Override public boolean shouldSerializeComplexValues(){return false}}@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "final QueryScheduler scheduler = new QueryScheduler(5,ManualQueryPrioritizationStrategy.INSTANCE,new HiLoQueryLaningStrategy(40),new ServerConfig()){@Override public Sequence<T> run(Query<?> query,Sequence<T> resultSequence){return super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abd5c2querynew LazySequence<T>(null)}}@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).anyTimes()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "final ServiceEmitter emitter = new NoopServiceEmitter()@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(authenticationResult).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "EasyMock.replay(req)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(authenticationResult).anyTimes()@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "AuthenticationResult authenticationResult@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "HttpServletRequest req = EasyMock.createStrictMock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate,walker,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "EasyMock.replay(req)@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "lifecycleManager = new SqlLifecycleManager(){@Override public void add(String sqlQueryId,SqlLifecycle lifecycle){super.edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@abd6aasqlQueryIdlifecycleif (lifecycleAddLatch != null) {lifecycleAddLatch.countDown()}}}@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "walker = CalciteTests.createMockWalker(conglomerate,temporaryFolder.newFolder(),scheduler)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).anyTimes()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
33 [style = filled, label = "final PlannerFactory plannerFactory = new PlannerFactory(rootSchema,CalciteTests.createMockQueryLifecycleFactory(walker,conglomerate),operatorTable,macroTable,plannerConfig,CalciteTests.TEST_AUTHORIZER_MAPPER,CalciteTests.getJsonMapper(),CalciteTests.DRUID_SCHEMA_NAME)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "setUp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "resource = new SqlResource(JSON_MAPPER,CalciteTests.TEST_AUTHORIZER_MAPPER,new SqlLifecycleFactory(plannerFactory,emitter,testRequestLogger,scheduler){@Override public SqlLifecycle factorize(){return new TestSqlLifecycle(plannerFactory,emitter,testRequestLogger,scheduler,System.currentTimeMillis(),System.nanoTime(),validateAndAuthorizeLatchSupplier,planLatchSupplier,executeLatchSupplier,sequenceMapFnSupplier)}},lifecycleManager)@@@52@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final ExprMacroTable macroTable = CalciteTests.createExprMacroTable()@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testRequestLogger = new TestRequestLogger()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "req = EasyMock.createStrictMock()@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "EasyMock.expect(req.getRemoteAddr()).andReturn(null).once()@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "makeExpectedReq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED,true)@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->31 [style = bold, label=""];
16->3 [style = bold, label=""];
29->36 [style = bold, label=""];
19->33 [style = solid, label="walker"];
0->16 [style = bold, label=""];
1->4 [style = bold, label=""];
15->2 [style = bold, label=""];
10->2 [style = solid, label="req"];
5->12 [style = dashed, label="0"];
35->22 [style = solid, label="scheduler"];
33->20 [style = bold, label=""];
18->23 [style = bold, label=""];
17->33 [style = solid, label="rootSchema"];
11->15 [style = dashed, label="0"];
2->6 [style = bold, label=""];
7->16 [style = dashed, label="0"];
25->30 [style = bold, label=""];
4->15 [style = bold, label=""];
32->33 [style = solid, label="plannerConfig"];
14->10 [style = bold, label=""];
25->33 [style = solid, label="macroTable"];
30->34 [style = bold, label=""];
21->24 [style = bold, label=""];
9->10 [style = bold, label=""];
20->38 [style = bold, label=""];
12->1 [style = bold, label=""];
36->33 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
14->13 [style = dotted, label="true"];
0->7 [style = bold, label=""];
39->33 [style = solid, label="operatorTable"];
33->22 [style = solid, label="plannerFactory"];
35->28 [style = bold, label=""];
5->1 [style = bold, label=""];
30->29 [style = solid, label="req"];
19->32 [style = bold, label=""];
8->5 [style = bold, label=""];
31->27 [style = bold, label=""];
3->8 [style = bold, label=""];
17->39 [style = bold, label=""];
10->0 [style = bold, label=""];
24->37 [style = bold, label=""];
26->35 [style = bold, label=""];
28->19 [style = bold, label=""];
37->18 [style = bold, label=""];
36->22 [style = solid, label="testRequestLogger"];
32->17 [style = solid, label="plannerConfig"];
35->19 [style = solid, label="scheduler"];
39->25 [style = bold, label=""];
38->22 [style = solid, label="emitter"];
27->29 [style = bold, label=""];
38->22 [style = bold, label=""];
4->11 [style = bold, label=""];
10->6 [style = solid, label="req"];
32->17 [style = bold, label=""];
20->22 [style = solid, label="lifecycleManager"];
8->12 [style = bold, label=""];
34->21 [style = bold, label=""];
19->17 [style = solid, label="walker"];
}
