digraph {
0 [style = filled, label = "assertThatCode(null)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThatExceptionOfType().isThrownBy(null).withRootCauseInstanceOf()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "streamingError['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "MvcResult result = this.mvc.perform(get(\"/api/c1/completableFutureException\")).andExpect(request().asyncStarted()).andReturn()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "asyncRequestThatThrowsUncheckedException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(this.registry.get(\"http.server.requests\").tags(\"uri\",\"/api/c1/completableFutureException\").timer().count()).isEqualTo(1)@@@5@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(this.registry.get(\"http.server.requests\").tags(\"exception\",\"IOException\").timer().count()).isEqualTo(1L)@@@5@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "streamingError['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "MvcResult result = this.mvc.perform(get(\"/api/c1/streamingError\")).andExpect(request().asyncStarted()).andReturn()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->1 [style = bold, label=""];
7->5 [style = bold, label=""];
0->6 [style = dashed, label="0"];
1->0 [style = bold, label=""];
1->5 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->1 [style = bold, label=""];
2->8 [style = dashed, label="0"];
6->8 [style = bold, label=""];
0->2 [style = bold, label=""];
}
