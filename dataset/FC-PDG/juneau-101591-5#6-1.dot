digraph {
20 [style = filled, label = "assertStream(stream(x,\" / test1/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/\" + p + \"(\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertStream(stream(x,\"files/test1/dir/dir/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/dir/\" + p + \"(\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertStream(stream(x,\"files/test1/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/\" + p + \"(\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertStream(stream(x,\"test1/dir/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/\" + p + \"(\")@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "FileFinder x = FileFinder.create().cp(,\"files\",false).build()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertStream(stream(x,\"test1/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/\" + p + \"(\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertStream(stream(x,p)).doesNotExist()@@@19@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "String(( badPatterns = {\"files/test1/bad.txt\",\"files/test1/../test1/_a.txt\",\"files/bad.txt\",null,\"\",\".\",\"..\"}@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertStream(stream(x,\" / files/test1/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/\" + p + \"(\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertStream(stream(x,\" / test1/dir/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/\" + p + \"(\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertStream(stream(x,\"_a.txt\")).asString().contains(\"(cp:/org/apache/juneau/cp/_a.txt(\")@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertStream(stream(x,p)).isNull()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "FileFinder x = FileFinder.create().cp(,\"\",false).build()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "d02a_classpathRelative_subdir['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertStream(stream(x,\"test1/dir/dir/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/dir/\" + p + \"(\")@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "d01a_classpathRelative_rootDir['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "assertStream(stream(x,\" / files/test1/dir/dir/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/dir/\" + p + \"(\")@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertStream(stream(x,\" / files/test1/dir/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/\" + p + \"(\")@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertStream(stream(x,\" / test1/dir/dir/\" + p + \" / \")).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/dir/\" + p + \"(\")@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "d01a_classpathRelative_rootDir['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertStream(stream(x,\"files/test1/dir/\" + p)).asString().contains(\"(cp:/org/apache/juneau/cp/files/test1/dir/\" + p + \"(\")@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String(( patterns = {\"_a.txt\",\"_b\",\".c\",\".d.txt\",\"e.txt\",\"f\",\"g_foo.txt\",\"h.foo.txt\",\"i_foo\"}@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5->13 [style = dashed, label="0"];
6->21 [style = dashed, label="0"];
0->9 [style = bold, label=""];
7->1 [style = bold, label=""];
2->6 [style = bold, label=""];
19->20 [style = bold, label=""];
9->4 [style = bold, label=""];
18->15 [style = bold, label=""];
8->20 [style = dashed, label="0"];
10->3 [style = bold, label=""];
14->17 [style = bold, label=""];
6->0 [style = bold, label=""];
1->0 [style = bold, label=""];
17->19 [style = bold, label=""];
12->7 [style = bold, label=""];
0->14 [style = dashed, label="0"];
3->5 [style = bold, label=""];
20->16 [style = bold, label=""];
8->2 [style = bold, label=""];
16->21 [style = bold, label=""];
2->16 [style = dashed, label="0"];
6->10 [style = bold, label=""];
9->17 [style = dashed, label="0"];
7->15 [style = dashed, label="0"];
3->13 [style = bold, label=""];
4->8 [style = bold, label=""];
4->19 [style = dashed, label="0"];
1->14 [style = bold, label=""];
11->7 [style = bold, label=""];
21->3 [style = bold, label=""];
21->14 [style = bold, label=""];
15->1 [style = bold, label=""];
}
