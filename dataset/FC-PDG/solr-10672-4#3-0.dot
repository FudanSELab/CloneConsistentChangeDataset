digraph {
17 [style = filled, label = "String secondExpressionString = secondStream.toExpression(factory).toString()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(expressionString.contains(\"numTerms=4\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"*:*\"\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(expressionString.contains(\"outcome=out_i\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String originalExpressionString = \"search(collection1,fl=\"id,first\",sort=\"first asc\",q=\"presentTitles:\\\"chief, executive officer\\\" AND age:(36 TO *(\")\"@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr),factory)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "testCloudSolrStreamWithEscapedQuote['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(expressionString.contains(\"field=tv_text\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testFeaturesSelectionStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String firstExpressionString = firstStream.toExpression(factory).toString()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(secondExpressionString.contains(\"q=\"presentTitles:\\\"chief, executive officer\\\" AND age:(36 TO *(\"\"))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertTrue(expressionString.contains(\"positiveLabel=2\"))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "String expressionString = stream.toExpression(factory).toString()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String expr = \"featuresSelection(collection1, q=\"*:*\", featureSet=\"first\", field=\"tv_text\", outcome=\"out_i\", numTerms=4, positiveLabel=2)\"@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString),factory)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(expressionString.contains(\"featureSet=first\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testFeaturesSelectionStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
16 [style = filled, label = "CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString),factory)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(firstExpressionString.contains(\"q=\"presentTitles:\\\"chief, executive officer\\\" AND age:(36 TO *(\"\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->13 [style = dashed, label="0"];
16->13 [style = bold, label=""];
1->8 [style = bold, label=""];
7->18 [style = dashed, label="0"];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
6->2 [style = solid, label="expr"];
12->15 [style = bold, label=""];
18->17 [style = bold, label=""];
7->0 [style = bold, label=""];
8->14 [style = dashed, label="0"];
15->16 [style = bold, label=""];
0->17 [style = dashed, label="0"];
10->6 [style = bold, label=""];
6->2 [style = bold, label=""];
6->5 [style = bold, label=""];
1->11 [style = dashed, label="0"];
0->1 [style = bold, label=""];
2->16 [style = dashed, label="0"];
8->9 [style = bold, label=""];
9->3 [style = bold, label=""];
5->7 [style = bold, label=""];
15->16 [style = solid, label="originalExpressionString"];
13->18 [style = bold, label=""];
13->18 [style = solid, label="firstExpressionString"];
2->5 [style = bold, label=""];
17->11 [style = bold, label=""];
}
