digraph {
14 [style = filled, label = "assertThrown(null).message().contains(\"It's recommended you use the BeanTraverseContext.BEANTRAVERSE_detectRecursions setting to help locate the loop.\")@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(\"<object><name>foo</name><r2><name>bar</name><r3><name>baz</name></r3></r2></object>\",s.build().serialize(r1))@@@14@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "r2.r3 = r3@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"<table><tr><th>key</th><th>value</th></tr><tr><td>name</td><td>foo</td></tr><tr><td>r2</td><td><table><tr><th>key</th><th>value</th></tr><tr><td>name</td><td>bar</td></tr><tr><td>r3</td><td><table><tr><th>key</th><th>value</th></tr><tr><td>name</td><td>baz</td></tr></table></td></tr></table></td></tr></table>\",s.build().serialize(r1))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThrown(null).contains(\"(0( <noname>:org.apache.juneau.html.Common_Test$R1\",\"(1( r2:org.apache.juneau.html.Common_Test$R2\",\"(2( r3:org.apache.juneau.html.Common_Test$R3\",\"(3( r1:org.apache.juneau.html.Common_Test$R1\")@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "HtmlSerializerBuilder s = HtmlSerializer.create().sq().addKeyValueTableHeaders().maxDepth(Integer.MAX_VALUE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "R1 r1 = new R1()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testRecursion['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "assertThrown(null).contains(\"It's recommended you use the BeanTraverseContext.BEANTRAVERSE_detectRecursions setting to help locate the loop.\")@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "R2 r2 = new R2()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "s.build().getSchemaSerializer().serialize(r1)@@@15@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "s.detectRecursions()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "R3 r3 = new R3()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertThrown(null).message().contains(\"(0( <noname>:org.apache.juneau.xml.CommonTest$R1\",\"(1( r2:org.apache.juneau.xml.CommonTest$R2\",\"(2( r3:org.apache.juneau.xml.CommonTest$R3\",\"(3( r1:org.apache.juneau.xml.CommonTest$R1\")@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "r1.r2 = r2@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "s.ignoreRecursions()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testRecursion['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThrown(null).contains(\"(0( <noname>:org.apache.juneau.xml.CommonTest$R1\",\"(1( r2:org.apache.juneau.xml.CommonTest$R2\",\"(2( r3:org.apache.juneau.xml.CommonTest$R3\",\"(3( r1:org.apache.juneau.xml.CommonTest$R1\")@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "XmlSerializerBuilder s = XmlSerializer.create().maxDepth(Integer.MAX_VALUE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "r3.r1 = r1@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testRecursion['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6->3 [style = bold, label=""];
5->10 [style = bold, label=""];
16->18 [style = bold, label=""];
1->6 [style = solid, label="r2"];
8->15 [style = bold, label=""];
12->20 [style = dashed, label="0"];
20->9 [style = bold, label=""];
0->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
2->1 [style = bold, label=""];
9->4 [style = bold, label=""];
2->5 [style = solid, label="r1"];
5->16 [style = solid, label="r1"];
1->0 [style = bold, label=""];
19->17 [style = bold, label=""];
5->14 [style = bold, label=""];
12->9 [style = bold, label=""];
9->16 [style = bold, label=""];
3->5 [style = bold, label=""];
8->20 [style = bold, label=""];
0->3 [style = solid, label="r3"];
10->8 [style = bold, label=""];
17->2 [style = bold, label=""];
5->4 [style = solid, label="r1"];
15->9 [style = bold, label=""];
7->2 [style = bold, label=""];
13->7 [style = bold, label=""];
12->15 [style = dashed, label="0"];
5->18 [style = solid, label="r1"];
14->8 [style = bold, label=""];
10->14 [style = dashed, label="0"];
8->12 [style = bold, label=""];
11->7 [style = bold, label=""];
}
