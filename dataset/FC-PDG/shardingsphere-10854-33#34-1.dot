digraph {
8 [style = filled, label = "when(engine.getCommandExecuteEngine()).thenReturn(executeEngine)@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "when(executeEngine.getCommandPacket(eq(payload),eq(commandPacketType),eq(backendConnection))).thenReturn(commandPacket)@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "when(executeEngine.getCommandPacketType(eq(payload))).thenReturn(commandPacketType)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "verify(backendConnection).closeDatabaseCommunicationEngines(true)@@@22@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "CommandExecutorTask actual = new CommandExecutorTask(engine,backendConnection,handlerContext,message)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "when(engine.getCommandExecuteEngine().getCommandPacket(payload,commandPacketType,backendConnection)).thenReturn(commandPacket)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "when(engine.getCommandExecuteEngine().getCommandPacketType(payload)).thenReturn(commandPacketType)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "assertRunNeedFlushByFalse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "verify(connectionStatus).waitUntilConnectionRelease()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "verify(executeEngine).writeQueryData(handlerContext,backendConnection,queryCommandExecutor,1)@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(backendConnection.closeConnections(false)).thenReturn(Collections.emptyList())@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
24 [style = filled, label = "when(executeEngine.writeQueryData(any(),any(),any(),anyInt())).thenReturn(true)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "verify(handlerContext).write(databasePacket)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(codecEngine.createPacketPayload(eq(message))).thenReturn(payload)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertRunNeedFlushByTrue['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "actual.run()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "verify(handlerContext).flush()@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "when(queryCommandExecutor.execute()).thenReturn(Collections.emptyList())@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertRunNeedFlushByFalse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "when(backendConnection.getConnectionStatus()).thenReturn(connectionStatus)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "when(backendConnection.closeFederateExecutor()).thenReturn(Collections.emptyList())@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "when(executeEngine.getCommandExecutor(eq(commandPacketType),eq(commandPacket),eq(backendConnection))).thenReturn(queryCommandExecutor)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "verify(queryCommandExecutor).close()@@@21@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "when(engine.getCommandExecuteEngine().getCommandExecutor(commandPacketType,commandPacket,backendConnection)).thenReturn(queryCommandExecutor)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "when(queryCommandExecutor.execute()).thenReturn(Collections.singletonList(databasePacket))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "when(engine.getCodecEngine()).thenReturn(codecEngine)@@@11@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "verify(connectionStatus).switchToUsing()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->20 [style = bold, label=""];
0->9 [style = bold, label=""];
25->28 [style = bold, label=""];
10->21 [style = dashed, label="0"];
12->5 [style = bold, label=""];
28->10 [style = bold, label=""];
3->24 [style = bold, label=""];
4->6 [style = bold, label=""];
6->21 [style = bold, label=""];
3->18 [style = dashed, label="0"];
16->7 [style = bold, label=""];
1->3 [style = bold, label=""];
18->19 [style = bold, label=""];
29->0 [style = bold, label=""];
5->15 [style = bold, label=""];
19->11 [style = bold, label=""];
15->16 [style = bold, label=""];
11->2 [style = bold, label=""];
2->13 [style = bold, label=""];
7->14 [style = bold, label=""];
14->26 [style = bold, label=""];
6->28 [style = dashed, label="0"];
26->27 [style = bold, label=""];
1->17 [style = dashed, label="0"];
13->12 [style = bold, label=""];
20->23 [style = bold, label=""];
14->0 [style = bold, label=""];
3->8 [style = bold, label=""];
6->10 [style = bold, label=""];
2->11 [style = dashed, label="0"];
23->12 [style = bold, label=""];
24->8 [style = bold, label=""];
27->29 [style = bold, label=""];
10->1 [style = bold, label=""];
8->11 [style = bold, label=""];
21->17 [style = bold, label=""];
17->18 [style = bold, label=""];
22->6 [style = bold, label=""];
}
