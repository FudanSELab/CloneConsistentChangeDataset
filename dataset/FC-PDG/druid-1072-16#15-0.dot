digraph {
16 [style = filled, label = "List<JoinableClause> joinableClausesLookupStringKey = ImmutableList.of(new JoinableClause(prefix,LookupJoinable.wrap(JoinTestHelper.createCountryIsoCodeToNameLookup()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%sk\"\",prefix),prefix,ExprMacroTable.nil())))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "List<JoinableClause> joinableClausesIndexedTableLongKey = ImmutableList.of(new JoinableClause(prefix,new IndexedTableJoinable(JoinTestHelper.createCountriesIndexedTable()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryNumber == \"%scountryNumber\"\",prefix),prefix,ExprMacroTable.nil())))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "setup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "return Optional.of(new LookupExtractorFactoryContainer(\"v0\",LookupSegmentTest.LOOKUP_EXTRACTOR_FACTORY))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "return Optional.empty()@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,false,0),joinableClausesLookupLongKey,VirtualColumns.EMPTY,null))@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "lookupVirtualColumns = VirtualColumns.create(ImmutableList.of(new ExpressionVirtualColumn(LOOKUP_COUNTRY_CODE_TO_NAME,\"lookup(countryIsoCode, '\" + LOOKUP_COUNTRY_CODE_TO_NAME + \"')\",ValueType.STRING,exprMacroTable),new ExpressionVirtualColumn(LOOKUP_COUNTRY_NUMBER_TO_NAME,\"lookup(countryNumber, '\" + LOOKUP_COUNTRY_NUMBER_TO_NAME + \"')\",ValueType.STRING,exprMacroTable)))@@@39@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesLookupLongKey,VirtualColumns.EMPTY,null))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "baseSegment = new QueryableIndexSegment(index,SegmentId.dummy(\"join\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "hashJoinIndexedTableLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),null,joinableClausesIndexedTableLongKey,preAnalysisIndexedLongKey)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesIndexedTableLongKey,VirtualColumns.EMPTY,null))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "hashJoinLookupStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),null,joinableClausesLookupStringKey,preAnalysisLookupStringKey)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "ColumnConfig columnConfig = null@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "final ExprMacroTable exprMacroTable = new ExprMacroTable(ImmutableList.of(new LookupExprMacro(new LookupExtractorFactoryContainerProvider(){@Override public Set<String> getAllLookupNames(){return ImmutableSet.of(LOOKUP_COUNTRY_CODE_TO_NAME,LOOKUP_COUNTRY_NUMBER_TO_NAME)}@Override public Optional<LookupExtractorFactoryContainer> get(String lookupName){if (LOOKUP_COUNTRY_CODE_TO_NAME.equals(lookupName)) {return Optional.of(new LookupExtractorFactoryContainer(\"0\",new MapLookupExtractorFactory(countryCodeToNameMap,false)))}if (LOOKUP_COUNTRY_NUMBER_TO_NAME.equals(lookupName)) {return Optional.of(new LookupExtractorFactoryContainer(\"0\",new MapLookupExtractorFactory(countryNumberToNameMap,false)))}{return Optional.empty()}}})))@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesLookupLongKey,VirtualColumns.EMPTY,null))@@@15@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "final Map<String,String> countryNumberToNameMap = JoinTestHelper.createCountryNumberToNameLookup().getMap()@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "get['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "LookupSegmentTest.LOOKUP_NAME.equals(lookupName)@@@7@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "List<JoinableClause> joinableClausesLookupLongKey = ImmutableList.of(new JoinableClause(prefix,LookupJoinable.wrap(JoinTestHelper.createCountryIsoCodeToNameLookup()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%sk\"\",prefix),prefix,ExprMacroTable.nil())))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "hashJoinLookupLongKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),null,joinableClausesLookupLongKey,preAnalysisLookupLongKey)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "List<JoinableClause> joinableClausesIndexedTableStringKey = ImmutableList.of(new JoinableClause(prefix,new IndexedTableJoinable(JoinTestHelper.createCountriesIndexedTable()),JoinType.LEFT,JoinConditionAnalysis.forExpression(StringUtils.format(\"countryIsoCode == \"%scountryIsoCode\"\",prefix),prefix,ExprMacroTable.nil())))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "final String lookupName@@@6@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "final String prefix = \"c.\"@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final Map<String,String> countryCodeToNameMap = JoinTestHelper.createCountryIsoCodeToNameLookup().getMap()@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,false,0),joinableClausesLookupLongKey,VirtualColumns.EMPTY,null))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "JoinFilterPreAnalysis preAnalysisIndexedLongKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,false,0),joinableClausesIndexedTableLongKey,VirtualColumns.EMPTY,null))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "tmpDir = FileUtils.createTempDir()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "index = JoinTestHelper.createFactIndexBuilder(columnConfig,tmpDir,rows).buildMMappedIndex()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,0),joinableClausesLookupStringKey,VirtualColumns.EMPTY,null))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "setup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "hashJoinIndexedTableStringKeySegment = new HashJoinSegment(ReferenceCountingSegment.wrapRootGenerationSegment(baseSegment),null,joinableClausesIndexedTableStringKey,preAnalysisIndexedStringKey)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "JoinFilterPreAnalysis preAnalysisLookupStringKey = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(new JoinFilterPreAnalysisKey(new JoinFilterRewriteConfig(false,false,false,false,0),joinableClausesLookupStringKey,VirtualColumns.EMPTY,null))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17->10 [style = bold, label=""];
4->14 [style = bold, label=""];
15->13 [style = bold, label=""];
10->20 [style = bold, label=""];
20->24 [style = solid, label="joinableClausesLookupLongKey"];
20->21 [style = solid, label="joinableClausesLookupLongKey"];
28->30 [style = bold, label=""];
19->12 [style = bold, label=""];
26->10 [style = bold, label=""];
18->21 [style = solid, label="baseSegment"];
18->4 [style = solid, label="baseSegment"];
16->10 [style = solid, label="joinableClausesLookupStringKey"];
8->18 [style = bold, label=""];
20->2 [style = solid, label="joinableClausesLookupLongKey"];
29->27 [style = dotted, label="true"];
5->23 [style = dashed, label="0"];
2->3 [style = bold, label=""];
28->31 [style = bold, label=""];
12->11 [style = bold, label=""];
24->3 [style = solid, label="preAnalysisIndexedStringKey"];
16->26 [style = bold, label=""];
6->4 [style = solid, label="preAnalysisIndexedLongKey"];
14->19 [style = bold, label=""];
16->17 [style = bold, label=""];
27->28 [style = solid, label="lookupName"];
9->8 [style = bold, label=""];
0->15 [style = bold, label=""];
6->22 [style = dashed, label="0"];
2->3 [style = solid, label="preAnalysisIndexedStringKey"];
20->5 [style = bold, label=""];
22->4 [style = bold, label=""];
29->28 [style = bold, label=""];
14->12 [style = solid, label="countryCodeToNameMap"];
8->7 [style = solid, label="prefix"];
5->21 [style = bold, label=""];
17->10 [style = solid, label="preAnalysisLookupStringKey"];
6->4 [style = bold, label=""];
7->22 [style = bold, label=""];
23->21 [style = solid, label="preAnalysisLookupLongKey"];
19->12 [style = solid, label="countryNumberToNameMap"];
7->4 [style = solid, label="joinableClausesIndexedTableLongKey"];
28->30 [style = dotted, label="true"];
9->18 [style = solid, label="index"];
8->20 [style = solid, label="prefix"];
12->11 [style = solid, label="exprMacroTable"];
20->23 [style = bold, label=""];
23->21 [style = bold, label=""];
3->7 [style = bold, label=""];
20->23 [style = solid, label="joinableClausesLookupLongKey"];
1->24 [style = bold, label=""];
8->1 [style = solid, label="prefix"];
16->17 [style = solid, label="joinableClausesLookupStringKey"];
1->3 [style = solid, label="joinableClausesIndexedTableStringKey"];
21->1 [style = bold, label=""];
7->6 [style = bold, label=""];
26->10 [style = solid, label="preAnalysisLookupStringKey"];
7->22 [style = solid, label="joinableClausesIndexedTableLongKey"];
25->15 [style = bold, label=""];
16->26 [style = solid, label="joinableClausesLookupStringKey"];
7->6 [style = solid, label="joinableClausesIndexedTableLongKey"];
17->26 [style = dashed, label="0"];
22->4 [style = solid, label="preAnalysisIndexedLongKey"];
28->31 [style = dotted, label="false"];
1->2 [style = bold, label=""];
13->9 [style = bold, label=""];
28->27 [style = bold, label=""];
18->3 [style = solid, label="baseSegment"];
18->10 [style = solid, label="baseSegment"];
5->21 [style = solid, label="preAnalysisLookupLongKey"];
2->24 [style = dashed, label="0"];
20->5 [style = solid, label="joinableClausesLookupLongKey"];
24->3 [style = bold, label=""];
8->16 [style = solid, label="prefix"];
18->16 [style = bold, label=""];
}
