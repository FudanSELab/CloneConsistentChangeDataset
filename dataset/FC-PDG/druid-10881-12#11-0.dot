digraph {
60 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults(segmentIds,intervals,results)).once()@@@76@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "final Interval actualQueryInterval = new Interval(queryIntervals.get(0).getStart(),queryIntervals.get(i).getEnd())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "results.add(expectation.getResults())@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
134 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andAnswer(new IAnswer<Sequence>(){@Override public Sequence answer(){return toFilteredQueryableTimeseriesResults((TimeseriesQuery)capture.getValue().getQuery(),segmentIds,queryIntervals,results)}}).times(0,1)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@61@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
80 [style = filled, label = "expectations@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
98 [style = filled, label = "queryCaptures@@@128@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
101 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@80@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
130 [style = filled, label = "testQueryCachingWithFilter['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@57@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "intervals.add(expectation.getInterval())@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "Assert.assertEquals(true,capturedQuery.getContextValue(\"bySegment\"))@@@132@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(new MergeIterable(query instanceof GroupByQuery? ((GroupByQuery)query).getResultOrdering(): Comparators.naturalNullsFirst(),FunctionalIterable.create(new RangeIterable(expectedResultsRangeStart,expectedResultsRangeEnd)).transformCat(new Function<Integer,Iterable<Iterable<Result<Object>>>>(){@Override public Iterable<Iterable<Result<Object>>> apply(@Nullable Integer input){List<Iterable<Result<Object>>> retVal = new ArrayList<>()final Map<DruidServer,ServerExpectations> exps = serverExpectationList.get(input)for (ServerExpectations expectations : exps.values()){for (ServerExpectation expectation : expectations){retVal.add(expectation.getResults())}}return retVal}})),runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval))))))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@103@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
116 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
72 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "Assert.assertTrue(capturedQuery.getContextValue(\"bySegment\") == null || capturedQuery.getContextValue(\"bySegment\").equals(false))@@@135@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "results.add(expectation.getResults())@@@63@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "intervals.add(expectation.getInterval())@@@62@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "mocks.add(serverView)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "ServerExpectation expectation@@@60@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
114 [style = filled, label = "expectations@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
36 [style = filled, label = "final List<List<Iterable<Result<Object>>>> expectedResults = Lists.newArrayListWithCapacity(queryIntervals.size())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "query instanceof TimeseriesQuery@@@21@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
104 [style = filled, label = "expectations@@@60@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
102 [style = filled, label = "final Capture<? extends ResponseContext> context = Capture.newInstance()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final int numTimesToQuery@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "parseResults(queryIntervals,expectedResults,args)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
96 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@101@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
115 [style = filled, label = "Capture queryCapture@@@128@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
64 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeseriesResults(expectBySegment,segmentIds,intervals,results)).once()@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
107 [style = filled, label = "ServerExpectation expectation@@@49@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
109 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@15@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Object args@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "intervals.add(expectation.getInterval())@@@73@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "ServerExpectation expectation@@@24@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "results.add(expectation.getResults())@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
118 [style = filled, label = "final List<SegmentId> segmentIds = new ArrayList<>()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "expectedResultsRangeStart = i@@@96@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "expectations@@@71@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "expectBySegment@@@131@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
122 [style = filled, label = "final QueryRunner runner@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).once()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "intervals.add(expectation.getInterval())@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
105 [style = filled, label = "List<Iterable<ResultRow>> results = new ArrayList<>()@@@70@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "testQueryCaching['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "intervals.add(expectation.getInterval())@@@84@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "ServerExpectation expectation@@@82@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "queryCaptures@@@128@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "results.add(expectation.getResults())@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
69 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "query instanceof TimeBoundaryQuery@@@78@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTimeBoundaryResults(segmentIds,intervals,results)).once()@@@87@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
129 [style = filled, label = "expectations@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "ServerExpectation expectation@@@38@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
117 [style = filled, label = "testQueryCaching['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
56 [style = filled, label = "final int expectedResultsRangeStart@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ServerExpectation expectation@@@27@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "boolean expectBySegment@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
132 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "intervals.add(expectation.getInterval())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSearchResults(segmentIds,intervals,results)).once()@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
131 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> filteredExpected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
135 [style = filled, label = "Iterables.addAll((List)expected,filteredExpected.get(intervalNo))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "queryCaptures.add(capture)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
87 [style = filled, label = "ServerExpectation expectation@@@82@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
127 [style = filled, label = "final int numTimesToQuery@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "results.add(expectation.getResults())@@@85@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
112 [style = filled, label = "final Query query@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
126 [style = filled, label = "finalExpectation.entrySet()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "QueryRunner queryable = expectations.getQueryRunner()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
85 [style = filled, label = "expectedResultsRangeEnd = i + 1@@@97@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "query instanceof SearchQuery@@@45@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
128 [style = filled, label = "EasyMock.expect(serverView.getQueryRunner(server)).andReturn(expectations.getQueryRunner()).times(0,1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final Capture<? extends QueryPlus> capture = Capture.newInstance()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "query instanceof TopNQuery@@@34@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
79 [style = filled, label = "QueryPlus capturedQueryPlus = (QueryPlus)queryCapture.getValue()@@@129@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
133 [style = filled, label = "final List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "List<Capture> queryCaptures = new ArrayList<>()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
78 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableGroupByResults((GroupByQuery)query,segmentIds,intervals,results)).once()@@@76@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
50 [style = filled, label = "results.add(expectation.getResults())@@@74@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@72@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
113 [style = filled, label = "boolean expectBySegment@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "++i@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "i < queryIntervals.size()@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "List<Iterable<Result<SelectResultValue>>> results = new ArrayList<>()@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "final List<Interval> queryIntervals = Lists.newArrayListWithCapacity(args.length / 2)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "List<Iterable<Result<SearchResultValue>>> results = new ArrayList<>()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "runWithMocks(new Runnable(){@Override public void run(){for (int i = 0 i < numTimesToQuery ++i){TestHelper.assertExpectedResults(expected,runner.run(QueryPlus.wrap(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(actualQueryInterval))))))if (queryCompletedCallback != null) {queryCompletedCallback.run()}}}},mocks.toArray())@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "ServerExpectation expectation@@@49@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
99 [style = filled, label = "List<Iterable<Result<TopNResultValue>>> results = new ArrayList<>()@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "final List<Map<DruidServer,ServerExpectations>> serverExpectationList = populateTimeline(queryIntervals,expectedResults,i,mocks)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ServerExpectation expectation@@@71@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
111 [style = filled, label = "expectations@@@82@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "ServerExpectation expectation@@@60@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableTopNResults(segmentIds,intervals,results)).once()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "throw new ISE(\"Unknown query type(%s(\",query.getClass())@@@90@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "ServerExpectations expectations = entry.getValue()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "List<Iterable<Result<TimeseriesResultValue>>> results = new ArrayList<>()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119 [style = filled, label = "int intervalNo = 0@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "DruidServer server = entry.getKey()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "query instanceof TimeBoundaryQuery@@@95@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "final Map<DruidServer,ServerExpectations> finalExpectation = serverExpectationList.get(serverExpectationList.size() - 1)@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "List<Iterable<Result<TimeBoundaryResultValue>>> results = new ArrayList<>()@@@81@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "final Iterable<Result<Object>> expected = new ArrayList<>()@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
73 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@68@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
123 [style = filled, label = "final Query query@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "Object args@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
71 [style = filled, label = "query instanceof GroupByQuery@@@67@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
103 [style = filled, label = "ServerExpectation expectation@@@27@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "List<SegmentId> segmentIds = new ArrayList<>()@@@79@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
121 [style = filled, label = "intervalNo < i + 1@@@41@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "query instanceof SelectQuery@@@56@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "final QueryRunner runner@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Query capturedQuery = capturedQueryPlus.getQuery()@@@130@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "List<Interval> intervals = new ArrayList<>()@@@47@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "results.add(expectation.getResults())@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "List<Object> mocks = new ArrayList<>()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "EasyMock.expect(queryable.run(EasyMock.capture(capture),EasyMock.capture(context))).andReturn(toQueryableSelectResults(segmentIds,intervals,results)).once()@@@65@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "List<Iterable<Row>> results = new ArrayList<>()@@@70@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "finalExpectation.entrySet()@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
125 [style = filled, label = "Object args@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "intervalNo++@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "Map.Entry<DruidServer,ServerExpectations> entry@@@14@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "segmentIds.add(expectation.getSegmentId())@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
119->121 [style = solid, label="intervalNo"];
47->9 [style = bold, label=""];
90->95 [style = solid, label="i"];
62->3 [style = bold, label=""];
86->30 [style = bold, label=""];
90->85 [style = solid, label="i"];
8->77 [style = bold, label=""];
8->132 [style = bold, label=""];
91->43 [style = bold, label=""];
74->8 [style = solid, label="query"];
44->88 [style = dotted, label="true"];
12->95 [style = dotted, label="true"];
36->62 [style = solid, label="expectedResults"];
112->37 [style = solid, label="query"];
121->135 [style = dotted, label="true"];
130->131 [style = dotted, label="true"];
30->52 [style = bold, label=""];
44->35 [style = bold, label=""];
62->54 [style = bold, label=""];
33->48 [style = dotted, label="true"];
8->118 [style = dotted, label="true"];
20->70 [style = bold, label=""];
130->127 [style = dotted, label="true"];
52->61 [style = dotted, label="true"];
71->20 [style = bold, label=""];
0->99 [style = dotted, label="true"];
57->119 [style = bold, label=""];
112->0 [style = solid, label="query"];
14->102 [style = bold, label=""];
65->56 [style = bold, label=""];
74->90 [style = solid, label="numTimesToQuery"];
24->43 [style = bold, label=""];
88->65 [style = bold, label=""];
100->92 [style = bold, label=""];
0->25 [style = dotted, label="true"];
71->60 [style = dotted, label="true"];
16->69 [style = bold, label=""];
14->89 [style = solid, label="capture"];
51->26 [style = solid, label="queryIntervals"];
67->95 [style = solid, label="i"];
90->96 [style = solid, label="i"];
9->6 [style = bold, label=""];
8->118 [style = bold, label=""];
52->98 [style = dotted, label="true"];
8->0 [style = bold, label=""];
1->66 [style = dotted, label="true"];
112->8 [style = solid, label="query"];
63->81 [style = bold, label=""];
19->1 [style = bold, label=""];
47->76 [style = bold, label=""];
70->43 [style = bold, label=""];
79->19 [style = bold, label=""];
135->124 [style = bold, label=""];
52->90 [style = dotted, label="true"];
45->61 [style = bold, label=""];
20->68 [style = dotted, label="true"];
52->62 [style = dotted, label="true"];
20->111 [style = dotted, label="true"];
83->133 [style = dashed, label="0"];
52->8 [style = dotted, label="true"];
84->38 [style = bold, label=""];
52->126 [style = dotted, label="true"];
0->24 [style = dotted, label="true"];
71->73 [style = dotted, label="true"];
0->34 [style = dotted, label="true"];
52->3 [style = dotted, label="true"];
37->63 [style = dotted, label="true"];
52->30 [style = dotted, label="true"];
92->97 [style = bold, label=""];
106->56 [style = bold, label=""];
123->8 [style = solid, label="query"];
0->55 [style = dotted, label="true"];
52->115 [style = dotted, label="true"];
8->0 [style = dotted, label="false"];
64->43 [style = bold, label=""];
67->62 [style = solid, label="i"];
67->52 [style = bold, label=""];
20->70 [style = dotted, label="false"];
37->104 [style = dotted, label="true"];
117->113 [style = dotted, label="true"];
8->129 [style = dotted, label="true"];
56->57 [style = dashed, label="0"];
52->57 [style = dotted, label="true"];
31->14 [style = bold, label=""];
26->67 [style = bold, label=""];
71->92 [style = dotted, label="true"];
57->135 [style = solid, label="expected"];
17->5 [style = bold, label=""];
10->64 [style = bold, label=""];
73->93 [style = bold, label=""];
90->62 [style = solid, label="i"];
32->90 [style = solid, label="expectations"];
124->121 [style = solid, label="intervalNo"];
0->44 [style = dotted, label="false"];
86->121 [style = solid, label="i"];
41->21 [style = bold, label=""];
74->37 [style = solid, label="query"];
90->52 [style = solid, label="i"];
127->86 [style = solid, label="numTimesToQuery"];
85->90 [style = bold, label=""];
43->32 [style = bold, label=""];
134->57 [style = bold, label=""];
8->17 [style = dotted, label="true"];
52->45 [style = bold, label=""];
52->32 [style = dotted, label="true"];
52->31 [style = dotted, label="true"];
8->7 [style = dotted, label="true"];
33->40 [style = dotted, label="true"];
20->84 [style = dotted, label="true"];
8->83 [style = dotted, label="true"];
21->59 [style = bold, label=""];
29->26 [style = solid, label="args"];
56->57 [style = bold, label=""];
37->49 [style = dotted, label="true"];
130->122 [style = dotted, label="true"];
46->1 [style = solid, label="expectBySegment"];
5->17 [style = bold, label=""];
28->84 [style = bold, label=""];
20->47 [style = dotted, label="true"];
74->71 [style = solid, label="query"];
113->1 [style = solid, label="expectBySegment"];
44->35 [style = dotted, label="true"];
52->121 [style = dotted, label="true"];
44->65 [style = dotted, label="true"];
130->51 [style = bold, label=""];
37->81 [style = dotted, label="true"];
86->52 [style = solid, label="i"];
3->54 [style = bold, label=""];
44->13 [style = dotted, label="true"];
0->34 [style = bold, label=""];
71->97 [style = dotted, label="true"];
91->56 [style = bold, label=""];
44->107 [style = dotted, label="true"];
117->51 [style = bold, label=""];
96->90 [style = bold, label=""];
52->45 [style = dotted, label="true"];
74->44 [style = solid, label="query"];
74->20 [style = solid, label="query"];
57->12 [style = bold, label=""];
106->43 [style = bold, label=""];
52->2 [style = dotted, label="true"];
8->64 [style = dotted, label="true"];
52->12 [style = dotted, label="true"];
37->41 [style = dotted, label="true"];
8->120 [style = dotted, label="true"];
1->75 [style = bold, label=""];
8->134 [style = dotted, label="true"];
5->53 [style = bold, label=""];
71->50 [style = dotted, label="true"];
71->106 [style = dotted, label="true"];
8->18 [style = dotted, label="true"];
60->106 [style = dashed, label="0"];
67->96 [style = solid, label="i"];
51->62 [style = solid, label="queryIntervals"];
61->2 [style = bold, label=""];
66->30 [style = bold, label=""];
0->44 [style = bold, label=""];
44->37 [style = bold, label=""];
75->79 [style = bold, label=""];
71->4 [style = dotted, label="true"];
117->74 [style = dotted, label="true"];
77->118 [style = dashed, label="0"];
44->80 [style = dotted, label="true"];
90->79 [style = bold, label=""];
132->43 [style = bold, label=""];
86->62 [style = solid, label="i"];
53->10 [style = bold, label=""];
110->26 [style = solid, label="args"];
6->47 [style = bold, label=""];
12->85 [style = dotted, label="true"];
32->31 [style = bold, label=""];
52->128 [style = dotted, label="true"];
121->135 [style = bold, label=""];
20->6 [style = dotted, label="true"];
125->26 [style = solid, label="args"];
130->123 [style = dotted, label="true"];
99->69 [style = bold, label=""];
60->56 [style = bold, label=""];
20->38 [style = dotted, label="true"];
83->18 [style = bold, label=""];
121->86 [style = bold, label=""];
24->56 [style = bold, label=""];
8->103 [style = dotted, label="true"];
44->37 [style = dotted, label="false"];
133->17 [style = bold, label=""];
5->134 [style = bold, label=""];
52->14 [style = dotted, label="true"];
37->91 [style = dotted, label="true"];
20->9 [style = dotted, label="true"];
76->56 [style = bold, label=""];
100->105 [style = dashed, label="0"];
54->43 [style = bold, label=""];
8->77 [style = dotted, label="true"];
16->24 [style = bold, label=""];
57->86 [style = solid, label="expected"];
93->105 [style = bold, label=""];
86->96 [style = bold, label=""];
2->86 [style = solid, label="actualQueryInterval"];
39->88 [style = bold, label=""];
38->9 [style = bold, label=""];
44->39 [style = dotted, label="true"];
130->125 [style = dotted, label="true"];
102->82 [style = bold, label=""];
0->114 [style = dotted, label="true"];
45->62 [style = solid, label="mocks"];
52->56 [style = dotted, label="true"];
112->90 [style = solid, label="query"];
25->16 [style = bold, label=""];
74->0 [style = solid, label="query"];
1->75 [style = dotted, label="false"];
52->19 [style = dotted, label="true"];
78->99 [style = bold, label=""];
71->108 [style = dotted, label="true"];
20->87 [style = dotted, label="true"];
112->71 [style = solid, label="query"];
34->78 [style = bold, label=""];
74->131 [style = dashed, label="0"];
32->128 [style = bold, label=""];
71->73 [style = bold, label=""];
13->27 [style = bold, label=""];
67->52 [style = solid, label="i"];
10->5 [style = bold, label=""];
50->60 [style = bold, label=""];
44->22 [style = dotted, label="true"];
51->36 [style = bold, label=""];
12->86 [style = bold, label=""];
37->59 [style = dotted, label="true"];
71->20 [style = dotted, label="false"];
52->79 [style = dotted, label="true"];
85->135 [style = dashed, label="0"];
117->116 [style = dotted, label="true"];
50->106 [style = bold, label=""];
37->71 [style = bold, label=""];
23->63 [style = bold, label=""];
67->85 [style = solid, label="i"];
59->91 [style = bold, label=""];
77->83 [style = bold, label=""];
71->100 [style = dotted, label="true"];
33->29 [style = dotted, label="true"];
76->43 [style = bold, label=""];
67->90 [style = solid, label="i"];
64->134 [style = dashed, label="0"];
44->94 [style = dotted, label="true"];
33->74 [style = dotted, label="true"];
31->128 [style = dashed, label="0"];
89->82 [style = bold, label=""];
0->16 [style = dotted, label="true"];
70->56 [style = bold, label=""];
37->42 [style = dotted, label="true"];
12->86 [style = dotted, label="false"];
52->54 [style = dotted, label="true"];
60->43 [style = bold, label=""];
119->135 [style = solid, label="intervalNo"];
33->46 [style = dotted, label="true"];
52->109 [style = dotted, label="true"];
117->112 [style = dotted, label="true"];
97->50 [style = bold, label=""];
124->121 [style = bold, label=""];
71->101 [style = dotted, label="true"];
81->41 [style = bold, label=""];
1->66 [style = bold, label=""];
36->26 [style = solid, label="expectedResults"];
12->95 [style = bold, label=""];
52->119 [style = dotted, label="true"];
52->102 [style = dotted, label="true"];
12->96 [style = dotted, label="false"];
52->11 [style = dotted, label="true"];
94->39 [style = bold, label=""];
105->92 [style = bold, label=""];
65->43 [style = bold, label=""];
93->100 [style = bold, label=""];
52->43 [style = dotted, label="true"];
52->1 [style = dotted, label="true"];
37->21 [style = dotted, label="true"];
20->28 [style = bold, label=""];
0->72 [style = dotted, label="true"];
74->12 [style = solid, label="query"];
37->71 [style = dotted, label="false"];
8->132 [style = dotted, label="false"];
75->30 [style = bold, label=""];
95->85 [style = bold, label=""];
20->76 [style = dotted, label="true"];
36->26 [style = bold, label=""];
132->57 [style = bold, label=""];
8->10 [style = dotted, label="true"];
0->69 [style = dotted, label="true"];
37->23 [style = bold, label=""];
52->15 [style = dotted, label="true"];
128->14 [style = bold, label=""];
0->78 [style = dotted, label="true"];
67->86 [style = solid, label="i"];
52->86 [style = dotted, label="true"];
112->20 [style = solid, label="query"];
52->89 [style = dotted, label="true"];
102->89 [style = bold, label=""];
50->92 [style = bold, label=""];
64->56 [style = bold, label=""];
88->94 [style = bold, label=""];
33->51 [style = bold, label=""];
67->121 [style = solid, label="i"];
119->121 [style = bold, label=""];
8->5 [style = dotted, label="true"];
112->12 [style = solid, label="query"];
20->28 [style = dotted, label="true"];
52->58 [style = dotted, label="true"];
18->5 [style = bold, label=""];
48->90 [style = solid, label="numTimesToQuery"];
8->133 [style = dotted, label="true"];
52->82 [style = dotted, label="true"];
112->44 [style = solid, label="query"];
2->90 [style = solid, label="actualQueryInterval"];
118->133 [style = bold, label=""];
8->53 [style = dotted, label="true"];
69->25 [style = bold, label=""];
37->23 [style = dotted, label="true"];
35->13 [style = bold, label=""];
134->43 [style = bold, label=""];
82->8 [style = bold, label=""];
27->94 [style = bold, label=""];
117->110 [style = dotted, label="true"];
124->135 [style = solid, label="intervalNo"];
59->41 [style = bold, label=""];
44->27 [style = dotted, label="true"];
71->105 [style = dotted, label="true"];
121->124 [style = dotted, label="true"];
66->79 [style = bold, label=""];
71->93 [style = dotted, label="true"];
2->62 [style = bold, label=""];
119->124 [style = solid, label="intervalNo"];
}
