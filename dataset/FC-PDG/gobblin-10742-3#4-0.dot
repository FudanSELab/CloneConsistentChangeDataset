digraph {
34 [style = filled, label = "this.jobConfigDirPath = new Path(this.jobConfigDir.getPath())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "createMockCatalog['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "Assert.assertTrue(ConfigUtils.verifySubset(js2_notified.getConfig(),js2.getConfig()))@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "cat.startAsync()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "JobSpec js2_notified = specs.get(js2.getUri())@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "cat.put(js1_1)@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "JobSpec js1_1 = JobSpec.builder(\"test_job1\").withVersion(\"1\").build()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "NonObservingFSJobCatalog cat = new NonObservingFSJobCatalog(ConfigUtils.propertiesToConfig(properties))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "MutableJobCatalog jobCatalog = Mockito.mock()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "cat.addListener(l)@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertTrue(ConfigUtils.verifySubset(js3_notified.getConfig(),js3.getConfig()))@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "cat.put(js3)@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
46 [style = filled, label = "Assert.assertTrue(specs.containsKey(js1_1.getUri()))@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "Assert.assertTrue(specs.containsKey(js3.getUri()))@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "JobSpec js1_2 = JobSpec.builder(\"test_job1\").withVersion(\"2\").build()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "this.jobConfigDir = java.nio.file.Files.createTempDirectory(String.format(\"gobblin-test_%s_job-conf\",this.getClass().getSimpleName())).toFile()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "cat.stopAsync()@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertFalse(specs.containsKey(js2.getUri()))@@@61@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "JobSpec js1_2_notified = specs.get(js1_2.getUri())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final Map<URI,JobSpec> jobSpecs@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,this.jobConfigDir.getPath())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Assert.assertTrue(ConfigUtils.verifySubset(js1_1_notified.getConfig(),js1_1.getConfig()))@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "Mockito.doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){JobSpec spec = (JobSpec)invocation.getArguments()(0(specs.put(spec.getUri(),spec)return null}}).when(l).onAddJob(Mockito.any())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Mockito.doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){JobSpec jobSpec = (JobSpec)invocation.getArguments()(0(jobSpecs.put(jobSpec.getUri(),jobSpec)return null}}).when(jobCatalog).put(Mockito.any())@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Mockito.doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){URI uri = (URI)invocation.getArguments()(0(specs.remove(uri)return null}}).when(l).onDeleteJob(Mockito.any(),Mockito.anyString())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "final Map<URI,JobSpec> specs = new Hashtable<>()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(specs.containsKey(js1_2.getUri()))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testCallbacks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "Assert.assertEquals(js2.getVersion(),js2_notified.getVersion())@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "JobCatalogListener l = Mockito.mock()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "Assert.assertEquals(js3_resolved.getConfig().getString(\"param1\"),\"value1\")@@@68@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "ResolvedJobSpec js3_resolved = new ResolvedJobSpec(js3_notified,cat)@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "JobSpec js1_1_notified = specs.get(js1_1.getUri())@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "JobSpec js2 = JobSpec.builder(\"test_job2\").withVersion(\"1\").build()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "cat.awaitTerminated(10,TimeUnit.SECONDS)@@@71@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "cat.put(js2)@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(js3.getVersion(),js3_notified.getVersion())@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Mockito.doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){JobSpec spec = (JobSpec)invocation.getArguments()(0(specs.put(spec.getUri(),spec)return null}}).when(l).onUpdateJob(Mockito.any())@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "JobSpec js3 = JobSpec.builder(\"test_job3\").withVersion(\"1\").withTemplate(new URI(\"FS:///job3.template\")).withConfig(ConfigBuilder.create().addPrimitive(\"job.template\",\"FS:///job3.template\").build()).build()@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "cat.put(js1_2)@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "return jobCatalog@@@20@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "createMockCatalog['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(ConfigUtils.verifySubset(js1_2_notified.getConfig(),js1_2.getConfig()))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "Assert.assertTrue(specs.containsKey(js2.getUri()))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "Assert.assertEquals(js1_1.getVersion(),js1_1_notified.getVersion())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "Assert.assertEquals(js1_2.getVersion(),js1_2_notified.getVersion())@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "printWriter.println(\"param2 = value2\")@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Mockito.doAnswer(new Answer<Void>(){@Override public Void answer(InvocationOnMock invocation){URI uri = (URI)invocation.getArguments()(0(jobSpecs.remove(uri)return null}}).when(jobCatalog).remove(Mockito.any(),Mockito.anyBoolean())@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "Assert.assertEquals(js3_resolved.getConfig().getString(\"param2\"),\"value2\")@@@69@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "JobSpec js3_notified = specs.get(js3.getUri())@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "cat.remove(js2.getUri())@@@60@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Properties properties = new Properties()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "cat.awaitRunning(10,TimeUnit.SECONDS)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
45 [style = filled, label = "printWriter.println(\"param1 = value1\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10->16 [style = bold, label=""];
26->39 [style = solid, label="properties"];
49->11 [style = bold, label=""];
29->32 [style = solid, label="js3"];
40->47 [style = bold, label=""];
15->49 [style = bold, label=""];
32->38 [style = bold, label=""];
30->53 [style = solid, label="js3_notified"];
2->4 [style = bold, label=""];
18->42 [style = bold, label=""];
9->52 [style = bold, label=""];
27->7 [style = bold, label=""];
43->51 [style = bold, label=""];
37->20 [style = bold, label=""];
3->4 [style = solid, label="jobCatalog"];
36->15 [style = bold, label=""];
11->16 [style = solid, label="js1_1"];
22->24 [style = bold, label=""];
11->40 [style = bold, label=""];
50->19 [style = bold, label=""];
8->32 [style = bold, label=""];
34->45 [style = bold, label=""];
41->50 [style = bold, label=""];
6->1 [style = dotted, label="true"];
26->33 [style = bold, label=""];
17->12 [style = bold, label=""];
19->22 [style = bold, label=""];
20->8 [style = bold, label=""];
30->25 [style = bold, label=""];
16->46 [style = bold, label=""];
42->34 [style = bold, label=""];
13->43 [style = bold, label=""];
40->50 [style = solid, label="js1_2"];
23->26 [style = bold, label=""];
14->44 [style = bold, label=""];
38->30 [style = bold, label=""];
25->21 [style = bold, label=""];
33->39 [style = bold, label=""];
24->31 [style = bold, label=""];
7->37 [style = bold, label=""];
53->13 [style = bold, label=""];
51->28 [style = bold, label=""];
3->0 [style = bold, label=""];
46->17 [style = bold, label=""];
44->27 [style = bold, label=""];
6->3 [style = bold, label=""];
35->10 [style = solid, label="l"];
35->36 [style = bold, label=""];
39->9 [style = bold, label=""];
52->48 [style = bold, label=""];
29->10 [style = bold, label=""];
45->23 [style = bold, label=""];
5->1 [style = dotted, label="true"];
5->3 [style = bold, label=""];
12->41 [style = bold, label=""];
21->53 [style = bold, label=""];
0->2 [style = bold, label=""];
48->35 [style = bold, label=""];
47->14 [style = solid, label="js2"];
31->14 [style = bold, label=""];
47->29 [style = bold, label=""];
39->53 [style = solid, label="cat"];
}
