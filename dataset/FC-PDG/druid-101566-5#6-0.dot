digraph {
8 [style = filled, label = "testJoinWithLimitBeforeJoining['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "testQuery(\"SELECT dim2, AVG(m2) FROM (SELECT * FROM foo AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1) AS t3 GROUP BY dim2\",queryContext,ImmutableList.of(GroupByQuery.builder().setDataSource(join(new TableDataSource(CalciteTests.DATASOURCE1),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(ImmutableList.of(\"m1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(QUERY_CONTEXT_DEFAULT).build().withOverriddenContext(queryContext)),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"m1\"),DruidExpression.fromColumn(\"j0.m1\")),JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\",ValueType.STRING)).setGranularity(Granularities.ALL).setAggregatorSpecs(useDefault? aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new CountAggregatorFactory(\"a0:count\")): aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0:count\"),not(selector(\"m2\",null,null))))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a0:sum\"),new FieldAccessPostAggregator(null,\"a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build().withOverriddenContext(queryContext)),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd41c,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd421,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd426,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd42b): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd433,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd438,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd43d))@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "cannotVectorize()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testJoinOuterGroupByAndSubqueryNoLimit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testQuery(\"SELECT t1.dim2, AVG(t1.m2) FROM (SELECT * FROM foo LIMIT 10) AS t1 INNER JOIN foo AS t2 ON t1.m1 = t2.m1 GROUP BY t1.dim2\",ImmutableList.of(GroupByQuery.builder().setDataSource(join(new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(\"dim2\",\"m1\",\"m2\").context(QUERY_CONTEXT_DEFAULT).limit(10).build()),new QueryDataSource(newScanQueryBuilder().dataSource(CalciteTests.DATASOURCE1).intervals(querySegmentSpec(Filtration.eternity())).columns(ImmutableList.of(\"m1\")).resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST).context(QUERY_CONTEXT_DEFAULT).build()),\"j0.\",equalsCondition(DruidExpression.fromColumn(\"m1\"),DruidExpression.fromColumn(\"j0.m1\")),JoinType.INNER)).setInterval(querySegmentSpec(Filtration.eternity())).setDimensions(new DefaultDimensionSpec(\"dim2\",\"d0\",ValueType.STRING)).setGranularity(Granularities.ALL).setAggregatorSpecs(useDefault? aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new CountAggregatorFactory(\"a0:count\")): aggregators(new DoubleSumAggregatorFactory(\"a0:sum\",\"m2\"),new FilteredAggregatorFactory(new CountAggregatorFactory(\"a0:count\"),not(selector(\"m2\",null,null))))).setPostAggregatorSpecs(ImmutableList.of(new ArithmeticPostAggregator(\"a0\",\"quotient\",ImmutableList.of(new FieldAccessPostAggregator(null,\"a0:sum\"),new FieldAccessPostAggregator(null,\"a0:count\"))))).setContext(QUERY_CONTEXT_DEFAULT).build()),NullHandling.sqlCompatible()? ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd4f9,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd4fe,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd503,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd508): ImmutableList.of(new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd510,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd515,new Object((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@9fd51a))@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<String,Object> queryContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "!isRewriteJoinToFilter(queryContext)@@@3@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "testJoinOuterGroupByAndSubqueryNoLimit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "cannotVectorize()@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->7 [style = dashed, label="0"];
6->4 [style = dotted, label="true"];
2->0 [style = bold, label=""];
5->1 [style = dotted, label="true"];
1->3 [style = bold, label=""];
5->3 [style = bold, label=""];
4->3 [style = solid, label="queryContext"];
8->0 [style = bold, label=""];
0->1 [style = bold, label=""];
6->5 [style = bold, label=""];
0->7 [style = bold, label=""];
5->1 [style = bold, label=""];
}
