digraph {
99 [style = filled, label = "setCurrentTime(startTime + increment * 7)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))))@@@40@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "windowStore = buildWindowStore(RETENTION_PERIOD,WINDOW_SIZE,false,Serdes.Integer(),Serdes.String())@@@26@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "testRestore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
53 [style = filled, label = "assertEquals(new HashSet<>(Collections.singletonList(\"four\")),toSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))))@@@42@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "setCurrentTime(startTime)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - windowSize),ofEpochMilli(startTime + increment * 7 + windowSize))))@@@35@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "setCurrentTime(startTime + increment)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(1,ofEpochMilli(startTime + increment - windowSize),ofEpochMilli(startTime + increment + windowSize))))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
88 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - windowSize),ofEpochMilli(startTime + increment * 3 + windowSize))))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))))@@@36@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
105 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))))@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(Collections.singletonList(\"seven\"),toList(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - windowSize),ofEpochMilli(startTime + increment * 7 + windowSize))))@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertEquals(Collections.singletonList(\"six\"),toList(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - windowSize),ofEpochMilli(startTime + increment * 6 + windowSize))))@@@57@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
91 [style = filled, label = "windowStore = createWindowStore(context,false)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "assertEquals(Collections.singletonList(\"five\"),toList(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - windowSize),ofEpochMilli(startTime + increment * 5 + windowSize))))@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertEquals(Collections.singletonList(\"six\"),toList(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - windowSize),ofEpochMilli(startTime + increment * 6 + windowSize))))@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))))@@@35@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
104 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertEquals(new HashSet<>(Collections.singletonList(\"eight\")),toSet(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))))@@@46@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "assertEquals(Collections.singletonList(\"eight\"),toList(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - windowSize),ofEpochMilli(startTime + increment * 8 + windowSize))))@@@46@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
39 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - windowSize),ofEpochMilli(startTime + increment * 8 + windowSize))))@@@36@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
69 [style = filled, label = "setCurrentTime(startTime)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
95 [style = filled, label = "assertEquals(Collections.singletonList(\"two\"),toList(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - windowSize),ofEpochMilli(startTime + increment * 2 + windowSize))))@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
100 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(1,ofEpochMilli(startTime + increment - windowSize),ofEpochMilli(startTime + increment + windowSize))))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "assertEquals(Collections.singletonList(\"four\"),toList(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - windowSize),ofEpochMilli(startTime + increment * 4 + windowSize))))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(4),segments.segmentName(5),segments.segmentName(6)),segmentDirs(baseDir))@@@61@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "context.restore(windowName,changeLog)@@@37@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "windowStore.put(4,\"four\")@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "setCurrentTime(startTime + increment * 5)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "setCurrentTime(startTime + increment * 4)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "setCurrentTime(startTime + increment * 8)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))))@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
67 [style = filled, label = "assertEquals(new HashSet<>(Collections.singletonList(\"five\")),toSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))))@@@43@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertEquals(Collections.singletonList(\"seven\"),toList(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - windowSize),ofEpochMilli(startTime + increment * 7 + windowSize))))@@@58@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
90 [style = filled, label = "assertEquals(Collections.singletonList(\"five\"),toList(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - windowSize),ofEpochMilli(startTime + increment * 5 + windowSize))))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
68 [style = filled, label = "final long increment = SEGMENT_INTERVAL / 2@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "windowStore.put(2,\"two\")@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "context.restore(STORE_NAME,changeLog)@@@37@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))))@@@28@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final long startTime = segmentInterval * 2@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
66 [style = filled, label = "windowStore.init(context,windowStore)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
55 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(1,ofEpochMilli(startTime + increment - WINDOW_SIZE),ofEpochMilli(startTime + increment + WINDOW_SIZE))))@@@39@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "testRestore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "assertEquals(Collections.singletonList(\"five\"),toList(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - windowSize),ofEpochMilli(startTime + increment * 5 + windowSize))))@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))))@@@32@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "final long startTime = segmentInterval * 2@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))))@@@34@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
42 [style = filled, label = "Utils.delete(baseDir)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "assertEquals(Collections.singletonList(\"four\"),toList(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - windowSize),ofEpochMilli(startTime + increment * 4 + windowSize))))@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "windowStore.flush()@@@47@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(new HashSet<>(Collections.singletonList(\"six\")),toSet(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))))@@@44@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
38 [style = filled, label = "windowStore.put(6,\"six\")@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
94 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - windowSize),ofEpochMilli(startTime + increment * 3 + windowSize))))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))))@@@33@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "setCurrentTime(startTime + increment * 4)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "windowStore.put(7,\"seven\")@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "windowStore.put(8,\"eight\")@@@49@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(1,ofEpochMilli(startTime + increment - windowSize),ofEpochMilli(startTime + increment + windowSize))))@@@39@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
93 [style = filled, label = "assertEquals(Collections.singletonList(\"four\"),toList(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - windowSize),ofEpochMilli(startTime + increment * 4 + windowSize))))@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "assertEquals(Collections.singletonList(\"two\"),toList(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - windowSize),ofEpochMilli(startTime + increment * 2 + windowSize))))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertEquals(new HashSet<>(Collections.singletonList(\"seven\")),toSet(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))))@@@45@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "windowStore = createWindowStore(context,false)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "windowStore.put(4,\"four\")@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "assertEquals(Collections.singletonList(\"two\"),toList(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - windowSize),ofEpochMilli(startTime + increment * 2 + windowSize))))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "setCurrentTime(startTime + increment * 2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
97 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - windowSize),ofEpochMilli(startTime + increment * 3 + windowSize))))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - windowSize),ofEpochMilli(startTime + increment * 6 + windowSize))))@@@34@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
70 [style = filled, label = "final long startTime = SEGMENT_INTERVAL * 2@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
58 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))))@@@30@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(3),segments.segmentName(4),segments.segmentName(5)),segmentDirs(baseDir))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
83 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(1,ofEpochMilli(startTime + increment - windowSize),ofEpochMilli(startTime + increment + windowSize))))@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(Collections.singletonList(\"seven\"),toList(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - windowSize),ofEpochMilli(startTime + increment * 7 + windowSize))))@@@47@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))))@@@38@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "windowStore.put(5,\"five\")@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
81 [style = filled, label = "testRolling['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "setCurrentTime(startTime + increment * 6)@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3),segments.segmentName(4)),segmentDirs(baseDir))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "windowStore.flush()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "windowStore.put(1,\"one\")@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "windowStore.flush()@@@60@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
89 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - windowSize),ofEpochMilli(startTime + increment * 2 + windowSize))))@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))))@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "windowStore.put(0,\"zero\")@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - windowSize),ofEpochMilli(startTime + increment * 5 + windowSize))))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
61 [style = filled, label = "windowStore.flush()@@@47@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
96 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(2),segments.segmentName(3)),segmentDirs(baseDir))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertEquals(Collections.singletonList(\"six\"),toList(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - windowSize),ofEpochMilli(startTime + increment * 6 + windowSize))))@@@46@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(2)),segmentDirs(baseDir))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertEquals(Collections.singletonList(\"eight\"),toList(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - windowSize),ofEpochMilli(startTime + increment * 8 + windowSize))))@@@59@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "windowStore.put(0,\"zero\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
86 [style = filled, label = "assertEquals(Collections.singletonList(\"zero\"),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "windowStore.close()@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - windowSize),ofEpochMilli(startTime + increment * 3 + windowSize))))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
92 [style = filled, label = "assertEquals(Collections.singletonList(\"one\"),toList(windowStore.fetch(1,ofEpochMilli(startTime + increment - windowSize),ofEpochMilli(startTime + increment + windowSize))))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(Utils.mkSet(segments.segmentName(4L),segments.segmentName(5L),segments.segmentName(6L)),segmentDirs(baseDir))@@@48@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
106 [style = filled, label = "assertEquals(Collections.singletonList(\"five\"),toList(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - windowSize),ofEpochMilli(startTime + increment * 5 + windowSize))))@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "final long increment = segmentInterval / 2@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(0,ofEpochMilli(startTime - WINDOW_SIZE),ofEpochMilli(startTime + WINDOW_SIZE))))@@@38@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
107 [style = filled, label = "assertEquals(Collections.singletonList(\"four\"),toList(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - windowSize),ofEpochMilli(startTime + increment * 4 + windowSize))))@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
82 [style = filled, label = "assertEquals(Collections.emptyList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - windowSize),ofEpochMilli(startTime + increment * 3 + windowSize))))@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
60 [style = filled, label = "assertEquals(new HashSet<>(Collections.emptyList()),toSet(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))))@@@31@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20->37 [style = solid, label="startTime"];
16->95 [style = dashed, label="0"];
14->94 [style = solid, label="startTime"];
20->24 [style = solid, label="startTime"];
40->6 [style = bold, label=""];
68->69 [style = bold, label=""];
40->82 [style = solid, label="increment"];
96->80 [style = bold, label=""];
0->96 [style = bold, label=""];
106->23 [style = bold, label=""];
14->86 [style = solid, label="startTime"];
62->54 [style = bold, label=""];
70->7 [style = solid, label="startTime"];
94->98 [style = bold, label=""];
68->63 [style = solid, label="increment"];
14->78 [style = solid, label="startTime"];
40->97 [style = solid, label="increment"];
71->62 [style = bold, label=""];
20->6 [style = solid, label="startTime"];
49->51 [style = bold, label=""];
58->60 [style = bold, label=""];
20->10 [style = solid, label="startTime"];
20->12 [style = solid, label="startTime"];
20->70 [style = dashed, label="0"];
68->48 [style = solid, label="increment"];
40->46 [style = solid, label="increment"];
1->30 [style = bold, label=""];
20->17 [style = solid, label="startTime"];
68->1 [style = solid, label="increment"];
27->57 [style = dashed, label="0"];
68->38 [style = solid, label="increment"];
30->29 [style = bold, label=""];
36->20 [style = bold, label=""];
77->7 [style = bold, label=""];
54->65 [style = bold, label=""];
14->43 [style = solid, label="increment"];
70->67 [style = solid, label="startTime"];
40->83 [style = solid, label="increment"];
14->103 [style = solid, label="startTime"];
68->15 [style = solid, label="increment"];
40->77 [style = solid, label="increment"];
48->52 [style = bold, label=""];
55->48 [style = bold, label=""];
70->21 [style = solid, label="startTime"];
68->60 [style = solid, label="increment"];
14->35 [style = solid, label="increment"];
14->73 [style = solid, label="startTime"];
57->63 [style = bold, label=""];
20->43 [style = solid, label="startTime"];
5->0 [style = bold, label=""];
70->53 [style = solid, label="startTime"];
14->16 [style = solid, label="increment"];
70->56 [style = solid, label="startTime"];
68->64 [style = solid, label="increment"];
14->95 [style = solid, label="startTime"];
37->104 [style = bold, label=""];
70->48 [style = solid, label="startTime"];
28->50 [style = dashed, label="0"];
20->26 [style = solid, label="startTime"];
70->68 [style = bold, label=""];
80->15 [style = bold, label=""];
107->90 [style = bold, label=""];
14->30 [style = solid, label="increment"];
13->46 [style = bold, label=""];
14->74 [style = solid, label="startTime"];
23->12 [style = bold, label=""];
40->99 [style = solid, label="increment"];
63->50 [style = bold, label=""];
91->14 [style = bold, label=""];
40->95 [style = solid, label="increment"];
20->34 [style = solid, label="startTime"];
14->12 [style = solid, label="increment"];
70->46 [style = solid, label="startTime"];
17->87 [style = bold, label=""];
13->84 [style = bold, label=""];
14->82 [style = solid, label="startTime"];
40->78 [style = solid, label="increment"];
14->77 [style = solid, label="startTime"];
35->63 [style = dashed, label="0"];
21->13 [style = bold, label=""];
68->55 [style = solid, label="increment"];
28->16 [style = dashed, label="0"];
14->100 [style = solid, label="startTime"];
59->64 [style = bold, label=""];
17->5 [style = bold, label=""];
35->32 [style = dashed, label="0"];
70->51 [style = solid, label="startTime"];
27->74 [style = dashed, label="0"];
14->92 [style = solid, label="startTime"];
70->1 [style = solid, label="startTime"];
20->25 [style = solid, label="startTime"];
20->39 [style = solid, label="startTime"];
34->19 [style = bold, label=""];
14->12 [style = solid, label="startTime"];
105->83 [style = bold, label=""];
40->94 [style = solid, label="increment"];
40->23 [style = solid, label="increment"];
37->1 [style = bold, label=""];
102->94 [style = bold, label=""];
85->25 [style = bold, label=""];
82->72 [style = bold, label=""];
39->45 [style = bold, label=""];
20->14 [style = bold, label=""];
24->38 [style = bold, label=""];
40->93 [style = solid, label="increment"];
14->4 [style = solid, label="startTime"];
40->5 [style = solid, label="increment"];
41->2 [style = bold, label=""];
14->102 [style = solid, label="startTime"];
39->71 [style = dashed, label="0"];
14->80 [style = solid, label="startTime"];
31->11 [style = bold, label=""];
14->24 [style = solid, label="increment"];
70->38 [style = solid, label="startTime"];
68->46 [style = solid, label="increment"];
68->53 [style = solid, label="increment"];
14->97 [style = solid, label="startTime"];
40->90 [style = solid, label="increment"];
40->73 [style = solid, label="increment"];
35->28 [style = bold, label=""];
25->27 [style = bold, label=""];
92->75 [style = bold, label=""];
14->41 [style = solid, label="increment"];
40->101 [style = solid, label="increment"];
7->24 [style = bold, label=""];
60->57 [style = bold, label=""];
88->93 [style = bold, label=""];
90->73 [style = bold, label=""];
14->93 [style = solid, label="startTime"];
14->106 [style = solid, label="startTime"];
14->85 [style = solid, label="startTime"];
44->58 [style = dashed, label="0"];
40->100 [style = solid, label="increment"];
38->37 [style = bold, label=""];
16->85 [style = bold, label=""];
68->21 [style = solid, label="increment"];
25->79 [style = bold, label=""];
68->71 [style = solid, label="increment"];
98->101 [style = bold, label=""];
14->89 [style = solid, label="startTime"];
40->88 [style = solid, label="increment"];
76->95 [style = bold, label=""];
14->88 [style = solid, label="startTime"];
70->69 [style = solid, label="startTime"];
68->50 [style = solid, label="increment"];
40->80 [style = solid, label="increment"];
4->52 [style = dashed, label="0"];
65->55 [style = bold, label=""];
18->41 [style = bold, label=""];
79->105 [style = bold, label=""];
40->72 [style = solid, label="increment"];
70->52 [style = solid, label="startTime"];
40->74 [style = solid, label="increment"];
12->48 [style = dashed, label="0"];
2->51 [style = dashed, label="0"];
14->39 [style = solid, label="increment"];
40->4 [style = solid, label="increment"];
40->98 [style = solid, label="increment"];
81->91 [style = bold, label=""];
40->21 [style = bold, label=""];
70->65 [style = solid, label="startTime"];
14->23 [style = solid, label="startTime"];
14->10 [style = solid, label="increment"];
20->27 [style = solid, label="startTime"];
31->33 [style = dashed, label="0"];
83->89 [style = bold, label=""];
68->57 [style = solid, label="increment"];
14->44 [style = solid, label="increment"];
14->32 [style = solid, label="increment"];
14->72 [style = solid, label="startTime"];
70->71 [style = solid, label="startTime"];
25->60 [style = dashed, label="0"];
6->21 [style = bold, label=""];
28->39 [style = bold, label=""];
20->0 [style = solid, label="startTime"];
68->5 [style = solid, label="increment"];
9->18 [style = dashed, label="0"];
43->77 [style = bold, label=""];
14->68 [style = dashed, label="0"];
20->11 [style = solid, label="startTime"];
68->51 [style = solid, label="increment"];
14->75 [style = solid, label="startTime"];
20->18 [style = solid, label="startTime"];
14->107 [style = solid, label="startTime"];
14->0 [style = solid, label="increment"];
11->32 [style = bold, label=""];
40->76 [style = solid, label="increment"];
14->83 [style = solid, label="startTime"];
68->62 [style = solid, label="increment"];
32->16 [style = bold, label=""];
70->59 [style = solid, label="startTime"];
68->7 [style = solid, label="increment"];
14->21 [style = solid, label="startTime"];
70->64 [style = solid, label="startTime"];
3->42 [style = bold, label=""];
27->35 [style = bold, label=""];
20->30 [style = solid, label="startTime"];
78->99 [style = bold, label=""];
14->16 [style = solid, label="startTime"];
40->92 [style = solid, label="increment"];
26->53 [style = dashed, label="0"];
43->7 [style = bold, label=""];
25->72 [style = dashed, label="0"];
68->58 [style = solid, label="increment"];
68->52 [style = solid, label="increment"];
14->25 [style = solid, label="increment"];
20->19 [style = solid, label="startTime"];
93->106 [style = bold, label=""];
70->5 [style = solid, label="startTime"];
14->26 [style = solid, label="increment"];
84->46 [style = bold, label=""];
70->49 [style = solid, label="startTime"];
20->4 [style = solid, label="startTime"];
24->86 [style = bold, label=""];
16->44 [style = bold, label=""];
68->56 [style = solid, label="increment"];
70->58 [style = solid, label="startTime"];
95->82 [style = bold, label=""];
15->43 [style = bold, label=""];
33->66 [style = solid, label="windowStore"];
22->10 [style = bold, label=""];
14->17 [style = solid, label="increment"];
47->70 [style = bold, label=""];
14->13 [style = solid, label="increment"];
14->90 [style = solid, label="startTime"];
44->25 [style = bold, label=""];
40->102 [style = solid, label="increment"];
14->98 [style = solid, label="startTime"];
100->102 [style = bold, label=""];
101->78 [style = bold, label=""];
70->22 [style = solid, label="startTime"];
14->2 [style = solid, label="increment"];
50->71 [style = bold, label=""];
20->44 [style = solid, label="startTime"];
20->35 [style = solid, label="startTime"];
64->58 [style = bold, label=""];
70->60 [style = solid, label="startTime"];
70->55 [style = solid, label="startTime"];
14->23 [style = solid, label="increment"];
53->67 [style = bold, label=""];
99->1 [style = bold, label=""];
14->37 [style = solid, label="increment"];
40->85 [style = solid, label="increment"];
20->2 [style = solid, label="startTime"];
30->103 [style = bold, label=""];
68->49 [style = solid, label="increment"];
33->66 [style = bold, label=""];
72->74 [style = bold, label=""];
40->16 [style = solid, label="increment"];
10->15 [style = bold, label=""];
52->53 [style = bold, label=""];
14->5 [style = solid, label="startTime"];
40->89 [style = solid, label="increment"];
69->6 [style = bold, label=""];
40->12 [style = solid, label="increment"];
29->3 [style = bold, label=""];
74->32 [style = bold, label=""];
70->57 [style = solid, label="startTime"];
14->28 [style = solid, label="increment"];
4->26 [style = bold, label=""];
40->106 [style = solid, label="increment"];
42->33 [style = bold, label=""];
51->56 [style = bold, label=""];
20->16 [style = solid, label="startTime"];
20->28 [style = solid, label="startTime"];
56->61 [style = bold, label=""];
20->23 [style = solid, label="startTime"];
61->9 [style = bold, label=""];
14->105 [style = solid, label="startTime"];
103->76 [style = bold, label=""];
104->100 [style = bold, label=""];
75->97 [style = bold, label=""];
14->32 [style = solid, label="startTime"];
97->107 [style = bold, label=""];
20->13 [style = solid, label="startTime"];
86->92 [style = bold, label=""];
14->19 [style = solid, label="increment"];
40->32 [style = solid, label="increment"];
67->49 [style = bold, label=""];
41->49 [style = dashed, label="0"];
23->55 [style = dashed, label="0"];
40->75 [style = solid, label="increment"];
12->4 [style = bold, label=""];
20->41 [style = solid, label="startTime"];
40->107 [style = solid, label="increment"];
19->23 [style = bold, label=""];
0->22 [style = bold, label=""];
14->99 [style = solid, label="startTime"];
70->63 [style = solid, label="startTime"];
87->5 [style = bold, label=""];
8->9 [style = bold, label=""];
14->4 [style = solid, label="increment"];
70->50 [style = solid, label="startTime"];
14->76 [style = solid, label="startTime"];
33->31 [style = bold, label=""];
14->27 [style = solid, label="increment"];
70->62 [style = solid, label="startTime"];
20->32 [style = solid, label="startTime"];
73->38 [style = bold, label=""];
70->15 [style = solid, label="startTime"];
89->88 [style = bold, label=""];
14->104 [style = solid, label="startTime"];
14->101 [style = solid, label="startTime"];
46->17 [style = bold, label=""];
68->22 [style = solid, label="increment"];
66->59 [style = bold, label=""];
14->46 [style = solid, label="startTime"];
14->40 [style = bold, label=""];
45->34 [style = bold, label=""];
16->64 [style = dashed, label="0"];
14->18 [style = solid, label="increment"];
18->67 [style = dashed, label="0"];
2->8 [style = bold, label=""];
68->67 [style = solid, label="increment"];
26->18 [style = bold, label=""];
}
