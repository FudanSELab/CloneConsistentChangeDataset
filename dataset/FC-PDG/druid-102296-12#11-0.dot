digraph {
35 [style = filled, label = "final TaskLocation location1 = new TaskLocation(\"testHost\",1234,-1)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Collection workItems = new ArrayList<>()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "verifyAll()@@@52@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
76 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getPartitionIds(stream)).andReturn(ImmutableSet.of(shardId1,shardId0)).anyTimes()@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id1\")).andReturn(Futures.immediateFuture(startTime))@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final TreeMap<Integer,Map<String,String>> checkpoints = new TreeMap<>()@@@43@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
74 [style = filled, label = "replayAll()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final Task id3 = createKinesisIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getAssignment()).andReturn(ImmutableSet.of(shard1Partition,shard0Partition)).anyTimes()@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "EasyMock.expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "supervisor.runInternal()@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "id1 = createKinesisIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
75 [style = filled, label = "supervisor.resetInternal(null)@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id2\")).andReturn(Optional.of(TaskStatus.running(\"id2\"))).anyTimes()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id2\")).andReturn(Futures.immediateFuture(startTime))@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id1\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(shard1Partition)).andReturn(\"12\").anyTimes()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "Thread.sleep(100)@@@55@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "supervisor.checkpoint(0,id1.getIOConfig().getBaseSequenceName(),new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,checkpoints.get(0),checkpoints.get(0).keySet())),new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,fakeCheckpoints,ImmutableSet.of())))@@@54@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id3\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id2\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "Assert.assertNull(serviceEmitter.getStackTrace(),serviceEmitter.getStackTrace())@@@58@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionMessage(),serviceEmitter.getExceptionMessage())@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id1\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "taskQueue.shutdown(\"id3\",\"DataSourceMetadata is not found while reset\")@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KinesisDataSourceMetadata(null)).anyTimes()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "verifyAll()@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true)@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertNull(serviceEmitter.getExceptionClass())@@@60@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "supervisorRecordSupplier.seek(EasyMock.anyObject(),EasyMock.anyString())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final KinesisIndexTask id1@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "supervisor.moveTaskGroupToPendingCompletion(0)@@@52@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "taskQueue.shutdown(\"id1\",\"DataSourceMetadata is not found while reset\")@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "taskRunner.registerListener(EasyMock.anyObject(),EasyMock.anyObject())@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "Task id2 = createKinesisIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id1\")).andReturn(Optional.of(id1)).anyTimes()@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "supervisor.checkpoint(0,id1.getIOConfig().getBaseSequenceName(),new KinesisDataSourceMetadata(new SeekableStreamStartSequenceNumbers<>(stream,checkpoints.get(0),checkpoints.get(0).keySet())))@@@53@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id3\")).andReturn(Optional.of(TaskStatus.running(\"id3\"))).anyTimes()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "supervisorRecordSupplier.seekToLatest(EasyMock.anyObject())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "TreeMap<Integer,Map<String,String>> checkpoints = new TreeMap<>()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "taskQueue.shutdown(\"id2\",\"DataSourceMetadata is not found while reset\")@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id2,null,location2))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
70 [style = filled, label = "Task id1 = createKinesisIndexTask(\"id1\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"0\",shardId0,\"0\"),ImmutableSet.of()),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1H\",null,null)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "EasyMock.reset(taskQueue,indexerMetadataStorageCoordinator)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "checkpoints.put(0,ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"))@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "supervisor.getNoticesQueueSize() > 0@@@54@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "testCheckpointForInactiveTaskGroup['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id3\")).andReturn(Optional.of(id3)).anyTimes()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "Task id3 = createKinesisIndexTask(\"id3\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "final DateTime startTime = DateTimes.nowUtc()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "EasyMock.expect(taskStorage.getStatus(\"id1\")).andReturn(Optional.of(TaskStatus.running(\"id1\"))).anyTimes()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(id1,null,location1))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
71 [style = filled, label = "supervisorRecordSupplier.assign(EasyMock.anyObject())@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "EasyMock.expectLastCall().anyTimes()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "EasyMock.expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"id3\"),EasyMock.anyBoolean())).andReturn(Futures.immediateFuture(checkpoints)).times(1)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(shard0Partition)).andReturn(\"1\").anyTimes()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "testCheckpointForInactiveTaskGroup['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "EasyMock.expect(taskClient.getStatusAsync(\"id2\")).andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.READING))@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "EasyMock.expect(taskStorage.getTask(\"id2\")).andReturn(Optional.of(id2)).anyTimes()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "EasyMock.expect(taskClient.getStartTimeAsync(\"id3\")).andReturn(Futures.immediateFuture(startTime))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final Task id2 = createKinesisIndexTask(\"id2\",DATASOURCE,0,new SeekableStreamStartSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,\"10\",shardId0,\"20\"),ImmutableSet.of(shardId0,shardId1)),new SeekableStreamEndSequenceNumbers<>(\"stream\",ImmutableMap.of(shardId1,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,shardId0,KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER)),null,null)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
72 [style = filled, label = "supervisor.start()@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final Map<String,String> fakeCheckpoints = Collections.emptyMap()@@@52@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
53 [style = filled, label = "supervisor = getTestableSupervisor(2,1,true,\"PT1S\",null,null,false)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "EasyMock.replay(taskQueue,indexerMetadataStorageCoordinator)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes()@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "testNoDataIngestionTasks['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "final TaskLocation location2 = new TaskLocation(\"testHost2\",145,-1)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->50 [style = bold, label=""];
65->67 [style = bold, label=""];
10->36 [style = dashed, label="0"];
74->72 [style = bold, label=""];
50->70 [style = dashed, label="0"];
71->62 [style = bold, label=""];
44->45 [style = solid, label="location2"];
62->76 [style = bold, label=""];
25->14 [style = bold, label=""];
10->41 [style = bold, label=""];
7->8 [style = bold, label=""];
12->68 [style = bold, label=""];
3->27 [style = bold, label=""];
41->48 [style = bold, label=""];
12->10 [style = bold, label=""];
45->43 [style = bold, label=""];
26->61 [style = dashed, label="0"];
34->2 [style = bold, label=""];
40->47 [style = bold, label=""];
28->25 [style = bold, label=""];
24->63 [style = dashed, label="0"];
39->58 [style = bold, label=""];
69->5 [style = bold, label=""];
8->11 [style = bold, label=""];
60->39 [style = bold, label=""];
67->54 [style = solid, label="startTime"];
46->38 [style = bold, label=""];
35->44 [style = bold, label=""];
26->43 [style = solid, label="id2"];
54->12 [style = bold, label=""];
42->56 [style = solid, label="startTime"];
20->48 [style = dashed, label="0"];
67->73 [style = bold, label=""];
26->24 [style = bold, label=""];
75->64 [style = bold, label=""];
11->18 [style = bold, label=""];
0->7 [style = bold, label=""];
66->69 [style = bold, label=""];
58->39 [style = bold, label=""];
18->4 [style = bold, label=""];
19->13 [style = bold, label=""];
1->51 [style = bold, label=""];
29->32 [style = bold, label=""];
1->75 [style = bold, label=""];
57->30 [style = bold, label=""];
52->36 [style = bold, label=""];
31->4 [style = solid, label="fakeCheckpoints"];
61->63 [style = bold, label=""];
39->58 [style = dotted, label="true"];
70->61 [style = bold, label=""];
30->17 [style = bold, label=""];
44->43 [style = solid, label="location2"];
22->19 [style = bold, label=""];
44->29 [style = bold, label=""];
37->41 [style = dashed, label="0"];
4->39 [style = bold, label=""];
18->60 [style = bold, label=""];
56->37 [style = bold, label=""];
63->71 [style = bold, label=""];
50->32 [style = solid, label="id1"];
73->70 [style = bold, label=""];
67->12 [style = solid, label="startTime"];
59->53 [style = bold, label=""];
5->16 [style = bold, label=""];
77->66 [style = bold, label=""];
11->31 [style = bold, label=""];
13->27 [style = bold, label=""];
27->55 [style = bold, label=""];
43->5 [style = bold, label=""];
72->28 [style = bold, label=""];
56->74 [style = bold, label=""];
39->1 [style = bold, label=""];
2->54 [style = bold, label=""];
55->52 [style = bold, label=""];
53->9 [style = bold, label=""];
42->30 [style = solid, label="startTime"];
50->26 [style = bold, label=""];
16->15 [style = bold, label=""];
32->45 [style = bold, label=""];
57->42 [style = bold, label=""];
42->17 [style = solid, label="startTime"];
48->57 [style = bold, label=""];
11->1 [style = bold, label=""];
24->35 [style = bold, label=""];
20->28 [style = bold, label=""];
76->77 [style = bold, label=""];
37->20 [style = bold, label=""];
26->45 [style = solid, label="id2"];
47->46 [style = bold, label=""];
31->18 [style = bold, label=""];
15->6 [style = bold, label=""];
35->32 [style = solid, label="location1"];
67->68 [style = solid, label="startTime"];
49->53 [style = bold, label=""];
36->23 [style = bold, label=""];
13->3 [style = bold, label=""];
14->0 [style = bold, label=""];
4->60 [style = dashed, label="0"];
42->30 [style = bold, label=""];
6->40 [style = bold, label=""];
23->34 [style = bold, label=""];
17->56 [style = bold, label=""];
68->41 [style = bold, label=""];
38->22 [style = bold, label=""];
33->21 [style = bold, label=""];
51->33 [style = bold, label=""];
}
