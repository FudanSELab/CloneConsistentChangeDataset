digraph {
29 [style = filled, label = "String uuid = UUID.randomUUID().toString()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertNull(oi.getPrimitiveJavaObject(null))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNull(oi.getPrimitiveWritableObject(null))@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(PrimitiveObjectInspector.PrimitiveCategory.STRING,oi.getPrimitiveCategory())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String time = LocalTime.now().toString()@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "testIcebergTimeObjectInspector['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertNull(oi.convert(null))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Assert.assertFalse(oi.preferWritable())@@@22@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Assert.assertEquals(localTime,oi.convert(time))@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "Text text = new Text(time)@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(uuid,oi.convert(text))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Text text = new Text(time)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "Text text = new Text(uuid)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(text,oi.getPrimitiveWritableObject(time))@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "Assert.assertEquals(text,oi.getPrimitiveWritableObject(uuid))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.assertEquals(,oi.getJavaPrimitiveClass())@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Text copy = (Text)oi.copyObject(text)@@@19@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertEquals(text,copy)@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Assert.assertEquals(ObjectInspector.Category.PRIMITIVE,oi.getCategory())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(,oi.getPrimitiveWritableClass())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(TypeInfoFactory.stringTypeInfo,oi.getTypeInfo())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "String time = localTime.toString()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "Assert.assertNull(oi.copyObject(null))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "IcebergTimeObjectInspector oi = IcebergTimeObjectInspector.get()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertFalse(oi.preferWritable())@@@23@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "IcebergUUIDObjectInspector oi = IcebergUUIDObjectInspector.get()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "LocalTime localTime = LocalTime.now()@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
30 [style = filled, label = "Assert.assertEquals(uuid,oi.getPrimitiveJavaObject(text))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertEquals(time,oi.getPrimitiveJavaObject(text))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testIcebergTimeObjectInspector['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "Assert.assertNotSame(text,copy)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testIcebergUUIDObjectInspector['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(TypeInfoFactory.stringTypeInfo.getTypeName(),oi.getTypeName())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
0->19 [style = solid, label="text"];
11->20 [style = bold, label=""];
8->10 [style = bold, label=""];
0->9 [style = solid, label="text"];
17->5 [style = bold, label=""];
0->9 [style = bold, label=""];
1->4 [style = bold, label=""];
23->20 [style = bold, label=""];
32->30 [style = solid, label="text"];
3->28 [style = dashed, label="0"];
19->27 [style = dashed, label="0"];
32->28 [style = solid, label="text"];
24->9 [style = solid, label="time"];
24->3 [style = solid, label="time"];
29->27 [style = solid, label="uuid"];
13->29 [style = dashed, label="0"];
32->27 [style = solid, label="text"];
0->32 [style = dashed, label="0"];
20->31 [style = dashed, label="0"];
13->0 [style = solid, label="time"];
4->21 [style = bold, label=""];
9->3 [style = solid, label="text"];
29->28 [style = solid, label="uuid"];
32->6 [style = solid, label="text"];
16->17 [style = bold, label=""];
9->4 [style = solid, label="text"];
19->6 [style = bold, label=""];
32->30 [style = bold, label=""];
13->19 [style = solid, label="time"];
24->19 [style = solid, label="time"];
24->25 [style = solid, label="time"];
31->12 [style = bold, label=""];
27->6 [style = bold, label=""];
22->25 [style = solid, label="localTime"];
6->15 [style = bold, label=""];
19->25 [style = bold, label=""];
9->19 [style = solid, label="text"];
13->9 [style = solid, label="time"];
0->1 [style = solid, label="text"];
7->22 [style = bold, label=""];
5->2 [style = bold, label=""];
26->31 [style = bold, label=""];
6->15 [style = solid, label="copy"];
29->30 [style = solid, label="uuid"];
30->28 [style = bold, label=""];
13->3 [style = solid, label="time"];
10->16 [style = bold, label=""];
3->19 [style = bold, label=""];
15->4 [style = solid, label="copy"];
29->32 [style = solid, label="uuid"];
0->3 [style = solid, label="text"];
6->1 [style = solid, label="copy"];
12->8 [style = bold, label=""];
29->32 [style = bold, label=""];
2->14 [style = bold, label=""];
7->29 [style = bold, label=""];
20->12 [style = bold, label=""];
0->15 [style = solid, label="text"];
25->15 [style = bold, label=""];
9->3 [style = bold, label=""];
9->1 [style = solid, label="text"];
14->18 [style = bold, label=""];
28->27 [style = bold, label=""];
22->24 [style = bold, label=""];
19->25 [style = dashed, label="0"];
18->7 [style = bold, label=""];
9->15 [style = solid, label="text"];
0->6 [style = solid, label="text"];
13->22 [style = dashed, label="0"];
32->15 [style = solid, label="text"];
32->1 [style = solid, label="text"];
9->30 [style = dashed, label="0"];
24->9 [style = bold, label=""];
13->0 [style = bold, label=""];
15->1 [style = solid, label="copy"];
15->1 [style = bold, label=""];
}
