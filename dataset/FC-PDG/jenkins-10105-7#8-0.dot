digraph {
3 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invoke()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "j.createSlave(\"AgentFromXML\",null,null)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"ExistingSlave\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "j.createSlave(\"ExistingSlave\",null,null)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Node 'SlaveFromXML' already exists\"))@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
8 [style = filled, label = "createNodeShouldFailIfNodeAlreadyExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Node 'ExistingSlave' already exists\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(result,failedWith(4))@@@7@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "createNodeShouldFailIfNodeAlreadyExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "j.createSlave(\"SlaveFromXML\",null,null)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result.stderr(),containsString(\"ERROR: Node 'AgentFromXML' already exists\"))@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11->4 [style = solid, label="result"];
12->11 [style = bold, label=""];
1->3 [style = bold, label=""];
3->6 [style = bold, label=""];
11->5 [style = solid, label="result"];
11->9 [style = bold, label=""];
7->3 [style = bold, label=""];
8->7 [style = bold, label=""];
3->5 [style = solid, label="result"];
1->12 [style = dashed, label="0"];
6->5 [style = bold, label=""];
3->2 [style = bold, label=""];
2->9 [style = dashed, label="0"];
10->12 [style = bold, label=""];
0->1 [style = bold, label=""];
5->4 [style = bold, label=""];
2->6 [style = dashed, label="0"];
9->5 [style = bold, label=""];
1->7 [style = dashed, label="0"];
3->4 [style = solid, label="result"];
3->11 [style = dashed, label="0"];
2->5 [style = bold, label=""];
}
