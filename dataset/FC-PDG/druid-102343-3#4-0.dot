digraph {
6 [style = filled, label = "verifyAll()@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testSeekToLatest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "EasyMock.expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard0,shard1)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "recordSupplier.assign(partitions)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,shardId1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testSeekToLatest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "recordsPerFetch = 100@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "i++@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID1),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId1),anyString(),anyString())).andReturn(getShardIteratorResult1).anyTimes()@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,SHARD_ID0)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,SHARD_ID1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Set<StreamPartition<String>> partitions = ImmutableSet.of(shard1)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int i = 0@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "expect(getShardIteratorResult0.getShardIterator()).andReturn(null).once()@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),cleanRecords(recordSupplier.poll(poll_timeout_millis)))@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "EasyMock.expect(kinesis.getShardIterator(EasyMock.anyObject(),EasyMock.eq(SHARD_ID0),EasyMock.anyString(),EasyMock.anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "replayAll()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,shardId0)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "recordSupplier.seekToLatest(partitions)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "recordSupplier.start()@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "StreamPartition<String> shard1 = StreamPartition.of(stream,shardId1)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,1,0,2,false,100,5000,5000,60000,5)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "expect(kinesis.getShardIterator(anyObject(),eq(shardId0),anyString(),anyString())).andReturn(getShardIteratorResult0).anyTimes()@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
30 [style = filled, label = "testSeekUnassigned['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "recordSupplier = new KinesisRecordSupplier(kinesis,recordsPerFetch,0,2,false,100,5000,5000,60000,100)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "recordSupplier.assign(partitions)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "recordSupplier.seekToEarliest(Collections.singleton(shard0))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(Collections.emptyList(),cleanRecords(recordSupplier.poll(POLL_TIMEOUT_MILLIS)))@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "i < 10 && recordSupplier.bufferSize() < 2@@@17@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "StreamPartition<String> shard0 = StreamPartition.of(stream,shardId0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Thread.sleep(100)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "EasyMock.expect(getShardIteratorResult1.getShardIterator()).andReturn(null).once()@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22->26 [style = bold, label=""];
5->10 [style = bold, label=""];
11->10 [style = solid, label="i"];
15->2 [style = bold, label=""];
0->4 [style = solid, label="recordsPerFetch"];
17->1 [style = bold, label=""];
13->8 [style = solid, label="shard0"];
3->21 [style = dashed, label="0"];
17->24 [style = dashed, label="0"];
18->22 [style = dashed, label="0"];
16->25 [style = dashed, label="0"];
16->6 [style = bold, label=""];
33->28 [style = bold, label=""];
21->8 [style = solid, label="shard1"];
20->0 [style = bold, label=""];
4->15 [style = bold, label=""];
18->19 [style = bold, label=""];
21->8 [style = bold, label=""];
11->9 [style = solid, label="i"];
7->0 [style = bold, label=""];
19->17 [style = bold, label=""];
29->34 [style = bold, label=""];
8->28 [style = dashed, label="0"];
25->6 [style = bold, label=""];
11->9 [style = bold, label=""];
26->24 [style = bold, label=""];
9->16 [style = bold, label=""];
31->34 [style = solid, label="shard0"];
28->32 [style = bold, label=""];
32->29 [style = bold, label=""];
4->32 [style = dashed, label="0"];
3->8 [style = solid, label="shard1"];
12->13 [style = bold, label=""];
13->27 [style = dashed, label="0"];
19->26 [style = dashed, label="0"];
13->3 [style = bold, label=""];
30->31 [style = bold, label=""];
3->8 [style = bold, label=""];
0->22 [style = bold, label=""];
9->25 [style = bold, label=""];
2->14 [style = bold, label=""];
31->33 [style = bold, label=""];
8->2 [style = solid, label="partitions"];
2->34 [style = dashed, label="0"];
1->12 [style = bold, label=""];
8->15 [style = solid, label="partitions"];
9->5 [style = bold, label=""];
0->18 [style = bold, label=""];
10->9 [style = solid, label="i"];
23->12 [style = bold, label=""];
10->9 [style = bold, label=""];
28->29 [style = solid, label="partitions"];
8->4 [style = bold, label=""];
9->10 [style = dotted, label="true"];
27->21 [style = bold, label=""];
14->11 [style = bold, label=""];
12->27 [style = bold, label=""];
33->28 [style = solid, label="shard1"];
1->23 [style = dashed, label="0"];
27->8 [style = solid, label="shard0"];
24->23 [style = bold, label=""];
9->5 [style = dotted, label="true"];
}
