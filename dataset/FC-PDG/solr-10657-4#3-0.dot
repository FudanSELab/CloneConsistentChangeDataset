digraph {
8 [style = filled, label = "assertTrue(expressionString.contains(\"sum(a_i)\"))@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(expressionString.contains(\"min(a_i)\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(expressionString.contains(\"fl=\"id,a_s,a_i,a_f\"\"))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testDaemonStream['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertTrue(expressionString.contains(\"stats(collection1,\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertTrue(expressionString.contains(\"count(*)\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(expressionString.contains(\"avg(a_i)\"))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"),factory)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertTrue(expressionString.contains(\"sort=\"a_f asc, a_i asc\"\"))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(expressionString.contains(\"daemon(search(collection1,\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertTrue(expressionString.contains(\"queueSize=100\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "String expressionString@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expressionString = stream.toExpression(factory).toString()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(expressionString.contains(\"avg(a_i,false)\"))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testStatsStream['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), id=\"blah\", runInterval=\"1000\", queueSize=\"100\")\"),factory)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "StatsStream stream@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(expressionString.contains(\"q=\"*:*\"\"))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(expressionString.contains(\"max(a_i)\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testStatsStream['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "DaemonStream stream@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertTrue(expressionString.contains(\"runInterval=1000\"))@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(expressionString.contains(\"id=blah\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14->3 [style = bold, label=""];
2->19 [style = dashed, label="0"];
12->20 [style = dashed, label="0"];
12->5 [style = bold, label=""];
21->6 [style = bold, label=""];
7->16 [style = dashed, label="0"];
2->3 [style = bold, label=""];
11->6 [style = bold, label=""];
1->18 [style = bold, label=""];
16->19 [style = bold, label=""];
17->22 [style = bold, label=""];
1->13 [style = bold, label=""];
0->22 [style = dashed, label="0"];
20->5 [style = bold, label=""];
22->4 [style = bold, label=""];
7->14 [style = bold, label=""];
5->21 [style = bold, label=""];
2->14 [style = dashed, label="0"];
0->4 [style = bold, label=""];
13->7 [style = bold, label=""];
7->2 [style = bold, label=""];
3->8 [style = bold, label=""];
15->0 [style = bold, label=""];
10->0 [style = bold, label=""];
4->20 [style = bold, label=""];
4->12 [style = bold, label=""];
5->11 [style = bold, label=""];
13->18 [style = dashed, label="0"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
11->21 [style = dashed, label="0"];
18->16 [style = bold, label=""];
}
