digraph {
13 [style = filled, label = "assertThat(mappedStatement.getTimeout()).isEqualTo(10)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "shouldSuccessfullyLoadXMLMapperFile['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "String resource = \"org/apache/ibatis/builder/AuthorMapper.xml\"@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Configuration configuration = new Configuration()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "XMLMapperBuilder builder = new XMLMapperBuilder(inputStream,configuration,resource,configuration.getSqlFragments())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(mappedStatement.getStatementType()).isEqualTo(StatementType.PREPARED)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "builder.parse()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "MappedStatement mappedStatement = configuration.getMappedStatement(\"selectWithOptions\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "shouldSuccessfullyLoadXMLMapperFile['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "assertThat(mappedStatement.isFlushCacheRequired()).isFalse()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(mappedStatement.isUseCache()).isFalse()@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertThat(mappedStatement.getResultSetType()).isEqualTo(ResultSetType.SCROLL_SENSITIVE)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(mappedStatement.getFetchSize()).isEqualTo(200)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "mappedStatementWithOptions['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11->8 [style = bold, label=""];
4->3 [style = bold, label=""];
1->4 [style = bold, label=""];
5->2 [style = bold, label=""];
12->2 [style = bold, label=""];
13->6 [style = bold, label=""];
1->4 [style = solid, label="resource"];
10->13 [style = bold, label=""];
3->7 [style = bold, label=""];
7->10 [style = bold, label=""];
2->4 [style = solid, label="configuration"];
2->1 [style = bold, label=""];
6->11 [style = bold, label=""];
0->2 [style = bold, label=""];
8->9 [style = bold, label=""];
}
