digraph {
17 [style = filled, label = "Path path@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertTrue(row.isNullAt(1))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "long splitStart@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "LogicalType(( fieldTypes = new LogicalType((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c23777@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(row.isNullAt(11))@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testReadingSplit['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
60 [style = filled, label = "assertEquals(v.byteValue(),row.getByte(2))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
67 [style = filled, label = "assertTrue(row.isNullAt(5))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "InstantiationUtil.clone(format)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "readSplitAndCheck['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "Integer v = values.get(i)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(9,5,0).toBigDecimal())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertEquals(\"\" + v,row.getString(0).toString())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "ColumnarRowData row = reader.nextRecord()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "BulkFormat.Reader<RowData> reader = format.restoreReader(EMPTY_CONF,new FileSourceSplit(\"id\",path,splitStart,splitLength,new String((((,new CheckpointedPosition(CheckpointedPosition.NO_OFFSET,seekToRow)))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "long seekToRow@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "assertTrue(row.isNullAt(4))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "testReadingSplit['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(new Configuration(),RowType.of(fieldTypes,new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@1c237b4),500,false,true)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertEquals(v.intValue(),row.getInt(4))@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
66 [style = filled, label = "ParquetColumnarRowSplitReader reader = createReader(testPath,splitStart,splitLength)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "List<Integer> values@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "long splitStart@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(row.isNullAt(9))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(v.longValue(),row.getLong(5))@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertEquals(v.doubleValue(),row.getDouble(7),0)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "Path testPath@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "long splitStart@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return cnt.get()@@@63@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "long seekToRow@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
51 [style = filled, label = "assertTrue(row.isNullAt(0))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(13,15,0).toBigDecimal())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertTrue(row.isNullAt(2))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(11,20,0).toBigDecimal())@@@38@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "forEachRemaining(reader,null)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "assertTrue(row.isNullAt(10))@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertTrue(row.isNullAt(12))@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "long seekToRow@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "ClassNotFoundException e@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "long splitLength@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "!reader.reachedEnd()@@@6@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "int i = start@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(14,20,0).toBigDecimal())@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(10,15,0).toBigDecimal())@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "assertEquals(BigDecimal.valueOf(v),row.getDecimal(12,5,0).toBigDecimal())@@@39@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "long splitLength@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Path path@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "reader.close()@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "i++@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "throw new IOException(e)@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "assertTrue(row.isNullAt(6))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "assertTrue(row.isNullAt(14))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "return i - start@@@46@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(v.floatValue(),row.getFloat(6),0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "reader.seekToRow(seekToRow)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertTrue(row.isNullAt(7))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "assertEquals(v.shortValue(),row.getShort(3))@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "assertEquals(v % 2 == 0,row.getBoolean(1))@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
58 [style = filled, label = "assertEquals(toDateTime(v),row.getTimestamp(8,9).toLocalDateTime())@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "List<Integer> expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "AtomicInteger cnt = new AtomicInteger(0)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "assertTrue(row.isNullAt(3))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "int start@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
63 [style = filled, label = "assertTrue(row.isNullAt(8))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "v == null@@@9@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "long splitLength@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertTrue(row.isNullAt(13))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final AtomicReference<RowData> previousRow = new AtomicReference<>()@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA1AAABBB2BBB"];
32->54 [style = solid, label="v"];
60->64 [style = bold, label=""];
31->54 [style = bold, label=""];
47->38 [style = solid, label="start"];
53->54 [style = dotted, label="false"];
14->65 [style = dashed, label="0"];
32->53 [style = solid, label="v"];
49->60 [style = bold, label=""];
20->10 [style = bold, label=""];
43->45 [style = bold, label=""];
53->33 [style = dotted, label="true"];
67->33 [style = bold, label=""];
32->31 [style = solid, label="v"];
16->18 [style = dotted, label="true"];
56->36 [style = bold, label=""];
34->49 [style = bold, label=""];
52->66 [style = solid, label="testPath"];
44->32 [style = dotted, label="true"];
16->15 [style = dotted, label="true"];
53->39 [style = dotted, label="true"];
53->60 [style = dotted, label="false"];
7->13 [style = bold, label=""];
44->37 [style = bold, label=""];
30->59 [style = bold, label=""];
47->65 [style = solid, label="start"];
53->31 [style = dotted, label="false"];
53->34 [style = bold, label=""];
11->1 [style = dotted, label="true"];
22->40 [style = bold, label=""];
38->32 [style = solid, label="i"];
63->26 [style = bold, label=""];
19->8 [style = solid, label="seekToRow"];
16->5 [style = bold, label=""];
53->36 [style = dotted, label="false"];
21->48 [style = solid, label="seekToRow"];
3->8 [style = solid, label="splitLength"];
55->61 [style = bold, label=""];
5->7 [style = solid, label="fieldTypes"];
44->37 [style = dotted, label="true"];
41->46 [style = bold, label=""];
53->49 [style = dotted, label="false"];
62->65 [style = bold, label=""];
53->35 [style = dotted, label="true"];
7->13 [style = solid, label="format"];
50->21 [style = dotted, label="true"];
35->63 [style = bold, label=""];
26->42 [style = bold, label=""];
44->23 [style = dotted, label="true"];
1->8 [style = bold, label=""];
53->46 [style = dotted, label="true"];
32->53 [style = bold, label=""];
0->12 [style = dotted, label="true"];
50->24 [style = dotted, label="true"];
37->32 [style = bold, label=""];
9->8 [style = solid, label="seekToRow"];
32->58 [style = solid, label="v"];
6->20 [style = bold, label=""];
53->51 [style = bold, label=""];
33->35 [style = bold, label=""];
46->39 [style = bold, label=""];
0->9 [style = dotted, label="true"];
53->43 [style = dotted, label="true"];
40->58 [style = bold, label=""];
8->10 [style = solid, label="reader"];
17->8 [style = solid, label="path"];
64->56 [style = bold, label=""];
48->38 [style = bold, label=""];
50->66 [style = bold, label=""];
10->14 [style = bold, label=""];
5->7 [style = bold, label=""];
53->61 [style = dotted, label="false"];
16->19 [style = dotted, label="true"];
0->2 [style = dotted, label="true"];
32->59 [style = solid, label="v"];
50->52 [style = dotted, label="true"];
53->58 [style = dotted, label="false"];
42->27 [style = bold, label=""];
57->23 [style = bold, label=""];
44->62 [style = bold, label=""];
38->23 [style = solid, label="i"];
66->48 [style = bold, label=""];
53->51 [style = dotted, label="true"];
32->34 [style = solid, label="v"];
53->59 [style = dotted, label="false"];
44->53 [style = dotted, label="true"];
0->3 [style = dotted, label="true"];
50->28 [style = dotted, label="true"];
29->41 [style = bold, label=""];
8->6 [style = bold, label=""];
32->55 [style = solid, label="v"];
53->42 [style = dotted, label="true"];
12->8 [style = solid, label="splitStart"];
23->65 [style = solid, label="i"];
38->44 [style = bold, label=""];
53->63 [style = dotted, label="true"];
53->67 [style = dotted, label="true"];
50->25 [style = dotted, label="true"];
53->56 [style = dotted, label="false"];
50->47 [style = dotted, label="true"];
24->66 [style = solid, label="splitStart"];
13->8 [style = bold, label=""];
53->41 [style = dotted, label="true"];
53->57 [style = dotted, label="true"];
23->44 [style = bold, label=""];
16->17 [style = dotted, label="true"];
45->57 [style = bold, label=""];
4->8 [style = solid, label="path"];
53->34 [style = dotted, label="false"];
53->26 [style = dotted, label="true"];
53->64 [style = dotted, label="false"];
61->31 [style = bold, label=""];
53->29 [style = dotted, label="true"];
32->30 [style = solid, label="v"];
36->22 [style = bold, label=""];
11->1 [style = bold, label=""];
53->40 [style = dotted, label="false"];
38->65 [style = solid, label="i"];
23->32 [style = solid, label="i"];
18->8 [style = solid, label="splitLength"];
6->10 [style = bold, label=""];
2->8 [style = solid, label="splitStart"];
51->29 [style = bold, label=""];
16->12 [style = dotted, label="true"];
12->52 [style = dashed, label="0"];
59->55 [style = bold, label=""];
53->27 [style = dotted, label="true"];
54->23 [style = bold, label=""];
58->30 [style = bold, label=""];
53->45 [style = dotted, label="true"];
32->49 [style = solid, label="v"];
27->43 [style = bold, label=""];
53->30 [style = dotted, label="false"];
0->4 [style = dotted, label="true"];
53->55 [style = dotted, label="false"];
0->5 [style = bold, label=""];
32->61 [style = solid, label="v"];
25->66 [style = solid, label="splitLength"];
53->22 [style = dotted, label="false"];
39->67 [style = bold, label=""];
}
