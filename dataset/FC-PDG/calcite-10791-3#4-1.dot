digraph {
5 [style = filled, label = "SqlTester tester = tester(SqlLibrary.ORACLE)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testSinhFunc['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "tester.checkScalarApprox(\"sinh(1)\",\"DOUBLE NOT NULL\",1.1752d,0.0001d)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "tester.checkType(\"tanh(cast(1 as float))\",\"DOUBLE NOT NULL\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "testTanhFunc['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "tester.checkType(\"sinh(1)\",\"DOUBLE NOT NULL\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "tester.checkType(\"tanh(case when false then 1 else null end)\",\"DOUBLE\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "tester.checkNull(\"tanh(cast(null as double))\")@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "strictTester.checkFails(\"^sinh('abc')^\",\"No match found for function signature SINH\(<CHARACTER>\)\",false)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "tester.checkScalarApprox(\"sinh(cast(1 as decimal(1, 0)))\",\"DOUBLE NOT NULL\",1.1752d,0.0001d)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "tester.checkType(\"tanh(1)\",\"DOUBLE NOT NULL\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "strictTester.checkFails(\"^tanh('abc')^\",\"No match found for function signature TANH\(<CHARACTER>\)\",false)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "tester.checkType(\"tanh('abc')\",\"DOUBLE NOT NULL\")@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "tester.checkType(\"sinh(cast(1 as float))\",\"DOUBLE NOT NULL\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "tester.checkNull(\"tanh(cast(null as integer))\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "testSinhFunc['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "tester.checkType(\"sinh('abc')\",\"DOUBLE NOT NULL\")@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "tester.checkType(\"sinh(case when false then 1 else null end)\",\"DOUBLE\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "tester.checkNull(\"sinh(cast(null as double))\")@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "tester.checkNull(\"sinh(cast(null as integer))\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "tester.checkScalarApprox(\"tanh(cast(1 as decimal(1, 0)))\",\"DOUBLE NOT NULL\",0.7615d,0.0001d)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "tester.checkScalarApprox(\"tanh(1)\",\"DOUBLE NOT NULL\",0.7615d,0.0001d)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->20 [style = dashed, label="0"];
6->3 [style = bold, label=""];
7->14 [style = dashed, label="0"];
0->2 [style = bold, label=""];
8->21 [style = dashed, label="0"];
15->19 [style = bold, label=""];
2->10 [style = bold, label=""];
7->8 [style = bold, label=""];
5->17 [style = bold, label=""];
10->7 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->9 [style = bold, label=""];
9->6 [style = bold, label=""];
3->19 [style = dashed, label="0"];
1->13 [style = dashed, label="0"];
8->1 [style = bold, label=""];
2->12 [style = dashed, label="0"];
11->5 [style = bold, label=""];
17->12 [style = bold, label=""];
5->0 [style = bold, label=""];
6->15 [style = dashed, label="0"];
12->18 [style = bold, label=""];
16->5 [style = bold, label=""];
20->15 [style = bold, label=""];
4->5 [style = bold, label=""];
18->14 [style = bold, label=""];
14->21 [style = bold, label=""];
10->18 [style = dashed, label="0"];
21->13 [style = bold, label=""];
13->20 [style = bold, label=""];
}
