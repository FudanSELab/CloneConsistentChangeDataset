digraph {
23 [style = filled, label = "Timestamps transform = (Timestamps)spec.getFieldsBySourceId(1).get(0).transform()@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "UnboundPredicate<?> predicate = assertAndUnwrapUnbound(projection)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Assert.assertEquals(predicate.op(),expectedOp)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Expression.Operation expectedOp@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "Assert.assertEquals(expectedLiteral,actual)@@@11@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertEquals(expectedLiteral,output)@@@16@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Dates transform = (Dates)spec.getFieldsBySourceId(1).get(0).transform()@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "predicate.op() == Expression.Operation.NOT_IN@@@8@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(expectedOp,predicate.op())@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "PartitionSpec spec@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Expression.Operation expectedOp@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "PartitionSpec spec@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "PartitionSpec spec@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertProjectionInclusive['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "assertProjectionStrict['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertNotEquals(\"Strict projection never runs for IN\",Expression.Operation.IN,predicate.op())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "predicate.op() == Expression.Operation.IN@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "UnboundPredicate<?> filter@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "String expectedLiteral@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "String expectedLiteral@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "Expression projection = Projections.strict(spec).project(filter)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Expression.Operation expectedOp@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Expression projection = Projections.inclusive(spec).project(filter)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "String expectedLiteral@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertProjectionInclusive['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "Assert.assertNotEquals(\"Inclusive projection never runs for NOT_IN\",Expression.Operation.NOT_IN,predicate.op())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Iterable<?> values = Iterables.transform(predicate.literals(),null)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "Literal literal = predicate.literal()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "String actual = Lists.newArrayList(values).stream().sorted().map(null).collect(Collectors.toList()).toString()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "UnboundPredicate<?> filter@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "Assert.assertEquals(expectedOp,predicate.op())@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "String output = transform.toHumanString((int)literal.value())@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->20 [style = dotted, label="true"];
23->31 [style = bold, label=""];
20->19 [style = solid, label="expectedOp"];
0->12 [style = dotted, label="true"];
0->9 [style = bold, label=""];
31->14 [style = dotted, label="false"];
31->8 [style = dotted, label="false"];
30->1 [style = bold, label=""];
13->8 [style = dotted, label="false"];
17->18 [style = dotted, label="true"];
31->2 [style = dotted, label="false"];
26->25 [style = dotted, label="true"];
10->19 [style = dashed, label="0"];
23->4 [style = solid, label="transform"];
15->5 [style = solid, label="actual"];
7->8 [style = solid, label="expectedLiteral"];
11->6 [style = bold, label=""];
17->9 [style = bold, label=""];
4->15 [style = bold, label=""];
13->2 [style = dotted, label="false"];
24->29 [style = solid, label="expectedOp"];
13->14 [style = dotted, label="false"];
31->5 [style = dotted, label="true"];
26->27 [style = dotted, label="true"];
11->22 [style = dashed, label="0"];
31->4 [style = bold, label=""];
19->11 [style = bold, label=""];
31->2 [style = bold, label=""];
28->5 [style = solid, label="expectedLiteral"];
16->9 [style = solid, label="filter"];
13->5 [style = dotted, label="true"];
10->29 [style = dashed, label="0"];
25->30 [style = solid, label="filter"];
22->23 [style = bold, label=""];
6->4 [style = solid, label="transform"];
15->5 [style = bold, label=""];
30->1 [style = solid, label="projection"];
26->30 [style = bold, label=""];
21->9 [style = solid, label="filter"];
17->16 [style = dotted, label="true"];
9->1 [style = solid, label="projection"];
13->31 [style = dashed, label="0"];
26->28 [style = dotted, label="true"];
6->13 [style = bold, label=""];
26->24 [style = dotted, label="true"];
2->14 [style = bold, label=""];
6->23 [style = dashed, label="0"];
12->10 [style = solid, label="expectedOp"];
31->15 [style = dotted, label="true"];
16->8 [style = solid, label="expectedLiteral"];
13->15 [style = dotted, label="true"];
14->8 [style = bold, label=""];
0->3 [style = dotted, label="true"];
16->5 [style = solid, label="expectedLiteral"];
29->22 [style = bold, label=""];
0->16 [style = dotted, label="true"];
1->29 [style = bold, label=""];
9->1 [style = bold, label=""];
1->19 [style = bold, label=""];
14->8 [style = solid, label="output"];
1->10 [style = bold, label=""];
17->21 [style = dotted, label="true"];
28->8 [style = solid, label="expectedLiteral"];
31->4 [style = dotted, label="true"];
7->5 [style = solid, label="expectedLiteral"];
13->4 [style = bold, label=""];
16->28 [style = dashed, label="0"];
9->30 [style = dashed, label="0"];
13->4 [style = dotted, label="true"];
0->7 [style = dotted, label="true"];
13->2 [style = bold, label=""];
10->11 [style = bold, label=""];
}
