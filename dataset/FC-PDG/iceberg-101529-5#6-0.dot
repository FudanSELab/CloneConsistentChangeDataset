digraph {
1 [style = filled, label = "predicate.term() instanceof BoundTransform@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "return Expressions.predicate(pred.op(),name,apply(pred.literal().value()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "String name@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "return null@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "return null@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "String name@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "predicate instanceof BoundLiteralPredicate@@@9@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "BoundPredicate<T> predicate@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "BoundLiteralPredicate<T> pred = predicate.asLiteralPredicate()@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "predicate.isLiteralPredicate() && predicate.op() == Expression.Operation.EQ@@@9@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "return Expressions.predicate(pred.op(),name,apply(pred.literal().value()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "return Expressions.predicate(predicate.op(),name)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "projectStrict['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "BoundPredicate<T> predicate@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "return ProjectionUtil.transformSet(name,predicate.asSetPredicate(),this)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "project['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "predicate.isUnaryPredicate()@@@6@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "return null@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "predicate instanceof BoundUnaryPredicate@@@6@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "predicate.isSetPredicate() && predicate.op() == Expression.Operation.IN@@@12@@@['0', '1', '0']", fillcolor = red, shape = diamond image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "return Expressions.predicate(predicate.op(),name,apply(predicate.asLiteralPredicate().literal().value()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "String name@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "return ProjectionUtil.projectTransformPredicate(this,name,predicate)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "pred.op()@@@11@@@['1', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "project['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "return null@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
10->15 [style = dashed, label="0"];
16->14 [style = bold, label=""];
17->13 [style = solid, label="name"];
10->8 [style = dotted, label="true"];
8->25 [style = dotted, label="true"];
23->25 [style = bold, label=""];
15->13 [style = bold, label=""];
7->1 [style = bold, label=""];
8->23 [style = bold, label=""];
5->9 [style = bold, label=""];
3->0 [style = solid, label="name"];
0->23 [style = dashed, label="0"];
0->12 [style = bold, label=""];
19->15 [style = dotted, label="false"];
3->5 [style = solid, label="name"];
22->23 [style = solid, label="name"];
8->23 [style = dotted, label="true"];
20->14 [style = bold, label=""];
4->22 [style = dashed, label="0"];
9->10 [style = bold, label=""];
4->10 [style = solid, label="predicate"];
9->6 [style = dotted, label="true"];
19->6 [style = bold, label=""];
25->2 [style = bold, label=""];
4->6 [style = solid, label="predicate"];
1->9 [style = bold, label=""];
21->9 [style = solid, label="predicate"];
9->6 [style = bold, label=""];
15->13 [style = dotted, label="true"];
21->23 [style = solid, label="predicate"];
6->2 [style = bold, label=""];
3->6 [style = solid, label="name"];
8->0 [style = bold, label=""];
5->19 [style = bold, label=""];
6->14 [style = bold, label=""];
4->9 [style = solid, label="predicate"];
17->5 [style = solid, label="name"];
22->6 [style = solid, label="name"];
12->2 [style = bold, label=""];
9->19 [style = dashed, label="0"];
11->13 [style = dashed, label="0"];
10->11 [style = bold, label=""];
12->25 [style = dashed, label="0"];
8->12 [style = dotted, label="true"];
20->16 [style = bold, label=""];
18->1 [style = bold, label=""];
4->0 [style = solid, label="predicate"];
10->11 [style = dotted, label="true"];
7->3 [style = dotted, label="true"];
24->22 [style = dotted, label="true"];
15->20 [style = bold, label=""];
21->5 [style = solid, label="predicate"];
7->4 [style = dotted, label="true"];
8->12 [style = bold, label=""];
17->16 [style = solid, label="name"];
21->10 [style = solid, label="predicate"];
4->5 [style = solid, label="predicate"];
22->5 [style = solid, label="name"];
8->0 [style = dotted, label="true"];
19->6 [style = dotted, label="true"];
15->20 [style = dotted, label="false"];
18->17 [style = dotted, label="true"];
18->4 [style = dotted, label="true"];
10->2 [style = bold, label=""];
11->8 [style = bold, label=""];
1->19 [style = bold, label=""];
19->15 [style = bold, label=""];
24->1 [style = bold, label=""];
24->21 [style = dotted, label="true"];
17->6 [style = solid, label="name"];
1->5 [style = dotted, label="true"];
9->10 [style = dotted, label="false"];
13->14 [style = bold, label=""];
8->25 [style = bold, label=""];
21->6 [style = solid, label="predicate"];
20->16 [style = dotted, label="true"];
4->13 [style = solid, label="predicate"];
}
