digraph {
11 [style = filled, label = "assertEquals(\"hello4\",rs.getString(\"a_s\"))@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "{}@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "assertEquals(11,rs.getDouble(\"EXPR$1\"),0)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "assertEquals(18,rs.getDouble(2),0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(18,rs.getDouble(\"sum(a_f)\"),0)@@@16@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
5 [style = filled, label = "assertEquals(11,rs.getDouble(2),0)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(\"hello3\",rs.getString(1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertTrue(rs.next())@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Properties props = new Properties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertEquals(11,rs.getDouble(\"sum(a_f)\"),0)@@@21@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "testFacetAggregation['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
10 [style = filled, label = "props.put(\"aggregationMode\",\"facet\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertEquals(26,rs.getDouble(\"sum(a_f)\"),0)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "assertEquals(\"hello3\",rs.getString(\"a_s\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertFalse(rs.next())@@@23@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "testErrorPropagation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "testFacetAggregation['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(26,rs.getDouble(2),0)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(26,rs.getDouble(\"EXPR$1\"),0)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "assertEquals(\"hello0\",rs.getString(\"a_s\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertTrue(rs.next())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(\"hello0\",rs.getString(1))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(\"hello4\",rs.getString(1))@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertTrue(rs.next())@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertEquals(18,rs.getDouble(\"EXPR$1\"),0)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0->16 [style = bold, label=""];
2->19 [style = bold, label=""];
10->14 [style = bold, label=""];
8->18 [style = bold, label=""];
10->24 [style = bold, label=""];
0->19 [style = dashed, label="0"];
18->11 [style = bold, label=""];
12->15 [style = bold, label=""];
16->7 [style = bold, label=""];
21->8 [style = bold, label=""];
14->17 [style = bold, label=""];
11->12 [style = bold, label=""];
23->3 [style = bold, label=""];
20->3 [style = bold, label=""];
1->13 [style = bold, label=""];
22->5 [style = bold, label=""];
15->22 [style = dashed, label="0"];
15->5 [style = bold, label=""];
19->16 [style = bold, label=""];
3->10 [style = bold, label=""];
6->1 [style = bold, label=""];
2->0 [style = bold, label=""];
13->21 [style = dashed, label="0"];
17->2 [style = bold, label=""];
1->21 [style = bold, label=""];
5->4 [style = bold, label=""];
7->6 [style = bold, label=""];
9->3 [style = bold, label=""];
13->8 [style = bold, label=""];
12->22 [style = bold, label=""];
}
