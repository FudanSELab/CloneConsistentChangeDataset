digraph {
18 [style = filled, label = "final AtomicInteger concurrentCounter = new AtomicInteger()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "final TestASynchronousFlowable f1 = new TestASynchronousFlowable()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "error.get() != null@@@41@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "{endLatch.countDown()}@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final CountDownLatch endLatch = new CountDownLatch(1)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "o2.onNextBeingSent.await()@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "throw new RuntimeException(e)@@@54@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Flowable<String> m = Flowable.merge(Flowable.unsafeCreate(f1),Flowable.unsafeCreate(f2))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(0,concurrentCounter.get())@@@57@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "int timeout = 20@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "synchronizationOfMultipleSequences['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertEquals(1,concurrentCounter.get())@@@44@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "final TestASynchronousObservable o2 = new TestASynchronousObservable()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertEquals(2,totalCounter.get())@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "Observable<String> m = Observable.merge(Observable.unsafeCreate(o1),Observable.unsafeCreate(o2))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "assertEquals(1,concurrentCounter.get())@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "m.subscribe(new DefaultObserver<String>(){@Override public void onComplete(){}@Override public void onError(Throwable e){throw new RuntimeException(\"failed\",e)}@Override public void onNext(String v){totalCounter.incrementAndGet()concurrentCounter.incrementAndGet()try {if (Thread.currentThread().getName().equals(\"TestASynchronousObservable\")) {endLatch.await()}}catch (InterruptedException e) {concurrentCounter.decrementAndGet()}}})@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "f2.t.join()@@@51@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "{endLatch.countDown()}@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "o2.t.join()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "InterruptedException e@@@49@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "o1.t.join()@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "synchronizationOfMultipleSequences['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "f2.onNextBeingSent.await()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "o1.onNextBeingSent.await()@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "f1.onNextBeingSent.await()@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "final TestASynchronousFlowable f2 = new TestASynchronousFlowable()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final AtomicReference<Throwable> error = new AtomicReference<Throwable>()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "throw ExceptionHelper.wrapOrThrow(error.get())@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final AtomicInteger totalCounter = new AtomicInteger()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "synchronizationOfMultipleSequences['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertEquals(0,concurrentCounter.get())@@@53@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "final TestASynchronousObservable o1 = new TestASynchronousObservable()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "Thread.sleep(100)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "m.subscribe(new DefaultSubscriber<String>(){@Override public void onComplete(){}@Override public void onError(Throwable e){error.set(e)}@Override public void onNext(String v){totalCounter.incrementAndGet()concurrentCounter.incrementAndGet()try {if (Thread.currentThread().getName().equals(\"TestASynchronousFlowable\")) {endLatch.await()}}catch (InterruptedException e) {concurrentCounter.decrementAndGet()}}})@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "f1.t.join()@@@50@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "timeout-- > 0 && concurrentCounter.get() != 1@@@36@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "throw new RuntimeException(e)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Thread.sleep(100)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final AtomicReference<Throwable> error = new AtomicReference<>()@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28->29 [style = bold, label=""];
21->12 [style = dotted, label="true"];
0->9 [style = bold, label=""];
27->36 [style = bold, label=""];
30->33 [style = bold, label=""];
37->11 [style = bold, label=""];
29->30 [style = bold, label=""];
21->27 [style = bold, label=""];
14->34 [style = dashed, label="0"];
20->26 [style = bold, label=""];
24->0 [style = bold, label=""];
12->21 [style = bold, label=""];
16->6 [style = bold, label=""];
9->4 [style = bold, label=""];
14->10 [style = bold, label=""];
3->15 [style = bold, label=""];
37->26 [style = solid, label="o2"];
4->2 [style = bold, label=""];
6->19 [style = bold, label=""];
25->14 [style = bold, label=""];
3->16 [style = bold, label=""];
10->0 [style = solid, label="f2"];
8->24 [style = dashed, label="0"];
15->16 [style = bold, label=""];
5->17 [style = bold, label=""];
2->30 [style = dashed, label="0"];
21->12 [style = solid, label="timeout"];
36->39 [style = bold, label=""];
11->18 [style = bold, label=""];
33->21 [style = solid, label="timeout"];
31->34 [style = bold, label=""];
1->17 [style = bold, label=""];
34->26 [style = solid, label="o1"];
21->12 [style = bold, label=""];
7->14 [style = bold, label=""];
8->0 [style = bold, label=""];
19->5 [style = bold, label=""];
32->38 [style = bold, label=""];
5->32 [style = dashed, label="0"];
18->20 [style = bold, label=""];
35->23 [style = bold, label=""];
20->8 [style = bold, label=""];
12->22 [style = dotted, label="true"];
23->1 [style = dotted, label="true"];
34->37 [style = bold, label=""];
19->39 [style = dashed, label="0"];
14->0 [style = solid, label="f1"];
2->21 [style = bold, label=""];
22->12 [style = bold, label=""];
39->32 [style = bold, label=""];
23->38 [style = bold, label=""];
3->15 [style = dotted, label="true"];
23->1 [style = bold, label=""];
10->37 [style = dashed, label="0"];
17->13 [style = bold, label=""];
12->3 [style = bold, label=""];
26->28 [style = bold, label=""];
4->29 [style = dashed, label="0"];
33->21 [style = bold, label=""];
20->24 [style = bold, label=""];
35->23 [style = dotted, label="true"];
38->17 [style = bold, label=""];
12->22 [style = bold, label=""];
10->11 [style = bold, label=""];
}
