digraph {
3 [style = filled, label = "int size = 64000@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "Assert.assertEquals(hasher.hashUnsafeWordsBlock(mb),hasher.hashUnsafeWordsBlock(mb))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95)@@@15@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "int i = 0@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "byte(( strBytes = String.valueOf(i).getBytes(StandardCharsets.UTF_8)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "Assert.assertTrue(hashcodes.size() > size * 0.95d)@@@16@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "byte(( paddedBytes = new byte((((@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "hashcodes.add(hasher.hashUnsafeWordsBlock(mb))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "i < size@@@7@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytes(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "byte(( bytes = new byte((((@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "randomizedStressTestPaddedStrings['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "i++@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "System.arraycopy(strBytes,0,paddedBytes,0,strBytes.length)@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytesBlock(mb),HiveHasher.hashUnsafeBytesBlock(mb))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "Set<Long> hashcodes = new HashSet<>()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "rand.nextBytes(bytes)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "randomizedStressTestBytes['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "hashcodes.add(HiveHasher.hashUnsafeBytesBlock(mb))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "int byteArrSize = rand.nextInt(100) * 8@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertEquals(HiveHasher.hashUnsafeBytes(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize),HiveHasher.hashUnsafeBytes(paddedBytes,Platform.BYTE_ARRAY_OFFSET,byteArrSize))@@@12@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "randomizedStressTestPaddedStrings['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(bytes)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "MemoryBlock mb = ByteArrayMemoryBlock.fromArray(paddedBytes)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Set<Integer> hashcodes = new HashSet<>()@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "int size = 65536@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "int i = 0@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Random rand = new Random()@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13->6 [style = dotted, label="true"];
11->16 [style = bold, label=""];
14->3 [style = bold, label=""];
25->23 [style = solid, label="mb"];
13->9 [style = solid, label="i"];
13->16 [style = dotted, label="true"];
13->17 [style = dotted, label="true"];
3->26 [style = dashed, label="0"];
12->23 [style = dotted, label="true"];
26->12 [style = solid, label="size"];
22->19 [style = bold, label=""];
13->12 [style = dotted, label="true"];
9->24 [style = dashed, label="0"];
0->2 [style = solid, label="paddedBytes"];
20->26 [style = bold, label=""];
22->19 [style = solid, label="bytes"];
9->12 [style = solid, label="i"];
0->11 [style = bold, label=""];
13->5 [style = dotted, label="true"];
26->8 [style = solid, label="size"];
16->17 [style = bold, label=""];
9->10 [style = bold, label=""];
12->24 [style = bold, label=""];
0->17 [style = solid, label="paddedBytes"];
13->10 [style = dotted, label="true"];
24->22 [style = bold, label=""];
25->27 [style = solid, label="mb"];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
11->2 [style = bold, label=""];
7->3 [style = bold, label=""];
19->25 [style = bold, label=""];
13->12 [style = solid, label="i"];
13->2 [style = dotted, label="true"];
25->27 [style = bold, label=""];
12->13 [style = bold, label=""];
10->11 [style = solid, label="strBytes"];
12->27 [style = dotted, label="true"];
12->22 [style = dotted, label="true"];
17->12 [style = bold, label=""];
13->12 [style = bold, label=""];
0->16 [style = solid, label="paddedBytes"];
5->17 [style = dashed, label="0"];
5->6 [style = bold, label=""];
3->15 [style = solid, label="size"];
13->9 [style = dotted, label="true"];
21->13 [style = bold, label=""];
12->19 [style = dotted, label="true"];
13->0 [style = dotted, label="true"];
12->8 [style = bold, label=""];
2->5 [style = solid, label="mb"];
1->12 [style = solid, label="i"];
3->13 [style = solid, label="size"];
10->0 [style = bold, label=""];
12->13 [style = solid, label="i"];
12->24 [style = dotted, label="true"];
2->6 [style = solid, label="mb"];
13->11 [style = dotted, label="true"];
27->23 [style = bold, label=""];
4->1 [style = bold, label=""];
13->9 [style = bold, label=""];
13->15 [style = bold, label=""];
18->21 [style = bold, label=""];
9->12 [style = bold, label=""];
13->8 [style = bold, label=""];
9->17 [style = solid, label="byteArrSize"];
22->25 [style = solid, label="bytes"];
12->9 [style = dotted, label="true"];
23->9 [style = bold, label=""];
12->25 [style = dotted, label="true"];
1->13 [style = solid, label="i"];
0->11 [style = solid, label="paddedBytes"];
9->16 [style = solid, label="byteArrSize"];
3->8 [style = solid, label="size"];
2->5 [style = bold, label=""];
26->18 [style = bold, label=""];
6->12 [style = bold, label=""];
}
