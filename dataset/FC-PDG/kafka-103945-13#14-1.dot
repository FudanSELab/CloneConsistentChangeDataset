digraph {
10 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "KafkaMetric recordsCountAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testFetchResponseMetricsPartialResponse['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertEquals(expectedBytes,fetchSizeAverage.value(),EPSILON)@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(3,recordsCountAverage.value(),EPSILON)@@@24@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "client.prepareResponse(new FetchResponse<>(Errors.NONE,new LinkedHashMap<>(partitions),0,INVALID_SESSION_ID))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,\"key\".getBytes(),(\"value-\" + v).getBytes())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "record.offset() >= 1@@@15@@@['1', '0', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "testFetchResponseMetricsWithOnePartitionError['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "v++@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "v++@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "consumerClient.poll(time.timer(0))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "assertEquals(expectedBytes,(Double)fetchSizeAverage.metricValue(),EPSILON)@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "KafkaMetric fetchSizeAverage = allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "int expectedBytes = 0@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "MemoryRecords records = builder.build()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertEquals(1,fetcher.sendFetches())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "fetchRecords(tp0,records,Errors.NONE,100L,0)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "subscriptions.assignFromUser(singleton(tp0))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "subscriptions.seek(tp0,0)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "partitions.put(tp1,new FetchResponse.PartitionData<>(Errors.OFFSET_OUT_OF_RANGE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,MemoryRecords.EMPTY))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "fetcher.fetchedRecords()@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "testFetchResponseMetricsPartialResponse['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
22 [style = filled, label = "assertEquals(2,(Double)recordsCountAverage.metricValue(),EPSILON)@@@19@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "subscriptions.assignFromUser(Utils.mkSet(tp0,tp1))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "subscriptions.seek(tp0,1)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "v++@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "partitions.put(tp0,new FetchResponse.PartitionData<>(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,records))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "v < 3@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "MemoryRecordsBuilder builder = MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "subscriptions.seek(tp1,0)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Map<MetricName,KafkaMetric> allMetrics = metrics.metrics()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "expectedBytes += record.sizeInBytes()@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
27 [style = filled, label = "Map<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> partitions = new HashMap<>()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "record.offset() >= 1@@@15@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(2,recordsCountAverage.value(),EPSILON)@@@19@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "int v = 0@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11->16 [style = bold, label=""];
16->19 [style = dotted, label="true"];
29->15 [style = bold, label=""];
8->18 [style = solid, label="v"];
9->29 [style = dotted, label="true"];
31->23 [style = bold, label=""];
1->8 [style = bold, label=""];
16->11 [style = bold, label=""];
37->24 [style = bold, label=""];
0->13 [style = bold, label=""];
8->5 [style = solid, label="v"];
5->17 [style = solid, label="v"];
17->18 [style = dotted, label="true"];
11->14 [style = bold, label=""];
10->21 [style = dashed, label="0"];
17->15 [style = solid, label="v"];
17->9 [style = bold, label=""];
27->28 [style = bold, label=""];
20->0 [style = bold, label=""];
3->11 [style = bold, label=""];
18->17 [style = bold, label=""];
14->10 [style = bold, label=""];
7->0 [style = bold, label=""];
38->31 [style = bold, label=""];
17->9 [style = solid, label="v"];
3->16 [style = bold, label=""];
3->28 [style = solid, label="records"];
16->19 [style = bold, label=""];
15->3 [style = bold, label=""];
12->6 [style = bold, label=""];
5->17 [style = bold, label=""];
18->17 [style = solid, label="v"];
13->26 [style = dashed, label="0"];
19->16 [style = bold, label=""];
26->30 [style = bold, label=""];
3->27 [style = bold, label=""];
28->32 [style = bold, label=""];
15->29 [style = solid, label="v"];
8->17 [style = bold, label=""];
32->38 [style = bold, label=""];
6->1 [style = bold, label=""];
30->12 [style = bold, label=""];
3->21 [style = solid, label="expectedBytes"];
9->18 [style = bold, label=""];
19->14 [style = bold, label=""];
0->25 [style = dashed, label="0"];
17->29 [style = solid, label="v"];
33->25 [style = bold, label=""];
21->22 [style = bold, label=""];
15->9 [style = bold, label=""];
8->9 [style = solid, label="v"];
8->17 [style = solid, label="v"];
17->9 [style = dotted, label="true"];
25->26 [style = bold, label=""];
17->15 [style = bold, label=""];
27->31 [style = solid, label="partitions"];
9->5 [style = bold, label=""];
4->12 [style = bold, label=""];
9->3 [style = bold, label=""];
16->14 [style = bold, label=""];
23->34 [style = bold, label=""];
11->16 [style = dotted, label="true"];
10->2 [style = bold, label=""];
5->9 [style = solid, label="v"];
16->10 [style = solid, label="expectedBytes"];
36->37 [style = bold, label=""];
34->35 [style = bold, label=""];
3->10 [style = solid, label="expectedBytes"];
35->36 [style = bold, label=""];
17->5 [style = dotted, label="true"];
9->15 [style = dotted, label="true"];
2->24 [style = dashed, label="0"];
15->14 [style = solid, label="records"];
9->29 [style = bold, label=""];
2->22 [style = dashed, label="0"];
19->21 [style = solid, label="expectedBytes"];
14->21 [style = bold, label=""];
15->9 [style = solid, label="v"];
36->37 [style = solid, label="expectedBytes"];
18->9 [style = solid, label="v"];
13->4 [style = bold, label=""];
}
