digraph {
21 [style = filled, label = "cos.flush()@@@18@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
43 [style = filled, label = "cos.flush()@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(1)@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "assertEquals(2,cos.size())@@@45@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testRemoveOutputStreamWithTwoStreams['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
26 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@155e2a,2,3)@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "cos.write(9)@@@55@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "final OutputStream streamOne = mock(,\"streamOne\")@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "cos.close()@@@57@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@46@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "cos.flush()@@@56@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(0)@@@25@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "final OutputStream streamTwo = mockContext.mock(,\"streamTwo\")@@@28@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
40 [style = filled, label = "assertThat(cos.size()).isEqualTo(2)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "assertFalse(cos.isEmpty())@@@44@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
47 [style = filled, label = "assertFalse(cos.isEmpty())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertTrue(cos.isEmpty())@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "cos.close()@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
39 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@155e3d)@@@14@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "assertThat(cos.size()).isEqualTo(1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
52 [style = filled, label = "cos.write(9)@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(4)@@@24@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertFalse(cos.isEmpty())@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
48 [style = filled, label = "assertEquals(1,cos.size())@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "final OutputStream streamTwo = mock(,\"streamTwo\")@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "mockContext.checking(new Expectations(){})@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final Sequence seqStreamOne = mockContext.sequence(\"seqStreamOne\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final OutputStream streamOne = mockContext.mock(,\"streamOne\")@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "verifyZeroInteractions(streamTwo)@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
45 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@155ef5,2,3)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "cos.write(9)@@@17@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
30 [style = filled, label = "cos.removeOutputStream(streamTwo)@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "mockContext.checking(new Expectations(){})@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "assertEquals(1,cos.size())@@@48@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
6 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@155dbe,2,3)@@@49@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@155f08)@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
50 [style = filled, label = "testAddOneOutputStreamWhenEmpty['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "cos.addOutputStream(streamOne)@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(3)@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(2)@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
36 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
42 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream()@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "inOrderStreams.verify(streamOne,times(2)).flush()@@@28@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).write(9)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final CompositeOutputStream cos = new CompositeOutputStream(streamOne,streamTwo)@@@43@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "cos.write(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@155dd1)@@@52@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "InOrder inOrderStreams = inOrder(streamOne)@@@21@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
49 [style = filled, label = "assertEquals(0,cos.size())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(cos.isEmpty()).isFalse()@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
33 [style = filled, label = "inOrderStreams.verify(streamOne,times(1)).close()@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "cos.close()@@@42@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7->13 [style = bold, label=""];
4->10 [style = bold, label=""];
24->30 [style = solid, label="streamTwo"];
3->17 [style = dashed, label="0"];
16->11 [style = bold, label=""];
32->23 [style = bold, label=""];
24->36 [style = solid, label="streamTwo"];
25->34 [style = bold, label=""];
47->48 [style = bold, label=""];
24->38 [style = solid, label="streamTwo"];
17->40 [style = bold, label=""];
30->25 [style = bold, label=""];
8->12 [style = solid, label="streamOne"];
11->12 [style = bold, label=""];
15->29 [style = dashed, label="0"];
51->49 [style = bold, label=""];
8->24 [style = dashed, label="0"];
46->52 [style = bold, label=""];
1->7 [style = bold, label=""];
16->4 [style = solid, label="streamTwo"];
26->39 [style = bold, label=""];
42->51 [style = bold, label=""];
3->0 [style = bold, label=""];
9->34 [style = dashed, label="0"];
9->6 [style = bold, label=""];
39->18 [style = bold, label=""];
5->16 [style = bold, label=""];
35->28 [style = bold, label=""];
29->36 [style = solid, label="streamOne"];
6->1 [style = bold, label=""];
24->36 [style = bold, label=""];
22->38 [style = bold, label=""];
52->43 [style = bold, label=""];
48->45 [style = bold, label=""];
50->15 [style = bold, label=""];
23->33 [style = bold, label=""];
19->32 [style = bold, label=""];
8->5 [style = bold, label=""];
16->12 [style = solid, label="streamTwo"];
34->26 [style = bold, label=""];
38->37 [style = bold, label=""];
0->4 [style = bold, label=""];
21->22 [style = bold, label=""];
37->31 [style = bold, label=""];
29->37 [style = solid, label="streamOne"];
28->19 [style = bold, label=""];
8->41 [style = solid, label="streamOne"];
49->41 [style = bold, label=""];
40->30 [style = bold, label=""];
14->15 [style = bold, label=""];
10->9 [style = bold, label=""];
12->3 [style = bold, label=""];
41->47 [style = bold, label=""];
36->17 [style = bold, label=""];
18->21 [style = bold, label=""];
20->35 [style = bold, label=""];
31->20 [style = bold, label=""];
27->29 [style = bold, label=""];
5->42 [style = bold, label=""];
29->24 [style = bold, label=""];
45->46 [style = bold, label=""];
43->44 [style = bold, label=""];
0->40 [style = dashed, label="0"];
15->8 [style = bold, label=""];
10->25 [style = dashed, label="0"];
13->2 [style = bold, label=""];
}
