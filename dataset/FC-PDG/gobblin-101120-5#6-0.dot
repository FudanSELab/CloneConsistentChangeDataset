digraph {
10 [style = filled, label = "testCompilerWithoutTemplateCatalog['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Map<Spec,SpecExecutor> specExecutorMapping = this.compilerWithoutTemplateCalague.compileFlow(flowSpec)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_NAME_KEY),TEST_FLOW_NAME)@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "testNoJobSpecCompilation['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY),TEST_SOURCE_NAME)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Spec spec = dagNode.getValue().getJobSpec()@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty1\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testCompilerWithoutTemplateCatalog['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "FlowSpec flowSpec = initFlowSpec(TEST_FLOW_GROUP,TEST_FLOW_NAME,\"unsupportedSource\",\"unsupportedSink\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Assert.assertTrue(spec instanceof JobSpec,\"Expected JobSpec compiled from FlowSpec.\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Spec spec = specExecutorMapping.keySet().iterator().next()@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "JobSpec jobSpec = (JobSpec)spec@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty3\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "Assert.assertTrue(jobSpec.getConfig().hasPath(ConfigurationKeys.FLOW_EXECUTION_ID_KEY))@@@21@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "Assert.assertNotNull(specExecutorMapping,\"Expected non null mapping.\")@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "JobSpec jobSpec = (JobSpec)spec@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "FlowSpec flowSpec = initFlowSpec()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Assert.assertNotNull(jobExecutionPlanDag,\"Expected non null dag.\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "Assert.assertEquals(jobExecutionPlanDag.getStartNodes().size(),1)@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_NAME_KEY),TEST_FLOW_NAME)@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Assert.assertFalse(jobSpec.getConfig().hasPath(ConfigurationKeys.JOB_SCHEDULE_KEY))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assert.assertTrue(spec instanceof JobSpec,\"Expected JobSpec compiled from FlowSpec.\")@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assert.assertTrue(jobExecutionPlanDag.getNodes().size() == 1,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.JOB_GROUP_KEY),TEST_FLOW_GROUP)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "Map<Spec,SpecExecutor> specExecutorMapping = this.compilerWithTemplateCalague.compileFlow(flowSpec)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "Assert.assertNull(jobExecutionPlanDag.getChildren(dagNode))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
28 [style = filled, label = "Assert.assertTrue(specExecutorMapping.size() == 0,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(jobSpec.getConfig().getString(ConfigurationKeys.FLOW_GROUP_KEY),TEST_FLOW_GROUP)@@@20@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
23 [style = filled, label = "Dag<JobExecutionPlan> jobExecutionPlanDag = this.compilerWithoutTemplateCalague.compileFlow(flowSpec)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "Assert.assertTrue(!jobSpec.getConfig().hasPath(\"testProperty2\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertTrue(specExecutorMapping.size() == 1,\"Exepected 1 executor for FlowSpec.\")@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Dag.DagNode<JobExecutionPlan> dagNode = jobExecutionPlanDag.getStartNodes().get(0)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27->13 [style = bold, label=""];
15->2 [style = bold, label=""];
0->9 [style = bold, label=""];
20->17 [style = solid, label="spec"];
9->11 [style = bold, label=""];
12->28 [style = bold, label=""];
4->2 [style = solid, label="spec"];
17->6 [style = bold, label=""];
16->19 [style = dashed, label="0"];
20->3 [style = solid, label="spec"];
2->3 [style = bold, label=""];
4->15 [style = bold, label=""];
24->22 [style = solid, label="dagNode"];
18->19 [style = bold, label=""];
31->29 [style = bold, label=""];
12->16 [style = bold, label=""];
20->3 [style = bold, label=""];
4->15 [style = solid, label="spec"];
14->12 [style = solid, label="specExecutorMapping"];
26->24 [style = bold, label=""];
1->7 [style = bold, label=""];
24->20 [style = bold, label=""];
8->1 [style = bold, label=""];
29->12 [style = solid, label="specExecutorMapping"];
7->5 [style = bold, label=""];
29->12 [style = bold, label=""];
14->23 [style = dashed, label="0"];
13->31 [style = dashed, label="0"];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
23->18 [style = solid, label="jobExecutionPlanDag"];
21->22 [style = bold, label=""];
30->31 [style = bold, label=""];
19->26 [style = bold, label=""];
14->12 [style = bold, label=""];
6->8 [style = bold, label=""];
13->23 [style = bold, label=""];
3->17 [style = bold, label=""];
12->18 [style = dashed, label="0"];
13->23 [style = solid, label="flowSpec"];
16->4 [style = bold, label=""];
16->28 [style = dashed, label="0"];
13->14 [style = solid, label="flowSpec"];
14->29 [style = dashed, label="0"];
13->14 [style = bold, label=""];
23->18 [style = bold, label=""];
25->21 [style = bold, label=""];
31->29 [style = solid, label="flowSpec"];
11->25 [style = bold, label=""];
}
