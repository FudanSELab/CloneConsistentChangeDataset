digraph {
13 [style = filled, label = "when(restTemplate.exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(socketTimeoutException)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testOneServerDown['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "verify(restTemplate).getForObject(serviceOne + \"/\" + path,)@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
15 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceThree + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "verify(restTemplate,times(0)).getForObject(serviceThree + \"/\" + path,)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "when(restTemplate.getForObject(serviceThree + \"/\" + path,)).thenThrow(connectTimeoutException)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceOne + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "when(restTemplate.exchange(eq(serviceThree + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(connectTimeoutException)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "when(restTemplate.exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.GET),any(),eq())).thenThrow(httpHostConnectException)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "Object o = retryableRestTemplate.get(Env.DEV,path,)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "when(restTemplate.getForObject(serviceThree + \"/\" + path,)).thenThrow(connectTimeoutException)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(result,o)@@@12@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "when(restTemplate.getForObject(serviceOne + \"/\" + path,)).thenThrow(socketTimeoutException)@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "verify(restTemplate).getForObject(serviceTwo + \"/\" + path,)@@@10@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "testAllServerDown['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "verify(restTemplate,times(1)).exchange(eq(serviceTwo + \"/\" + path),eq(HttpMethod.GET),any(),eq())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "when(restTemplate.getForObject(serviceTwo + \"/\" + path,)).thenReturn(result)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "verify(restTemplate).getForObject(serviceOne + \"/\" + path,)@@@9@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Object result = new Object()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(serviceAddressLocator.getServiceList(any())).thenReturn(Arrays.asList(mockService(serviceOne),mockService(serviceTwo),mockService(serviceThree)))@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "testAllServerDown['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
16->15 [style = bold, label=""];
8->19 [style = dashed, label="0"];
18->3 [style = bold, label=""];
7->21 [style = dashed, label="0"];
4->6 [style = bold, label=""];
8->19 [style = bold, label=""];
12->16 [style = bold, label=""];
1->0 [style = bold, label=""];
19->2 [style = bold, label=""];
9->10 [style = bold, label=""];
8->14 [style = dashed, label="0"];
22->20 [style = solid, label="o"];
3->13 [style = dashed, label="0"];
2->4 [style = bold, label=""];
18->20 [style = solid, label="result"];
11->2 [style = bold, label=""];
0->10 [style = dashed, label="0"];
2->12 [style = bold, label=""];
4->12 [style = dashed, label="0"];
5->2 [style = bold, label=""];
6->16 [style = dashed, label="0"];
21->20 [style = bold, label=""];
8->5 [style = bold, label=""];
10->13 [style = bold, label=""];
5->11 [style = dashed, label="0"];
3->8 [style = bold, label=""];
7->15 [style = dashed, label="0"];
7->21 [style = bold, label=""];
18->19 [style = solid, label="result"];
6->7 [style = bold, label=""];
2->22 [style = bold, label=""];
2->22 [style = dashed, label="0"];
14->11 [style = bold, label=""];
13->14 [style = bold, label=""];
17->18 [style = bold, label=""];
22->6 [style = bold, label=""];
}
