digraph {
10 [style = filled, label = "buildTree['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "treeFile.deleteOnExit()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Iterator<Map.Entry<Long,KeyOffsets>> listIterator = tokenMap.entrySet().iterator()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "SortedMap<Long,KeyOffsets> tokenMap@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "Map.Entry<Long,KeyOffsets> listNext = listIterator.next()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final Iterator<Token> tokenIterator = tokenTree.iterator(KeyConverter.instance)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertFalse(\"list iterator not finished\",listIterator.hasNext())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "Assert.assertEquals(convert(listNext.getValue()),convert(treeNext))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-iterate-test1\",\"tt\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "buildSerializeAndIterate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "buildTree['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "Assert.assertEquals(listNext.getKey(),treeNext.get())@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "tokenIterator.hasNext() && listIterator.hasNext()@@@14@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "writer.sync()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "reader.close()@@@22@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "return new TokenTree(new MappedBuffer(reader))@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "builder.finish()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "final TokenTree tokenTree = new TokenTree(new MappedBuffer(reader))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "builder.write(writer)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Token treeNext = tokenIterator.next()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final RandomAccessReader reader = RandomAccessReader.open(treeFile)@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Assert.assertFalse(\"token iterator not finished\",tokenIterator.hasNext())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final File treeFile = File.createTempFile(\"token-tree-\",\"db\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TokenTreeBuilder builder@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB1BBB"];
5->3 [style = bold, label=""];
13->25 [style = bold, label=""];
8->16 [style = dashed, label="0"];
7->18 [style = dashed, label="0"];
25->23 [style = bold, label=""];
0->12 [style = bold, label=""];
14->22 [style = bold, label=""];
4->8 [style = dotted, label="true"];
23->19 [style = dotted, label="true"];
15->16 [style = dotted, label="true"];
10->9 [style = dotted, label="true"];
12->6 [style = bold, label=""];
3->18 [style = solid, label="reader"];
4->0 [style = bold, label=""];
19->24 [style = bold, label=""];
3->18 [style = bold, label=""];
6->2 [style = bold, label=""];
20->21 [style = bold, label=""];
3->7 [style = solid, label="reader"];
8->9 [style = dashed, label="0"];
1->12 [style = dashed, label="0"];
18->20 [style = bold, label=""];
12->3 [style = solid, label="treeFile"];
1->6 [style = bold, label=""];
3->7 [style = bold, label=""];
17->14 [style = bold, label=""];
0->1 [style = bold, label=""];
23->19 [style = bold, label=""];
15->0 [style = bold, label=""];
10->0 [style = bold, label=""];
19->25 [style = solid, label="treeNext"];
23->13 [style = dotted, label="true"];
15->11 [style = dotted, label="true"];
23->17 [style = bold, label=""];
1->3 [style = solid, label="treeFile"];
23->24 [style = dotted, label="true"];
23->25 [style = dotted, label="true"];
2->5 [style = bold, label=""];
24->13 [style = bold, label=""];
21->23 [style = bold, label=""];
}
