digraph {
3 [style = filled, label = "final Set<RexNode> r1 = mq.getExpressionLineage(rel,ref1)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "final RelNode rel = convertSql(\"select deptno, mgr from emp\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final RelMetadataQuery mq = rel.getCluster().getMetadataQuery()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(r2.size(),is(1))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final RexTableInputRef result1 = (RexTableInputRef)r1.iterator().next()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "testExpressionLineageTwoColumns['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "final RexNode ref1 = RexInputRef.of(0,rel.getRowType().getFieldList())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(result2.getQualifiedName(),is(EMP_QNAME))@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testExpressionLineageTwoColumns['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Set<RexNode> r2 = mq.getExpressionLineage(rel,ref2)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "testExpressionLineageTwoColumnsSwapped['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertThat(result2.getIndex(),is(3))@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "final RexNode ref2 = RexInputRef.of(1,rel.getRowType().getFieldList())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final RelNode rel = convertSql(\"select mgr, deptno from emp\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(r1.size(),is(1))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(result1.getIndex(),is(3))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(result1.getIndex(),is(7))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(result1.getQualifiedName(),is(EMP_QNAME))@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result1.getIdentifier(),is(result2.getIdentifier()))@@@17@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "final RexTableInputRef result2 = (RexTableInputRef)r2.iterator().next()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(result2.getIndex(),is(7))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4->14 [style = bold, label=""];
7->9 [style = solid, label="rel"];
7->1 [style = bold, label=""];
12->5 [style = bold, label=""];
15->7 [style = bold, label=""];
20->3 [style = solid, label="rel"];
4->17 [style = dashed, label="0"];
0->6 [style = bold, label=""];
13->3 [style = solid, label="ref1"];
19->20 [style = bold, label=""];
14->9 [style = solid, label="ref2"];
16->7 [style = bold, label=""];
7->20 [style = dashed, label="0"];
20->1 [style = bold, label=""];
1->13 [style = bold, label=""];
11->18 [style = bold, label=""];
8->17 [style = bold, label=""];
3->10 [style = bold, label=""];
11->0 [style = bold, label=""];
13->3 [style = bold, label=""];
18->6 [style = bold, label=""];
17->14 [style = bold, label=""];
0->18 [style = dashed, label="0"];
14->9 [style = bold, label=""];
10->2 [style = bold, label=""];
5->11 [style = bold, label=""];
9->12 [style = bold, label=""];
20->9 [style = solid, label="rel"];
8->4 [style = bold, label=""];
7->3 [style = solid, label="rel"];
2->8 [style = bold, label=""];
}
