digraph {
16 [style = filled, label = "inOrder.verifyNoMoreInteractions()@@@33@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "issue1900SourceNotSupportingBackpressure['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "Flowable<String> origin = Flowable.range(0,NUM_MSG).map(new Function<Integer,String>(){@Override public String apply(Integer t1){return \"msg: \" + count.incrementAndGet()}})@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final AtomicInteger count = new AtomicInteger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "InOrder inOrder = inOrder(subscriber)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "issue1900['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "inOrder.verify(subscriber,times(1)).onComplete()@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "origin.retry().groupBy(new Function<String,String>(){@Override public String apply(String t1){return t1}}).flatMap(new Function<GroupedFlowable<String,String>,Flowable<String>>(){@Override public Flowable<String> apply(GroupedFlowable<String,String> t1){return t1.take(1)}},NUM_MSG).subscribe(new TestSubscriber<String>(subscriber))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final int NUM_MSG = 1034@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "inOrder.verify(observer,never()).onError(any())@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "inOrder.verify(observer,times(NUM_MSG)).onNext(any())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "InOrder inOrder = inOrder(observer)@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Subscriber<String> subscriber = TestHelper.mockSubscriber()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "inOrder.verify(subscriber,never()).onError(any())@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "origin.retry().groupBy(new Function<String,String>(){@Override public String apply(String t1){return t1}}).flatMap(new Function<GroupedObservable<String,String>,Observable<String>>(){@Override public Observable<String> apply(GroupedObservable<String,String> t1){return t1.take(1)}}).subscribe(new TestObserver<String>(observer))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "inOrder.verifyNoMoreInteractions()@@@27@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "issue1900['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "inOrder.verify(subscriber,times(NUM_MSG)).onNext(any())@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Observer<String> observer = TestHelper.mockObserver()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "Observable<String> origin = Observable.unsafeCreate(new ObservableSource<String>(){@Override public void subscribe(Observer<? super String> o){o.onSubscribe(Disposables.empty())for (int i = 0 i < NUM_MSG i++){o.onNext(\"msg:\" + count.incrementAndGet())}o.onComplete()}})@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "inOrder.verify(observer,times(1)).onComplete()@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3->20 [style = dashed, label="0"];
11->4 [style = bold, label=""];
8->9 [style = bold, label=""];
0->4 [style = bold, label=""];
4->12 [style = dashed, label="0"];
3->2 [style = bold, label=""];
4->1 [style = solid, label="subscriber"];
17->19 [style = bold, label=""];
9->20 [style = bold, label=""];
9->3 [style = bold, label=""];
6->13 [style = dashed, label="0"];
4->8 [style = bold, label=""];
6->10 [style = bold, label=""];
1->19 [style = dashed, label="0"];
13->16 [style = bold, label=""];
2->1 [style = bold, label=""];
12->17 [style = solid, label="observer"];
15->13 [style = bold, label=""];
8->20 [style = solid, label="NUM_MSG"];
7->5 [style = bold, label=""];
20->17 [style = bold, label=""];
19->14 [style = bold, label=""];
7->14 [style = dashed, label="0"];
18->12 [style = bold, label=""];
1->7 [style = bold, label=""];
12->19 [style = solid, label="observer"];
14->15 [style = bold, label=""];
12->8 [style = bold, label=""];
5->15 [style = dashed, label="0"];
5->6 [style = bold, label=""];
4->2 [style = solid, label="subscriber"];
}
