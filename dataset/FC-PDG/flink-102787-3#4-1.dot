digraph {
24 [style = filled, label = "testOnTimeFireAndPurge['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "timeAdaptor.advanceTime(testHarness,1L)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Trigger<Integer,TimeWindow> mockTrigger = mockTrigger()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(4,timeAdaptor.numTimers(testHarness))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "WindowAssigner<Integer,TimeWindow> mockAssigner = mockTimeWindowAssigner()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "testOnTimePurge['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "timeAdaptor.advanceTime(testHarness,0L)@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "doAnswer(new Answer<TriggerResult>(){@Override public TriggerResult answer(InvocationOnMock invocation){Trigger.TriggerContext context = (Trigger.TriggerContext)invocation.getArguments()(3(timeAdaptor.registerTimer(context,1L)context.getPartitionedState(valueStateDescriptor).update(\"hello\")return TriggerResult.CONTINUE}}).when(mockTrigger).onElement(Matchers.anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(2,4)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(2,testHarness.numKeyedStateEntries())@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness = createWindowOperator(mockAssigner,mockTrigger,0L,intListDescriptor,mockWindowFunction)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "timeAdaptor.shouldFireAndPurgeOnTime(mockTrigger)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertEquals(4,testHarness.numKeyedStateEntries())@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(0,testHarness.extractOutputStreamRecords().size())@@@30@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4),new TimeWindow(0,2)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "testOnTimeFireAndPurge['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction = mockWindowFunction()@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "final TimeDomainAdaptor timeAdaptor@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4),new TimeWindow(4,6)))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(0,testHarness.numKeyedStateEntries())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "verify(mockWindowFunction,times(2)).apply(eq(0),anyTimeWindow(),anyIntIterable(),WindowOperatorContractTest.anyCollector())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "timeAdaptor.shouldPurgeOnTime(mockTrigger)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "testHarness.open()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verify(mockWindowFunction,times(1)).apply(eq(0),eq(new TimeWindow(0,2)),intIterable(0),WindowOperatorContractTest.anyCollector())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testHarness.processElement(new StreamRecord<>(0,0L))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "timeAdaptor.setIsEventTime(mockAssigner)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext())@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "timeAdaptor.advanceTime(testHarness,Long.MIN_VALUE)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(2,timeAdaptor.numTimers(testHarness))@@@32@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
23->31 [style = bold, label=""];
10->18 [style = bold, label=""];
19->25 [style = solid, label="mockWindowFunction"];
19->3 [style = solid, label="mockWindowFunction"];
16->13 [style = bold, label=""];
25->22 [style = bold, label=""];
25->1 [style = solid, label="testHarness"];
11->14 [style = bold, label=""];
7->10 [style = bold, label=""];
3->20 [style = solid, label="testHarness"];
8->19 [style = bold, label=""];
27->30 [style = bold, label=""];
28->11 [style = bold, label=""];
0->32 [style = dashed, label="0"];
1->29 [style = dashed, label="0"];
4->21 [style = bold, label=""];
3->29 [style = solid, label="testHarness"];
8->25 [style = solid, label="mockTrigger"];
8->3 [style = solid, label="mockTrigger"];
5->0 [style = dotted, label="true"];
26->6 [style = bold, label=""];
17->31 [style = dashed, label="0"];
3->22 [style = bold, label=""];
2->4 [style = bold, label=""];
33->13 [style = bold, label=""];
31->7 [style = bold, label=""];
6->15 [style = bold, label=""];
25->12 [style = solid, label="testHarness"];
19->25 [style = bold, label=""];
20->33 [style = bold, label=""];
6->25 [style = solid, label="mockAssigner"];
17->7 [style = bold, label=""];
9->23 [style = bold, label=""];
29->27 [style = bold, label=""];
18->29 [style = bold, label=""];
30->28 [style = bold, label=""];
8->17 [style = solid, label="mockTrigger"];
20->16 [style = bold, label=""];
5->6 [style = bold, label=""];
22->20 [style = bold, label=""];
18->1 [style = bold, label=""];
21->11 [style = bold, label=""];
26->32 [style = dotted, label="true"];
25->20 [style = solid, label="testHarness"];
14->12 [style = bold, label=""];
24->0 [style = dotted, label="true"];
3->12 [style = solid, label="testHarness"];
23->17 [style = bold, label=""];
1->2 [style = bold, label=""];
6->15 [style = solid, label="mockAssigner"];
13->9 [style = bold, label=""];
3->18 [style = solid, label="testHarness"];
16->33 [style = dashed, label="0"];
24->6 [style = bold, label=""];
3->28 [style = solid, label="testHarness"];
25->18 [style = solid, label="testHarness"];
19->3 [style = bold, label=""];
8->31 [style = solid, label="mockTrigger"];
15->8 [style = bold, label=""];
3->1 [style = solid, label="testHarness"];
6->3 [style = solid, label="mockAssigner"];
3->25 [style = dashed, label="0"];
}
