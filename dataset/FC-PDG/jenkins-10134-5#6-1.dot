digraph {
7 [style = filled, label = "getNodeShouldFailIfNodeDoesNotExist['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs(\"MySlave\")@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(result.stderr(),containsString(\"No such node 'MySlave'\"))@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "updateNodeShouldFailIfNodeDoesNotExist['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(\"No output expected\",result.stdout(),isEmptyString())@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "getNodeShouldFailIfNodeDoesNotExist['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(\"Command is expected to fail\",result.returnCode(),equalTo(-1))@@@6@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertThat(result,hasNoStandardOutput())@@@6@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "final CLICommandInvoker.Result result = command.authorizedTo(Computer.CONFIGURE,Jenkins.READ).withStdin(.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"MySlave\")@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(result,failedWith(-1))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
1->3 [style = bold, label=""];
1->5 [style = bold, label=""];
8->1 [style = bold, label=""];
0->8 [style = dashed, label="0"];
2->0 [style = bold, label=""];
7->0 [style = bold, label=""];
0->6 [style = solid, label="result"];
5->6 [style = bold, label=""];
9->8 [style = bold, label=""];
3->4 [style = bold, label=""];
0->1 [style = bold, label=""];
0->5 [style = solid, label="result"];
}
