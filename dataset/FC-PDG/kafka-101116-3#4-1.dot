digraph {
5 [style = filled, label = "testUpperBoundWithLargeTimestamps['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
8 [style = filled, label = "Bytes lower = windowKeySchema.lowerRange(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5ba20),Long.MAX_VALUE - 1)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertThat(\"shorter key with max timestamp should be in range\",upper.compareTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5b9cb),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE)))) >= 0)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testLowerBoundMatchesTrailingZeros['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(\"appending zeros to key should still be in range\",lower.compareTo(WindowStoreUtils.toBinaryKey(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5ba37,Long.MAX_VALUE - 1,0)) < 0)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(upper,equalTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5ba06),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE)))))@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertThat(lower,equalTo(WindowStoreUtils.toBinaryKey(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5ba5f,0,0)))@@@9@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5b9b2),Long.MAX_VALUE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertThat(\"shorter key with max timestamp should be in range\",upper.compareTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@b5b9e9),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE)))) >= 0)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "testUpperBoundWithLargeTimestamps['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
8->6 [style = bold, label=""];
4->3 [style = solid, label="upper"];
6->7 [style = bold, label=""];
9->8 [style = bold, label=""];
0->4 [style = bold, label=""];
5->4 [style = bold, label=""];
2->3 [style = bold, label=""];
4->8 [style = dashed, label="0"];
8->7 [style = solid, label="lower"];
}
