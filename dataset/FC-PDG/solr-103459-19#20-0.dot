digraph {
88 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@84@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "queryResult = idResult.get(\"query\")@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
91 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"Dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1a40,null,false))@@@121@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
124 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"the\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1a6a,null,false))@@@127@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "assertEquals(\"Expecting 4 tokens after stop word removal\",4,tokenList.size())@@@147@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
81 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1b74,null,false))@@@163@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
127 [style = filled, label = "assertTrue(\"Only the default analyzer should be applied\",name.matches(\"org.apache.solr.schema.FieldType\$DefaultAnalyzer.*\"))@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
71 [style = filled, label = "NamedList<Object> indexResult@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@12@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1909,null,false))@@@79@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
140 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@145@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "assertEquals(\"Only the default analyzer should be applied\",1,queryResult.size())@@@21@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
109 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the index for the 'text' field\",tokenList)@@@146@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "FieldAnalysisRequest request = new FieldAnalysisRequest()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1b03,null,false))@@@148@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
134 [style = filled, label = "assertNotNull(\"An analysis for document with key '1' should be returned\",documentResult)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
143 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the query for the 'text' field\",tokenList)@@@83@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@78@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertNotNull(\"field_types should never be null\",fieldTypes)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@58@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\",indexPart)@@@22@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
76 [style = filled, label = "NamedList<Object> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
125 [style = filled, label = "assertNotNull(\"an analysis for the 'id' field should be returned\",idResult)@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1990,null,false))@@@97@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
111 [style = filled, label = "assertNotNull(\"result is null and it shouldn't be\",result)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
123 [style = filled, label = "assertNotNull(\"an analysis for the 'text' field should be returned\",textResult)@@@74@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"Jumping Jack\")@@@64@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
93 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@103@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
37 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Jack\",null,\"word\",8,12,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec18c8,null,false))@@@70@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "@SuppressWarnings({\"rawtypes\"}) NamedList indexPart = textType.get(\"index\")@@@19@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
97 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"88\",null,\"word\",0,2,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1831,null,false))@@@50@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "@SuppressWarnings({\"rawtypes\"}) NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@23@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
104 [style = filled, label = "NamedList<Object> queryResult@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
59 [style = filled, label = "List<NamedList> tokenList@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
106 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the query for the 'text' field\",tokenList)@@@95@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
90 [style = filled, label = "name = queryResult.getName(0)@@@46@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
78 [style = filled, label = "assertEquals(\"The number_l_p field has only a single value\",1,indexResult.size())@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jump\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1b8c,null,true))@@@166@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
117 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1874,null,false))@@@59@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
132 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"88\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
114 [style = filled, label = "NamedList<NamedList<Object>> textResult = documentResult.get(\"text\")@@@73@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "assertEquals(\"The 'id' field value has only one token\",1,tokenList.size())@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "request.setFieldValue(\"<html><body>wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r</body></html>\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
61 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"Jumping\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec18b3,null,false))@@@67@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
72 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@105@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@24@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
82 [style = filled, label = "NamedList<NamedList<NamedList<Object>>> documentResult = (NamedList<NamedList<NamedList<Object>>>)result.get(\"1\")@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
139 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"The\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1a2b,null,false))@@@118@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
99 [style = filled, label = "indexResult = idResult.get(\"index\")@@@29@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
121 [style = filled, label = "tokenList = valueResult.getVal(0)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@11@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
100 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"Fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec19ec,null,false))@@@109@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@8@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
92 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1b48,null,false))@@@157@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertEquals(tokenList.size(),1)@@@29@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
130 [style = filled, label = "assertEquals(\"Only the default analyzer should be applied\",1,valueResult.size())@@@45@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
48 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"fox\",null,\"<ALPHANUM>\",4,7,2,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1a80,null,false))@@@130@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "testHandleAnalysisRequest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
55 [style = filled, label = "tokenList = valueResult.getVal(0)@@@65@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
105 [style = filled, label = "document.addField(\"id\",1)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
135 [style = filled, label = "assertTrue(\"Only the default analyzer should be applied\",name.matches(\"org.apache.solr.schema.FieldType\$DefaultAnalyzer.*\"))@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
86 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@124@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
102 [style = filled, label = "assertEquals(\"Expecting 2 tokens to be present\",2,tokenList.size())@@@66@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
80 [style = filled, label = "assertEquals(\"Expecting 6 tokens\",6,tokenList.size())@@@126@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
137 [style = filled, label = "assertEquals(\"The 'text' field has only a single value\",1,indexResult.size())@@@101@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
115 [style = filled, label = "document.addField(\"whitetok\",\"Jumping Jack\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
94 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"JUMPING\",null,\"word\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1776,null,false))@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
98 [style = filled, label = "assertToken(tokenList.get(4),new TokenInfo(\"the\",null,\"<ALPHANUM>\",20,23,5,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1ac2,null,false))@@@139@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1962,null,false))@@@91@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "assertNotNull(\"Expecting the 'LowerCaseFilter' to be applied on the index for the 'text' field\",tokenList)@@@125@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@11@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@17@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
68 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1ba4,null,false))@@@169@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\")@@@15@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
18 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec162a,null,false))@@@20@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "tokenList = (List<NamedList>)queryResult.getVal(0)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
113 [style = filled, label = "assertToken(tokenList.get(5),new TokenInfo(\"dogs\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1ad8,null,false))@@@142@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
69 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"The\",null,\"<ALPHANUM>\",0,3,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec19d7,null,false))@@@106@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "document.addField(\"text\",\"The Fox Jumped Over The Dogs\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "DocumentAnalysisRequest request = new DocumentAnalysisRequest().setQuery(\"JUMPING\").setShowMatch(true).addDocument(document)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
56 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"Jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1a01,null,false))@@@112@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
136 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"jumping\",null,\"<ALPHANUM>\",0,7,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1935,null,false))@@@85@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
64 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@94@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
83 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@96@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
128 [style = filled, label = "indexResult = number_l_p_Result.get(\"index\")@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
73 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1b31,null,false))@@@154@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
74 [style = filled, label = "tokenList = valueResult.getVal(0)@@@48@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "NamedList<NamedList> result = handler.handleAnalysisRequest(request,h.getCore().getLatestSchema())@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
108 [style = filled, label = "assertEquals(\"The 'whitetok' field has only a single value\",1,indexResult.size())@@@63@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNotNull(\"expecting result for field type 'charfilthtmlmap'\",textType)@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.standard.StandardTokenizer\")@@@76@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
85 [style = filled, label = "document.addField(\"number_l_p\",88L)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
141 [style = filled, label = "assertEquals(\"The id field has only a single value\",1,indexResult.size())@@@30@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
60 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"1\",null,\"word\",0,1,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec17cd,null,false))@@@37@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
96 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.LowerCaseFilter\")@@@82@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
57 [style = filled, label = "indexResult = textResult.get(\"index\")@@@100@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
101 [style = filled, label = "queryResult = textResult.get(\"query\")@@@75@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
131 [style = filled, label = "assertNotNull(\"an analysis for the 'whitetok' field should be returned\",whitetokResult)@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
95 [style = filled, label = "NamedList<NamedList<Object>> idResult = documentResult.get(\"id\")@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
79 [style = filled, label = "assertNotNull(\"Expecting the 'PorterStemFilter' to be applied on the index for the 'text' field\",tokenList)@@@161@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
107 [style = filled, label = "NamedList<List<NamedList>> valueResult@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
103 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"Over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1a16,null,false))@@@115@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
70 [style = filled, label = "NamedList<NamedList<Object>> whitetokResult = documentResult.get(\"whitetok\")@@@53@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(\"result is null and it shouldn't be\",result != null)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "assertEquals(\"whatever\",indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"))@@@16@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "testCharFilterAnalysis['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "assertToken(tokenList.get(2),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1a96,null,false))@@@133@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
126 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"1\")@@@31@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
138 [style = filled, label = "NamedList<NamedList<Object>> number_l_p_Result = documentResult.get(\"number_l_p\")@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) List<NamedList> tokenList = (List<NamedList>)indexPart.get(.getName())@@@25@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
66 [style = filled, label = "assertEquals(\"Expecting 4 tokens\",4,tokenList.size())@@@162@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
133 [style = filled, label = "assertTrue(\"Only the default analyzer should be applied\",name.matches(\"org.apache.solr.schema.FieldType\$DefaultAnalyzer.*\"))@@@23@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
116 [style = filled, label = "queryResult = whitetokResult.get(\"query\")@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
110 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"dog\",null,\"<ALPHANUM>\",24,28,6,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1bbc,null,false))@@@172@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
142 [style = filled, label = "assertNotNull(\"Expecting the 'StopFilter' to be applied on the query for the 'text' field\",tokenList)@@@89@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
89 [style = filled, label = "assertNotNull(\"an analysis for the 'number_l_p' field should be returned\",number_l_p_Result)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the query for the 'text' field\",tokenList)@@@77@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
87 [style = filled, label = "assertToken(tokenList.get(3),new TokenInfo(\"over\",null,\"<ALPHANUM>\",15,19,4,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1aac,null,false))@@@136@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "request.addFieldType(\"charfilthtmlmap\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
84 [style = filled, label = "assertEquals(\"Only the default analyzer should be applied\",1,valueResult.size())@@@32@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "NamedList<NamedList> fieldTypes = result.get(\"field_types\")@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertToken(tokenList.get(0),new TokenInfo(\"whatever\",null,\"word\",12,20,1,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec16bc,null,false))@@@30@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
75 [style = filled, label = "name = queryResult.getName(0)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "request.setShowMatch(false)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
120 [style = filled, label = "assertEquals(\"Query has only one token\",1,tokenList.size())@@@90@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertEquals(\"wh鐃緒申鐃緒申鐃緒申t鐃緒申鐃緒申鐃緒申v鐃緒申鐃緒申鐃緒申r\",indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"))@@@15@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "testCharFilterAnalysis['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
77 [style = filled, label = "tokenList = valueResult.get(\"org.apache.lucene.analysis.en.PorterStemFilter\")@@@160@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertNotNull(\"Expecting MockTokenizer analysis breakdown\",tokenList)@@@28@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
44 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(.getName())@@@56@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
112 [style = filled, label = "valueResult = (NamedList<List<NamedList>>)indexResult.get(\"The Fox Jumped Over The Dogs\")@@@102@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
118 [style = filled, label = "assertNotNull(\"Expecting the 'StandardTokenizer' to be applied on the index for the 'text' field\",tokenList)@@@104@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
62 [style = filled, label = "assertToken(tokenList.get(1),new TokenInfo(\"jumped\",null,\"<ALPHANUM>\",8,14,3,new int((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@ec1b1a,null,false))@@@151@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
129 [style = filled, label = "indexResult = whitetokResult.get(\"index\")@@@62@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "NamedList indexPart = textType.get(\"index\")@@@13@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(tokenList.size(),1)@@@19@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "String name@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
119 [style = filled, label = "tokenList = (List<NamedList>)queryResult.get(\"org.apache.lucene.analysis.core.StopFilter\")@@@88@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
122 [style = filled, label = "SolrInputDocument document = new SolrInputDocument()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
52 [style = filled, label = "name = queryResult.getName(0)@@@22@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "assertNotNull(\"Expecting the 'MockTokenizer' to be applied on the query for the 'whitetok' field\",tokenList)@@@57@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
65 [style = filled, label = "assertEquals(\"The 'number_l_p' field value has only one token\",1,tokenList.size())@@@49@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23->30 [style = bold, label=""];
40->57 [style = bold, label=""];
68->110 [style = bold, label=""];
119->142 [style = solid, label="tokenList"];
47->76 [style = bold, label=""];
115->33 [style = bold, label=""];
44->42 [style = bold, label=""];
133->45 [style = bold, label=""];
5->4 [style = solid, label="indexPart"];
51->68 [style = bold, label=""];
7->6 [style = bold, label=""];
58->95 [style = bold, label=""];
14->0 [style = bold, label=""];
14->19 [style = bold, label=""];
136->119 [style = bold, label=""];
6->22 [style = bold, label=""];
21->14 [style = solid, label="result"];
86->38 [style = bold, label=""];
28->6 [style = bold, label=""];
134->104 [style = bold, label=""];
82->134 [style = bold, label=""];
137->112 [style = bold, label=""];
9->76 [style = dashed, label="0"];
96->143 [style = bold, label=""];
108->39 [style = bold, label=""];
122->105 [style = bold, label=""];
93->118 [style = bold, label=""];
9->14 [style = bold, label=""];
97->70 [style = bold, label=""];
16->7 [style = bold, label=""];
0->1 [style = solid, label="textType"];
116->44 [style = bold, label=""];
113->140 [style = bold, label=""];
20->2 [style = bold, label=""];
122->47 [style = solid, label="document"];
103->139 [style = bold, label=""];
70->131 [style = bold, label=""];
102->61 [style = bold, label=""];
41->67 [style = bold, label=""];
64->106 [style = solid, label="tokenList"];
38->80 [style = bold, label=""];
114->123 [style = bold, label=""];
99->141 [style = bold, label=""];
1->5 [style = bold, label=""];
3->105 [style = dashed, label="0"];
87->98 [style = bold, label=""];
130->90 [style = bold, label=""];
42->54 [style = bold, label=""];
101->46 [style = bold, label=""];
48->50 [style = bold, label=""];
49->122 [style = bold, label=""];
6->11 [style = bold, label=""];
128->78 [style = bold, label=""];
82->134 [style = solid, label="documentResult"];
1->134 [style = dashed, label="0"];
72->69 [style = bold, label=""];
89->128 [style = bold, label=""];
11->18 [style = bold, label=""];
55->102 [style = bold, label=""];
44->42 [style = solid, label="tokenList"];
52->133 [style = bold, label=""];
107->58 [style = bold, label=""];
65->97 [style = bold, label=""];
79->66 [style = bold, label=""];
2->3 [style = bold, label=""];
34->64 [style = bold, label=""];
141->126 [style = bold, label=""];
124->48 [style = bold, label=""];
60->138 [style = bold, label=""];
45->43 [style = bold, label=""];
88->136 [style = bold, label=""];
50->87 [style = bold, label=""];
47->76 [style = solid, label="request"];
17->9 [style = bold, label=""];
23->30 [style = solid, label="tokenList"];
56->103 [style = bold, label=""];
140->109 [style = solid, label="tokenList"];
91->86 [style = bold, label=""];
19->4 [style = solid, label="fieldTypes"];
61->37 [style = bold, label=""];
25->27 [style = bold, label=""];
77->79 [style = solid, label="tokenList"];
80->124 [style = bold, label=""];
59->71 [style = bold, label=""];
92->77 [style = bold, label=""];
76->111 [style = solid, label="result"];
73->92 [style = bold, label=""];
84->75 [style = bold, label=""];
67->62 [style = bold, label=""];
69->100 [style = bold, label=""];
10->16 [style = bold, label=""];
64->106 [style = bold, label=""];
126->84 [style = bold, label=""];
132->130 [style = bold, label=""];
21->14 [style = bold, label=""];
143->88 [style = bold, label=""];
112->93 [style = bold, label=""];
62->73 [style = bold, label=""];
76->111 [style = bold, label=""];
46->32 [style = solid, label="tokenList"];
77->79 [style = bold, label=""];
117->129 [style = bold, label=""];
5->104 [style = dashed, label="0"];
15->12 [style = bold, label=""];
86->38 [style = solid, label="tokenList"];
135->121 [style = bold, label=""];
9->14 [style = solid, label="fieldTypes"];
5->4 [style = bold, label=""];
95->125 [style = solid, label="idResult"];
95->125 [style = bold, label=""];
63->96 [style = bold, label=""];
109->41 [style = bold, label=""];
106->83 [style = bold, label=""];
71->107 [style = bold, label=""];
57->137 [style = bold, label=""];
90->127 [style = bold, label=""];
105->115 [style = bold, label=""];
19->4 [style = bold, label=""];
104->59 [style = bold, label=""];
4->10 [style = bold, label=""];
131->116 [style = bold, label=""];
0->82 [style = dashed, label="0"];
39->55 [style = bold, label=""];
120->34 [style = bold, label=""];
12->8 [style = bold, label=""];
26->29 [style = bold, label=""];
114->123 [style = solid, label="textResult"];
139->91 [style = bold, label=""];
31->53 [style = bold, label=""];
111->82 [style = bold, label=""];
75->135 [style = bold, label=""];
14->111 [style = dashed, label="0"];
94->99 [style = bold, label=""];
2->21 [style = solid, label="request"];
2->8 [style = solid, label="request"];
138->89 [style = solid, label="number_l_p_Result"];
100->56 [style = bold, label=""];
66->81 [style = bold, label=""];
37->114 [style = bold, label=""];
24->23 [style = bold, label=""];
54->117 [style = bold, label=""];
46->32 [style = bold, label=""];
12->21 [style = bold, label=""];
123->101 [style = bold, label=""];
33->85 [style = bold, label=""];
74->65 [style = bold, label=""];
70->131 [style = solid, label="whitetokResult"];
8->17 [style = bold, label=""];
30->25 [style = bold, label=""];
119->142 [style = bold, label=""];
0->1 [style = bold, label=""];
93->118 [style = solid, label="tokenList"];
129->108 [style = bold, label=""];
138->89 [style = bold, label=""];
32->36 [style = bold, label=""];
140->109 [style = bold, label=""];
118->72 [style = bold, label=""];
4->28 [style = bold, label=""];
22->26 [style = solid, label="indexPart"];
11->125 [style = dashed, label="0"];
22->26 [style = bold, label=""];
36->63 [style = bold, label=""];
8->17 [style = solid, label="result"];
127->74 [style = bold, label=""];
81->51 [style = bold, label=""];
7->6 [style = solid, label="tokenList"];
96->143 [style = solid, label="tokenList"];
3->15 [style = bold, label=""];
35->60 [style = bold, label=""];
43->94 [style = bold, label=""];
142->120 [style = bold, label=""];
28->6 [style = solid, label="textType"];
85->47 [style = bold, label=""];
29->24 [style = bold, label=""];
13->2 [style = bold, label=""];
83->40 [style = bold, label=""];
125->31 [style = bold, label=""];
78->132 [style = bold, label=""];
98->113 [style = bold, label=""];
121->35 [style = bold, label=""];
53->52 [style = bold, label=""];
}
