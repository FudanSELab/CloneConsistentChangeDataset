digraph {
0 [style = filled, label = "assertEquals(1,results.length)@@@7@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(\"a string\",results(0()@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testThatWindowsLineTerminatedStringReturnsNonEmptyResult['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@9@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertNotNull(results)@@@6@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TextLineDecoder decoder = new TextLineDecoder()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(\"a string\",results)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "testThatUnixLineTerminatedStringReturnsNonEmptyResult['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Context context = decoder.createDecoderState()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "String(( results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "String results = decoder.decode(ByteBuffer.wrap(\"a string\".getBytes()),context)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "testThatUnixLineTerminatedStringReturnsNonEmptyResult['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertEquals(0,context.getBuffer().position())@@@7@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
0->3 [style = bold, label=""];
4->9 [style = bold, label=""];
6->5 [style = solid, label="results"];
4->6 [style = solid, label="context"];
4->6 [style = bold, label=""];
9->8 [style = solid, label="results"];
4->13 [style = bold, label=""];
13->5 [style = solid, label="results"];
6->9 [style = dashed, label="0"];
7->4 [style = bold, label=""];
9->8 [style = bold, label=""];
1->7 [style = bold, label=""];
10->7 [style = bold, label=""];
12->7 [style = bold, label=""];
4->13 [style = solid, label="context"];
6->5 [style = bold, label=""];
6->13 [style = dashed, label="0"];
3->2 [style = bold, label=""];
5->0 [style = bold, label=""];
4->9 [style = solid, label="context"];
13->5 [style = bold, label=""];
5->8 [style = dashed, label="0"];
13->3 [style = solid, label="results"];
8->11 [style = bold, label=""];
6->3 [style = solid, label="results"];
}
