digraph {
36 [style = filled, label = "Map<String,NewPartitions> counts = new HashMap<>()@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic1\",Errors.NONE),deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),deletableTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "counts.put(\"topic1\",NewPartitions.increaseTo(1))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "CreatePartitionsResult result = env.adminClient().createPartitions(counts,new CreatePartitionsOptions().retryOnQuotaViolation(true))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "TestUtils.assertFutureThrows(result.topicNameValues().get(\"topic3\"),)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
22 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next DeleteTopics request\")@@@24@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "e = TestUtils.assertFutureThrows(resultIds.topicIdValues().get(topicId2),)@@@27@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "DeleteTopicsResult resultIds = env.adminClient().deleteTopics(TopicCollection.ofTopicIds(asList(topicId1,topicId2,topicId3)),new DeleteTopicsOptions().retryOnQuotaViolation(true))@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
41 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreatePartitionsRequestWithTopics(\"topic1\",\"topic2\",\"topic3\"),prepareCreatePartitionsResponse(1000,createPartitionsTopicResult(\"topic1\",Errors.NONE),createPartitionsTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED),createPartitionsTopicResult(\"topic3\",Errors.TOPIC_ALREADY_EXISTS)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "assertNull(resultIds.values().get(topicId1).get())@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "assertNull(result.values().get(\"topic1\").get())@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting DeleteTopics requests\")@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
37 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next CreatePartitions request\")@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "assertNull(result.values().get(\"topic1\").get())@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
9 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopicIds(topicId2),prepareDeleteTopicsResponse(1000,deletableTopicResultWithId(topicId2,Errors.THROTTLING_QUOTA_EXCEEDED)))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "env.kafkaClient().prepareResponse(expectCreatePartitionsRequestWithTopics(\"topic2\"),prepareCreatePartitionsResponse(1000,createPartitionsTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40 [style = filled, label = "testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
35 [style = filled, label = "counts.put(\"topic2\",NewPartitions.increaseTo(2))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "counts.put(\"topic3\",NewPartitions.increaseTo(3))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "MockTime time = new MockTime()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "env.kafkaClient().setNodeApiVersions(NodeApiVersions.create())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "long defaultApiTimeout = 60000@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestUtils.assertFutureThrows(resultIds.values().get(topicId3),)@@@29@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
17 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting DeleteTopics requests\")@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "TestUtils.assertFutureThrows(result.values().get(\"topic3\"),)@@@20@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "TestUtils.assertFutureThrows(resultIds.topicIdValues().get(topicId3),)@@@29@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertNull(resultIds.topicIdValues().get(topicId1).get())@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "env.kafkaClient().prepareResponse(expectDeleteTopicsRequestWithTopics(\"topic2\"),prepareDeleteTopicsResponse(1000,deletableTopicResult(\"topic2\",Errors.THROTTLING_QUOTA_EXCEEDED)))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "DeleteTopicsResult result = env.adminClient().deleteTopics(asList(\"topic1\",\"topic2\",\"topic3\"),new DeleteTopicsOptions().retryOnQuotaViolation(true))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertEquals(0,e.throttleTimeMs())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "assertNull(result.topicNameValues().get(\"topic1\").get())@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "e = TestUtils.assertFutureThrows(resultIds.values().get(topicId2),)@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.topicNameValues().get(\"topic2\"),)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "DeleteTopicsWithIdsResult resultIds = env.adminClient().deleteTopicsWithIds(asList(topicId1,topicId2,topicId3),new DeleteTopicsOptions().retryOnQuotaViolation(true))@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
43 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting CreatePartitions requests\")@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "TestUtils.waitForCondition(null,\"Failed awaiting next DeleteTopics request\")@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "time.sleep(defaultApiTimeout + 1)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27->13 [style = bold, label=""];
1->33 [style = dashed, label="0"];
0->30 [style = bold, label=""];
33->14 [style = bold, label=""];
16->8 [style = solid, label="topicId3"];
35->44 [style = bold, label=""];
16->7 [style = solid, label="topicId3"];
15->21 [style = bold, label=""];
12->32 [style = dashed, label="0"];
37->1 [style = bold, label=""];
14->5 [style = solid, label="topicId1"];
16->7 [style = bold, label=""];
23->26 [style = bold, label=""];
39->43 [style = bold, label=""];
16->34 [style = solid, label="topicId3"];
0->11 [style = bold, label=""];
30->32 [style = bold, label=""];
20->0 [style = solid, label="defaultApiTimeout"];
11->12 [style = bold, label=""];
6->5 [style = solid, label="topicId2"];
19->2 [style = bold, label=""];
43->37 [style = bold, label=""];
42->36 [style = bold, label=""];
40->20 [style = bold, label=""];
10->27 [style = dashed, label="0"];
17->22 [style = bold, label=""];
26->24 [style = bold, label=""];
5->17 [style = bold, label=""];
44->39 [style = bold, label=""];
6->9 [style = solid, label="topicId2"];
8->28 [style = dashed, label="0"];
18->28 [style = bold, label=""];
5->34 [style = dashed, label="0"];
13->1 [style = bold, label=""];
2->31 [style = bold, label=""];
15->42 [style = dashed, label="0"];
7->9 [style = bold, label=""];
29->20 [style = bold, label=""];
26->41 [style = bold, label=""];
6->12 [style = solid, label="topicId2"];
14->34 [style = solid, label="topicId1"];
20->1 [style = solid, label="defaultApiTimeout"];
22->0 [style = bold, label=""];
20->23 [style = bold, label=""];
36->39 [style = solid, label="counts"];
3->19 [style = bold, label=""];
10->13 [style = bold, label=""];
31->27 [style = bold, label=""];
16->5 [style = solid, label="topicId3"];
6->16 [style = bold, label=""];
6->34 [style = solid, label="topicId2"];
34->17 [style = bold, label=""];
14->7 [style = solid, label="topicId1"];
12->18 [style = bold, label=""];
4->20 [style = bold, label=""];
20->2 [style = solid, label="defaultApiTimeout"];
16->28 [style = solid, label="topicId3"];
9->5 [style = bold, label=""];
25->31 [style = dashed, label="0"];
6->7 [style = solid, label="topicId2"];
25->10 [style = bold, label=""];
1->14 [style = bold, label=""];
18->8 [style = bold, label=""];
36->38 [style = bold, label=""];
32->18 [style = bold, label=""];
11->30 [style = dashed, label="0"];
13->33 [style = bold, label=""];
38->35 [style = bold, label=""];
2->25 [style = bold, label=""];
14->6 [style = bold, label=""];
41->42 [style = bold, label=""];
6->32 [style = solid, label="topicId2"];
21->3 [style = bold, label=""];
24->15 [style = bold, label=""];
9->34 [style = bold, label=""];
}
