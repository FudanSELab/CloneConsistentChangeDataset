digraph {
5 [style = filled, label = "MockConfigurationPropertySource source = new MockConfigurationPropertySource()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "bindToArrayWhenNonIterableShouldReturnPopulatedArray['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "Integer(( result = this.binder.bind(\"foo\",INTEGER_ARRAY).get()@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "source.put(\"foo(1(\",\"2\")@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "source.put(\"foo(2(\",\"3\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "bindToArrayWhenNonIterableShouldReturnPopulatedArray['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "this.sources.add(source.nonIterable())@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "List<Integer> result = this.binder.bind(\"foo\",INTEGER_LIST).get()@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "source.put(\"foo(0(\",\"1\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertThat(result).containsExactly(1,2,3)@@@9@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "bindToCollectionWhenNonIterableShouldReturnPopulatedCollection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9->5 [style = bold, label=""];
5->7 [style = bold, label=""];
6->5 [style = bold, label=""];
4->1 [style = bold, label=""];
2->0 [style = bold, label=""];
0->10 [style = bold, label=""];
3->2 [style = bold, label=""];
8->5 [style = bold, label=""];
10->1 [style = bold, label=""];
4->10 [style = dashed, label="0"];
0->4 [style = bold, label=""];
7->3 [style = bold, label=""];
}
