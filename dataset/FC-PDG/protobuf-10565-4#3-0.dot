digraph {
15 [style = filled, label = "int length = bytes.length@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "int position = 0@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "int count = 1 + rng.nextInt(bytes.length - position)@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "output.write(byteValue)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "output.write(bytes(position()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "ByteString byteString = output.toByteString()@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "int(( bufferSizes = {0,1,128,256,length / 2,length - 1,length,length + 1,2 * length,3 * length}@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testNewOutput_Mixed['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Random rng = new Random(1)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "testNewOutput_Mixed['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "assertTrue(\"String built from newOutput() must contain the expected bytes\",isArrayRange(bytes,byteString.toByteArray(),0,bytes.length))@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertTrue(\"String built from newOutput() must contain the expected bytes\",isArrayRange(bytes,byteString.toByteArray(),0,bytes.length))@@@14@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertWithMessage(\"newOutput() substring must have correct bytes\").that(isArrayRange(output.toByteString().toByteArray(),bytes,0,position)).isTrue()@@@23@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "position < bytes.length@@@12@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int(( bufferSizes = {0,1,128,256,length / 2,length - 1,length,length + 1,2 * length,3 * length}@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "rng.nextBoolean()@@@13@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "position++@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "ByteString byteString = output.toByteString()@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertWithMessage(\"size() returns the right value\").that(position).isEqualTo(output.size())@@@22@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertTrue(\"newOutput() substring must have correct bytes\",isArrayRange(output.toByteString().toByteArray(),bytes,0,position))@@@23@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "ByteString.Output output = ByteString.newOutput(bufferSize)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "position += count@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "output.write(bytes,position,count)@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testNewOutput_WriteChar['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertEquals(\"size() returns the right value\",position,output.size())@@@22@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "ByteString.Output output = ByteString.newOutput(bufferSize)@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "assertWithMessage(\"String built from newOutput() must contain the expected bytes\").that(isArrayRange(bytes,byteString.toByteArray(),0,bytes.length)).isTrue()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
26 [style = filled, label = "byte(( bytes = getTestBytes()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16->19 [style = dotted, label="true"];
5->8 [style = bold, label=""];
15->7 [style = solid, label="bytes"];
15->0 [style = solid, label="bytes"];
1->10 [style = dotted, label="true"];
9->11 [style = bold, label=""];
8->17 [style = solid, label="position"];
15->22 [style = solid, label="length"];
1->17 [style = dotted, label="false"];
0->17 [style = bold, label=""];
8->19 [style = bold, label=""];
6->18 [style = bold, label=""];
16->6 [style = bold, label=""];
19->20 [style = bold, label=""];
9->16 [style = solid, label="length"];
8->14 [style = bold, label=""];
8->14 [style = solid, label="position"];
16->20 [style = dotted, label="true"];
7->20 [style = dashed, label="0"];
9->12 [style = solid, label="length"];
1->0 [style = bold, label=""];
15->12 [style = solid, label="bytes"];
18->2 [style = bold, label=""];
17->10 [style = solid, label="position"];
15->9 [style = solid, label="length"];
2->4 [style = bold, label=""];
15->5 [style = solid, label="bytes"];
8->5 [style = solid, label="position"];
17->19 [style = bold, label=""];
11->2 [style = bold, label=""];
4->0 [style = solid, label="position"];
9->11 [style = solid, label="length"];
14->7 [style = bold, label=""];
16->7 [style = dotted, label="true"];
12->2 [style = bold, label=""];
17->0 [style = solid, label="position"];
23->22 [style = bold, label=""];
10->5 [style = bold, label=""];
20->16 [style = bold, label=""];
4->10 [style = solid, label="position"];
16->1 [style = dotted, label="true"];
16->1 [style = bold, label=""];
8->10 [style = solid, label="position"];
17->14 [style = bold, label=""];
15->9 [style = bold, label=""];
4->17 [style = solid, label="position"];
8->7 [style = solid, label="position"];
17->14 [style = solid, label="position"];
7->16 [style = bold, label=""];
26->15 [style = bold, label=""];
25->26 [style = bold, label=""];
26->22 [style = solid, label="bytes"];
16->14 [style = dotted, label="true"];
1->8 [style = dotted, label="true"];
3->13 [style = bold, label=""];
10->8 [style = solid, label="count"];
12->18 [style = dashed, label="0"];
4->5 [style = solid, label="position"];
27->23 [style = bold, label=""];
14->19 [style = dashed, label="0"];
13->15 [style = bold, label=""];
4->16 [style = solid, label="position"];
22->24 [style = bold, label=""];
8->0 [style = solid, label="position"];
17->7 [style = solid, label="position"];
9->10 [style = solid, label="length"];
1->10 [style = bold, label=""];
10->5 [style = solid, label="count"];
8->16 [style = solid, label="position"];
17->5 [style = solid, label="position"];
24->27 [style = bold, label=""];
9->24 [style = bold, label=""];
1->5 [style = dotted, label="true"];
1->0 [style = dotted, label="false"];
4->16 [style = bold, label=""];
17->16 [style = solid, label="position"];
21->13 [style = bold, label=""];
6->12 [style = bold, label=""];
}
