digraph {
16 [style = filled, label = "int ncpu = Runtime.getRuntime().availableProcessors()@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final Map<Integer,List<String>> data = new ConcurrentHashMap<>()@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "int m = 5000@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "retryWithBackpressureParallel['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "final int j = i@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "r % 10 == 0@@@11@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "i < m@@@19@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "r < NUM_LOOPS@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "r++@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "System.out.println(\"testRetryWithBackpressureParallelLoop  \" + r)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "data.size() > 0@@@54@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final Map<Integer,List<String>> data = new ConcurrentHashMap<Integer,List<String>>()@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "retryWithBackpressureParallel['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "final int NUM_RETRIES = Flowable.bufferSize() * 2@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "i++@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final int numRetries = Flowable.bufferSize() * 2@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final int NUM_LOOPS = 1@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "retryWithBackpressureParallel['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final AtomicInteger timeouts = new AtomicInteger()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "{exec.shutdown()}@@@59@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "cdl.await()@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final CountDownLatch cdl = new CountDownLatch(m)@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertEquals(0,timeouts.get())@@@53@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "fail(\"Data content mismatch: \" + allSequenceFrequency(data))@@@55@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "ExecutorService exec = Executors.newFixedThreadPool(Math.max(ncpu / 2,2))@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "exec.execute(new Runnable(){@Override public void run(){final AtomicInteger nexts = new AtomicInteger()try {Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(NUM_RETRIES))TestObserverEx<String> to = new TestObserverEx<String>()origin.retry().observeOn(Schedulers.computation()).subscribe(to)to.awaitDone(2500,TimeUnit.MILLISECONDS)List<String> onNextEvents = new ArrayList<String>(to.values())if (onNextEvents.size() != NUM_RETRIES + 2) {for (Throwable t : to.errors()){onNextEvents.add(t.toString())}for (long err = to.completions() err != 0 err--){onNextEvents.add(\"onComplete\")}data.put(j,onNextEvents)}}catch (Throwable t) cdl.countDown()}})@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "int r = 0@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "int i = 0@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9->22 [style = bold, label=""];
6->1 [style = solid, label="i"];
17->10 [style = bold, label=""];
23->16 [style = bold, label=""];
0->8 [style = solid, label="m"];
20->17 [style = bold, label=""];
7->11 [style = bold, label=""];
17->0 [style = dotted, label="true"];
21->6 [style = bold, label=""];
3->24 [style = bold, label=""];
17->6 [style = dotted, label="true"];
24->0 [style = bold, label=""];
26->7 [style = solid, label="NUM_RETRIES"];
15->24 [style = dashed, label="0"];
20->12 [style = solid, label="r"];
11->1 [style = solid, label="i"];
18->19 [style = bold, label=""];
17->14 [style = dotted, label="true"];
8->7 [style = dotted, label="true"];
24->9 [style = solid, label="data"];
3->15 [style = bold, label=""];
0->21 [style = bold, label=""];
22->17 [style = solid, label="r"];
2->9 [style = bold, label=""];
5->14 [style = bold, label=""];
23->7 [style = solid, label="numRetries"];
20->22 [style = solid, label="r"];
22->13 [style = solid, label="r"];
20->13 [style = solid, label="r"];
22->12 [style = solid, label="r"];
23->26 [style = dashed, label="0"];
1->7 [style = bold, label=""];
17->3 [style = dotted, label="true"];
6->8 [style = solid, label="i"];
19->17 [style = solid, label="NUM_LOOPS"];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
26->16 [style = bold, label=""];
17->8 [style = dotted, label="true"];
1->7 [style = solid, label="j"];
8->1 [style = dotted, label="true"];
17->12 [style = bold, label=""];
12->13 [style = dotted, label="true"];
17->15 [style = dotted, label="true"];
2->9 [style = dotted, label="true"];
13->3 [style = bold, label=""];
8->5 [style = bold, label=""];
6->11 [style = solid, label="i"];
17->12 [style = dotted, label="true"];
15->9 [style = solid, label="data"];
19->26 [style = bold, label=""];
19->23 [style = bold, label=""];
15->0 [style = bold, label=""];
16->4 [style = solid, label="ncpu"];
0->21 [style = solid, label="m"];
6->8 [style = bold, label=""];
11->8 [style = solid, label="i"];
4->20 [style = bold, label=""];
25->19 [style = bold, label=""];
22->17 [style = bold, label=""];
8->11 [style = dotted, label="true"];
11->8 [style = bold, label=""];
17->22 [style = dotted, label="true"];
14->2 [style = bold, label=""];
12->3 [style = bold, label=""];
27->19 [style = bold, label=""];
17->2 [style = dotted, label="true"];
16->4 [style = bold, label=""];
2->22 [style = bold, label=""];
17->21 [style = dotted, label="true"];
17->24 [style = dotted, label="true"];
20->17 [style = solid, label="r"];
17->5 [style = dotted, label="true"];
}
