digraph {
7 [style = filled, label = "int cmp = Comparators.charSequences().compare(\"test\",(CharSequence)projected.get(\"renamed\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(\"Should contain the correct id value\",34L,(long)projected.get(\"id\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(schema,\"table\"))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "Assert.fail(\"Should not retrieve value with ordinal 0\")@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "Record projected = writeAndRead(\"project_and_rename\",writeSchema,readSchema,record)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Schema writeSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "record.put(\"id\",34L)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "testRename['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
2 [style = filled, label = "Assert.assertTrue(\"Should contain the correct data/renamed value\",cmp == 0)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "Assert.assertEquals(\"Should contain the correct data/renamed value\",0,cmp)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testRename['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Record projected = writeAndRead(\"empty_projection\",schema,schema.select(),record)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "testEmptyProjection['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "record.put(\"data\",\"test\")@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "Schema schema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"data\",Types.StringType.get()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "Record record = new Record(AvroSchemaUtil.convert(writeSchema,\"table\"))@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "Assert.assertNotNull(\"Should read a non-null record\",projected)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "projected.get(0)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Schema readSchema = new Schema(Types.NestedField.required(0,\"id\",Types.LongType.get()),Types.NestedField.optional(1,\"renamed\",Types.StringType.get()))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7->11 [style = solid, label="cmp"];
7->11 [style = bold, label=""];
1->8 [style = bold, label=""];
8->15 [style = bold, label=""];
15->16 [style = solid, label="projected"];
5->4 [style = solid, label="readSchema"];
7->2 [style = solid, label="cmp"];
18->12 [style = bold, label=""];
13->15 [style = solid, label="record"];
3->6 [style = bold, label=""];
14->17 [style = bold, label=""];
12->15 [style = solid, label="schema"];
15->16 [style = bold, label=""];
10->6 [style = bold, label=""];
13->1 [style = bold, label=""];
4->0 [style = bold, label=""];
0->7 [style = bold, label=""];
6->12 [style = dashed, label="0"];
6->9 [style = solid, label="writeSchema"];
12->13 [style = bold, label=""];
8->5 [style = bold, label=""];
6->4 [style = solid, label="writeSchema"];
7->2 [style = bold, label=""];
5->4 [style = bold, label=""];
9->13 [style = dashed, label="0"];
12->13 [style = solid, label="schema"];
16->14 [style = bold, label=""];
2->11 [style = dashed, label="0"];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
9->4 [style = solid, label="record"];
}
