digraph {
2 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2011/P1D\",0)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2,desc3),publishedDescriptors())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "task.getRunner().getStatus() != Status.READING@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2008/P1D\",0)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"d\",\"e\"),readSegmentColumn(\"dim1\",desc2))@@@18@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "SegmentDescriptor desc3 = SD(task,\"2010/P1D\",0)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"b\"),readSegmentColumn(\"dim1\",desc2))@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "SegmentDescriptor desc1 = sd(task,\"2010/P1D\",0)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "Thread.sleep(10)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "Assert.assertEquals(3,task.getRunner().getRowIngestionMeters().getProcessed())@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "SegmentDescriptor desc2 = sd(task,\"2011/P1D\",0)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "Assert.assertEquals(new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()))@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testRunWithMinimumMessageTime['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "SegmentDescriptor desc1 = SD(task,\"2010/P1D\",0)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Assert.assertEquals(TaskState.SUCCESS,future.get().getStatusCode())@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"c\"),readSegmentColumn(\"dim1\",desc3))@@@20@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "SegmentDescriptor desc2 = SD(task,\"2009/P1D\",0)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "insertData()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "testRunWithMaximumMessageTime['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,DateTimes.of(\"2010\"),null))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "final KafkaIndexTask task = createTask(null,new KafkaIndexTaskIOConfig(0,\"sequence0\",new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,0L)),new SeekableStreamPartitions<>(topic,ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,true,null,DateTimes.of(\"2010\")))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final ListenableFuture<TaskStatus> future = runTask(task)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Assert.assertEquals(0,task.getRunner().getRowIngestionMeters().getUnparseable())@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "Assert.assertEquals(2,task.getRunner().getRowIngestionMeters().getThrownAway())@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "Assert.assertEquals(ImmutableList.of(\"a\"),readSegmentColumn(\"dim1\",desc1))@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "testRunWithMinimumMessageTime['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
14->3 [style = bold, label=""];
23->24 [style = solid, label="desc1"];
9->0 [style = solid, label="desc1"];
16->0 [style = bold, label=""];
9->4 [style = solid, label="desc1"];
1->2 [style = solid, label="task"];
2->0 [style = solid, label="desc2"];
12->5 [style = bold, label=""];
17->1 [style = bold, label=""];
9->2 [style = bold, label=""];
23->20 [style = solid, label="desc1"];
9->18 [style = dashed, label="0"];
1->19 [style = dashed, label="0"];
23->26 [style = bold, label=""];
16->8 [style = solid, label="desc2"];
19->11 [style = bold, label=""];
11->12 [style = bold, label=""];
18->0 [style = solid, label="desc1"];
8->21 [style = dashed, label="0"];
12->6 [style = bold, label=""];
9->23 [style = dashed, label="0"];
19->11 [style = solid, label="task"];
1->11 [style = bold, label=""];
7->14 [style = bold, label=""];
3->18 [style = bold, label=""];
26->24 [style = solid, label="desc2"];
26->21 [style = solid, label="desc2"];
3->9 [style = bold, label=""];
19->23 [style = solid, label="task"];
20->21 [style = bold, label=""];
27->24 [style = solid, label="desc3"];
3->23 [style = bold, label=""];
0->10 [style = bold, label=""];
2->0 [style = bold, label=""];
18->16 [style = bold, label=""];
26->27 [style = bold, label=""];
24->4 [style = bold, label=""];
1->11 [style = solid, label="task"];
19->26 [style = solid, label="task"];
21->22 [style = bold, label=""];
12->6 [style = dotted, label="true"];
13->7 [style = bold, label=""];
4->20 [style = dashed, label="0"];
2->16 [style = dashed, label="0"];
5->13 [style = bold, label=""];
1->16 [style = solid, label="task"];
2->8 [style = solid, label="desc2"];
4->20 [style = bold, label=""];
25->19 [style = bold, label=""];
10->4 [style = bold, label=""];
4->8 [style = bold, label=""];
27->24 [style = bold, label=""];
1->9 [style = solid, label="task"];
1->18 [style = solid, label="task"];
18->4 [style = solid, label="desc1"];
16->0 [style = solid, label="desc2"];
2->26 [style = dashed, label="0"];
19->27 [style = solid, label="task"];
27->22 [style = solid, label="desc3"];
15->1 [style = bold, label=""];
6->12 [style = bold, label=""];
}
