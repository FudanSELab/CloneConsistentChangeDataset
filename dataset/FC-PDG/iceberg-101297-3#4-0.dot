digraph {
23 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",30)).eval(FILE)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",79)).eval(FILE)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "Assert.assertFalse(\"Should not read: id range below lower bound (5 < 30)\",shouldRead)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Assert.assertTrue(\"Should read: many possible ids\",shouldRead)@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",79)).eval(FILE)@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Assert.assertFalse(\"Should not read: id range below lower bound (29 < 30)\",shouldRead)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",30)).eval(FILE)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",29),SPEC,true).eval(FILE)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to lower bound\",shouldRead)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "boolean shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",5),SPEC,true).eval(FILE)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
20 [style = filled, label = "testIntegerNotEq['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",5)).eval(FILE)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "Assert.assertTrue(\"Should read: id between lower and upper bounds\",shouldRead)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",75)).eval(FILE)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "boolean shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",5)).eval(FILE)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",30),SPEC,true).eval(FILE)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,lessThanOrEqual(\"id\",29)).eval(FILE)@@@5@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "Assert.assertTrue(\"Should read: id below lower bound\",shouldRead)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertTrue(\"Should read: id equal to upper bound\",shouldRead)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "Assert.assertTrue(\"Should read: one possible id\",shouldRead)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "shouldRead = ManifestEvaluator.forRowFilter(lessThanOrEqual(\"id\",79),SPEC,true).eval(FILE)@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "testIntegerLtEq['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",85)).eval(FILE)@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",80)).eval(FILE)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testIntegerLtEq['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "Assert.assertTrue(\"Should read: id above upper bound\",shouldRead)@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "shouldRead = new InclusiveManifestEvaluator(SPEC,notEqual(\"id\",29)).eval(FILE)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->10 [style = bold, label=""];
27->18 [style = bold, label=""];
18->24 [style = bold, label=""];
1->8 [style = bold, label=""];
23->27 [style = bold, label=""];
21->19 [style = bold, label=""];
7->12 [style = bold, label=""];
28->22 [style = bold, label=""];
22->16 [style = bold, label=""];
2->1 [style = bold, label=""];
15->25 [style = bold, label=""];
20->26 [style = bold, label=""];
26->28 [style = solid, label="shouldRead"];
18->24 [style = solid, label="shouldRead"];
2->1 [style = solid, label="shouldRead"];
6->0 [style = bold, label=""];
4->26 [style = dashed, label="0"];
16->23 [style = bold, label=""];
6->0 [style = solid, label="shouldRead"];
12->0 [style = bold, label=""];
3->4 [style = bold, label=""];
25->17 [style = bold, label=""];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
2->10 [style = dashed, label="0"];
4->5 [style = solid, label="shouldRead"];
6->12 [style = dashed, label="0"];
7->27 [style = dashed, label="0"];
8->7 [style = solid, label="shouldRead"];
6->18 [style = dashed, label="0"];
4->9 [style = dashed, label="0"];
14->15 [style = solid, label="shouldRead"];
5->2 [style = bold, label=""];
11->7 [style = solid, label="shouldRead"];
19->14 [style = bold, label=""];
24->21 [style = bold, label=""];
7->6 [style = bold, label=""];
9->5 [style = bold, label=""];
0->24 [style = dashed, label="0"];
9->5 [style = solid, label="shouldRead"];
22->16 [style = solid, label="shouldRead"];
14->15 [style = bold, label=""];
12->0 [style = solid, label="shouldRead"];
13->9 [style = bold, label=""];
25->17 [style = solid, label="shouldRead"];
26->28 [style = bold, label=""];
23->27 [style = solid, label="shouldRead"];
21->19 [style = solid, label="shouldRead"];
8->11 [style = dashed, label="0"];
10->1 [style = solid, label="shouldRead"];
10->1 [style = bold, label=""];
2->22 [style = dashed, label="0"];
4->5 [style = bold, label=""];
11->7 [style = bold, label=""];
8->23 [style = dashed, label="0"];
}
