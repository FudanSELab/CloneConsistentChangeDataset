digraph {
18 [style = filled, label = "final ExpectedDataSource expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
34 [style = filled, label = "assertIs['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPort(),CoreMatchers.is(expected.getPort()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual dataSource should exist.\"),actual)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "final ExpectedDataSource expected@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8 [style = filled, label = "null == expected@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"),actual)@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getDb(),CoreMatchers.is(expected.getDb()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getHostName(),is(expected.getHostName()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),CoreMatchers.is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUrl(),CoreMatchers.is(expected.getUrl()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
27 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getDb(),is(expected.getDb()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
5 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPassword(),CoreMatchers.is(expected.getPassword()))@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUser(),is(expected.getUser()))@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"),actual)@@@4@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUrl(),is(expected.getUrl()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
10 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getUser(),CoreMatchers.is(expected.getUser()))@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getHostName(),CoreMatchers.is(expected.getHostName()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPassword(),is(expected.getPassword()))@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "assertNull(assertContext.getText(\"Actual dataSource should not exist.\"),actual)@@@4@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProperties(),expected.getProps())@@@15@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@13@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "final ExceptedReadwriteSplittingRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "final DataSourceSegment actual@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s datasource segment assertion error: \",actual.getClass().getSimpleName())),actual.getPort(),is(expected.getPort()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
8->7 [style = dotted, label="false"];
11->32 [style = dashed, label="0"];
8->36 [style = dotted, label="false"];
18->8 [style = solid, label="expected"];
22->15 [style = bold, label=""];
11->16 [style = dashed, label="0"];
15->21 [style = bold, label=""];
24->17 [style = dotted, label="true"];
8->28 [style = dotted, label="false"];
7->20 [style = dashed, label="0"];
30->36 [style = bold, label=""];
8->10 [style = dotted, label="false"];
12->9 [style = bold, label=""];
36->33 [style = bold, label=""];
8->9 [style = dotted, label="false"];
12->26 [style = dashed, label="0"];
1->13 [style = dotted, label="true"];
34->27 [style = dotted, label="true"];
20->16 [style = bold, label=""];
4->36 [style = dashed, label="0"];
5->0 [style = bold, label=""];
1->6 [style = dotted, label="true"];
8->21 [style = dotted, label="false"];
17->0 [style = solid, label="assertContext"];
8->0 [style = dotted, label="false"];
8->33 [style = dotted, label="false"];
9->30 [style = dashed, label="0"];
6->0 [style = solid, label="assertContext"];
8->28 [style = bold, label=""];
7->11 [style = bold, label=""];
25->33 [style = solid, label="assertContext"];
5->23 [style = dashed, label="0"];
8->15 [style = dotted, label="false"];
8->4 [style = dotted, label="false"];
11->12 [style = bold, label=""];
34->8 [style = bold, label=""];
16->19 [style = bold, label=""];
32->26 [style = bold, label=""];
34->31 [style = dotted, label="true"];
12->19 [style = dashed, label="0"];
13->31 [style = dashed, label="0"];
3->7 [style = bold, label=""];
29->32 [style = bold, label=""];
8->14 [style = dotted, label="true"];
8->22 [style = dotted, label="false"];
14->35 [style = dashed, label="0"];
24->8 [style = bold, label=""];
19->22 [style = bold, label=""];
8->16 [style = dotted, label="false"];
24->18 [style = dotted, label="true"];
27->35 [style = solid, label="actual"];
13->3 [style = solid, label="actual"];
21->23 [style = bold, label=""];
24->13 [style = dotted, label="true"];
4->10 [style = bold, label=""];
28->29 [style = bold, label=""];
3->28 [style = dashed, label="0"];
8->11 [style = dotted, label="false"];
1->8 [style = bold, label=""];
8->35 [style = dotted, label="true"];
8->26 [style = dotted, label="false"];
8->3 [style = bold, label=""];
8->14 [style = bold, label=""];
9->22 [style = dashed, label="0"];
23->0 [style = bold, label=""];
8->35 [style = bold, label=""];
10->5 [style = bold, label=""];
27->28 [style = solid, label="actual"];
2->8 [style = solid, label="expected"];
8->5 [style = dotted, label="false"];
8->32 [style = dotted, label="false"];
34->25 [style = dotted, label="true"];
8->19 [style = dotted, label="false"];
8->29 [style = dotted, label="false"];
8->3 [style = dotted, label="false"];
10->21 [style = dashed, label="0"];
8->23 [style = dotted, label="false"];
8->12 [style = dotted, label="false"];
8->20 [style = dotted, label="false"];
9->4 [style = bold, label=""];
13->14 [style = solid, label="actual"];
26->30 [style = bold, label=""];
3->20 [style = bold, label=""];
4->15 [style = dashed, label="0"];
31->8 [style = solid, label="expected"];
7->29 [style = dashed, label="0"];
1->2 [style = dotted, label="true"];
8->30 [style = dotted, label="false"];
}
