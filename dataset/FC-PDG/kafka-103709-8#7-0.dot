digraph {
10 [style = filled, label = "Properties props = new Properties()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"some.invalid.hostname.foo.bar:9999\")@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "final int oldInitCount = MockMetricsReporter.INIT_COUNT.get()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "testConstructorClose['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "Assert.assertEquals(\"Failed to construct kafka producer\",e.getMessage())@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "Assert.assertEquals(oldCloseCount + 1,MockMetricsReporter.CLOSE_COUNT.get())@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,\"some.invalid.hostname.foo.bar:9999\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "testConstructorFailureCloseResource['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertEquals(oldCloseCount + 1,MockMetricsReporter.CLOSE_COUNT.get())@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "props.setProperty(ConsumerConfig.METRIC_REPORTER_CLASSES_CONFIG,.getName())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertEquals(oldInitCount + 1,MockMetricsReporter.INIT_COUNT.get())@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "KafkaConsumer<byte((,byte((> consumer = new KafkaConsumer<>(props,new ByteArrayDeserializer(),new ByteArrayDeserializer())@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "final int oldCloseCount = MockMetricsReporter.CLOSE_COUNT.get()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "props.setProperty(ProducerConfig.CLIENT_ID_CONFIG,\"testConstructorClose\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertEquals(\"Failed to construct kafka consumer\",e.getMessage())@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "props.setProperty(ConsumerConfig.CLIENT_ID_CONFIG,\"testConstructorClose\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "return@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "KafkaException e@@@12@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "testConstructorClose['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "Assert.fail(\"should have caught an exception and returned\")@@@18@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "new KafkaConsumer<>(props,new ByteArrayDeserializer(),new ByteArrayDeserializer())@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
23 [style = filled, label = "KafkaProducer<byte((,byte((> producer = new KafkaProducer<byte((,byte((>(props,new ByteArraySerializer(),new ByteArraySerializer())@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "Assert.assertEquals(oldInitCount + 1,MockMetricsReporter.INIT_COUNT.get())@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "props.setProperty(ProducerConfig.METRIC_REPORTER_CLASSES_CONFIG,.getName())@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17->10 [style = bold, label=""];
1->4 [style = bold, label=""];
15->10 [style = bold, label=""];
10->20 [style = bold, label=""];
16->18 [style = bold, label=""];
0->13 [style = dotted, label="true"];
0->13 [style = bold, label=""];
11->14 [style = bold, label=""];
4->6 [style = bold, label=""];
7->10 [style = bold, label=""];
0->19 [style = bold, label=""];
0->19 [style = dotted, label="true"];
3->18 [style = dashed, label="0"];
2->3 [style = bold, label=""];
0->4 [style = dotted, label="true"];
8->20 [style = dashed, label="0"];
10->23 [style = solid, label="props"];
10->12 [style = solid, label="props"];
11->12 [style = bold, label=""];
13->19 [style = dashed, label="0"];
12->6 [style = bold, label=""];
1->22 [style = dashed, label="0"];
0->22 [style = dotted, label="true"];
22->4 [style = bold, label=""];
3->5 [style = bold, label=""];
20->16 [style = bold, label=""];
0->21 [style = dotted, label="true"];
10->8 [style = bold, label=""];
8->2 [style = bold, label=""];
12->14 [style = dashed, label="0"];
21->22 [style = bold, label=""];
9->21 [style = dashed, label="0"];
18->5 [style = bold, label=""];
23->6 [style = bold, label=""];
2->16 [style = dashed, label="0"];
5->11 [style = bold, label=""];
13->9 [style = bold, label=""];
9->1 [style = bold, label=""];
11->23 [style = bold, label=""];
0->9 [style = dotted, label="true"];
14->6 [style = bold, label=""];
10->14 [style = solid, label="props"];
0->1 [style = dotted, label="true"];
19->21 [style = bold, label=""];
}
