digraph {
28 [style = filled, label = "f.checkNotImplies(node4,node6)@@@17@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "f.checkNotImplies(node1,node6)@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
43 [style = filled, label = "checkImplies(node1,node3)@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "f.checkNotImplies(node1,node3)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "f.checkImplies(node2,node1)@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
35 [style = filled, label = "checkImplies(node5,node2)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "f.checkImplies(node3,node1)@@@13@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "testSimpleGreaterCond['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "RexNode node3 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "RexNode node4 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@6@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "checkNotImplies(node1,node3)@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
41 [style = filled, label = "checkNotImplies(node3,node1)@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
39 [style = filled, label = "RexNode node5 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "checkNotImplies(node1,node2)@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "f.checkNotImplies(node1,node2)@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "RexNode node6 = rexBuilder.makeCall(SqlStdOperatorTable.NOT_EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@8@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "checkNotImplies(node2,node5)@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
36 [style = filled, label = "testSimpleLesserCond['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "RexNode node3 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@5@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "checkImplies(node2,node1)@@@9@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "f.checkNotImplies(node1,node5)@@@15@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
24 [style = filled, label = "testSimpleGreaterCond['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "RexNode node4 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN_OR_EQUAL,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "RexNode node5 = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@7@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "checkImplies(node5,node1)@@@13@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
42 [style = filled, label = "checkNotImplies(node4,node6)@@@17@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "final RexNode node1 = f.gt(f.i,f.literal(10))@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
9 [style = filled, label = "RexNode node2 = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(30)))@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "checkNotImplies(node2,node1)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final RexNode node5 = f.eq(f.i,f.literal(30))@@@8@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "checkImplies(node3,node1)@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "final RexNode node2 = f.gt(f.i,f.literal(30))@@@5@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "final RexNode node6 = f.ne(f.i,f.literal(10))@@@9@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "checkNotImplies(node1,node5)@@@14@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
32 [style = filled, label = "RexNode node1 = rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN,i,rexBuilder.makeExactLiteral(new BigDecimal(10)))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "checkNotImplies(node1,node5)@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "final Fixture f = new Fixture()@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "final RexNode node4 = f.ge(f.i,f.literal(10))@@@7@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "checkNotImplies(node1,node6)@@@16@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "final RexNode node3 = f.ge(f.i,f.literal(30))@@@6@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
25 [style = filled, label = "f.checkImplies(node5,node1)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
34 [style = filled, label = "checkImplies(node1,node2)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5->3 [style = bold, label=""];
32->4 [style = solid, label="node1"];
32->37 [style = bold, label=""];
17->28 [style = solid, label="node4"];
2->6 [style = bold, label=""];
11->16 [style = dashed, label="0"];
10->34 [style = dashed, label="0"];
6->10 [style = solid, label="node1"];
1->18 [style = dashed, label="0"];
5->25 [style = dashed, label="0"];
38->31 [style = bold, label=""];
37->34 [style = solid, label="node2"];
3->4 [style = bold, label=""];
30->29 [style = bold, label=""];
15->23 [style = solid, label="node3"];
22->19 [style = solid, label="node1"];
29->18 [style = bold, label=""];
30->20 [style = solid, label="node5"];
7->14 [style = bold, label=""];
1->40 [style = dashed, label="0"];
8->0 [style = bold, label=""];
15->17 [style = bold, label=""];
24->21 [style = bold, label=""];
37->38 [style = bold, label=""];
26->15 [style = bold, label=""];
32->43 [style = solid, label="node1"];
11->43 [style = dashed, label="0"];
19->28 [style = bold, label=""];
31->42 [style = solid, label="node4"];
27->25 [style = bold, label=""];
32->40 [style = solid, label="node1"];
39->33 [style = solid, label="node5"];
13->4 [style = solid, label="node6"];
22->23 [style = solid, label="node1"];
13->34 [style = bold, label=""];
13->42 [style = solid, label="node6"];
33->3 [style = bold, label=""];
9->10 [style = solid, label="node2"];
6->7 [style = solid, label="node1"];
6->32 [style = dashed, label="0"];
39->35 [style = solid, label="node5"];
0->4 [style = solid, label="node4"];
6->3 [style = solid, label="node1"];
32->3 [style = solid, label="node1"];
9->8 [style = bold, label=""];
1->11 [style = bold, label=""];
9->37 [style = dashed, label="0"];
13->3 [style = solid, label="node6"];
8->38 [style = dashed, label="0"];
21->22 [style = bold, label=""];
38->43 [style = solid, label="node3"];
37->40 [style = solid, label="node2"];
14->35 [style = dashed, label="0"];
20->19 [style = bold, label=""];
10->1 [style = bold, label=""];
12->14 [style = solid, label="node5"];
12->39 [style = dashed, label="0"];
38->41 [style = solid, label="node3"];
13->10 [style = bold, label=""];
22->26 [style = bold, label=""];
9->1 [style = solid, label="node2"];
7->23 [style = dashed, label="0"];
34->40 [style = bold, label=""];
39->13 [style = bold, label=""];
22->25 [style = solid, label="node1"];
0->12 [style = bold, label=""];
16->23 [style = bold, label=""];
32->34 [style = solid, label="node1"];
6->14 [style = solid, label="node1"];
15->27 [style = solid, label="node3"];
12->13 [style = bold, label=""];
29->28 [style = solid, label="node6"];
25->20 [style = bold, label=""];
26->16 [style = solid, label="node2"];
43->41 [style = bold, label=""];
4->19 [style = dashed, label="0"];
7->41 [style = dashed, label="0"];
31->39 [style = bold, label=""];
40->43 [style = bold, label=""];
22->18 [style = solid, label="node1"];
22->16 [style = solid, label="node1"];
14->5 [style = bold, label=""];
41->35 [style = bold, label=""];
8->7 [style = solid, label="node3"];
18->16 [style = bold, label=""];
6->1 [style = solid, label="node1"];
32->41 [style = solid, label="node1"];
23->27 [style = bold, label=""];
37->33 [style = solid, label="node2"];
8->11 [style = solid, label="node3"];
6->5 [style = solid, label="node1"];
35->33 [style = bold, label=""];
4->42 [style = bold, label=""];
36->32 [style = bold, label=""];
12->5 [style = solid, label="node5"];
17->30 [style = bold, label=""];
30->25 [style = solid, label="node5"];
14->27 [style = dashed, label="0"];
22->20 [style = solid, label="node1"];
29->19 [style = solid, label="node6"];
39->3 [style = solid, label="node5"];
6->11 [style = solid, label="node1"];
22->27 [style = solid, label="node1"];
3->20 [style = dashed, label="0"];
0->31 [style = dashed, label="0"];
26->18 [style = solid, label="node2"];
6->9 [style = bold, label=""];
11->7 [style = bold, label=""];
37->35 [style = solid, label="node2"];
}
