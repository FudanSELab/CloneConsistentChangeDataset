digraph {
10 [style = filled, label = "LeaderState<?> state = newLeaderState(singleton(localId),15L)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "assertEquals(Optional.empty(),state.highWatermark())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertTrue(state.updateLocalState(0,new LogOffsetMetadata(16L)))@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(16L)),state.highWatermark())@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertThrows(,null)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertEquals(emptySet(),state.nonAcknowledgingVoters())@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(Optional.of(new LogOffsetMetadata(20L)),state.highWatermark())@@@11@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "LeaderState state = newLeaderState(singleton(localId),15L)@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(Optional.empty(),state.highWatermark())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testUpdateHighWatermarkQuorumSizeOne['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "testUpdateHighWatermarkQuorumSizeOne['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
7 [style = filled, label = "assertFalse(state.updateLocalState(0,new LogOffsetMetadata(15L)))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "testNonMonotonicLocalEndOffsetUpdate['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertTrue(state.updateLocalState(0,new LogOffsetMetadata(20)))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3->13 [style = bold, label=""];
5->7 [style = bold, label=""];
6->4 [style = bold, label=""];
3->6 [style = bold, label=""];
5->8 [style = bold, label=""];
1->8 [style = bold, label=""];
10->5 [style = bold, label=""];
9->0 [style = bold, label=""];
6->13 [style = dashed, label="0"];
11->10 [style = bold, label=""];
7->2 [style = bold, label=""];
12->0 [style = bold, label=""];
2->1 [style = bold, label=""];
0->10 [style = dashed, label="0"];
0->5 [style = bold, label=""];
8->3 [style = bold, label=""];
}
