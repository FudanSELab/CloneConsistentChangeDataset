digraph {
17 [style = filled, label = "BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "BuiltinKeyGenerator keyGenerator = (BuiltinKeyGenerator)HoodieSparkKeyGeneratorFactory.createKeyGenerator(props)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Row row = KeyGeneratorTestUtilities.getRow(record)@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp())@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\")@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "TypedProperties props@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
6 [style = filled, label = "Assertions.fail(\"should fail when partition key field is provided in improper format!\")@@@16@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp())@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "BuiltinKeyGenerator keyGenerator = (BuiltinKeyGenerator)HoodieSparkKeyGeneratorFactory.createKeyGenerator(props)@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1 [style = filled, label = "Assertions.fail(\"should fail when partition key field is provided in improper format!\")@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\")@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "Exception e@@@8@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "testInvalidPartitionKeyType['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps())@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "testPartitionFieldsInImproperFormat['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
4 [style = filled, label = "keyGenerator.getPartitionPath(row)@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "GenericRecord record = getRecord()@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testPartitionFieldsInImproperFormat['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "keyGenerator.getKey(getRecord())@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17->10 [style = bold, label=""];
14->11 [style = solid, label="props"];
9->0 [style = bold, label=""];
4->6 [style = bold, label=""];
8->7 [style = solid, label="record"];
2->3 [style = bold, label=""];
4->19 [style = bold, label=""];
1->3 [style = bold, label=""];
18->17 [style = bold, label=""];
5->15 [style = bold, label=""];
7->4 [style = bold, label=""];
0->12 [style = dashed, label="0"];
0->17 [style = dashed, label="0"];
5->15 [style = dotted, label="true"];
8->7 [style = bold, label=""];
1->11 [style = bold, label=""];
2->15 [style = dashed, label="0"];
5->2 [style = bold, label=""];
0->10 [style = bold, label=""];
12->10 [style = bold, label=""];
20->8 [style = bold, label=""];
13->12 [style = bold, label=""];
10->16 [style = bold, label=""];
1->16 [style = dashed, label="0"];
15->20 [style = bold, label=""];
3->8 [style = bold, label=""];
3->20 [style = dashed, label="0"];
6->19 [style = dashed, label="0"];
7->4 [style = solid, label="row"];
11->8 [style = bold, label=""];
14->12 [style = solid, label="props"];
10->1 [style = bold, label=""];
16->20 [style = bold, label=""];
13->14 [style = dotted, label="true"];
2->11 [style = bold, label=""];
3->11 [style = dashed, label="0"];
5->2 [style = dotted, label="true"];
}
