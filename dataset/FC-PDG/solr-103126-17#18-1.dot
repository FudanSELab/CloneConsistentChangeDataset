digraph {
14 [style = filled, label = "versions.addFirst(addAndGetVersion(sdoc(\"id\",\"A1\"),null))@@@20@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "versions.addFirst(addAndGetVersion(sdoc(\"id\",\"A13\"),null))@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==3\")@@@40@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "versions.addFirst(addAndGetVersion(sdoc(\"id\",\"A12\",\"val_i_dvo\",map(\"set\",2)),null))@@@26@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "DirectUpdateHandler2.commitOnClose = false@@@4@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "UpdateLog.testing_logReplayHook = null@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertJQ(req(\"qt\",\"/get\",\"getVersions\",\"\" + versions.size()),\"/versions==\" + versions)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "h.close()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\")@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62 [style = filled, label = "UpdateLog.testing_logReplayFinishHook = null@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "assertTrue(replayingDocs.getValue().longValue() > 0)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
67 [style = filled, label = "testLogReplay['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "assertJQ(req(\"q\",\"val_i_dvo:2\"),\"/response/numFound==1\")@@@66@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\")@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
60 [style = filled, label = "TestInjection.skipIndexWriterCommitOnClose = true@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertEquals(UpdateLog.State.REPLAYING.ordinal(),state.getValue().intValue())@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "assertJQ(req(\"q\",\"id:A2\"),\"/response/numFound==0\")@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "assertU(commit())@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "assertJQ(req(\"q\",\"val_i_dvo:2\"),\"/response/numFound==1\")@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(UpdateLog.State.ACTIVE,h.getCore().getUpdateHandler().getUpdateLog().getState())@@@69@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "versions.addFirst(addAndGetVersion(sdoc(\"id\",\"A11\"),null))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "assertJQ(req(\"qt\",\"/get\",\"getVersions\",\"\" + versions.size()),\"/versions==\" + versions)@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "createCore()@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "assertEquals(UpdateLog.State.ACTIVE.ordinal(),state.getValue().intValue())@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\")@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
64 [style = filled, label = "assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==3\")@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "long initialOps = replayDocs.getCount()@@@42@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(logReplayFinish.tryAcquire(TIMEOUT,TimeUnit.SECONDS))@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "assertU(adoc(\"id\",\"A4\"))@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertEquals(permits,logReplay.availablePermits())@@@51@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "assertU(adoc(\"id\",\"A3\"))@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(logReplayFinish.tryAcquire(timeout,TimeUnit.SECONDS))@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "logReplay.release(1000)@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "int permits = logReplay.availablePermits()@@@47@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
51 [style = filled, label = "assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==5\")@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
66 [style = filled, label = "assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==5\")@@@44@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
61 [style = filled, label = "testLogReplay['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertJQ(req(\"qt\",\"/get\",\"getVersions\",\"\" + versions.size()),\"/versions==\" + versions)@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "assertEquals(UpdateLog.State.REPLAYING,h.getCore().getUpdateHandler().getUpdateLog().getState())@@@34@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertU(adoc(\"id\",\"A2\"))@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "final Semaphore logReplay = new Semaphore(0)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final Semaphore logReplayFinish = new Semaphore(0)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertU(delI(\"A2\"))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "createCore()@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "testLogReplay['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "assertTrue(logReplayFinish.tryAcquire(timeout,TimeUnit.SECONDS))@@@59@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "UpdateLog.testing_logReplayFinishHook = null@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
44 [style = filled, label = "createCore()@@@48@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertEquals(UpdateLog.State.ACTIVE,h.getCore().getUpdateHandler().getUpdateLog().getState())@@@52@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
59 [style = filled, label = "Map<String,Metric> metrics = getMetrics()@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
63 [style = filled, label = "{DirectUpdateHandler2.commitOnClose = trueUpdateLog.testing_logReplayHook = nullUpdateLog.testing_logReplayFinishHook = null}@@@54@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "clearIndex()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
54 [style = filled, label = "h.close()@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
65 [style = filled, label = "assertTrue(logReplayFinish.tryAcquire(TIMEOUT,TimeUnit.SECONDS))@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertJQ(req(\"qt\",\"/get\",\"getVersions\",\"\" + versions.size()),\"/versions==\" + versions)@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "Thread.sleep(100)@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertTrue(replayingLogs.getValue().intValue() > 0)@@@38@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "h.close()@@@41@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "Deque<Long> versions = new ArrayDeque<>()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "versions.addFirst(addAndGetVersion(sdoc(\"id\",\"A12\"),null))@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\")@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\",null))@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\")@@@41@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertJQ(req(\"q\",\"val_i_dvo:2\"),\"/response/numFound==1\")@@@56@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "versions.addFirst(addAndGetVersion(sdoc(\"id\",\"A12\",\"val_i_dvo\",map(\"set\",1)),null))@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
58 [style = filled, label = "{UpdateLog.testing_logReplayHook = nullUpdateLog.testing_logReplayFinishHook = null}@@@71@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "assertEquals(7L,replayDocs.getCount() - initialOps)@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
62->13 [style = bold, label=""];
34->46 [style = bold, label=""];
10->66 [style = bold, label=""];
6->35 [style = bold, label=""];
56->1 [style = bold, label=""];
55->13 [style = bold, label=""];
36->12 [style = bold, label=""];
45->24 [style = bold, label=""];
32->6 [style = bold, label=""];
47->11 [style = bold, label=""];
44->51 [style = bold, label=""];
26->20 [style = solid, label="versions"];
24->49 [style = bold, label=""];
55->62 [style = dashed, label="0"];
19->63 [style = bold, label=""];
27->45 [style = bold, label=""];
24->17 [style = bold, label=""];
20->37 [style = bold, label=""];
66->29 [style = bold, label=""];
1->31 [style = bold, label=""];
43->44 [style = bold, label=""];
16->3 [style = bold, label=""];
30->41 [style = bold, label=""];
28->5 [style = bold, label=""];
12->60 [style = dashed, label="0"];
39->34 [style = bold, label=""];
18->11 [style = bold, label=""];
26->14 [style = bold, label=""];
37->21 [style = bold, label=""];
23->3 [style = bold, label=""];
12->48 [style = bold, label=""];
21->59 [style = bold, label=""];
19->2 [style = bold, label=""];
9->8 [style = bold, label=""];
5->25 [style = bold, label=""];
60->48 [style = bold, label=""];
13->57 [style = bold, label=""];
8->62 [style = bold, label=""];
26->28 [style = solid, label="versions"];
38->65 [style = bold, label=""];
51->18 [style = bold, label=""];
27->65 [style = dashed, label="0"];
53->33 [style = bold, label=""];
14->52 [style = bold, label=""];
21->7 [style = bold, label=""];
8->55 [style = bold, label=""];
40->29 [style = bold, label=""];
0->39 [style = bold, label=""];
44->19 [style = solid, label="permits"];
59->7 [style = bold, label=""];
18->47 [style = bold, label=""];
54->43 [style = bold, label=""];
50->17 [style = bold, label=""];
57->26 [style = bold, label=""];
26->38 [style = solid, label="versions"];
38->27 [style = bold, label=""];
67->12 [style = bold, label=""];
29->54 [style = bold, label=""];
42->0 [style = bold, label=""];
49->50 [style = bold, label=""];
7->28 [style = bold, label=""];
31->10 [style = bold, label=""];
40->10 [style = dashed, label="0"];
10->40 [style = bold, label=""];
41->16 [style = bold, label=""];
43->11 [style = solid, label="permits"];
16->15 [style = bold, label=""];
15->23 [style = bold, label=""];
26->24 [style = solid, label="versions"];
61->60 [style = bold, label=""];
65->64 [style = bold, label=""];
46->53 [style = bold, label=""];
4->42 [style = bold, label=""];
25->4 [style = bold, label=""];
22->31 [style = bold, label=""];
48->9 [style = bold, label=""];
17->32 [style = bold, label=""];
2->58 [style = bold, label=""];
11->19 [style = bold, label=""];
35->56 [style = bold, label=""];
64->24 [style = bold, label=""];
1->22 [style = bold, label=""];
3->20 [style = bold, label=""];
28->33 [style = bold, label=""];
26->17 [style = solid, label="versions"];
33->38 [style = bold, label=""];
53->49 [style = solid, label="initialOps"];
52->30 [style = bold, label=""];
}
