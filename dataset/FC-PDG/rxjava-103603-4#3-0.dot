digraph {
6 [style = filled, label = "testSubscriber.assertValues(0,1,2,3,4,5,6)@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "return flowable@@@19@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "backpressureWithTakeBefore['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TestSubscriber<Integer> testSubscriber = new TestSubscriber<Integer>()@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Flowable<Integer> flowable = Flowable.fromIterable(new Iterable<Integer>(){@Override public Iterator<Integer> iterator(){return new Iterator<Integer>(){@Override public void remove(){}@Override public Integer next(){return generated.getAndIncrement()}@Override public boolean hasNext(){return true}}}})@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestSubscriber<Integer> testSubscriber = new TestSubscriber<>()@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "final AtomicInteger generated@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "backpressureWithTakeBefore['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "testSubscriber.awaitDone(5,TimeUnit.SECONDS)@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "assertEquals(7,generated.get())@@@24@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "flowable.take(7).observeOn(Schedulers.newThread()).subscribe(testSubscriber)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "createInfiniteFlowable['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final AtomicInteger generated = new AtomicInteger()@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Flowable<Integer> flowable = Flowable.fromIterable(new Iterable<Integer>(){@Override public Iterator<Integer> iterator(){return new Iterator<Integer>(){@Override public void remove(){}@Override public Integer next(){return generated.getAndIncrement()}@Override public boolean hasNext(){return true}}}})@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1->5 [style = bold, label=""];
8->0 [style = bold, label=""];
5->8 [style = dashed, label="0"];
6->3 [style = bold, label=""];
10->13 [style = solid, label="flowable"];
4->1 [style = bold, label=""];
12->10 [style = bold, label=""];
1->8 [style = bold, label=""];
7->4 [style = bold, label=""];
5->0 [style = bold, label=""];
10->13 [style = bold, label=""];
2->6 [style = bold, label=""];
5->0 [style = solid, label="testSubscriber"];
12->11 [style = dotted, label="true"];
9->4 [style = bold, label=""];
0->2 [style = bold, label=""];
8->0 [style = solid, label="testSubscriber"];
}
