digraph {
5 [style = filled, label = "assertThat(lower,equalTo(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c883c4),new SessionWindow(0,0)))))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "assertThat(upper,equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c883f4),new SessionWindow(0,Long.MAX_VALUE))))))@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "final Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c8837d),Long.MAX_VALUE)@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "final Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c883dc),0)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "testLowerBoundMatchesTrailingZeros['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1 [style = filled, label = "testLowerBoundMatchesTrailingZeros['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "assertThat(lower,equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c88365),new SessionWindow(0,0))))))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "assertThat(\"appending zeros to key should still be in range\",lower.compareTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c88334),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE))))) < 0)@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
7 [style = filled, label = "testUpperBoundWithZeroTimestamp['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "assertThat(\"appending zeros to key should still be in range\",lower.compareTo(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@c88396),new SessionWindow(Long.MAX_VALUE,Long.MAX_VALUE)))) < 0)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
1->3 [style = bold, label=""];
3->8 [style = dashed, label="0"];
6->3 [style = bold, label=""];
2->0 [style = bold, label=""];
3->2 [style = bold, label=""];
0->5 [style = dashed, label="0"];
7->8 [style = bold, label=""];
3->0 [style = solid, label="lower"];
2->9 [style = dashed, label="0"];
4->5 [style = bold, label=""];
3->4 [style = bold, label=""];
8->9 [style = solid, label="upper"];
2->4 [style = dashed, label="0"];
8->9 [style = bold, label=""];
3->5 [style = solid, label="lower"];
}
