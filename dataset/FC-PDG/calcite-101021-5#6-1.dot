digraph {
1 [style = filled, label = "QueryProvider queryProvider = connection.unwrap()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "assertEquals(2,list.get(0).length)@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Connection connection = CalciteAssert.getConnection(\"hr\",\"foodmart\")@@@3@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"SEBASTIAN\",list.get(0)(1()@@@10@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "ParameterExpression e = Expressions.parameter(,\"e\")@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "Connection connection = CalciteAssert.that(CalciteAssert.Config.REGULAR).connect()@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "testQueryProviderSingleColumn['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "assertEquals(Arrays.asList(100,200,150,110),list)@@@7@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "List<Object((> list = queryProvider.createQuery(Expressions.call(Expressions.call(Types.of(,),null,LINQ4J_AS_ENUMERABLE_METHOD,Expressions.constant(new JdbcTest.HrSchema().emps)),\"asQueryable\"),).where(Expressions.lambda(Expressions.lessThan(Expressions.field(e,\"empid\"),Expressions.constant(160)),e)).where(Expressions.lambda(Expressions.greaterThan(Expressions.field(e,\"empid\"),Expressions.constant(140)),e)).select(Expressions.lambda(Expressions.new_(,Expressions.field(e,\"empid\"),Expressions.call(Expressions.field(e,\"name\"),\"toUpperCase\")),e)).toList()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "testQueryProvider['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertEquals(1,list.size())@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertEquals(150,list.get(0)(0()@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<Integer> list = queryProvider.createQuery(Expressions.call(Expressions.call(Types.of(,),null,LINQ4J_AS_ENUMERABLE_METHOD,Arrays.asList(Expressions.constant(new JdbcTest.HrSchema().emps))),\"asQueryable\"),).select(Expressions.lambda(Expressions.field(e,\"empid\"),e)).toList()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "testQueryProvider['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
1->5 [style = bold, label=""];
12->13 [style = bold, label=""];
10->9 [style = bold, label=""];
11->0 [style = bold, label=""];
2->7 [style = bold, label=""];
8->4 [style = bold, label=""];
5->6 [style = bold, label=""];
9->1 [style = bold, label=""];
0->9 [style = dashed, label="0"];
5->12 [style = bold, label=""];
7->8 [style = bold, label=""];
2->13 [style = dashed, label="0"];
0->1 [style = bold, label=""];
3->0 [style = bold, label=""];
6->2 [style = bold, label=""];
12->13 [style = solid, label="list"];
}
