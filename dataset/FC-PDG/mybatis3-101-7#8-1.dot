digraph {
26 [style = filled, label = "assertTrue(meta.hasSetter(\"richType\"))@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "assertTrue(meta.hasGetter(\"richMap\"))@@@8@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "assertTrue(meta.hasGetter(\"richField\"))@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertEquals(\"richType.richProperty\",meta.findProperty(\"richType.richProperty\",false))@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richProperty\"))@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "shouldCheckGetterExistance['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "assertTrue(meta.hasGetter(\"richList(0(\"))@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ReflectorFactory reflectorFactory = new DefaultReflectorFactory()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richMap\"))@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "assertTrue(meta.hasSetter(\"richMap\"))@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "shouldCheckGetterExistance['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richList(0(\"))@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "assertTrue(meta.hasSetter(\"richField\"))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "assertTrue(meta.hasSetter(\"richList\"))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertFalse(meta.hasGetter(\"(0(\"))@@@17@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richList(0(\"))@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
12 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richMap\"))@@@14@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richList\"))@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "assertTrue(meta.hasSetter(\"richList(0(\"))@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richField\"))@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richField\"))@@@11@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "assertTrue(meta.hasGetter(\"richType\"))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "assertTrue(meta.hasSetter(\"richType.richList\"))@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "shouldCheckSetterExistance['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertFalse(meta.hasSetter(\"(0(\"))@@@16@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "assertTrue(meta.hasGetter(\"richProperty\"))@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "MetaClass meta = MetaClass.forClass(,reflectorFactory)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertTrue(meta.hasGetter(\"richType.richProperty\"))@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertTrue(meta.hasGetter(\"richList\"))@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertTrue(meta.hasSetter(\"richProperty\"))@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2->23 [style = dashed, label="0"];
8->10 [style = bold, label=""];
4->3 [style = bold, label=""];
18->24 [style = bold, label=""];
7->5 [style = solid, label="reflectorFactory"];
15->7 [style = bold, label=""];
5->23 [style = bold, label=""];
11->1 [style = bold, label=""];
19->29 [style = bold, label=""];
26->25 [style = bold, label=""];
16->7 [style = bold, label=""];
0->11 [style = bold, label=""];
12->6 [style = bold, label=""];
0->17 [style = dashed, label="0"];
1->13 [style = bold, label=""];
22->7 [style = bold, label=""];
21->28 [style = bold, label=""];
14->26 [style = dashed, label="0"];
20->21 [style = bold, label=""];
6->4 [style = bold, label=""];
5->2 [style = bold, label=""];
7->5 [style = bold, label=""];
2->0 [style = bold, label=""];
25->20 [style = bold, label=""];
13->27 [style = dashed, label="0"];
9->21 [style = dashed, label="0"];
1->24 [style = dashed, label="0"];
11->18 [style = dashed, label="0"];
12->28 [style = dashed, label="0"];
6->19 [style = dashed, label="0"];
28->19 [style = bold, label=""];
8->25 [style = dashed, label="0"];
23->17 [style = bold, label=""];
10->20 [style = dashed, label="0"];
14->8 [style = bold, label=""];
10->9 [style = bold, label=""];
9->12 [style = bold, label=""];
13->14 [style = bold, label=""];
24->27 [style = bold, label=""];
17->18 [style = bold, label=""];
27->26 [style = bold, label=""];
}
