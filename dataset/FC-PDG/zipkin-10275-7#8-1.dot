digraph {
1 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\").timestamp(TODAY * 1000L).duration(350L * 1000L).localEndpoint(someClient).remoteEndpoint(FRONTEND).build(),Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\").timestamp((TODAY + 50) * 1000L).duration(250L * 1000L).localEndpoint(FRONTEND).remoteEndpoint(BACKEND).build(),Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\").timestamp((TODAY + 150) * 1000L).duration(50L * 1000L).localEndpoint(BACKEND).remoteEndpoint(DB).build())@@@4@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "Endpoint kafka = suffixServiceName(TestObjects.KAFKA,testSuffix)@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
9 [style = filled, label = "String testSuffix = testSuffix(testInfo)@@@3@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
17 [style = filled, label = "unnamedEndpointsAreSkipped['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "Endpoint db = suffixServiceName(TestObjects.DB,testSuffix)@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
15 [style = filled, label = "spanKindIsNotRequiredWhenEndpointsArePresent['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
6 [style = filled, label = "String traceId = newTraceId()@@@4@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "TestInfo testInfo@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "Endpoint backend = suffixServiceName(TestObjects.BACKEND,testSuffix)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "spanKindIsNotRequiredWhenEndpointsArePresent['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(store().getDependencies(TODAY + 1000,1000L).execute()).containsOnly(DependencyLink.newBuilder().parent(kafka.serviceName()).child(frontend.serviceName()).callCount(1).build(),DependencyLink.newBuilder().parent(frontend.serviceName()).child(backend.serviceName()).callCount(1).build(),DependencyLink.newBuilder().parent(backend.serviceName()).child(db.serviceName()).callCount(1).build())@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
4 [style = filled, label = "assertThat(store().getDependencies(TODAY + 1000,1000L).execute()).containsOnly(DependencyLink.newBuilder().parent(\"some-client\").child(\"frontend\").callCount(1).build(),DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build())@@@6@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
13 [style = filled, label = "Endpoint frontend = suffixServiceName(TestObjects.FRONTEND,testSuffix)@@@6@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "processDependencies(trace)@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "Endpoint someClient = Endpoint.newBuilder().serviceName(\"some-client\").ip(\"172.17.0.4\").build()@@@3@@@['1', '0', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(traceId).id(\"20\").name(\"get\").timestamp(TODAY * 1000L).duration(350L * 1000L).localEndpoint(kafka).remoteEndpoint(frontend).build(),Span.newBuilder().traceId(traceId).parentId(\"20\").id(\"21\").name(\"get\").timestamp((TODAY + 50) * 1000L).duration(250L * 1000L).localEndpoint(frontend).remoteEndpoint(backend).build(),Span.newBuilder().traceId(traceId).parentId(\"21\").id(\"22\").name(\"get\").timestamp((TODAY + 150) * 1000L).duration(50L * 1000L).localEndpoint(backend).remoteEndpoint(db).build())@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "List<Span> trace = asList(Span.newBuilder().traceId(\"20\").id(\"20\").name(\"get\").timestamp(TODAY * 1000L).duration(350L * 1000L).localEndpoint(Endpoint.newBuilder().ip(\"172.17.0.4\").build()).remoteEndpoint(FRONTEND).build(),Span.newBuilder().traceId(\"20\").parentId(\"20\").id(\"21\").name(\"get\").timestamp((TODAY + 50) * 1000L).duration(250L * 1000L).localEndpoint(FRONTEND).remoteEndpoint(BACKEND).build(),Span.newBuilder().traceId(\"20\").parentId(\"21\").id(\"22\").name(\"get\").timestamp((TODAY + 150) * 1000L).duration(50L * 1000L).localEndpoint(BACKEND).remoteEndpoint(DB).build())@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "assertThat(store().getDependencies(TODAY + 1000,1000L).execute()).containsOnly(DependencyLink.newBuilder().parent(\"frontend\").child(\"backend\").callCount(1).build(),DependencyLink.newBuilder().parent(\"backend\").child(\"db\").callCount(1).build())@@@5@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "processDependencies(trace)@@@10@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
15->5 [style = dotted, label="true"];
16->3 [style = bold, label=""];
8->10 [style = bold, label=""];
7->11 [style = bold, label=""];
18->16 [style = solid, label="trace"];
9->7 [style = solid, label="testSuffix"];
1->3 [style = solid, label="trace"];
1->3 [style = bold, label=""];
11->12 [style = bold, label=""];
3->4 [style = bold, label=""];
5->9 [style = solid, label="testInfo"];
9->6 [style = bold, label=""];
6->14 [style = bold, label=""];
9->14 [style = solid, label="testSuffix"];
2->0 [style = bold, label=""];
9->13 [style = solid, label="testSuffix"];
15->9 [style = bold, label=""];
13->7 [style = bold, label=""];
0->1 [style = bold, label=""];
12->8 [style = bold, label=""];
4->3 [style = dashed, label="0"];
0->18 [style = dashed, label="0"];
14->13 [style = bold, label=""];
4->10 [style = dashed, label="0"];
17->18 [style = bold, label=""];
12->8 [style = solid, label="trace"];
9->11 [style = solid, label="testSuffix"];
18->16 [style = bold, label=""];
}
