digraph {
21 [style = filled, label = "final ByteBufferVendor inputSharingImpl = (ByteBufferVendor)inputSharing@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
3 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "verify(mockChannel,times(1)).read(isA())@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertThat(data.limit()).isEqualTo(individualRead * testSSLEngine.getNumberOfUnwraps() + preexistingBytes)@@@30@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "int initialFreeSpace = initialUnwrappedBufferSize - preexistingBytes@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "ByteBuffer data = sharedBuffer.getBuffer()@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "final int individualRead = 150@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "inputSharingImpl.setBufferForTestingOnly(unwrappedBuffer)@@@13@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "assertThat(inputSharing.getBuffer().capacity()).isEqualTo(2 * initialFreeSpace + preexistingBytes)@@@33@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "readAtLeastUsingSmallAppBufferAtWriteLimit['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "nioSslEngine.engine = testSSLEngine@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "final int individualRead = 60@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "final int amountToRead = 150@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "readAtLeastUsingSmallAppBuffer['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
28 [style = filled, label = "final int preexistingBytes = initialUnwrappedBufferSize - 7@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
4 [style = filled, label = "final ByteBufferSharingImpl inputSharingImpl = (ByteBufferSharingImpl)inputSharing@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
12 [style = filled, label = "TestSSLEngine testSSLEngine = new TestSSLEngine()@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "int initialUnwrappedBufferSize = 100@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "ByteBuffer wrappedBuffer = ByteBuffer.allocate(1000)@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ByteBuffer unwrappedBuffer = ByteBuffer.allocate(initialUnwrappedBufferSize)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "assertThat(data.position()).isEqualTo(0)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "SocketChannel mockChannel = mock()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final int preexistingBytes = 10@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "unwrappedBuffer.position(7).limit(preexistingBytes + 7)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
1 [style = filled, label = "readAtLeastUsingSmallAppBuffer['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "when(mockChannel.read(any())).thenAnswer(new Answer<Integer>(){@Override public Integer answer(InvocationOnMock invocation){ByteBuffer buffer = invocation.getArgument(0)buffer.position(buffer.position() + individualRead)return individualRead}})@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "testSSLEngine.addReturnResult(new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(BUFFER_OVERFLOW,NEED_UNWRAP,0,0),new SSLEngineResult(OK,NEED_UNWRAP,0,0))@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
0->3 [style = bold, label=""];
29->8 [style = bold, label=""];
15->10 [style = bold, label=""];
10->20 [style = bold, label=""];
9->11 [style = solid, label="preexistingBytes"];
22->16 [style = bold, label=""];
18->30 [style = dashed, label="0"];
16->6 [style = bold, label=""];
15->5 [style = solid, label="initialUnwrappedBufferSize"];
28->25 [style = solid, label="preexistingBytes"];
11->26 [style = dashed, label="0"];
8->31 [style = solid, label="testSSLEngine"];
28->7 [style = bold, label=""];
23->32 [style = bold, label=""];
18->30 [style = bold, label=""];
9->17 [style = bold, label=""];
31->18 [style = bold, label=""];
4->2 [style = bold, label=""];
16->23 [style = bold, label=""];
27->16 [style = bold, label=""];
10->2 [style = solid, label="unwrappedBuffer"];
15->10 [style = solid, label="initialUnwrappedBufferSize"];
23->29 [style = solid, label="individualRead"];
4->21 [style = dashed, label="0"];
20->25 [style = bold, label=""];
8->24 [style = dashed, label="0"];
25->2 [style = bold, label=""];
9->19 [style = solid, label="preexistingBytes"];
20->4 [style = bold, label=""];
21->2 [style = bold, label=""];
2->13 [style = bold, label=""];
3->18 [style = bold, label=""];
20->21 [style = bold, label=""];
17->7 [style = bold, label=""];
8->0 [style = bold, label=""];
5->19 [style = bold, label=""];
33->29 [style = bold, label=""];
23->26 [style = solid, label="individualRead"];
11->5 [style = bold, label=""];
30->11 [style = bold, label=""];
13->12 [style = bold, label=""];
28->26 [style = solid, label="preexistingBytes"];
6->13 [style = solid, label="individualRead"];
24->31 [style = bold, label=""];
32->28 [style = solid, label="initialUnwrappedBufferSize"];
1->16 [style = bold, label=""];
12->8 [style = bold, label=""];
15->20 [style = bold, label=""];
6->23 [style = dashed, label="0"];
2->33 [style = bold, label=""];
7->15 [style = bold, label=""];
12->0 [style = solid, label="testSSLEngine"];
32->20 [style = solid, label="initialUnwrappedBufferSize"];
6->9 [style = bold, label=""];
6->11 [style = solid, label="individualRead"];
20->33 [style = solid, label="unwrappedBuffer"];
14->11 [style = bold, label=""];
32->28 [style = bold, label=""];
18->14 [style = bold, label=""];
5->19 [style = solid, label="initialFreeSpace"];
9->5 [style = solid, label="preexistingBytes"];
11->26 [style = bold, label=""];
9->20 [style = solid, label="preexistingBytes"];
8->24 [style = bold, label=""];
}
