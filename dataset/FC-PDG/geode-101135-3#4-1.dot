digraph {
6 [style = filled, label = "assertThat(caughtException).isInstanceOf()@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "containsKeyThrowsTransactionExceptionIfIsBucketNotFoundException['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "when(partitionedRegion.containsValueForKeyRemotely((InternalDistributedMember)remoteTransactionHost,1,key)).thenThrow(forceReattemptException)@@@8@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "Throwable caughtException = catchThrowable(null)@@@9@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ForceReattemptException forceReattemptException = new ForceReattemptException(\"Test FRE\")@@@5@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
14 [style = filled, label = "verify(stub,never()).trackBucketForTx(keyInfo)@@@11@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "verify(stub,never()).trackBucketForTx(keyInfo)@@@12@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "ForceReattemptException forceReattemptException = mock()@@@5@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "when(event.getRegion()).thenReturn(partitionedRegion)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "containsKeyThrowsTransactionExceptionIfIsBucketNotFoundException['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
13 [style = filled, label = "containsValueForKeyThrowsTransactionExceptionIfIsBucketNotFoundException['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "PartitionedTXRegionStub stub = spy(new PartitionedTXRegionStub(txStateStub,partitionedRegion))@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "Throwable caughtException = catchThrowable(null)@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(caughtException).isInstanceOf()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "doReturn(true).when(stub).isBucketNotFoundException(forceReattemptException)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "doReturn(expectedException).when(stub).getTransactionException(keyInfo,forceReattemptException)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "when(partitionedRegion.containsKeyRemotely((InternalDistributedMember)remoteTransactionHost,1,key)).thenThrow(forceReattemptException)@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1->5 [style = bold, label=""];
5->3 [style = bold, label=""];
4->14 [style = bold, label=""];
8->4 [style = solid, label="forceReattemptException"];
9->2 [style = bold, label=""];
11->1 [style = bold, label=""];
11->1 [style = solid, label="forceReattemptException"];
11->4 [style = solid, label="forceReattemptException"];
1->3 [style = bold, label=""];
0->11 [style = bold, label=""];
3->15 [style = bold, label=""];
15->16 [style = bold, label=""];
11->3 [style = solid, label="forceReattemptException"];
10->6 [style = bold, label=""];
4->7 [style = bold, label=""];
8->1 [style = solid, label="forceReattemptException"];
8->1 [style = bold, label=""];
3->10 [style = bold, label=""];
6->4 [style = bold, label=""];
12->2 [style = bold, label=""];
2->0 [style = bold, label=""];
8->3 [style = solid, label="forceReattemptException"];
11->5 [style = solid, label="forceReattemptException"];
0->8 [style = bold, label=""];
16->4 [style = bold, label=""];
8->11 [style = dashed, label="0"];
8->5 [style = solid, label="forceReattemptException"];
8->15 [style = solid, label="forceReattemptException"];
13->2 [style = bold, label=""];
}
