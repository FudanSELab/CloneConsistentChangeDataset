digraph {
16 [style = filled, label = "return new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@16@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
2 [style = filled, label = "BinaryOperationExpression result = new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "String text = ctx.start.getInputStream().getText(new Interval(ctx.start.getStartIndex(),ctx.stop.getStopIndex()))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "final ExprContext ctx@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "visitExpr['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
5 [style = filled, label = "NotExpression result = new NotExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),(ExpressionSegment)visit(ctx.expr(0)))@@@17@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "ExpressionSegment left = (ExpressionSegment)visit(ctx.expr(0))@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "String operator = ctx.logicalOperator().getText()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "visitExpr['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "ExpressionSegment right = (ExpressionSegment)visit(ctx.expr(1))@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "return result@@@18@@@['1', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "null != ctx.booleanPrimary()@@@3@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "return visit(ctx.booleanPrimary())@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "null != ctx.logicalOperator()@@@9@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "return result@@@15@@@['1', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "return visit(ctx.expr(0))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "return new BinaryOperationExpression(ctx.start.getStartIndex(),ctx.stop.getStopIndex(),left,right,operator,text)@@@14@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
7 [style = filled, label = "null != ctx.LP_()@@@6@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "visitExpr['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
7->13 [style = bold, label=""];
13->6 [style = dotted, label="true"];
13->10 [style = bold, label=""];
14->2 [style = solid, label="text"];
13->17 [style = dotted, label="true"];
2->6 [style = solid, label="result"];
0->13 [style = bold, label=""];
13->12 [style = dotted, label="true"];
2->6 [style = bold, label=""];
8->3 [style = bold, label=""];
14->17 [style = bold, label=""];
7->0 [style = bold, label=""];
11->12 [style = bold, label=""];
7->0 [style = dotted, label="true"];
13->10 [style = dotted, label="true"];
9->8 [style = bold, label=""];
2->17 [style = dashed, label="0"];
13->16 [style = bold, label=""];
8->3 [style = dotted, label="true"];
15->4 [style = dotted, label="true"];
11->17 [style = solid, label="right"];
8->7 [style = bold, label=""];
12->2 [style = solid, label="operator"];
5->16 [style = dashed, label="0"];
13->2 [style = dotted, label="true"];
5->1 [style = bold, label=""];
6->5 [style = bold, label=""];
11->2 [style = solid, label="right"];
14->17 [style = solid, label="text"];
3->7 [style = bold, label=""];
12->17 [style = solid, label="operator"];
10->2 [style = solid, label="left"];
12->14 [style = bold, label=""];
13->5 [style = bold, label=""];
5->1 [style = solid, label="result"];
9->4 [style = dotted, label="true"];
13->11 [style = dotted, label="true"];
14->2 [style = bold, label=""];
18->8 [style = bold, label=""];
18->4 [style = dotted, label="true"];
10->17 [style = solid, label="left"];
13->14 [style = dotted, label="true"];
15->8 [style = bold, label=""];
17->16 [style = bold, label=""];
10->11 [style = bold, label=""];
}
