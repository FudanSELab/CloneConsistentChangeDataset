digraph {
8 [style = filled, label = "captured = Capture.newInstance(CaptureType.ALL)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "replayAll()@@@14@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "final TaskLocation location = new TaskLocation(\"testHost\",1234,-1)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Capture<Task> captured = Capture.newInstance(CaptureType.ALL)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "checkpoints1.put(0,ImmutableMap.of(0,0L,2,0L))@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes()@@@34@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "testKillUnresponsiveTasksWhileSettingEndOffsets['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
25 [style = filled, label = "supervisor = getSupervisor(2,2,true,\"PT1M\",null,null,false)@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "checkpoints2.put(0,ImmutableMap.of(1,0L))@@@27@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes()@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "KafkaIOConfig taskConfig = ((KafkaIndexTask)task).getIOConfig()@@@49@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints2 = new TreeMap<>()@@@26@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
33 [style = filled, label = "Collection workItems = new ArrayList<>()@@@19@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "testKillUnresponsiveTasksWhilePausing['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
11 [style = filled, label = "expect(taskClient.pauseAsync(EasyMock.contains(\"sequenceName-0\"))).andReturn(Futures.immediateFailedFuture(new RuntimeException())).times(2)@@@40@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "taskQueue.shutdown(EasyMock.contains(\"sequenceName-0\"),EasyMock.eq(\"Task (%s( failed to respond to (pause( in a timely manner, killing task\"),EasyMock.contains(\"sequenceName-0\"))@@@41@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
44 [style = filled, label = "testKillUnresponsiveTasksWhilePausing['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
31 [style = filled, label = "expect(taskClient.getStartTimeAsync(EasyMock.contains(\"sequenceName-1\"))).andReturn(Futures.immediateFuture(DateTimes.nowUtc())).times(2)@@@39@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true).times(2)@@@44@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
34 [style = filled, label = "expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes()@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-1\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints2)).times(2)@@@29@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes()@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "taskRunner.registerListener(anyObject(),anyObject())@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "verifyAll()@@@17@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "List<Task> tasks = captured.getValues()@@@18@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
49 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionOffsetMap().get(2))@@@51@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "expect(taskClient.getStartTimeAsync(EasyMock.contains(\"sequenceName-0\"))).andReturn(Futures.immediateFuture(DateTimes.nowUtc().minusMinutes(2))).andReturn(Futures.immediateFuture(DateTimes.nowUtc()))@@@38@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
38 [style = filled, label = "addSomeEvents(100)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
50 [style = filled, label = "expect(taskClient.pauseAsync(EasyMock.contains(\"sequenceName-0\"))).andReturn(Futures.immediateFuture((Map<Integer,Long>)ImmutableMap.of(0,10L,1,20L,2,30L))).andReturn(Futures.immediateFuture((Map<Integer,Long>)ImmutableMap.of(0,10L,1,15L,2,35L)))@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
26 [style = filled, label = "taskQueue.shutdown(EasyMock.contains(\"sequenceName-0\"))@@@41@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "workItems.add(new TestTaskRunnerWorkItem(task,null,location))@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
42 [style = filled, label = "expect(taskQueue.add(capture(captured))).andReturn(true).times(4)@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "replay(taskStorage,taskRunner,taskClient,taskQueue)@@@45@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "expect(taskClient.getStatusAsync(anyString())).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING)).anyTimes()@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
43 [style = filled, label = "reset(taskStorage,taskRunner,taskClient,taskQueue)@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
41 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes()@@@10@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
47 [style = filled, label = "expect(taskClient.setEndOffsetsAsync(EasyMock.contains(\"sequenceName-0\"),EasyMock.eq(ImmutableMap.of(0,10L,1,20L,2,35L)),EasyMock.eq(true))).andReturn(Futures.immediateFailedFuture(new RuntimeException())).times(2)@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
14 [style = filled, label = "Assert.assertEquals(0L,(long)taskConfig.getStartPartitions().getPartitionOffsetMap().get(0))@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "supervisor.runInternal()@@@46@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "supervisor.runInternal()@@@16@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "KafkaIOConfig taskConfig = ((KafkaIndexTask)task).getIOConfig()@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "TreeMap<Integer,Map<Integer,Long>> checkpoints1 = new TreeMap<>()@@@24@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "taskQueue.shutdown(EasyMock.contains(\"sequenceName-0\"))@@@42@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
32 [style = filled, label = "expectLastCall().times(2)@@@43@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes()@@@33@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "expect(taskStorage.getActiveTasks()).andReturn(tasks).anyTimes()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "supervisor.start()@@@15@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "expect(taskClient.getCheckpointsAsync(EasyMock.contains(\"sequenceName-0\"),anyBoolean())).andReturn(Futures.immediateFuture(checkpoints1)).times(2)@@@28@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
46 [style = filled, label = "verifyAll()@@@47@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
40->4 [style = bold, label=""];
17->25 [style = bold, label=""];
43->16 [style = bold, label=""];
27->1 [style = bold, label=""];
14->49 [style = bold, label=""];
26->45 [style = dashed, label="0"];
1->40 [style = bold, label=""];
22->37 [style = bold, label=""];
3->31 [style = bold, label=""];
21->15 [style = bold, label=""];
11->50 [style = dashed, label="0"];
6->42 [style = bold, label=""];
11->45 [style = bold, label=""];
14->10 [style = bold, label=""];
9->17 [style = bold, label=""];
17->2 [style = solid, label="location"];
18->36 [style = bold, label=""];
4->29 [style = bold, label=""];
41->6 [style = bold, label=""];
49->23 [style = bold, label=""];
36->12 [style = bold, label=""];
42->24 [style = bold, label=""];
26->19 [style = bold, label=""];
48->17 [style = bold, label=""];
44->17 [style = bold, label=""];
34->30 [style = bold, label=""];
31->11 [style = bold, label=""];
15->35 [style = bold, label=""];
8->22 [style = bold, label=""];
5->34 [style = bold, label=""];
23->14 [style = bold, label=""];
37->5 [style = bold, label=""];
31->50 [style = bold, label=""];
11->26 [style = bold, label=""];
29->33 [style = bold, label=""];
12->10 [style = bold, label=""];
19->32 [style = bold, label=""];
12->46 [style = bold, label=""];
30->3 [style = bold, label=""];
7->39 [style = bold, label=""];
10->23 [style = bold, label=""];
45->19 [style = bold, label=""];
16->21 [style = bold, label=""];
50->47 [style = bold, label=""];
28->8 [style = bold, label=""];
38->0 [style = bold, label=""];
47->19 [style = bold, label=""];
39->41 [style = bold, label=""];
0->20 [style = bold, label=""];
32->18 [style = bold, label=""];
20->7 [style = bold, label=""];
35->13 [style = bold, label=""];
46->23 [style = bold, label=""];
24->27 [style = bold, label=""];
33->2 [style = bold, label=""];
5->37 [style = bold, label=""];
2->43 [style = bold, label=""];
13->28 [style = bold, label=""];
25->38 [style = bold, label=""];
}
