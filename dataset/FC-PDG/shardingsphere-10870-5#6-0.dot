digraph {
7 [style = filled, label = "assertThat(actual.size(),is(2))@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
11 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.UPDATE))@@@9@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
19 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
0 [style = filled, label = "when(databaseCommunicationEngine.execute()).thenReturn(new UpdateResponseHeader(mock()))@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "PostgreSQLComCloseExecutor closeExecutor = new PostgreSQLComCloseExecutor(packet,backendConnection)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "when(packet.getName()).thenReturn(\"S_1\")@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "assertThat(executor.getResponseType(),is(ResponseType.UPDATE))@@@11@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "assertExecuteBindPacketWithUpdateSQL['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
10 [style = filled, label = "assertExecuteBindPacketWithUpdateSQL['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "Iterator<DatabasePacket<?>> actualPackets = actual.iterator()@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "Collection<DatabasePacket<?>> actual = executor.execute()@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(actual.size(),is(1))@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "setMockFieldIntoExecutor(executor)@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(bindPacket,backendConnection)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "PostgreSQLComBindExecutor executor = new PostgreSQLComBindExecutor(connectionContext,bindPacket,backendConnection)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
13 [style = filled, label = "assertThat(actual.size(),is(1))@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "assertThat(actual.iterator().next(),is(instanceOf()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "Collection<DatabasePacket<?>> actual = closeExecutor.execute()@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertThat(actualPackets.next(),is(instanceOf()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertExecuteClosePreparedStatement['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "when(packet.getType()).thenReturn(PostgreSQLComClosePacket.Type.PREPARED_STATEMENT)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
9->16 [style = dashed, label="0"];
16->18 [style = bold, label=""];
0->6 [style = bold, label=""];
7->17 [style = dashed, label="0"];
21->15 [style = bold, label=""];
12->11 [style = bold, label=""];
18->17 [style = bold, label=""];
1->18 [style = dashed, label="0"];
4->2 [style = bold, label=""];
14->9 [style = solid, label="executor"];
6->14 [style = dashed, label="0"];
1->7 [style = bold, label=""];
3->4 [style = bold, label=""];
1->13 [style = bold, label=""];
17->19 [style = bold, label=""];
7->3 [style = bold, label=""];
3->19 [style = dashed, label="0"];
8->0 [style = bold, label=""];
0->14 [style = bold, label=""];
13->12 [style = bold, label=""];
20->16 [style = bold, label=""];
3->12 [style = dashed, label="0"];
15->20 [style = bold, label=""];
10->0 [style = bold, label=""];
7->13 [style = dashed, label="0"];
14->9 [style = bold, label=""];
6->9 [style = bold, label=""];
9->1 [style = bold, label=""];
2->5 [style = bold, label=""];
6->9 [style = solid, label="executor"];
}
