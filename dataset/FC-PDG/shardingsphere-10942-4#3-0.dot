digraph {
4 [style = filled, label = "int i = 0@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(counter.get(),is(10))@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "latch.await(300,TimeUnit.MILLISECONDS)@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "latch.await(200,TimeUnit.MILLISECONDS)@@@16@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "assertTrue(usingField.getBoolean(connectionStatus))@@@18@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "connectionStatus.switchToReleased()@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "assertFalse(usingField.getBoolean(connectionStatus))@@@20@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
17 [style = filled, label = "assertThat(counter.get(),is(0))@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
18 [style = filled, label = "latch.await()@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "i++@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "service.submit(null)@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "assertThat(usingField.getBoolean(connectionStatus),is(false))@@@18@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "AtomicInteger counter = new AtomicInteger()@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "i < numberOfThreads@@@5@@@['1', '1', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "assertThat(usingField.getBoolean(connectionStatus),is(true))@@@18@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
16 [style = filled, label = "assertSwitchToReleased['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertThat(counter.get(),is(0))@@@22@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "assertWaitUntilConnectionRelease['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "assertThat(usingField.getBoolean(connectionStatus),is(false))@@@20@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "assertWaitUntilConnectionRelease['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
16->7 [style = bold, label=""];
4->1 [style = solid, label="i"];
18->17 [style = bold, label=""];
0->15 [style = dashed, label="0"];
1->18 [style = bold, label=""];
7->4 [style = bold, label=""];
10->13 [style = dashed, label="0"];
9->8 [style = bold, label=""];
13->11 [style = bold, label=""];
17->19 [style = bold, label=""];
11->15 [style = bold, label=""];
15->5 [style = bold, label=""];
1->9 [style = bold, label=""];
14->7 [style = bold, label=""];
2->12 [style = bold, label=""];
4->8 [style = solid, label="i"];
8->1 [style = bold, label=""];
12->13 [style = bold, label=""];
12->10 [style = bold, label=""];
11->0 [style = bold, label=""];
5->6 [style = bold, label=""];
3->7 [style = bold, label=""];
8->1 [style = solid, label="i"];
1->9 [style = dotted, label="true"];
1->8 [style = dotted, label="true"];
2->18 [style = dashed, label="0"];
1->2 [style = bold, label=""];
4->1 [style = bold, label=""];
0->5 [style = bold, label=""];
10->11 [style = bold, label=""];
}
