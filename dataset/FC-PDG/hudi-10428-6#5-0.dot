digraph {
25 [style = filled, label = "funcWrapper.openFunction()@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
39 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event4)@@@34@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
47 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event3)@@@33@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "funcWrapper.invoke(rowData)@@@9@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
57 [style = filled, label = "funcWrapper.invoke(rowData)@@@28@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
30 [style = filled, label = "final OperatorEvent event = funcWrapper.getNextEvent()@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
3 [style = filled, label = "final OperatorEvent event3 = funcWrapper.getNextEvent()@@@31@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "int i = 0@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "assertThat(\"The operator expect to send an event\",event,instanceOf())@@@19@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "Map<String,String> expected = new HashMap<>()@@@22@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "testInsertWithSmallBufferSize['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
10 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@23@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "checkWrittenData(tempFile,expected,1)@@@40@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
48 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@37@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
44 [style = filled, label = "conf.setString(FlinkOptions.OPERATION,WriteOperationType.INSERT.value())@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
51 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE,0.0006)@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@23@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertThat(\"2 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(2))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
38 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event1)@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
41 [style = filled, label = "expected.put(\"par1\",\"(\" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,0,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,1,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,2,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,3,par1, \" + \"id1,par1,id1,Danny,23,4,par1, \" + \"id1,par1,id1,Danny,23,4,par1(\")@@@36@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
49 [style = filled, label = "final OperatorEvent event1 = funcWrapper.getNextEvent()@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "final OperatorEvent event4 = funcWrapper.getNextEvent()@@@32@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event)@@@37@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@22@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
52 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@25@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "final OperatorEvent event = funcWrapper.getNextEvent()@@@36@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "funcWrapper.invoke(rowData)@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
40 [style = filled, label = "TestData.checkWrittenAllData(tempFile,expected,1)@@@24@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
17 [style = filled, label = "assertThat(\"All data should be flushed out\",dataBuffer.size(),is(0))@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "funcWrapper.checkpointComplete(1)@@@21@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertThat(\"Should have 1 data bucket\",dataBuffer.size(),is(1))@@@10@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "i++@@@17@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertThat(\"The operator expect to send an event\",event2,instanceOf())@@@16@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
42 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "funcWrapper.openFunction()@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event)@@@20@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "funcWrapper.checkpointFunction(2)@@@30@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
45 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@35@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "funcWrapper.checkpointFunction(1)@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
56 [style = filled, label = "assertNotNull(funcWrapper.getEventBuffer()(0(,\"The coordinator missed the event\")@@@19@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(\"3 records expect to flush out as a mini-batch\",dataBuffer.values().stream().findFirst().map(null).orElse(-1),is(3))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
0 [style = filled, label = "checkInstantState(funcWrapper.getWriteClient(),HoodieInstant.State.COMPLETED,instant)@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "funcWrapper.checkpointComplete(2)@@@39@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
55 [style = filled, label = "String instant = funcWrapper.getWriteClient().getLastPendingInstant(getTableType())@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "testInsertWithSmallBufferSize['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
50 [style = filled, label = "testInsertAllowsDuplication['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
7 [style = filled, label = "checkInflightInstant(funcWrapper.getWriteClient())@@@27@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
43 [style = filled, label = "funcWrapper.getCoordinator().handleEventFromOperator(0,event2)@@@18@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
53 [style = filled, label = "conf.setBoolean(FlinkOptions.INSERT_DEDUP,false)@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(),conf)@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE,200.0008)@@@3@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
31 [style = filled, label = "conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE,200.0006)@@@3@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
46 [style = filled, label = "Map<String,List<HoodieRecord>> dataBuffer = funcWrapper.getDataBuffer()@@@12@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
54 [style = filled, label = "final OperatorEvent event2 = funcWrapper.getNextEvent()@@@15@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "dataBuffer = funcWrapper.getDataBuffer()@@@13@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
20->9 [style = bold, label=""];
15->39 [style = solid, label="event4"];
9->26 [style = solid, label="i"];
55->14 [style = bold, label=""];
21->24 [style = bold, label=""];
16->15 [style = solid, label="i"];
44->53 [style = bold, label=""];
3->4 [style = bold, label=""];
16->3 [style = solid, label="i"];
23->40 [style = solid, label="expected"];
41->48 [style = bold, label=""];
30->28 [style = bold, label=""];
31->6 [style = bold, label=""];
23->18 [style = solid, label="expected"];
11->39 [style = dashed, label="0"];
2->14 [style = bold, label=""];
57->16 [style = bold, label=""];
25->19 [style = bold, label=""];
26->17 [style = solid, label="i"];
23->48 [style = solid, label="expected"];
3->47 [style = solid, label="event3"];
54->36 [style = solid, label="event2"];
45->41 [style = bold, label=""];
13->25 [style = bold, label=""];
16->3 [style = bold, label=""];
17->26 [style = dotted, label="true"];
22->33 [style = bold, label=""];
26->17 [style = bold, label=""];
40->52 [style = bold, label=""];
12->21 [style = bold, label=""];
31->51 [style = dashed, label="0"];
19->20 [style = bold, label=""];
23->10 [style = solid, label="expected"];
24->46 [style = dashed, label="0"];
3->11 [style = bold, label=""];
51->44 [style = bold, label=""];
30->29 [style = solid, label="event"];
27->31 [style = bold, label=""];
9->17 [style = bold, label=""];
39->45 [style = bold, label=""];
7->0 [style = bold, label=""];
4->18 [style = bold, label=""];
47->39 [style = bold, label=""];
10->7 [style = bold, label=""];
29->26 [style = bold, label=""];
24->20 [style = bold, label=""];
52->42 [style = bold, label=""];
31->35 [style = dashed, label="0"];
30->28 [style = solid, label="event"];
23->10 [style = bold, label=""];
11->8 [style = bold, label=""];
11->8 [style = solid, label="event"];
2->0 [style = solid, label="instant"];
34->35 [style = bold, label=""];
15->47 [style = bold, label=""];
54->43 [style = solid, label="event2"];
19->22 [style = bold, label=""];
49->54 [style = bold, label=""];
30->38 [style = dashed, label="0"];
28->29 [style = bold, label=""];
12->33 [style = dashed, label="0"];
8->15 [style = bold, label=""];
17->1 [style = bold, label=""];
37->25 [style = bold, label=""];
49->38 [style = solid, label="event1"];
32->16 [style = bold, label=""];
15->3 [style = bold, label=""];
55->42 [style = solid, label="instant"];
5->32 [style = bold, label=""];
53->37 [style = bold, label=""];
14->23 [style = bold, label=""];
54->36 [style = bold, label=""];
17->49 [style = bold, label=""];
42->57 [style = bold, label=""];
6->13 [style = bold, label=""];
3->15 [style = dotted, label="true"];
17->28 [style = dotted, label="true"];
10->40 [style = bold, label=""];
1->2 [style = bold, label=""];
17->29 [style = dotted, label="true"];
38->43 [style = bold, label=""];
0->5 [style = bold, label=""];
3->11 [style = dotted, label="true"];
35->6 [style = bold, label=""];
18->41 [style = dashed, label="0"];
20->46 [style = bold, label=""];
9->17 [style = solid, label="i"];
17->30 [style = bold, label=""];
3->15 [style = bold, label=""];
15->3 [style = solid, label="i"];
17->30 [style = dotted, label="true"];
22->12 [style = bold, label=""];
50->51 [style = bold, label=""];
26->36 [style = dashed, label="0"];
36->38 [style = bold, label=""];
33->21 [style = bold, label=""];
3->8 [style = dotted, label="true"];
46->17 [style = bold, label=""];
43->56 [style = bold, label=""];
56->55 [style = bold, label=""];
}
