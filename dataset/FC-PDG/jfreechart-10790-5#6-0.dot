digraph {
27 [style = filled, label = "assertTrue(d1.equals(d2))@@@8@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "double(( ends_S2 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a507d@@@12@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "double(( starts_S1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a505f@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "d2 = (DefaultIntervalCategoryDataset)d1.clone()@@@27@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
21 [style = filled, label = "assertTrue(d1.equals(d2))@@@33@@@['0', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB2BBB"];
11 [style = filled, label = "assertTrue(d1.equals(d2))@@@34@@@['1', '0', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
20 [style = filled, label = "assertTrue(d1 != d2)@@@27@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
12 [style = filled, label = "double(((( starts = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a5087@@@15@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "testCloning['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "DefaultIntervalCategoryDataset d2 = (DefaultIntervalCategoryDataset)d1.clone()@@@26@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
19 [style = filled, label = "testCloning['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
0 [style = filled, label = "DefaultIntervalCategoryDataset d2 = null@@@26@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
2 [style = filled, label = "double(( starts_S2 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a5069@@@6@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "DefaultIntervalCategoryDataset d2 = null@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
15 [style = filled, label = "double(( ends_S1 = new double((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a5073@@@9@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@7@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
16 [style = filled, label = "double(((( ends = new double((((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a5090@@@18@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "assertTrue(d1 != d2)@@@6@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
23 [style = filled, label = "d2 = (DefaultIntervalCategoryDataset)d1.clone()@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
13 [style = filled, label = "d1.setStartValue(0,\"Category 1\",0.99)@@@30@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "d2.setStartValue(0,\"Category 1\",new Double(0.99))@@@33@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
24 [style = filled, label = "testCloning2['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertTrue(d1.equals(d2))@@@29@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
6 [style = filled, label = "d2.setStartValue(0,\"Category 1\",0.99)@@@32@@@['1', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
28 [style = filled, label = "DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(new double((((((,new double(((((()@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertTrue(d1.getClass() == d2.getClass())@@@28@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(new Comparable((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a509b,new Comparable((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@2a50a0,DataUtils.createNumberArray2D(starts),DataUtils.createNumberArray2D(ends))@@@21@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "d1.setStartValue(0,\"Category 1\",new Double(0.99))@@@31@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
18 [style = filled, label = "assertFalse(d1.equals(d2))@@@31@@@['0', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB2BBB"];
6->3 [style = bold, label=""];
24->28 [style = bold, label=""];
2->12 [style = solid, label="starts_S2"];
12->7 [style = solid, label="starts"];
3->6 [style = dashed, label="0"];
7->17 [style = bold, label=""];
14->12 [style = solid, label="starts_S1"];
7->10 [style = solid, label="d1"];
14->28 [style = dashed, label="0"];
4->6 [style = bold, label=""];
25->23 [style = bold, label=""];
5->16 [style = solid, label="ends_S2"];
6->21 [style = bold, label=""];
17->20 [style = solid, label="d2"];
17->21 [style = solid, label="d2"];
16->7 [style = bold, label=""];
3->11 [style = bold, label=""];
23->26 [style = bold, label=""];
8->14 [style = bold, label=""];
1->10 [style = solid, label="d2"];
28->26 [style = solid, label="d1"];
7->0 [style = bold, label=""];
12->16 [style = bold, label=""];
7->20 [style = solid, label="d1"];
1->11 [style = solid, label="d2"];
0->17 [style = dashed, label="0"];
17->18 [style = solid, label="d2"];
15->5 [style = bold, label=""];
26->22 [style = bold, label=""];
20->10 [style = bold, label=""];
23->26 [style = solid, label="d2"];
23->27 [style = solid, label="d2"];
1->13 [style = solid, label="d2"];
1->6 [style = solid, label="d2"];
19->14 [style = bold, label=""];
22->27 [style = bold, label=""];
5->12 [style = bold, label=""];
18->6 [style = bold, label=""];
15->16 [style = solid, label="ends_S1"];
0->1 [style = bold, label=""];
2->15 [style = bold, label=""];
9->13 [style = bold, label=""];
28->25 [style = bold, label=""];
14->2 [style = bold, label=""];
10->9 [style = bold, label=""];
4->13 [style = dashed, label="0"];
1->10 [style = bold, label=""];
16->7 [style = solid, label="ends"];
13->18 [style = bold, label=""];
17->20 [style = bold, label=""];
13->4 [style = bold, label=""];
17->9 [style = solid, label="d2"];
}
