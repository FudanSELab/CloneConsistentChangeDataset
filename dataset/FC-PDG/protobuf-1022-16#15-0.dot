digraph {
24 [style = filled, label = "Conformance.TestAllTypes testMessage@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
32 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(testMessage.toByteString()).build()@@@26@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
27 [style = filled, label = "request.getRequestedOutputFormat()@@@24@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
21 [style = filled, label = "isProto3@@@49@@@['0', '1', '0']", fillcolor = white, shape = diamond image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@82@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "{try {TestMessagesProto3.TestAllTypesProto3.Builder builder = TestMessagesProto3.TestAllTypesProto3.newBuilder()JsonFormat.Parser parser = JsonFormat.parser().usingTypeRegistry(typeRegistry)if (request.getTestCategory() == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST) {parser = parser.ignoringUnknownFields()}parser.merge(request.getJsonPayload(),builder)testMessage = builder.build()}catch (InvalidProtocolBufferException e) break}@@@33@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "{return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()}@@@14@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
22 [style = filled, label = "doTest['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
29 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSkipped(\"Lite runtime does not support JSON format.\").build()@@@27@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
3 [style = filled, label = "throw new RuntimeException(\"Unspecified output format.\")@@@25@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "request.getPayloadCase()@@@4@@@['0', '0', '1']", fillcolor = white, shape = diamond image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setTextPayload(TextFormat.printToString(testMessage)).build()@@@93@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setSerializeError(e.getMessage()).build()@@@91@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "doTest['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "request.getTestCategory() == Conformance.TestCategory.JSON_IGNORE_UNKNOWN_PARSING_TEST@@@37@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "{ByteString MessageString = testMessage.toByteString()return Conformance.ConformanceResponse.newBuilder().setProtobufPayload(MessageString).build()}@@@83@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "{if (isProto3) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto3.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto3.parser(),extensions)}catch (InvalidProtocolBufferException e) }if (isProto2) {try {ExtensionRegistry extensions = ExtensionRegistry.newInstance()TestMessagesProto2.registerAllExtensions(extensions)testMessage = parseBinary(request.getProtobufPayload(),TestAllTypesProto2.parser(),extensions)}catch (InvalidProtocolBufferException e) }{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}break}@@@7@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "request.getPayloadCase()@@@6@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
8 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@94@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "request.getRequestedOutputFormat()@@@81@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
26 [style = filled, label = "{try {testMessage = Conformance.TestAllTypes.parseFrom(request.getProtobufPayload())}catch (InvalidProtocolBufferException e) break}@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "{throw new RuntimeException(\"Request didn't have payload.\")}@@@17@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
31 [style = filled, label = "{throw new RuntimeException(\"Unexpected payload case.\")}@@@20@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "return Conformance.ConformanceResponse.newBuilder().setJsonPayload(JsonFormat.printer().usingTypeRegistry(typeRegistry).print(testMessage)).build()@@@88@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
15 [style = filled, label = "Conformance.ConformanceRequest request@@@2@@@['1', '1', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "InvalidProtocolBufferException|IllegalArgumentException e@@@90@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
19 [style = filled, label = "boolean isProto2 = request.getMessageType().equals(\"protobuf_test_messages.proto2.TestAllTypesProto2\")@@@5@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "{if (isProto3) {try {TestMessagesProto3.TestAllTypesProto3.Builder builder = TestMessagesProto3.TestAllTypesProto3.newBuilder()TextFormat.merge(request.getTextPayload(),builder)testMessage = builder.build()}catch (TextFormat.ParseException e) }if (isProto2) {try {TestMessagesProto2.TestAllTypesProto2.Builder builder = TestMessagesProto2.TestAllTypesProto2.newBuilder()TextFormat.merge(request.getTextPayload(),builder)testMessage = builder.build()}catch (TextFormat.ParseException e) }{throw new RuntimeException(\"Protobuf request doesn't have specific payload type.\")}break}@@@48@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "doTest['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "com.google.protobuf.AbstractMessage testMessage@@@3@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "boolean isProto3 = request.getMessageType().equals(\"protobuf_test_messages.proto3.TestAllTypesProto3\")@@@4@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
2 [style = filled, label = "isProto3@@@8@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "{throw new RuntimeException(\"Unexpected request output.\")}@@@28@@@['1', '1', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
28->31 [style = bold, label=""];
5->14 [style = bold, label=""];
19->4 [style = solid, label="isProto2"];
13->21 [style = dotted, label="true"];
13->4 [style = bold, label=""];
1->32 [style = dashed, label="0"];
27->29 [style = dotted, label="true"];
4->16 [style = bold, label=""];
23->24 [style = bold, label=""];
27->3 [style = bold, label=""];
27->3 [style = dotted, label="true"];
7->12 [style = dotted, label="true"];
25->26 [style = bold, label=""];
9->3 [style = bold, label=""];
17->10 [style = bold, label=""];
0->19 [style = bold, label=""];
20->8 [style = bold, label=""];
11->1 [style = bold, label=""];
27->32 [style = bold, label=""];
29->5 [style = bold, label=""];
19->9 [style = solid, label="isProto2"];
23->15 [style = dotted, label="true"];
6->20 [style = bold, label=""];
14->11 [style = bold, label=""];
1->6 [style = bold, label=""];
10->0 [style = bold, label=""];
3->32 [style = bold, label=""];
3->5 [style = bold, label=""];
27->32 [style = dotted, label="true"];
19->13 [style = bold, label=""];
0->4 [style = solid, label="isProto3"];
14->6 [style = dotted, label="true"];
14->1 [style = bold, label=""];
27->29 [style = bold, label=""];
17->15 [style = dotted, label="true"];
25->28 [style = bold, label=""];
16->9 [style = solid, label="builder"];
13->2 [style = dotted, label="true"];
7->12 [style = bold, label=""];
10->24 [style = dashed, label="0"];
13->18 [style = dotted, label="true"];
13->16 [style = bold, label=""];
27->5 [style = bold, label=""];
14->8 [style = bold, label=""];
12->20 [style = bold, label=""];
14->6 [style = bold, label=""];
14->20 [style = dotted, label="true"];
13->3 [style = bold, label=""];
25->31 [style = bold, label=""];
30->28 [style = bold, label=""];
24->25 [style = bold, label=""];
13->9 [style = bold, label=""];
14->11 [style = dotted, label="true"];
32->29 [style = bold, label=""];
26->30 [style = bold, label=""];
25->30 [style = bold, label=""];
22->10 [style = bold, label=""];
31->27 [style = bold, label=""];
13->5 [style = bold, label=""];
14->20 [style = bold, label=""];
22->15 [style = dotted, label="true"];
16->9 [style = bold, label=""];
0->9 [style = solid, label="isProto3"];
}
