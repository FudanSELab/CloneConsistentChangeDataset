digraph {
19 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
25 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDiscoveryTypeName(),is(expected.getDiscoveryTypeName()))@@@4@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual should exit.\"),actual)@@@7@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
29 [style = filled, label = "assertDatabaseDiscoveryRule['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
5 [style = filled, label = "null == expected@@@3@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "final ExceptedReadwriteSplittingRule expected@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
3 [style = filled, label = "assertIs['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
21 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
11 [style = filled, label = "PropertiesAssert.assertIs(assertContext,actual.getProps(),expected.getProps())@@@13@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@3@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "assertNull(assertContext.getText(\"Actual should not exit.\"),actual)@@@4@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
22 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
16 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s readwrite splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
18 [style = filled, label = "assertNull(assertContext.getText(\"Actual readwrite splitting rule should not exit.\"),actual)@@@4@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
12 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getAutoAwareResource(),is(expected.getAutoAwareResource()))@@@9@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
0 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getWriteDataSource(),is(expected.getWriteDataSource()))@@@10@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
1 [style = filled, label = "final SQLCaseAssertContext assertContext@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['1', '0', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB1BBB"];
24 [style = filled, label = "final DatabaseDiscoveryRuleSegment actual@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
9 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getReadDataSources(),is(expected.getReadDataSources()))@@@11@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
23 [style = filled, label = "final ExpectedDatabaseDiscoveryRule expected@@@2@@@['0', '0', '1']", fillcolor = tomato, shape = box image = "AAA0AAABBB3BBB"];
28 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s discovery rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getDataSources(),is(expected.getDataSources()))@@@5@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getName(),is(expected.getName()))@@@8@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
14 [style = filled, label = "final ReadwriteSplittingRuleSegment actual@@@2@@@['0', '1', '0']", fillcolor = tomato, shape = box image = "AAA0AAABBB2BBB"];
20 [style = filled, label = "assertIs['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "assertNotNull(assertContext.getText(\"Actual readwrite splitting rule should exit.\"),actual)@@@7@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
27 [style = filled, label = "assertProps(assertContext,actual.getProps(),expected.getProps())@@@6@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "assertThat(assertContext.getText(String.format(\"`%s`'s read-write splitting rule segment assertion error: \",actual.getClass().getSimpleName())),actual.getLoadBalancer(),is(expected.getLoadBalancer()))@@@12@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
26->27 [style = solid, label="assertContext"];
3->7 [style = dotted, label="true"];
5->19 [style = dotted, label="false"];
0->9 [style = bold, label=""];
25->28 [style = bold, label=""];
4->16 [style = dashed, label="0"];
5->22 [style = dotted, label="false"];
12->5 [style = solid, label="expected"];
13->5 [style = solid, label="expected"];
5->18 [style = dotted, label="true"];
21->19 [style = bold, label=""];
29->30 [style = bold, label=""];
5->15 [style = dotted, label="false"];
7->6 [style = solid, label="actual"];
5->11 [style = dotted, label="false"];
5->6 [style = dotted, label="true"];
5->10 [style = dotted, label="false"];
5->21 [style = dotted, label="false"];
5->17 [style = dotted, label="false"];
12->11 [style = solid, label="assertContext"];
20->14 [style = dotted, label="true"];
5->15 [style = bold, label=""];
29->23 [style = dotted, label="true"];
5->18 [style = bold, label=""];
30->25 [style = bold, label=""];
14->18 [style = solid, label="actual"];
2->10 [style = bold, label=""];
29->26 [style = dotted, label="true"];
9->8 [style = bold, label=""];
4->0 [style = bold, label=""];
20->5 [style = bold, label=""];
6->18 [style = dashed, label="0"];
2->15 [style = dashed, label="0"];
9->19 [style = dashed, label="0"];
5->2 [style = dotted, label="false"];
8->22 [style = dashed, label="0"];
5->0 [style = dotted, label="false"];
12->26 [style = dashed, label="0"];
5->2 [style = bold, label=""];
3->5 [style = bold, label=""];
15->17 [style = bold, label=""];
14->15 [style = solid, label="actual"];
5->6 [style = bold, label=""];
6->25 [style = dashed, label="0"];
0->21 [style = dashed, label="0"];
3->12 [style = dotted, label="true"];
16->21 [style = bold, label=""];
1->11 [style = solid, label="assertContext"];
5->16 [style = dotted, label="false"];
7->2 [style = solid, label="actual"];
10->17 [style = dashed, label="0"];
10->4 [style = bold, label=""];
5->9 [style = dotted, label="false"];
20->13 [style = dotted, label="true"];
20->12 [style = dotted, label="true"];
28->27 [style = bold, label=""];
5->8 [style = dotted, label="false"];
29->24 [style = dotted, label="true"];
8->11 [style = bold, label=""];
3->1 [style = dotted, label="true"];
19->22 [style = bold, label=""];
22->11 [style = bold, label=""];
17->16 [style = bold, label=""];
5->30 [style = dashed, label="0"];
5->4 [style = dotted, label="false"];
}
