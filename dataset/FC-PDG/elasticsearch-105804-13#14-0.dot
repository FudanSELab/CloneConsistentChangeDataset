digraph {
26 [style = filled, label = "testSortShards['0', '1', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB2BBB"];
15 [style = filled, label = "latch.await()@@@46@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
30 [style = filled, label = "searchRequest.source(new SearchSourceBuilder().sort(SortBuilders.fieldSort(\"timestamp\").order(order)))@@@41@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
33 [style = filled, label = "assertThat(i.shardId().id(),equalTo(shardId++))@@@54@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
38 [style = filled, label = "testInvalidSortShards['0', '0', '1']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB3BBB"];
6 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@36@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
37 [style = filled, label = "assertThat(result.get().size(),equalTo(numShards))@@@57@@@['0', '0', '1']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB3BBB"];
11 [style = filled, label = "canMatchPhase.start()@@@45@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
21 [style = filled, label = "SearchTransportService searchTransportService = new SearchTransportService(null,null,null){@Override public void sendCanMatch(Transport.Connection connection,ShardSearchRequest request,SearchTask task,ActionListener<SearchService.CanMatchResponse> listener){final MinAndMax<?> minMaxif (request.shardId().id() == numShards - 1) {minMax = new MinAndMax<>(new BytesRef(\"bar\"),new BytesRef(\"baz\"))}{Long min = randomLong()Long max = randomLongBetween(min,Long.MAX_VALUE)minMax = new MinAndMax<>(min,max)}boolean canMatch = frequently()synchronized (shardIds) {shardIds.add(request.shardId())if (canMatch == false) {shardToSkip.add(request.shardId())}}new Thread(null).start()}}@@@13@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
4 [style = filled, label = "DiscoveryNode primaryNode = new DiscoveryNode(\"node_1\",buildNewFakeTransportAddress(),Version.CURRENT)@@@5@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
36 [style = filled, label = "assertEquals(shardToSkip.contains(i.shardId()),i.skip())@@@55@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
8 [style = filled, label = "CountDownLatch latch = new CountDownLatch(1)@@@31@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
23 [style = filled, label = "GroupShardsIterator<SearchShardIterator> shardsIter = getShardsIter(\"logs\",new OriginalIndices(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13d889b,SearchRequest.DEFAULT_INDICES_OPTIONS),numShards,randomBoolean(),primaryNode,replicaNode)@@@37@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
13 [style = filled, label = "lookup.put(\"node1\",new SearchAsyncActionTests.MockConnection(primaryNode))@@@7@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
28 [style = filled, label = "final SearchRequest searchRequest = new SearchRequest()@@@40@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
34 [style = filled, label = "latch.await()@@@51@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
2 [style = filled, label = "DiscoveryNode replicaNode = new DiscoveryNode(\"node_2\",buildNewFakeTransportAddress(),Version.CURRENT)@@@6@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
14 [style = filled, label = "GroupShardsIterator<SearchShardIterator> shardsIter = getShardsIter(\"logs\",new OriginalIndices(new String((((edu.fdu.CPPDG.tinypdg.pe.ExpressionInfo@13d870c,SearchRequest.DEFAULT_INDICES_OPTIONS),randomIntBetween(2,20),randomBoolean(),primaryNode,replicaNode)@@@32@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
35 [style = filled, label = "int shardId = 0@@@52@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
10 [style = filled, label = "ShardId(( expected = IntStream.range(0,shardIds.size()).boxed().sorted(Comparator.comparing(null,MinAndMax.getComparator(order)).thenComparing(null)).map(null).toArray(null)@@@47@@@['1', '0', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB1BBB"];
3 [style = filled, label = "List<MinAndMax<?>> minAndMaxes = new ArrayList<>()@@@11@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
16 [style = filled, label = "canMatchPhase.start()@@@50@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
25 [style = filled, label = "List<ShardId> shardIds = new ArrayList<>()@@@11@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
31 [style = filled, label = "searchRequest.allowPartialSearchResults(true)@@@42@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
19 [style = filled, label = "testSortShards['1', '0', '0']", fillcolor = lightgray, shape = diamond image = "AAA0AAABBB1BBB"];
22 [style = filled, label = "shardToSkip.size() == expected.length@@@48@@@['1', '1', '0']", fillcolor = white, shape = diamond image = "AAA0AAABBB1BBB"];
27 [style = filled, label = "ShardId(( expected = IntStream.range(0,shardIds.size()).boxed().sorted(Comparator.comparing(null,forciblyCast(MinAndMax.getComparator(order))).thenComparing(null)).map(null).toArray(null)@@@47@@@['0', '1', '0']", fillcolor = red, shape = ellipse image = "AAA1AAABBB2BBB"];
32 [style = filled, label = "CanMatchPreFilterSearchPhase canMatchPhase = new CanMatchPreFilterSearchPhase(logger,searchTransportService,null,Collections.singletonMap(\"_na_\",new AliasFilter(null,Strings.EMPTY_ARRAY)),Collections.emptyMap(),EsExecutors.DIRECT_EXECUTOR_SERVICE,searchRequest,null,shardsIter,timeProvider,ClusterState.EMPTY_STATE,null,null,SearchResponse.Clusters.EMPTY,EMPTY_CONTEXT_PROVIDER)@@@43@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
20 [style = filled, label = "final TransportSearchAction.SearchTimeProvider timeProvider = new TransportSearchAction.SearchTimeProvider(0,System.nanoTime(),null)@@@3@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
29 [style = filled, label = "int numShards = randomIntBetween(2,20)@@@10@@@['0', '0', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB3BBB"];
24 [style = filled, label = "AtomicReference<GroupShardsIterator<SearchShardIterator>> result = new AtomicReference<>()@@@35@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
1 [style = filled, label = "assertEquals(shardToSkip.contains(i.shardId()),i.skip())@@@53@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
7 [style = filled, label = "lookup.put(\"node2\",new SearchAsyncActionTests.MockConnection(replicaNode))@@@8@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
9 [style = filled, label = "final SearchRequest searchRequest = new SearchRequest()@@@35@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
17 [style = filled, label = "Set<ShardId> shardToSkip = new HashSet<>()@@@12@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
5 [style = filled, label = "AtomicReference<GroupShardsIterator<SearchShardIterator>> result = new AtomicReference<>()@@@30@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
0 [style = filled, label = "Map<String,Transport.Connection> lookup = new ConcurrentHashMap<>()@@@4@@@['1', '1', '1']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
12 [style = filled, label = "assertEquals(expected(pos++(,i.shardId())@@@54@@@['1', '1', '0']", fillcolor = lightgray, shape = ellipse image = "AAA0AAABBB1BBB"];
18 [style = filled, label = "shardToSkip.remove(new ShardId(\"logs\",\"_na_\",0))@@@49@@@['1', '1', '0']", fillcolor = white, shape = ellipse image = "AAA0AAABBB1BBB"];
10->22 [style = bold, label=""];
4->13 [style = solid, label="primaryNode"];
2->7 [style = solid, label="replicaNode"];
5->8 [style = bold, label=""];
9->23 [style = solid, label="searchRequest"];
38->20 [style = bold, label=""];
15->10 [style = bold, label=""];
4->23 [style = solid, label="primaryNode"];
22->18 [style = dotted, label="true"];
20->23 [style = solid, label="timeProvider"];
27->12 [style = solid, label="expected"];
28->30 [style = bold, label=""];
29->23 [style = solid, label="numShards"];
22->16 [style = bold, label=""];
6->23 [style = bold, label=""];
31->32 [style = bold, label=""];
19->20 [style = bold, label=""];
20->0 [style = bold, label=""];
25->3 [style = bold, label=""];
35->33 [style = bold, label=""];
2->23 [style = solid, label="replicaNode"];
37->29 [style = bold, label=""];
8->14 [style = bold, label=""];
29->25 [style = bold, label=""];
16->34 [style = bold, label=""];
16->12 [style = solid, label="pos"];
10->12 [style = solid, label="expected"];
21->24 [style = bold, label=""];
4->2 [style = bold, label=""];
33->21 [style = solid, label="shardId"];
32->16 [style = bold, label=""];
10->27 [style = dashed, label="0"];
12->1 [style = bold, label=""];
27->22 [style = bold, label=""];
25->17 [style = bold, label=""];
36->33 [style = bold, label=""];
20->32 [style = solid, label="timeProvider"];
11->15 [style = bold, label=""];
29->37 [style = solid, label="numShards"];
2->13 [style = bold, label=""];
23->28 [style = bold, label=""];
21->5 [style = bold, label=""];
14->23 [style = solid, label="shardsIter"];
21->32 [style = solid, label="searchTransportService"];
21->23 [style = solid, label="searchTransportService"];
23->32 [style = solid, label="shardsIter"];
22->18 [style = bold, label=""];
28->32 [style = solid, label="searchRequest"];
16->1 [style = bold, label=""];
0->4 [style = bold, label=""];
30->31 [style = bold, label=""];
13->7 [style = bold, label=""];
12->25 [style = bold, label=""];
29->21 [style = solid, label="numShards"];
2->14 [style = solid, label="replicaNode"];
33->36 [style = bold, label=""];
1->12 [style = bold, label=""];
25->21 [style = solid, label="shardIds"];
3->17 [style = bold, label=""];
14->9 [style = bold, label=""];
7->25 [style = bold, label=""];
36->37 [style = bold, label=""];
34->35 [style = bold, label=""];
4->14 [style = solid, label="primaryNode"];
35->33 [style = solid, label="shardId"];
23->11 [style = bold, label=""];
24->6 [style = bold, label=""];
15->27 [style = bold, label=""];
33->36 [style = solid, label="shardId"];
17->21 [style = bold, label=""];
9->24 [style = bold, label=""];
26->20 [style = bold, label=""];
7->29 [style = bold, label=""];
18->16 [style = bold, label=""];
}
